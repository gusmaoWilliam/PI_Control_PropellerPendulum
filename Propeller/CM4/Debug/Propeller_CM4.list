
Propeller_CM4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08100000  08100000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007410  08100298  08100298  00010298  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000010  081076a8  081076a8  000176a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .init_array   00000004  081076b8  081076b8  000176b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .fini_array   00000004  081076bc  081076bc  000176bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000010  10000000  081076c0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          00000328  10000010  081076d0  00020010  2**3
                  ALLOC
  7 ._user_heap_stack 00000600  10000338  081076d0  00020338  2**0
                  ALLOC
  8 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
  9 .debug_info   00020bce  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_abbrev 000033cd  00000000  00000000  00040c0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_aranges 000011f8  00000000  00000000  00043fe0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_ranges 000010d0  00000000  00000000  000451d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_macro  0003cfcd  00000000  00000000  000462a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_line   00015f11  00000000  00000000  00083275  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_str    0019c988  00000000  00000000  00099186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .comment      00000053  00000000  00000000  00235b0e  2**0
                  CONTENTS, READONLY
 17 .debug_frame  00004db8  00000000  00000000  00235b64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08100298 <__do_global_dtors_aux>:
 8100298:	b510      	push	{r4, lr}
 810029a:	4c05      	ldr	r4, [pc, #20]	; (81002b0 <__do_global_dtors_aux+0x18>)
 810029c:	7823      	ldrb	r3, [r4, #0]
 810029e:	b933      	cbnz	r3, 81002ae <__do_global_dtors_aux+0x16>
 81002a0:	4b04      	ldr	r3, [pc, #16]	; (81002b4 <__do_global_dtors_aux+0x1c>)
 81002a2:	b113      	cbz	r3, 81002aa <__do_global_dtors_aux+0x12>
 81002a4:	4804      	ldr	r0, [pc, #16]	; (81002b8 <__do_global_dtors_aux+0x20>)
 81002a6:	f3af 8000 	nop.w
 81002aa:	2301      	movs	r3, #1
 81002ac:	7023      	strb	r3, [r4, #0]
 81002ae:	bd10      	pop	{r4, pc}
 81002b0:	10000010 	.word	0x10000010
 81002b4:	00000000 	.word	0x00000000
 81002b8:	08107690 	.word	0x08107690

081002bc <frame_dummy>:
 81002bc:	b508      	push	{r3, lr}
 81002be:	4b03      	ldr	r3, [pc, #12]	; (81002cc <frame_dummy+0x10>)
 81002c0:	b11b      	cbz	r3, 81002ca <frame_dummy+0xe>
 81002c2:	4903      	ldr	r1, [pc, #12]	; (81002d0 <frame_dummy+0x14>)
 81002c4:	4803      	ldr	r0, [pc, #12]	; (81002d4 <frame_dummy+0x18>)
 81002c6:	f3af 8000 	nop.w
 81002ca:	bd08      	pop	{r3, pc}
 81002cc:	00000000 	.word	0x00000000
 81002d0:	10000014 	.word	0x10000014
 81002d4:	08107690 	.word	0x08107690

081002d8 <__aeabi_dmul>:
 81002d8:	b570      	push	{r4, r5, r6, lr}
 81002da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 81002de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 81002e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 81002e6:	bf1d      	ittte	ne
 81002e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 81002ec:	ea94 0f0c 	teqne	r4, ip
 81002f0:	ea95 0f0c 	teqne	r5, ip
 81002f4:	f000 f8de 	bleq	81004b4 <__aeabi_dmul+0x1dc>
 81002f8:	442c      	add	r4, r5
 81002fa:	ea81 0603 	eor.w	r6, r1, r3
 81002fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8100302:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8100306:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 810030a:	bf18      	it	ne
 810030c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8100310:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8100314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8100318:	d038      	beq.n	810038c <__aeabi_dmul+0xb4>
 810031a:	fba0 ce02 	umull	ip, lr, r0, r2
 810031e:	f04f 0500 	mov.w	r5, #0
 8100322:	fbe1 e502 	umlal	lr, r5, r1, r2
 8100326:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 810032a:	fbe0 e503 	umlal	lr, r5, r0, r3
 810032e:	f04f 0600 	mov.w	r6, #0
 8100332:	fbe1 5603 	umlal	r5, r6, r1, r3
 8100336:	f09c 0f00 	teq	ip, #0
 810033a:	bf18      	it	ne
 810033c:	f04e 0e01 	orrne.w	lr, lr, #1
 8100340:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8100344:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8100348:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 810034c:	d204      	bcs.n	8100358 <__aeabi_dmul+0x80>
 810034e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8100352:	416d      	adcs	r5, r5
 8100354:	eb46 0606 	adc.w	r6, r6, r6
 8100358:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 810035c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8100360:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8100364:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8100368:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 810036c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8100370:	bf88      	it	hi
 8100372:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8100376:	d81e      	bhi.n	81003b6 <__aeabi_dmul+0xde>
 8100378:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 810037c:	bf08      	it	eq
 810037e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8100382:	f150 0000 	adcs.w	r0, r0, #0
 8100386:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 810038a:	bd70      	pop	{r4, r5, r6, pc}
 810038c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8100390:	ea46 0101 	orr.w	r1, r6, r1
 8100394:	ea40 0002 	orr.w	r0, r0, r2
 8100398:	ea81 0103 	eor.w	r1, r1, r3
 810039c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 81003a0:	bfc2      	ittt	gt
 81003a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 81003a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 81003aa:	bd70      	popgt	{r4, r5, r6, pc}
 81003ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 81003b0:	f04f 0e00 	mov.w	lr, #0
 81003b4:	3c01      	subs	r4, #1
 81003b6:	f300 80ab 	bgt.w	8100510 <__aeabi_dmul+0x238>
 81003ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 81003be:	bfde      	ittt	le
 81003c0:	2000      	movle	r0, #0
 81003c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 81003c6:	bd70      	pople	{r4, r5, r6, pc}
 81003c8:	f1c4 0400 	rsb	r4, r4, #0
 81003cc:	3c20      	subs	r4, #32
 81003ce:	da35      	bge.n	810043c <__aeabi_dmul+0x164>
 81003d0:	340c      	adds	r4, #12
 81003d2:	dc1b      	bgt.n	810040c <__aeabi_dmul+0x134>
 81003d4:	f104 0414 	add.w	r4, r4, #20
 81003d8:	f1c4 0520 	rsb	r5, r4, #32
 81003dc:	fa00 f305 	lsl.w	r3, r0, r5
 81003e0:	fa20 f004 	lsr.w	r0, r0, r4
 81003e4:	fa01 f205 	lsl.w	r2, r1, r5
 81003e8:	ea40 0002 	orr.w	r0, r0, r2
 81003ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 81003f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 81003f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 81003f8:	fa21 f604 	lsr.w	r6, r1, r4
 81003fc:	eb42 0106 	adc.w	r1, r2, r6
 8100400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100404:	bf08      	it	eq
 8100406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810040a:	bd70      	pop	{r4, r5, r6, pc}
 810040c:	f1c4 040c 	rsb	r4, r4, #12
 8100410:	f1c4 0520 	rsb	r5, r4, #32
 8100414:	fa00 f304 	lsl.w	r3, r0, r4
 8100418:	fa20 f005 	lsr.w	r0, r0, r5
 810041c:	fa01 f204 	lsl.w	r2, r1, r4
 8100420:	ea40 0002 	orr.w	r0, r0, r2
 8100424:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100428:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 810042c:	f141 0100 	adc.w	r1, r1, #0
 8100430:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8100434:	bf08      	it	eq
 8100436:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 810043a:	bd70      	pop	{r4, r5, r6, pc}
 810043c:	f1c4 0520 	rsb	r5, r4, #32
 8100440:	fa00 f205 	lsl.w	r2, r0, r5
 8100444:	ea4e 0e02 	orr.w	lr, lr, r2
 8100448:	fa20 f304 	lsr.w	r3, r0, r4
 810044c:	fa01 f205 	lsl.w	r2, r1, r5
 8100450:	ea43 0302 	orr.w	r3, r3, r2
 8100454:	fa21 f004 	lsr.w	r0, r1, r4
 8100458:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 810045c:	fa21 f204 	lsr.w	r2, r1, r4
 8100460:	ea20 0002 	bic.w	r0, r0, r2
 8100464:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8100468:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 810046c:	bf08      	it	eq
 810046e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8100472:	bd70      	pop	{r4, r5, r6, pc}
 8100474:	f094 0f00 	teq	r4, #0
 8100478:	d10f      	bne.n	810049a <__aeabi_dmul+0x1c2>
 810047a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 810047e:	0040      	lsls	r0, r0, #1
 8100480:	eb41 0101 	adc.w	r1, r1, r1
 8100484:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8100488:	bf08      	it	eq
 810048a:	3c01      	subeq	r4, #1
 810048c:	d0f7      	beq.n	810047e <__aeabi_dmul+0x1a6>
 810048e:	ea41 0106 	orr.w	r1, r1, r6
 8100492:	f095 0f00 	teq	r5, #0
 8100496:	bf18      	it	ne
 8100498:	4770      	bxne	lr
 810049a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 810049e:	0052      	lsls	r2, r2, #1
 81004a0:	eb43 0303 	adc.w	r3, r3, r3
 81004a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 81004a8:	bf08      	it	eq
 81004aa:	3d01      	subeq	r5, #1
 81004ac:	d0f7      	beq.n	810049e <__aeabi_dmul+0x1c6>
 81004ae:	ea43 0306 	orr.w	r3, r3, r6
 81004b2:	4770      	bx	lr
 81004b4:	ea94 0f0c 	teq	r4, ip
 81004b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 81004bc:	bf18      	it	ne
 81004be:	ea95 0f0c 	teqne	r5, ip
 81004c2:	d00c      	beq.n	81004de <__aeabi_dmul+0x206>
 81004c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81004c8:	bf18      	it	ne
 81004ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81004ce:	d1d1      	bne.n	8100474 <__aeabi_dmul+0x19c>
 81004d0:	ea81 0103 	eor.w	r1, r1, r3
 81004d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 81004d8:	f04f 0000 	mov.w	r0, #0
 81004dc:	bd70      	pop	{r4, r5, r6, pc}
 81004de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 81004e2:	bf06      	itte	eq
 81004e4:	4610      	moveq	r0, r2
 81004e6:	4619      	moveq	r1, r3
 81004e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 81004ec:	d019      	beq.n	8100522 <__aeabi_dmul+0x24a>
 81004ee:	ea94 0f0c 	teq	r4, ip
 81004f2:	d102      	bne.n	81004fa <__aeabi_dmul+0x222>
 81004f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 81004f8:	d113      	bne.n	8100522 <__aeabi_dmul+0x24a>
 81004fa:	ea95 0f0c 	teq	r5, ip
 81004fe:	d105      	bne.n	810050c <__aeabi_dmul+0x234>
 8100500:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8100504:	bf1c      	itt	ne
 8100506:	4610      	movne	r0, r2
 8100508:	4619      	movne	r1, r3
 810050a:	d10a      	bne.n	8100522 <__aeabi_dmul+0x24a>
 810050c:	ea81 0103 	eor.w	r1, r1, r3
 8100510:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8100514:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 810051c:	f04f 0000 	mov.w	r0, #0
 8100520:	bd70      	pop	{r4, r5, r6, pc}
 8100522:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8100526:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 810052a:	bd70      	pop	{r4, r5, r6, pc}

0810052c <__aeabi_drsub>:
 810052c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8100530:	e002      	b.n	8100538 <__adddf3>
 8100532:	bf00      	nop

08100534 <__aeabi_dsub>:
 8100534:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08100538 <__adddf3>:
 8100538:	b530      	push	{r4, r5, lr}
 810053a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 810053e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8100542:	ea94 0f05 	teq	r4, r5
 8100546:	bf08      	it	eq
 8100548:	ea90 0f02 	teqeq	r0, r2
 810054c:	bf1f      	itttt	ne
 810054e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8100552:	ea55 0c02 	orrsne.w	ip, r5, r2
 8100556:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 810055a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 810055e:	f000 80e2 	beq.w	8100726 <__adddf3+0x1ee>
 8100562:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8100566:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 810056a:	bfb8      	it	lt
 810056c:	426d      	neglt	r5, r5
 810056e:	dd0c      	ble.n	810058a <__adddf3+0x52>
 8100570:	442c      	add	r4, r5
 8100572:	ea80 0202 	eor.w	r2, r0, r2
 8100576:	ea81 0303 	eor.w	r3, r1, r3
 810057a:	ea82 0000 	eor.w	r0, r2, r0
 810057e:	ea83 0101 	eor.w	r1, r3, r1
 8100582:	ea80 0202 	eor.w	r2, r0, r2
 8100586:	ea81 0303 	eor.w	r3, r1, r3
 810058a:	2d36      	cmp	r5, #54	; 0x36
 810058c:	bf88      	it	hi
 810058e:	bd30      	pophi	{r4, r5, pc}
 8100590:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8100594:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8100598:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 810059c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 81005a0:	d002      	beq.n	81005a8 <__adddf3+0x70>
 81005a2:	4240      	negs	r0, r0
 81005a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 81005a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 81005ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 81005b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 81005b4:	d002      	beq.n	81005bc <__adddf3+0x84>
 81005b6:	4252      	negs	r2, r2
 81005b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 81005bc:	ea94 0f05 	teq	r4, r5
 81005c0:	f000 80a7 	beq.w	8100712 <__adddf3+0x1da>
 81005c4:	f1a4 0401 	sub.w	r4, r4, #1
 81005c8:	f1d5 0e20 	rsbs	lr, r5, #32
 81005cc:	db0d      	blt.n	81005ea <__adddf3+0xb2>
 81005ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 81005d2:	fa22 f205 	lsr.w	r2, r2, r5
 81005d6:	1880      	adds	r0, r0, r2
 81005d8:	f141 0100 	adc.w	r1, r1, #0
 81005dc:	fa03 f20e 	lsl.w	r2, r3, lr
 81005e0:	1880      	adds	r0, r0, r2
 81005e2:	fa43 f305 	asr.w	r3, r3, r5
 81005e6:	4159      	adcs	r1, r3
 81005e8:	e00e      	b.n	8100608 <__adddf3+0xd0>
 81005ea:	f1a5 0520 	sub.w	r5, r5, #32
 81005ee:	f10e 0e20 	add.w	lr, lr, #32
 81005f2:	2a01      	cmp	r2, #1
 81005f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 81005f8:	bf28      	it	cs
 81005fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 81005fe:	fa43 f305 	asr.w	r3, r3, r5
 8100602:	18c0      	adds	r0, r0, r3
 8100604:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8100608:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 810060c:	d507      	bpl.n	810061e <__adddf3+0xe6>
 810060e:	f04f 0e00 	mov.w	lr, #0
 8100612:	f1dc 0c00 	rsbs	ip, ip, #0
 8100616:	eb7e 0000 	sbcs.w	r0, lr, r0
 810061a:	eb6e 0101 	sbc.w	r1, lr, r1
 810061e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8100622:	d31b      	bcc.n	810065c <__adddf3+0x124>
 8100624:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8100628:	d30c      	bcc.n	8100644 <__adddf3+0x10c>
 810062a:	0849      	lsrs	r1, r1, #1
 810062c:	ea5f 0030 	movs.w	r0, r0, rrx
 8100630:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8100634:	f104 0401 	add.w	r4, r4, #1
 8100638:	ea4f 5244 	mov.w	r2, r4, lsl #21
 810063c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8100640:	f080 809a 	bcs.w	8100778 <__adddf3+0x240>
 8100644:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8100648:	bf08      	it	eq
 810064a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 810064e:	f150 0000 	adcs.w	r0, r0, #0
 8100652:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8100656:	ea41 0105 	orr.w	r1, r1, r5
 810065a:	bd30      	pop	{r4, r5, pc}
 810065c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8100660:	4140      	adcs	r0, r0
 8100662:	eb41 0101 	adc.w	r1, r1, r1
 8100666:	3c01      	subs	r4, #1
 8100668:	bf28      	it	cs
 810066a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 810066e:	d2e9      	bcs.n	8100644 <__adddf3+0x10c>
 8100670:	f091 0f00 	teq	r1, #0
 8100674:	bf04      	itt	eq
 8100676:	4601      	moveq	r1, r0
 8100678:	2000      	moveq	r0, #0
 810067a:	fab1 f381 	clz	r3, r1
 810067e:	bf08      	it	eq
 8100680:	3320      	addeq	r3, #32
 8100682:	f1a3 030b 	sub.w	r3, r3, #11
 8100686:	f1b3 0220 	subs.w	r2, r3, #32
 810068a:	da0c      	bge.n	81006a6 <__adddf3+0x16e>
 810068c:	320c      	adds	r2, #12
 810068e:	dd08      	ble.n	81006a2 <__adddf3+0x16a>
 8100690:	f102 0c14 	add.w	ip, r2, #20
 8100694:	f1c2 020c 	rsb	r2, r2, #12
 8100698:	fa01 f00c 	lsl.w	r0, r1, ip
 810069c:	fa21 f102 	lsr.w	r1, r1, r2
 81006a0:	e00c      	b.n	81006bc <__adddf3+0x184>
 81006a2:	f102 0214 	add.w	r2, r2, #20
 81006a6:	bfd8      	it	le
 81006a8:	f1c2 0c20 	rsble	ip, r2, #32
 81006ac:	fa01 f102 	lsl.w	r1, r1, r2
 81006b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 81006b4:	bfdc      	itt	le
 81006b6:	ea41 010c 	orrle.w	r1, r1, ip
 81006ba:	4090      	lslle	r0, r2
 81006bc:	1ae4      	subs	r4, r4, r3
 81006be:	bfa2      	ittt	ge
 81006c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 81006c4:	4329      	orrge	r1, r5
 81006c6:	bd30      	popge	{r4, r5, pc}
 81006c8:	ea6f 0404 	mvn.w	r4, r4
 81006cc:	3c1f      	subs	r4, #31
 81006ce:	da1c      	bge.n	810070a <__adddf3+0x1d2>
 81006d0:	340c      	adds	r4, #12
 81006d2:	dc0e      	bgt.n	81006f2 <__adddf3+0x1ba>
 81006d4:	f104 0414 	add.w	r4, r4, #20
 81006d8:	f1c4 0220 	rsb	r2, r4, #32
 81006dc:	fa20 f004 	lsr.w	r0, r0, r4
 81006e0:	fa01 f302 	lsl.w	r3, r1, r2
 81006e4:	ea40 0003 	orr.w	r0, r0, r3
 81006e8:	fa21 f304 	lsr.w	r3, r1, r4
 81006ec:	ea45 0103 	orr.w	r1, r5, r3
 81006f0:	bd30      	pop	{r4, r5, pc}
 81006f2:	f1c4 040c 	rsb	r4, r4, #12
 81006f6:	f1c4 0220 	rsb	r2, r4, #32
 81006fa:	fa20 f002 	lsr.w	r0, r0, r2
 81006fe:	fa01 f304 	lsl.w	r3, r1, r4
 8100702:	ea40 0003 	orr.w	r0, r0, r3
 8100706:	4629      	mov	r1, r5
 8100708:	bd30      	pop	{r4, r5, pc}
 810070a:	fa21 f004 	lsr.w	r0, r1, r4
 810070e:	4629      	mov	r1, r5
 8100710:	bd30      	pop	{r4, r5, pc}
 8100712:	f094 0f00 	teq	r4, #0
 8100716:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 810071a:	bf06      	itte	eq
 810071c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8100720:	3401      	addeq	r4, #1
 8100722:	3d01      	subne	r5, #1
 8100724:	e74e      	b.n	81005c4 <__adddf3+0x8c>
 8100726:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810072a:	bf18      	it	ne
 810072c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8100730:	d029      	beq.n	8100786 <__adddf3+0x24e>
 8100732:	ea94 0f05 	teq	r4, r5
 8100736:	bf08      	it	eq
 8100738:	ea90 0f02 	teqeq	r0, r2
 810073c:	d005      	beq.n	810074a <__adddf3+0x212>
 810073e:	ea54 0c00 	orrs.w	ip, r4, r0
 8100742:	bf04      	itt	eq
 8100744:	4619      	moveq	r1, r3
 8100746:	4610      	moveq	r0, r2
 8100748:	bd30      	pop	{r4, r5, pc}
 810074a:	ea91 0f03 	teq	r1, r3
 810074e:	bf1e      	ittt	ne
 8100750:	2100      	movne	r1, #0
 8100752:	2000      	movne	r0, #0
 8100754:	bd30      	popne	{r4, r5, pc}
 8100756:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 810075a:	d105      	bne.n	8100768 <__adddf3+0x230>
 810075c:	0040      	lsls	r0, r0, #1
 810075e:	4149      	adcs	r1, r1
 8100760:	bf28      	it	cs
 8100762:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8100766:	bd30      	pop	{r4, r5, pc}
 8100768:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 810076c:	bf3c      	itt	cc
 810076e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8100772:	bd30      	popcc	{r4, r5, pc}
 8100774:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100778:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 810077c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8100780:	f04f 0000 	mov.w	r0, #0
 8100784:	bd30      	pop	{r4, r5, pc}
 8100786:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 810078a:	bf1a      	itte	ne
 810078c:	4619      	movne	r1, r3
 810078e:	4610      	movne	r0, r2
 8100790:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8100794:	bf1c      	itt	ne
 8100796:	460b      	movne	r3, r1
 8100798:	4602      	movne	r2, r0
 810079a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 810079e:	bf06      	itte	eq
 81007a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 81007a4:	ea91 0f03 	teqeq	r1, r3
 81007a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 81007ac:	bd30      	pop	{r4, r5, pc}
 81007ae:	bf00      	nop

081007b0 <__aeabi_ui2d>:
 81007b0:	f090 0f00 	teq	r0, #0
 81007b4:	bf04      	itt	eq
 81007b6:	2100      	moveq	r1, #0
 81007b8:	4770      	bxeq	lr
 81007ba:	b530      	push	{r4, r5, lr}
 81007bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81007c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81007c4:	f04f 0500 	mov.w	r5, #0
 81007c8:	f04f 0100 	mov.w	r1, #0
 81007cc:	e750      	b.n	8100670 <__adddf3+0x138>
 81007ce:	bf00      	nop

081007d0 <__aeabi_i2d>:
 81007d0:	f090 0f00 	teq	r0, #0
 81007d4:	bf04      	itt	eq
 81007d6:	2100      	moveq	r1, #0
 81007d8:	4770      	bxeq	lr
 81007da:	b530      	push	{r4, r5, lr}
 81007dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 81007e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 81007e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 81007e8:	bf48      	it	mi
 81007ea:	4240      	negmi	r0, r0
 81007ec:	f04f 0100 	mov.w	r1, #0
 81007f0:	e73e      	b.n	8100670 <__adddf3+0x138>
 81007f2:	bf00      	nop

081007f4 <__aeabi_f2d>:
 81007f4:	0042      	lsls	r2, r0, #1
 81007f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 81007fa:	ea4f 0131 	mov.w	r1, r1, rrx
 81007fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8100802:	bf1f      	itttt	ne
 8100804:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8100808:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 810080c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8100810:	4770      	bxne	lr
 8100812:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8100816:	bf08      	it	eq
 8100818:	4770      	bxeq	lr
 810081a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 810081e:	bf04      	itt	eq
 8100820:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8100824:	4770      	bxeq	lr
 8100826:	b530      	push	{r4, r5, lr}
 8100828:	f44f 7460 	mov.w	r4, #896	; 0x380
 810082c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8100830:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8100834:	e71c      	b.n	8100670 <__adddf3+0x138>
 8100836:	bf00      	nop

08100838 <__aeabi_ul2d>:
 8100838:	ea50 0201 	orrs.w	r2, r0, r1
 810083c:	bf08      	it	eq
 810083e:	4770      	bxeq	lr
 8100840:	b530      	push	{r4, r5, lr}
 8100842:	f04f 0500 	mov.w	r5, #0
 8100846:	e00a      	b.n	810085e <__aeabi_l2d+0x16>

08100848 <__aeabi_l2d>:
 8100848:	ea50 0201 	orrs.w	r2, r0, r1
 810084c:	bf08      	it	eq
 810084e:	4770      	bxeq	lr
 8100850:	b530      	push	{r4, r5, lr}
 8100852:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8100856:	d502      	bpl.n	810085e <__aeabi_l2d+0x16>
 8100858:	4240      	negs	r0, r0
 810085a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 810085e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8100862:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8100866:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 810086a:	f43f aed8 	beq.w	810061e <__adddf3+0xe6>
 810086e:	f04f 0203 	mov.w	r2, #3
 8100872:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8100876:	bf18      	it	ne
 8100878:	3203      	addne	r2, #3
 810087a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 810087e:	bf18      	it	ne
 8100880:	3203      	addne	r2, #3
 8100882:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8100886:	f1c2 0320 	rsb	r3, r2, #32
 810088a:	fa00 fc03 	lsl.w	ip, r0, r3
 810088e:	fa20 f002 	lsr.w	r0, r0, r2
 8100892:	fa01 fe03 	lsl.w	lr, r1, r3
 8100896:	ea40 000e 	orr.w	r0, r0, lr
 810089a:	fa21 f102 	lsr.w	r1, r1, r2
 810089e:	4414      	add	r4, r2
 81008a0:	e6bd      	b.n	810061e <__adddf3+0xe6>
 81008a2:	bf00      	nop

081008a4 <__gedf2>:
 81008a4:	f04f 3cff 	mov.w	ip, #4294967295
 81008a8:	e006      	b.n	81008b8 <__cmpdf2+0x4>
 81008aa:	bf00      	nop

081008ac <__ledf2>:
 81008ac:	f04f 0c01 	mov.w	ip, #1
 81008b0:	e002      	b.n	81008b8 <__cmpdf2+0x4>
 81008b2:	bf00      	nop

081008b4 <__cmpdf2>:
 81008b4:	f04f 0c01 	mov.w	ip, #1
 81008b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 81008bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 81008c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 81008c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 81008c8:	bf18      	it	ne
 81008ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 81008ce:	d01b      	beq.n	8100908 <__cmpdf2+0x54>
 81008d0:	b001      	add	sp, #4
 81008d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 81008d6:	bf0c      	ite	eq
 81008d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 81008dc:	ea91 0f03 	teqne	r1, r3
 81008e0:	bf02      	ittt	eq
 81008e2:	ea90 0f02 	teqeq	r0, r2
 81008e6:	2000      	moveq	r0, #0
 81008e8:	4770      	bxeq	lr
 81008ea:	f110 0f00 	cmn.w	r0, #0
 81008ee:	ea91 0f03 	teq	r1, r3
 81008f2:	bf58      	it	pl
 81008f4:	4299      	cmppl	r1, r3
 81008f6:	bf08      	it	eq
 81008f8:	4290      	cmpeq	r0, r2
 81008fa:	bf2c      	ite	cs
 81008fc:	17d8      	asrcs	r0, r3, #31
 81008fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8100902:	f040 0001 	orr.w	r0, r0, #1
 8100906:	4770      	bx	lr
 8100908:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 810090c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100910:	d102      	bne.n	8100918 <__cmpdf2+0x64>
 8100912:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8100916:	d107      	bne.n	8100928 <__cmpdf2+0x74>
 8100918:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 810091c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8100920:	d1d6      	bne.n	81008d0 <__cmpdf2+0x1c>
 8100922:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8100926:	d0d3      	beq.n	81008d0 <__cmpdf2+0x1c>
 8100928:	f85d 0b04 	ldr.w	r0, [sp], #4
 810092c:	4770      	bx	lr
 810092e:	bf00      	nop

08100930 <__aeabi_cdrcmple>:
 8100930:	4684      	mov	ip, r0
 8100932:	4610      	mov	r0, r2
 8100934:	4662      	mov	r2, ip
 8100936:	468c      	mov	ip, r1
 8100938:	4619      	mov	r1, r3
 810093a:	4663      	mov	r3, ip
 810093c:	e000      	b.n	8100940 <__aeabi_cdcmpeq>
 810093e:	bf00      	nop

08100940 <__aeabi_cdcmpeq>:
 8100940:	b501      	push	{r0, lr}
 8100942:	f7ff ffb7 	bl	81008b4 <__cmpdf2>
 8100946:	2800      	cmp	r0, #0
 8100948:	bf48      	it	mi
 810094a:	f110 0f00 	cmnmi.w	r0, #0
 810094e:	bd01      	pop	{r0, pc}

08100950 <__aeabi_dcmpeq>:
 8100950:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100954:	f7ff fff4 	bl	8100940 <__aeabi_cdcmpeq>
 8100958:	bf0c      	ite	eq
 810095a:	2001      	moveq	r0, #1
 810095c:	2000      	movne	r0, #0
 810095e:	f85d fb08 	ldr.w	pc, [sp], #8
 8100962:	bf00      	nop

08100964 <__aeabi_dcmplt>:
 8100964:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100968:	f7ff ffea 	bl	8100940 <__aeabi_cdcmpeq>
 810096c:	bf34      	ite	cc
 810096e:	2001      	movcc	r0, #1
 8100970:	2000      	movcs	r0, #0
 8100972:	f85d fb08 	ldr.w	pc, [sp], #8
 8100976:	bf00      	nop

08100978 <__aeabi_dcmple>:
 8100978:	f84d ed08 	str.w	lr, [sp, #-8]!
 810097c:	f7ff ffe0 	bl	8100940 <__aeabi_cdcmpeq>
 8100980:	bf94      	ite	ls
 8100982:	2001      	movls	r0, #1
 8100984:	2000      	movhi	r0, #0
 8100986:	f85d fb08 	ldr.w	pc, [sp], #8
 810098a:	bf00      	nop

0810098c <__aeabi_dcmpge>:
 810098c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8100990:	f7ff ffce 	bl	8100930 <__aeabi_cdrcmple>
 8100994:	bf94      	ite	ls
 8100996:	2001      	movls	r0, #1
 8100998:	2000      	movhi	r0, #0
 810099a:	f85d fb08 	ldr.w	pc, [sp], #8
 810099e:	bf00      	nop

081009a0 <__aeabi_dcmpgt>:
 81009a0:	f84d ed08 	str.w	lr, [sp, #-8]!
 81009a4:	f7ff ffc4 	bl	8100930 <__aeabi_cdrcmple>
 81009a8:	bf34      	ite	cc
 81009aa:	2001      	movcc	r0, #1
 81009ac:	2000      	movcs	r0, #0
 81009ae:	f85d fb08 	ldr.w	pc, [sp], #8
 81009b2:	bf00      	nop

081009b4 <__aeabi_d2uiz>:
 81009b4:	004a      	lsls	r2, r1, #1
 81009b6:	d211      	bcs.n	81009dc <__aeabi_d2uiz+0x28>
 81009b8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 81009bc:	d211      	bcs.n	81009e2 <__aeabi_d2uiz+0x2e>
 81009be:	d50d      	bpl.n	81009dc <__aeabi_d2uiz+0x28>
 81009c0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 81009c4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 81009c8:	d40e      	bmi.n	81009e8 <__aeabi_d2uiz+0x34>
 81009ca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 81009ce:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 81009d2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 81009d6:	fa23 f002 	lsr.w	r0, r3, r2
 81009da:	4770      	bx	lr
 81009dc:	f04f 0000 	mov.w	r0, #0
 81009e0:	4770      	bx	lr
 81009e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 81009e6:	d102      	bne.n	81009ee <__aeabi_d2uiz+0x3a>
 81009e8:	f04f 30ff 	mov.w	r0, #4294967295
 81009ec:	4770      	bx	lr
 81009ee:	f04f 0000 	mov.w	r0, #0
 81009f2:	4770      	bx	lr

081009f4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 81009f4:	b480      	push	{r7}
 81009f6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 81009f8:	4b0b      	ldr	r3, [pc, #44]	; (8100a28 <SystemInit+0x34>)
 81009fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 81009fe:	4a0a      	ldr	r2, [pc, #40]	; (8100a28 <SystemInit+0x34>)
 8100a00:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8100a04:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8100a08:	4b07      	ldr	r3, [pc, #28]	; (8100a28 <SystemInit+0x34>)
 8100a0a:	691b      	ldr	r3, [r3, #16]
 8100a0c:	4a06      	ldr	r2, [pc, #24]	; (8100a28 <SystemInit+0x34>)
 8100a0e:	f043 0310 	orr.w	r3, r3, #16
 8100a12:	6113      	str	r3, [r2, #16]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D2_AXISRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK2_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8100a14:	4b04      	ldr	r3, [pc, #16]	; (8100a28 <SystemInit+0x34>)
 8100a16:	f04f 6201 	mov.w	r2, #135266304	; 0x8100000
 8100a1a:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8100a1c:	bf00      	nop
 8100a1e:	46bd      	mov	sp, r7
 8100a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100a24:	4770      	bx	lr
 8100a26:	bf00      	nop
 8100a28:	e000ed00 	.word	0xe000ed00

08100a2c <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8100a2c:	b580      	push	{r7, lr}
 8100a2e:	b08a      	sub	sp, #40	; 0x28
 8100a30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8100a32:	f107 031c 	add.w	r3, r7, #28
 8100a36:	2200      	movs	r2, #0
 8100a38:	601a      	str	r2, [r3, #0]
 8100a3a:	605a      	str	r2, [r3, #4]
 8100a3c:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8100a3e:	463b      	mov	r3, r7
 8100a40:	2200      	movs	r2, #0
 8100a42:	601a      	str	r2, [r3, #0]
 8100a44:	605a      	str	r2, [r3, #4]
 8100a46:	609a      	str	r2, [r3, #8]
 8100a48:	60da      	str	r2, [r3, #12]
 8100a4a:	611a      	str	r2, [r3, #16]
 8100a4c:	615a      	str	r2, [r3, #20]
 8100a4e:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Common config
  */
  hadc1.Instance = ADC1;
 8100a50:	4b31      	ldr	r3, [pc, #196]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a52:	4a32      	ldr	r2, [pc, #200]	; (8100b1c <MX_ADC1_Init+0xf0>)
 8100a54:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 8100a56:	4b30      	ldr	r3, [pc, #192]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a58:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8100a5c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8100a5e:	4b2e      	ldr	r3, [pc, #184]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a60:	2208      	movs	r2, #8
 8100a62:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8100a64:	4b2c      	ldr	r3, [pc, #176]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a66:	2200      	movs	r2, #0
 8100a68:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8100a6a:	4b2b      	ldr	r3, [pc, #172]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a6c:	2204      	movs	r2, #4
 8100a6e:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8100a70:	4b29      	ldr	r3, [pc, #164]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a72:	2200      	movs	r2, #0
 8100a74:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8100a76:	4b28      	ldr	r3, [pc, #160]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a78:	2200      	movs	r2, #0
 8100a7a:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8100a7c:	4b26      	ldr	r3, [pc, #152]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a7e:	2201      	movs	r2, #1
 8100a80:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8100a82:	4b25      	ldr	r3, [pc, #148]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a84:	2200      	movs	r2, #0
 8100a86:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T3_TRGO;
 8100a88:	4b23      	ldr	r3, [pc, #140]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a8a:	f44f 6290 	mov.w	r2, #1152	; 0x480
 8100a8e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8100a90:	4b21      	ldr	r3, [pc, #132]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a92:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8100a96:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8100a98:	4b1f      	ldr	r3, [pc, #124]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100a9a:	2200      	movs	r2, #0
 8100a9c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8100a9e:	4b1e      	ldr	r3, [pc, #120]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100aa0:	2200      	movs	r2, #0
 8100aa2:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8100aa4:	4b1c      	ldr	r3, [pc, #112]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100aa6:	2200      	movs	r2, #0
 8100aa8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8100aaa:	4b1b      	ldr	r3, [pc, #108]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100aac:	2200      	movs	r2, #0
 8100aae:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8100ab2:	4819      	ldr	r0, [pc, #100]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100ab4:	f001 f878 	bl	8101ba8 <HAL_ADC_Init>
 8100ab8:	4603      	mov	r3, r0
 8100aba:	2b00      	cmp	r3, #0
 8100abc:	d001      	beq.n	8100ac2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 8100abe:	f000 fb5d 	bl	810117c <Error_Handler>
  }
  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8100ac2:	2300      	movs	r3, #0
 8100ac4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8100ac6:	f107 031c 	add.w	r3, r7, #28
 8100aca:	4619      	mov	r1, r3
 8100acc:	4812      	ldr	r0, [pc, #72]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100ace:	f002 fae3 	bl	8103098 <HAL_ADCEx_MultiModeConfigChannel>
 8100ad2:	4603      	mov	r3, r0
 8100ad4:	2b00      	cmp	r3, #0
 8100ad6:	d001      	beq.n	8100adc <MX_ADC1_Init+0xb0>
  {
    Error_Handler();
 8100ad8:	f000 fb50 	bl	810117c <Error_Handler>
  }
  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8100adc:	4b10      	ldr	r3, [pc, #64]	; (8100b20 <MX_ADC1_Init+0xf4>)
 8100ade:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8100ae0:	2306      	movs	r3, #6
 8100ae2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_64CYCLES_5;
 8100ae4:	2305      	movs	r3, #5
 8100ae6:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8100ae8:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8100aec:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8100aee:	2304      	movs	r3, #4
 8100af0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8100af2:	2300      	movs	r3, #0
 8100af4:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8100af6:	2300      	movs	r3, #0
 8100af8:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8100afa:	463b      	mov	r3, r7
 8100afc:	4619      	mov	r1, r3
 8100afe:	4806      	ldr	r0, [pc, #24]	; (8100b18 <MX_ADC1_Init+0xec>)
 8100b00:	f001 fd8e 	bl	8102620 <HAL_ADC_ConfigChannel>
 8100b04:	4603      	mov	r3, r0
 8100b06:	2b00      	cmp	r3, #0
 8100b08:	d001      	beq.n	8100b0e <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8100b0a:	f000 fb37 	bl	810117c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8100b0e:	bf00      	nop
 8100b10:	3728      	adds	r7, #40	; 0x28
 8100b12:	46bd      	mov	sp, r7
 8100b14:	bd80      	pop	{r7, pc}
 8100b16:	bf00      	nop
 8100b18:	1000005c 	.word	0x1000005c
 8100b1c:	40022000 	.word	0x40022000
 8100b20:	08600004 	.word	0x08600004

08100b24 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8100b24:	b580      	push	{r7, lr}
 8100b26:	b0b8      	sub	sp, #224	; 0xe0
 8100b28:	af00      	add	r7, sp, #0
 8100b2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100b2c:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100b30:	2200      	movs	r2, #0
 8100b32:	601a      	str	r2, [r3, #0]
 8100b34:	605a      	str	r2, [r3, #4]
 8100b36:	609a      	str	r2, [r3, #8]
 8100b38:	60da      	str	r2, [r3, #12]
 8100b3a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8100b3c:	f107 0310 	add.w	r3, r7, #16
 8100b40:	22bc      	movs	r2, #188	; 0xbc
 8100b42:	2100      	movs	r1, #0
 8100b44:	4618      	mov	r0, r3
 8100b46:	f006 fd9b 	bl	8107680 <memset>
  if(adcHandle->Instance==ADC1)
 8100b4a:	687b      	ldr	r3, [r7, #4]
 8100b4c:	681b      	ldr	r3, [r3, #0]
 8100b4e:	4a2e      	ldr	r2, [pc, #184]	; (8100c08 <HAL_ADC_MspInit+0xe4>)
 8100b50:	4293      	cmp	r3, r2
 8100b52:	d155      	bne.n	8100c00 <HAL_ADC_MspInit+0xdc>
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8100b54:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8100b58:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 4;
 8100b5a:	2304      	movs	r3, #4
 8100b5c:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2N = 120;
 8100b5e:	2378      	movs	r3, #120	; 0x78
 8100b60:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2P = 6;
 8100b62:	2306      	movs	r3, #6
 8100b64:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8100b66:	2302      	movs	r3, #2
 8100b68:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8100b6a:	2302      	movs	r3, #2
 8100b6c:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_1;
 8100b6e:	2340      	movs	r3, #64	; 0x40
 8100b70:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOWIDE;
 8100b72:	2300      	movs	r3, #0
 8100b74:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8100b76:	2300      	movs	r3, #0
 8100b78:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8100b7a:	2300      	movs	r3, #0
 8100b7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8100b80:	f107 0310 	add.w	r3, r7, #16
 8100b84:	4618      	mov	r0, r3
 8100b86:	f003 f89d 	bl	8103cc4 <HAL_RCCEx_PeriphCLKConfig>
 8100b8a:	4603      	mov	r3, r0
 8100b8c:	2b00      	cmp	r3, #0
 8100b8e:	d001      	beq.n	8100b94 <HAL_ADC_MspInit+0x70>
    {
      Error_Handler();
 8100b90:	f000 faf4 	bl	810117c <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8100b94:	4b1d      	ldr	r3, [pc, #116]	; (8100c0c <HAL_ADC_MspInit+0xe8>)
 8100b96:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100b9a:	4a1c      	ldr	r2, [pc, #112]	; (8100c0c <HAL_ADC_MspInit+0xe8>)
 8100b9c:	f043 0320 	orr.w	r3, r3, #32
 8100ba0:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8100ba4:	4b19      	ldr	r3, [pc, #100]	; (8100c0c <HAL_ADC_MspInit+0xe8>)
 8100ba6:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8100baa:	f003 0320 	and.w	r3, r3, #32
 8100bae:	60fb      	str	r3, [r7, #12]
 8100bb0:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8100bb2:	4b16      	ldr	r3, [pc, #88]	; (8100c0c <HAL_ADC_MspInit+0xe8>)
 8100bb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bb8:	4a14      	ldr	r2, [pc, #80]	; (8100c0c <HAL_ADC_MspInit+0xe8>)
 8100bba:	f043 0320 	orr.w	r3, r3, #32
 8100bbe:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100bc2:	4b12      	ldr	r3, [pc, #72]	; (8100c0c <HAL_ADC_MspInit+0xe8>)
 8100bc4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100bc8:	f003 0320 	and.w	r3, r3, #32
 8100bcc:	60bb      	str	r3, [r7, #8]
 8100bce:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PF11     ------> ADC1_INP2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8100bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8100bd4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8100bd8:	2303      	movs	r3, #3
 8100bda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100bde:	2300      	movs	r3, #0
 8100be0:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8100be4:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8100be8:	4619      	mov	r1, r3
 8100bea:	4809      	ldr	r0, [pc, #36]	; (8100c10 <HAL_ADC_MspInit+0xec>)
 8100bec:	f002 fc5a 	bl	81034a4 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 0, 0);
 8100bf0:	2200      	movs	r2, #0
 8100bf2:	2100      	movs	r1, #0
 8100bf4:	2012      	movs	r0, #18
 8100bf6:	f002 fc0c 	bl	8103412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8100bfa:	2012      	movs	r0, #18
 8100bfc:	f002 fc23 	bl	8103446 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8100c00:	bf00      	nop
 8100c02:	37e0      	adds	r7, #224	; 0xe0
 8100c04:	46bd      	mov	sp, r7
 8100c06:	bd80      	pop	{r7, pc}
 8100c08:	40022000 	.word	0x40022000
 8100c0c:	58024400 	.word	0x58024400
 8100c10:	58021400 	.word	0x58021400

08100c14 <MX_GPIO_Init>:
/* USER CODE END 1 */

/** Configure pins
*/
void MX_GPIO_Init(void)
{
 8100c14:	b580      	push	{r7, lr}
 8100c16:	b08a      	sub	sp, #40	; 0x28
 8100c18:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8100c1a:	f107 0314 	add.w	r3, r7, #20
 8100c1e:	2200      	movs	r2, #0
 8100c20:	601a      	str	r2, [r3, #0]
 8100c22:	605a      	str	r2, [r3, #4]
 8100c24:	609a      	str	r2, [r3, #8]
 8100c26:	60da      	str	r2, [r3, #12]
 8100c28:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8100c2a:	4b3a      	ldr	r3, [pc, #232]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c30:	4a38      	ldr	r2, [pc, #224]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c32:	f043 0304 	orr.w	r3, r3, #4
 8100c36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c3a:	4b36      	ldr	r3, [pc, #216]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c40:	f003 0304 	and.w	r3, r3, #4
 8100c44:	613b      	str	r3, [r7, #16]
 8100c46:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8100c48:	4b32      	ldr	r3, [pc, #200]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c4e:	4a31      	ldr	r2, [pc, #196]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c50:	f043 0302 	orr.w	r3, r3, #2
 8100c54:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c58:	4b2e      	ldr	r3, [pc, #184]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c5e:	f003 0302 	and.w	r3, r3, #2
 8100c62:	60fb      	str	r3, [r7, #12]
 8100c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8100c66:	4b2b      	ldr	r3, [pc, #172]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c68:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c6c:	4a29      	ldr	r2, [pc, #164]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c6e:	f043 0320 	orr.w	r3, r3, #32
 8100c72:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c76:	4b27      	ldr	r3, [pc, #156]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c78:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c7c:	f003 0320 	and.w	r3, r3, #32
 8100c80:	60bb      	str	r3, [r7, #8]
 8100c82:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8100c84:	4b23      	ldr	r3, [pc, #140]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c8a:	4a22      	ldr	r2, [pc, #136]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c8c:	f043 0310 	orr.w	r3, r3, #16
 8100c90:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100c94:	4b1f      	ldr	r3, [pc, #124]	; (8100d14 <MX_GPIO_Init+0x100>)
 8100c96:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100c9a:	f003 0310 	and.w	r3, r3, #16
 8100c9e:	607b      	str	r3, [r7, #4]
 8100ca0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin, GPIO_PIN_RESET);
 8100ca2:	2200      	movs	r2, #0
 8100ca4:	f244 0101 	movw	r1, #16385	; 0x4001
 8100ca8:	481b      	ldr	r0, [pc, #108]	; (8100d18 <MX_GPIO_Init+0x104>)
 8100caa:	f002 fdab 	bl	8103804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8100cae:	2200      	movs	r2, #0
 8100cb0:	2102      	movs	r1, #2
 8100cb2:	481a      	ldr	r0, [pc, #104]	; (8100d1c <MX_GPIO_Init+0x108>)
 8100cb4:	f002 fda6 	bl	8103804 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8100cb8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8100cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8100cbe:	2300      	movs	r3, #0
 8100cc0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cc2:	2300      	movs	r3, #0
 8100cc4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8100cc6:	f107 0314 	add.w	r3, r7, #20
 8100cca:	4619      	mov	r1, r3
 8100ccc:	4814      	ldr	r0, [pc, #80]	; (8100d20 <MX_GPIO_Init+0x10c>)
 8100cce:	f002 fbe9 	bl	81034a4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin;
 8100cd2:	f244 0301 	movw	r3, #16385	; 0x4001
 8100cd6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100cd8:	2301      	movs	r3, #1
 8100cda:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cdc:	2300      	movs	r3, #0
 8100cde:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100ce0:	2300      	movs	r3, #0
 8100ce2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8100ce4:	f107 0314 	add.w	r3, r7, #20
 8100ce8:	4619      	mov	r1, r3
 8100cea:	480b      	ldr	r0, [pc, #44]	; (8100d18 <MX_GPIO_Init+0x104>)
 8100cec:	f002 fbda 	bl	81034a4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8100cf0:	2302      	movs	r3, #2
 8100cf2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8100cf4:	2301      	movs	r3, #1
 8100cf6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8100cf8:	2300      	movs	r3, #0
 8100cfa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8100cfc:	2300      	movs	r3, #0
 8100cfe:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8100d00:	f107 0314 	add.w	r3, r7, #20
 8100d04:	4619      	mov	r1, r3
 8100d06:	4805      	ldr	r0, [pc, #20]	; (8100d1c <MX_GPIO_Init+0x108>)
 8100d08:	f002 fbcc 	bl	81034a4 <HAL_GPIO_Init>

}
 8100d0c:	bf00      	nop
 8100d0e:	3728      	adds	r7, #40	; 0x28
 8100d10:	46bd      	mov	sp, r7
 8100d12:	bd80      	pop	{r7, pc}
 8100d14:	58024400 	.word	0x58024400
 8100d18:	58020400 	.word	0x58020400
 8100d1c:	58021000 	.word	0x58021000
 8100d20:	58020800 	.word	0x58020800

08100d24 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8100d24:	b580      	push	{r7, lr}
 8100d26:	b082      	sub	sp, #8
 8100d28:	af00      	add	r7, sp, #0
 8100d2a:	6078      	str	r0, [r7, #4]
  adc_buffer[adc_index] = HAL_ADC_GetValue(&hadc1);
 8100d2c:	480a      	ldr	r0, [pc, #40]	; (8100d58 <HAL_ADC_ConvCpltCallback+0x34>)
 8100d2e:	f001 fa1b 	bl	8102168 <HAL_ADC_GetValue>
 8100d32:	4601      	mov	r1, r0
 8100d34:	4b09      	ldr	r3, [pc, #36]	; (8100d5c <HAL_ADC_ConvCpltCallback+0x38>)
 8100d36:	881b      	ldrh	r3, [r3, #0]
 8100d38:	461a      	mov	r2, r3
 8100d3a:	b289      	uxth	r1, r1
 8100d3c:	4b08      	ldr	r3, [pc, #32]	; (8100d60 <HAL_ADC_ConvCpltCallback+0x3c>)
 8100d3e:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
  adc_index++;
 8100d42:	4b06      	ldr	r3, [pc, #24]	; (8100d5c <HAL_ADC_ConvCpltCallback+0x38>)
 8100d44:	881b      	ldrh	r3, [r3, #0]
 8100d46:	3301      	adds	r3, #1
 8100d48:	b29a      	uxth	r2, r3
 8100d4a:	4b04      	ldr	r3, [pc, #16]	; (8100d5c <HAL_ADC_ConvCpltCallback+0x38>)
 8100d4c:	801a      	strh	r2, [r3, #0]
}
 8100d4e:	bf00      	nop
 8100d50:	3708      	adds	r7, #8
 8100d52:	46bd      	mov	sp, r7
 8100d54:	bd80      	pop	{r7, pc}
 8100d56:	bf00      	nop
 8100d58:	1000005c 	.word	0x1000005c
 8100d5c:	10000050 	.word	0x10000050
 8100d60:	100000c0 	.word	0x100000c0

08100d64 <HAL_TIM_PeriodElapsedCallback>:
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8100d64:	b480      	push	{r7}
 8100d66:	b085      	sub	sp, #20
 8100d68:	af00      	add	r7, sp, #0
 8100d6a:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM2)
 8100d6c:	687b      	ldr	r3, [r7, #4]
 8100d6e:	681b      	ldr	r3, [r3, #0]
 8100d70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8100d74:	d143      	bne.n	8100dfe <HAL_TIM_PeriodElapsedCallback+0x9a>
  {
    adc_sum_temp = 0;
 8100d76:	4b25      	ldr	r3, [pc, #148]	; (8100e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8100d78:	2200      	movs	r2, #0
 8100d7a:	601a      	str	r2, [r3, #0]
    for(uint8_t i = 0; i < adc_index; i++)
 8100d7c:	2300      	movs	r3, #0
 8100d7e:	73fb      	strb	r3, [r7, #15]
 8100d80:	e00c      	b.n	8100d9c <HAL_TIM_PeriodElapsedCallback+0x38>
    {
      adc_sum_temp += adc_buffer[i];
 8100d82:	7bfb      	ldrb	r3, [r7, #15]
 8100d84:	4a22      	ldr	r2, [pc, #136]	; (8100e10 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8100d86:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8100d8a:	461a      	mov	r2, r3
 8100d8c:	4b1f      	ldr	r3, [pc, #124]	; (8100e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8100d8e:	681b      	ldr	r3, [r3, #0]
 8100d90:	4413      	add	r3, r2
 8100d92:	4a1e      	ldr	r2, [pc, #120]	; (8100e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8100d94:	6013      	str	r3, [r2, #0]
    for(uint8_t i = 0; i < adc_index; i++)
 8100d96:	7bfb      	ldrb	r3, [r7, #15]
 8100d98:	3301      	adds	r3, #1
 8100d9a:	73fb      	strb	r3, [r7, #15]
 8100d9c:	7bfb      	ldrb	r3, [r7, #15]
 8100d9e:	b29a      	uxth	r2, r3
 8100da0:	4b1c      	ldr	r3, [pc, #112]	; (8100e14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8100da2:	881b      	ldrh	r3, [r3, #0]
 8100da4:	429a      	cmp	r2, r3
 8100da6:	d3ec      	bcc.n	8100d82 <HAL_TIM_PeriodElapsedCallback+0x1e>
    }
    adc_average = adc_sum_temp/adc_index;
 8100da8:	4b18      	ldr	r3, [pc, #96]	; (8100e0c <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8100daa:	681b      	ldr	r3, [r3, #0]
 8100dac:	4a19      	ldr	r2, [pc, #100]	; (8100e14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8100dae:	8812      	ldrh	r2, [r2, #0]
 8100db0:	fbb3 f3f2 	udiv	r3, r3, r2
 8100db4:	b29a      	uxth	r2, r3
 8100db6:	4b18      	ldr	r3, [pc, #96]	; (8100e18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8100db8:	801a      	strh	r2, [r3, #0]
    if(adc_average < 269)
 8100dba:	4b17      	ldr	r3, [pc, #92]	; (8100e18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8100dbc:	881b      	ldrh	r3, [r3, #0]
 8100dbe:	f5b3 7f86 	cmp.w	r3, #268	; 0x10c
 8100dc2:	d803      	bhi.n	8100dcc <HAL_TIM_PeriodElapsedCallback+0x68>
      adc_average = 269;
 8100dc4:	4b14      	ldr	r3, [pc, #80]	; (8100e18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8100dc6:	f240 120d 	movw	r2, #269	; 0x10d
 8100dca:	801a      	strh	r2, [r3, #0]
    adc_index = 0;
 8100dcc:	4b11      	ldr	r3, [pc, #68]	; (8100e14 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8100dce:	2200      	movs	r2, #0
 8100dd0:	801a      	strh	r2, [r3, #0]
    Ts_time_elapsed = 1;
 8100dd2:	4b12      	ldr	r3, [pc, #72]	; (8100e1c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8100dd4:	2201      	movs	r2, #1
 8100dd6:	701a      	strb	r2, [r3, #0]
    shared_data_ptr->adc_average_from4to7 = adc_average-269;
 8100dd8:	4b0f      	ldr	r3, [pc, #60]	; (8100e18 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8100dda:	881b      	ldrh	r3, [r3, #0]
 8100ddc:	4a10      	ldr	r2, [pc, #64]	; (8100e20 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8100dde:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8100de2:	b29b      	uxth	r3, r3
 8100de4:	8053      	strh	r3, [r2, #2]
    setpoint = shared_data_ptr->setpoint_from7to4;
 8100de6:	4b0e      	ldr	r3, [pc, #56]	; (8100e20 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8100de8:	795b      	ldrb	r3, [r3, #5]
 8100dea:	b2da      	uxtb	r2, r3
 8100dec:	4b0d      	ldr	r3, [pc, #52]	; (8100e24 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8100dee:	701a      	strb	r2, [r3, #0]
    shared_data_ptr->pwm_from4to7 = pwm_out;
 8100df0:	4b0b      	ldr	r3, [pc, #44]	; (8100e20 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8100df2:	4a0d      	ldr	r2, [pc, #52]	; (8100e28 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8100df4:	7812      	ldrb	r2, [r2, #0]
 8100df6:	711a      	strb	r2, [r3, #4]
    shared_data_ptr->Ts_time_elapsed_from4to7 = 1;
 8100df8:	4b09      	ldr	r3, [pc, #36]	; (8100e20 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8100dfa:	2201      	movs	r2, #1
 8100dfc:	801a      	strh	r2, [r3, #0]
  }
}
 8100dfe:	bf00      	nop
 8100e00:	3714      	adds	r7, #20
 8100e02:	46bd      	mov	sp, r7
 8100e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8100e08:	4770      	bx	lr
 8100e0a:	bf00      	nop
 8100e0c:	10000054 	.word	0x10000054
 8100e10:	100000c0 	.word	0x100000c0
 8100e14:	10000050 	.word	0x10000050
 8100e18:	10000052 	.word	0x10000052
 8100e1c:	10000058 	.word	0x10000058
 8100e20:	38001000 	.word	0x38001000
 8100e24:	10000059 	.word	0x10000059
 8100e28:	1000005a 	.word	0x1000005a
 8100e2c:	00000000 	.word	0x00000000

08100e30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8100e30:	b580      	push	{r7, lr}
 8100e32:	b090      	sub	sp, #64	; 0x40
 8100e34:	af00      	add	r7, sp, #0

  /* USER CODE END 1 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /*HW semaphore Clock enable*/
  __HAL_RCC_HSEM_CLK_ENABLE();
 8100e36:	4ba0      	ldr	r3, [pc, #640]	; (81010b8 <main+0x288>)
 8100e38:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e3c:	4a9e      	ldr	r2, [pc, #632]	; (81010b8 <main+0x288>)
 8100e3e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8100e42:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8100e46:	4b9c      	ldr	r3, [pc, #624]	; (81010b8 <main+0x288>)
 8100e48:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8100e4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8100e50:	607b      	str	r3, [r7, #4]
 8100e52:	687b      	ldr	r3, [r7, #4]
  /* Activate HSEM notification for Cortex-M4*/
  HAL_HSEM_ActivateNotification(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e54:	2001      	movs	r0, #1
 8100e56:	f002 fcef 	bl	8103838 <HAL_HSEM_ActivateNotification>
  /*
  Domain D2 goes to STOP mode (Cortex-M4 in deep-sleep) waiting for Cortex-M7 to
  perform system initialization (system clock config, external memory configuration.. )
  */
  HAL_PWREx_ClearPendingEvent();
 8100e5a:	f002 fd79 	bl	8103950 <HAL_PWREx_ClearPendingEvent>
  HAL_PWREx_EnterSTOPMode(PWR_MAINREGULATOR_ON, PWR_STOPENTRY_WFE, PWR_D2_DOMAIN);
 8100e5e:	2201      	movs	r2, #1
 8100e60:	2102      	movs	r1, #2
 8100e62:	2000      	movs	r0, #0
 8100e64:	f002 fcfa 	bl	810385c <HAL_PWREx_EnterSTOPMode>
  /* Clear HSEM flag */
  __HAL_HSEM_CLEAR_FLAG(__HAL_HSEM_SEMID_TO_MASK(HSEM_ID_0));
 8100e68:	4b94      	ldr	r3, [pc, #592]	; (81010bc <main+0x28c>)
 8100e6a:	681b      	ldr	r3, [r3, #0]
 8100e6c:	091b      	lsrs	r3, r3, #4
 8100e6e:	f003 030f 	and.w	r3, r3, #15
 8100e72:	2b07      	cmp	r3, #7
 8100e74:	d108      	bne.n	8100e88 <main+0x58>
 8100e76:	4b92      	ldr	r3, [pc, #584]	; (81010c0 <main+0x290>)
 8100e78:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
 8100e7c:	4a90      	ldr	r2, [pc, #576]	; (81010c0 <main+0x290>)
 8100e7e:	f043 0301 	orr.w	r3, r3, #1
 8100e82:	f8c2 3104 	str.w	r3, [r2, #260]	; 0x104
 8100e86:	e007      	b.n	8100e98 <main+0x68>
 8100e88:	4b8d      	ldr	r3, [pc, #564]	; (81010c0 <main+0x290>)
 8100e8a:	f8d3 3114 	ldr.w	r3, [r3, #276]	; 0x114
 8100e8e:	4a8c      	ldr	r2, [pc, #560]	; (81010c0 <main+0x290>)
 8100e90:	f043 0301 	orr.w	r3, r3, #1
 8100e94:	f8c2 3114 	str.w	r3, [r2, #276]	; 0x114

/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8100e98:	f000 fbd0 	bl	810163c <HAL_Init>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8100e9c:	f7ff feba 	bl	8100c14 <MX_GPIO_Init>
  MX_ADC1_Init();
 8100ea0:	f7ff fdc4 	bl	8100a2c <MX_ADC1_Init>
  MX_TIM2_Init();
 8100ea4:	f000 fa74 	bl	8101390 <MX_TIM2_Init>
  MX_TIM3_Init();
 8100ea8:	f000 fac0 	bl	810142c <MX_TIM3_Init>
  MX_TIM1_Init();
 8100eac:	f000 f9c4 	bl	8101238 <MX_TIM1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim3);
 8100eb0:	4884      	ldr	r0, [pc, #528]	; (81010c4 <main+0x294>)
 8100eb2:	f005 f8e5 	bl	8106080 <HAL_TIM_Base_Start>
  HAL_ADC_Start_IT(&hadc1);
 8100eb6:	4884      	ldr	r0, [pc, #528]	; (81010c8 <main+0x298>)
 8100eb8:	f001 f816 	bl	8101ee8 <HAL_ADC_Start_IT>
  HAL_TIM_Base_Start_IT(&htim2);
 8100ebc:	4883      	ldr	r0, [pc, #524]	; (81010cc <main+0x29c>)
 8100ebe:	f005 f947 	bl	8106150 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8100ec2:	2100      	movs	r1, #0
 8100ec4:	4882      	ldr	r0, [pc, #520]	; (81010d0 <main+0x2a0>)
 8100ec6:	f005 fa15 	bl	81062f4 <HAL_TIM_PWM_Start>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */


  uint16_t local_adc = 0;
 8100eca:	2300      	movs	r3, #0
 8100ecc:	83fb      	strh	r3, [r7, #30]
  int16_t y =0;
 8100ece:	2300      	movs	r3, #0
 8100ed0:	83bb      	strh	r3, [r7, #28]
  uint8_t  value_test = 0;  
 8100ed2:	2300      	movs	r3, #0
 8100ed4:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t atualiza_pwm_test;
  uint8_t flag2 = 0;
 8100ed8:	2300      	movs	r3, #0
 8100eda:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  atualiza_pwm_test =  HAL_GetTick();
 8100ede:	f000 fc55 	bl	810178c <HAL_GetTick>
 8100ee2:	63b8      	str	r0, [r7, #56]	; 0x38
  shared_data_ptr->flagR_from7to4 = 0;
 8100ee4:	4b7b      	ldr	r3, [pc, #492]	; (81010d4 <main+0x2a4>)
 8100ee6:	2200      	movs	r2, #0
 8100ee8:	719a      	strb	r2, [r3, #6]
  double e_i = 0;
 8100eea:	f04f 0200 	mov.w	r2, #0
 8100eee:	f04f 0300 	mov.w	r3, #0
 8100ef2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

  double u_p = 0;
 8100ef6:	f04f 0200 	mov.w	r2, #0
 8100efa:	f04f 0300 	mov.w	r3, #0
 8100efe:	e9c7 2304 	strd	r2, r3, [r7, #16]
  double u_i = 0;
 8100f02:	f04f 0200 	mov.w	r2, #0
 8100f06:	f04f 0300 	mov.w	r3, #0
 8100f0a:	e9c7 2302 	strd	r2, r3, [r7, #8]
  double u_i_ant = 0;
 8100f0e:	f04f 0200 	mov.w	r2, #0
 8100f12:	f04f 0300 	mov.w	r3, #0
 8100f16:	e9c7 2308 	strd	r2, r3, [r7, #32]

  while (1)
  {
    

    if(shared_data_ptr->flagR_from7to4 == 1)
 8100f1a:	4b6e      	ldr	r3, [pc, #440]	; (81010d4 <main+0x2a4>)
 8100f1c:	799b      	ldrb	r3, [r3, #6]
 8100f1e:	b2db      	uxtb	r3, r3
 8100f20:	2b01      	cmp	r3, #1
 8100f22:	d128      	bne.n	8100f76 <main+0x146>
    {
      if(!flag2){
 8100f24:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8100f28:	2b00      	cmp	r3, #0
 8100f2a:	d106      	bne.n	8100f3a <main+0x10a>
        value_test = shared_data_ptr->setpoint_from7to4;
 8100f2c:	4b69      	ldr	r3, [pc, #420]	; (81010d4 <main+0x2a4>)
 8100f2e:	795b      	ldrb	r3, [r3, #5]
 8100f30:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        flag2 = 1;
 8100f34:	2301      	movs	r3, #1
 8100f36:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      }
      if((HAL_GetTick()-atualiza_pwm_test) >= 5000)
 8100f3a:	f000 fc27 	bl	810178c <HAL_GetTick>
 8100f3e:	4602      	mov	r2, r0
 8100f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8100f42:	1ad3      	subs	r3, r2, r3
 8100f44:	f241 3287 	movw	r2, #4999	; 0x1387
 8100f48:	4293      	cmp	r3, r2
 8100f4a:	d914      	bls.n	8100f76 <main+0x146>
      {
        atualiza_pwm_test = HAL_GetTick();
 8100f4c:	f000 fc1e 	bl	810178c <HAL_GetTick>
 8100f50:	63b8      	str	r0, [r7, #56]	; 0x38
        value_test++;
 8100f52:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8100f56:	3301      	adds	r3, #1
 8100f58:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if(value_test == 45)
 8100f5c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8100f60:	2b2d      	cmp	r3, #45	; 0x2d
 8100f62:	d108      	bne.n	8100f76 <main+0x146>
        {
          value_test = 0;
 8100f64:	2300      	movs	r3, #0
 8100f66:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
          shared_data_ptr->setpoint_from7to4=0;
 8100f6a:	4b5a      	ldr	r3, [pc, #360]	; (81010d4 <main+0x2a4>)
 8100f6c:	2200      	movs	r2, #0
 8100f6e:	715a      	strb	r2, [r3, #5]
          flag2 = 0;
 8100f70:	2300      	movs	r3, #0
 8100f72:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
        }
      }
    }
    if(Ts_time_elapsed)
 8100f76:	4b58      	ldr	r3, [pc, #352]	; (81010d8 <main+0x2a8>)
 8100f78:	781b      	ldrb	r3, [r3, #0]
 8100f7a:	2b00      	cmp	r3, #0
 8100f7c:	d0cd      	beq.n	8100f1a <main+0xea>
    {
      Ts_time_elapsed = 0;
 8100f7e:	4b56      	ldr	r3, [pc, #344]	; (81010d8 <main+0x2a8>)
 8100f80:	2200      	movs	r2, #0
 8100f82:	701a      	strb	r2, [r3, #0]
      {
        atualiza_pwm_test = HAL_GetTick();
        pwm_out = setpoint; // Malha Aberta
      }
      else
*/      y = adc_average - 269;
 8100f84:	4b55      	ldr	r3, [pc, #340]	; (81010dc <main+0x2ac>)
 8100f86:	881b      	ldrh	r3, [r3, #0]
 8100f88:	f2a3 130d 	subw	r3, r3, #269	; 0x10d
 8100f8c:	b29b      	uxth	r3, r3
 8100f8e:	83bb      	strh	r3, [r7, #28]
        e = (setpoint-y);
 8100f90:	4b53      	ldr	r3, [pc, #332]	; (81010e0 <main+0x2b0>)
 8100f92:	781b      	ldrb	r3, [r3, #0]
 8100f94:	461a      	mov	r2, r3
 8100f96:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8100f9a:	1ad3      	subs	r3, r2, r3
 8100f9c:	4618      	mov	r0, r3
 8100f9e:	f7ff fc17 	bl	81007d0 <__aeabi_i2d>
 8100fa2:	4602      	mov	r2, r0
 8100fa4:	460b      	mov	r3, r1
 8100fa6:	494f      	ldr	r1, [pc, #316]	; (81010e4 <main+0x2b4>)
 8100fa8:	e9c1 2300 	strd	r2, r3, [r1]

        if (u_ant >= (100-42) || u_ant <= (42-42))
 8100fac:	4b4e      	ldr	r3, [pc, #312]	; (81010e8 <main+0x2b8>)
 8100fae:	e9d3 0100 	ldrd	r0, r1, [r3]
 8100fb2:	f04f 0200 	mov.w	r2, #0
 8100fb6:	4b4d      	ldr	r3, [pc, #308]	; (81010ec <main+0x2bc>)
 8100fb8:	f7ff fce8 	bl	810098c <__aeabi_dcmpge>
 8100fbc:	4603      	mov	r3, r0
 8100fbe:	2b00      	cmp	r3, #0
 8100fc0:	d10b      	bne.n	8100fda <main+0x1aa>
 8100fc2:	4b49      	ldr	r3, [pc, #292]	; (81010e8 <main+0x2b8>)
 8100fc4:	e9d3 0100 	ldrd	r0, r1, [r3]
 8100fc8:	f04f 0200 	mov.w	r2, #0
 8100fcc:	f04f 0300 	mov.w	r3, #0
 8100fd0:	f7ff fcd2 	bl	8100978 <__aeabi_dcmple>
 8100fd4:	4603      	mov	r3, r0
 8100fd6:	2b00      	cmp	r3, #0
 8100fd8:	d006      	beq.n	8100fe8 <main+0x1b8>
          e_i = 0;
 8100fda:	f04f 0200 	mov.w	r2, #0
 8100fde:	f04f 0300 	mov.w	r3, #0
 8100fe2:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
 8100fe6:	e004      	b.n	8100ff2 <main+0x1c2>
        else
          e_i = e;
 8100fe8:	4b3e      	ldr	r3, [pc, #248]	; (81010e4 <main+0x2b4>)
 8100fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100fee:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
        
        u_p = Kp*e;
 8100ff2:	a12b      	add	r1, pc, #172	; (adr r1, 81010a0 <main+0x270>)
 8100ff4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8100ff8:	4b3a      	ldr	r3, [pc, #232]	; (81010e4 <main+0x2b4>)
 8100ffa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8100ffe:	f7ff f96b 	bl	81002d8 <__aeabi_dmul>
 8101002:	4602      	mov	r2, r0
 8101004:	460b      	mov	r3, r1
 8101006:	e9c7 2304 	strd	r2, r3, [r7, #16]
        u_i = (Kp*Ts*Ki)* e_i + u_i_ant; 
 810100a:	a125      	add	r1, pc, #148	; (adr r1, 81010a0 <main+0x270>)
 810100c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8101010:	a325      	add	r3, pc, #148	; (adr r3, 81010a8 <main+0x278>)
 8101012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101016:	f7ff f95f 	bl	81002d8 <__aeabi_dmul>
 810101a:	4602      	mov	r2, r0
 810101c:	460b      	mov	r3, r1
 810101e:	4610      	mov	r0, r2
 8101020:	4619      	mov	r1, r3
 8101022:	a323      	add	r3, pc, #140	; (adr r3, 81010b0 <main+0x280>)
 8101024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101028:	f7ff f956 	bl	81002d8 <__aeabi_dmul>
 810102c:	4602      	mov	r2, r0
 810102e:	460b      	mov	r3, r1
 8101030:	4610      	mov	r0, r2
 8101032:	4619      	mov	r1, r3
 8101034:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8101038:	f7ff f94e 	bl	81002d8 <__aeabi_dmul>
 810103c:	4602      	mov	r2, r0
 810103e:	460b      	mov	r3, r1
 8101040:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8101044:	f7ff fa78 	bl	8100538 <__adddf3>
 8101048:	4602      	mov	r2, r0
 810104a:	460b      	mov	r3, r1
 810104c:	e9c7 2302 	strd	r2, r3, [r7, #8]

        u = u_p + u_i + 0.5;
 8101050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8101054:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8101058:	f7ff fa6e 	bl	8100538 <__adddf3>
 810105c:	4602      	mov	r2, r0
 810105e:	460b      	mov	r3, r1
 8101060:	4610      	mov	r0, r2
 8101062:	4619      	mov	r1, r3
 8101064:	f04f 0200 	mov.w	r2, #0
 8101068:	4b21      	ldr	r3, [pc, #132]	; (81010f0 <main+0x2c0>)
 810106a:	f7ff fa65 	bl	8100538 <__adddf3>
 810106e:	4602      	mov	r2, r0
 8101070:	460b      	mov	r3, r1
 8101072:	4920      	ldr	r1, [pc, #128]	; (81010f4 <main+0x2c4>)
 8101074:	e9c1 2300 	strd	r2, r3, [r1]
        
        if(u > (100-42))
 8101078:	4b1e      	ldr	r3, [pc, #120]	; (81010f4 <main+0x2c4>)
 810107a:	e9d3 0100 	ldrd	r0, r1, [r3]
 810107e:	f04f 0200 	mov.w	r2, #0
 8101082:	4b1a      	ldr	r3, [pc, #104]	; (81010ec <main+0x2bc>)
 8101084:	f7ff fc8c 	bl	81009a0 <__aeabi_dcmpgt>
 8101088:	4603      	mov	r3, r0
 810108a:	2b00      	cmp	r3, #0
 810108c:	d034      	beq.n	81010f8 <main+0x2c8>
          u = 100-42;
 810108e:	4919      	ldr	r1, [pc, #100]	; (81010f4 <main+0x2c4>)
 8101090:	f04f 0200 	mov.w	r2, #0
 8101094:	4b15      	ldr	r3, [pc, #84]	; (81010ec <main+0x2bc>)
 8101096:	e9c1 2300 	strd	r2, r3, [r1]
 810109a:	e040      	b.n	810111e <main+0x2ee>
 810109c:	f3af 8000 	nop.w
 81010a0:	43e963dc 	.word	0x43e963dc
 81010a4:	3fa7d417 	.word	0x3fa7d417
 81010a8:	47ae147b 	.word	0x47ae147b
 81010ac:	3f847ae1 	.word	0x3f847ae1
 81010b0:	30553261 	.word	0x30553261
 81010b4:	400aa92a 	.word	0x400aa92a
 81010b8:	58024400 	.word	0x58024400
 81010bc:	e000ed00 	.word	0xe000ed00
 81010c0:	58026400 	.word	0x58026400
 81010c4:	10000250 	.word	0x10000250
 81010c8:	1000005c 	.word	0x1000005c
 81010cc:	100002e8 	.word	0x100002e8
 81010d0:	1000029c 	.word	0x1000029c
 81010d4:	38001000 	.word	0x38001000
 81010d8:	10000058 	.word	0x10000058
 81010dc:	10000052 	.word	0x10000052
 81010e0:	10000059 	.word	0x10000059
 81010e4:	10000038 	.word	0x10000038
 81010e8:	10000048 	.word	0x10000048
 81010ec:	404d0000 	.word	0x404d0000
 81010f0:	3fe00000 	.word	0x3fe00000
 81010f4:	10000030 	.word	0x10000030
        else if(u < (42-42))
 81010f8:	4b1a      	ldr	r3, [pc, #104]	; (8101164 <main+0x334>)
 81010fa:	e9d3 0100 	ldrd	r0, r1, [r3]
 81010fe:	f04f 0200 	mov.w	r2, #0
 8101102:	f04f 0300 	mov.w	r3, #0
 8101106:	f7ff fc2d 	bl	8100964 <__aeabi_dcmplt>
 810110a:	4603      	mov	r3, r0
 810110c:	2b00      	cmp	r3, #0
 810110e:	d006      	beq.n	810111e <main+0x2ee>
          u = 0;
 8101110:	4914      	ldr	r1, [pc, #80]	; (8101164 <main+0x334>)
 8101112:	f04f 0200 	mov.w	r2, #0
 8101116:	f04f 0300 	mov.w	r3, #0
 810111a:	e9c1 2300 	strd	r2, r3, [r1]

        u_ant = u;
 810111e:	4b11      	ldr	r3, [pc, #68]	; (8101164 <main+0x334>)
 8101120:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101124:	4910      	ldr	r1, [pc, #64]	; (8101168 <main+0x338>)
 8101126:	e9c1 2300 	strd	r2, r3, [r1]
        e_ant = e;
 810112a:	4b10      	ldr	r3, [pc, #64]	; (810116c <main+0x33c>)
 810112c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101130:	490f      	ldr	r1, [pc, #60]	; (8101170 <main+0x340>)
 8101132:	e9c1 2300 	strd	r2, r3, [r1]
        u_i_ant = u_i;
 8101136:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 810113a:	e9c7 2308 	strd	r2, r3, [r7, #32]

        pwm_out = u;
 810113e:	4b09      	ldr	r3, [pc, #36]	; (8101164 <main+0x334>)
 8101140:	e9d3 2300 	ldrd	r2, r3, [r3]
 8101144:	4610      	mov	r0, r2
 8101146:	4619      	mov	r1, r3
 8101148:	f7ff fc34 	bl	81009b4 <__aeabi_d2uiz>
 810114c:	4603      	mov	r3, r0
 810114e:	b2da      	uxtb	r2, r3
 8101150:	4b08      	ldr	r3, [pc, #32]	; (8101174 <main+0x344>)
 8101152:	701a      	strb	r2, [r3, #0]
      
      PWM_SetValue(pwm_out+42);
 8101154:	4b07      	ldr	r3, [pc, #28]	; (8101174 <main+0x344>)
 8101156:	781b      	ldrb	r3, [r3, #0]
 8101158:	f103 022a 	add.w	r2, r3, #42	; 0x2a
 810115c:	4b06      	ldr	r3, [pc, #24]	; (8101178 <main+0x348>)
 810115e:	681b      	ldr	r3, [r3, #0]
 8101160:	635a      	str	r2, [r3, #52]	; 0x34
    if(shared_data_ptr->flagR_from7to4 == 1)
 8101162:	e6da      	b.n	8100f1a <main+0xea>
 8101164:	10000030 	.word	0x10000030
 8101168:	10000048 	.word	0x10000048
 810116c:	10000038 	.word	0x10000038
 8101170:	10000040 	.word	0x10000040
 8101174:	1000005a 	.word	0x1000005a
 8101178:	1000029c 	.word	0x1000029c

0810117c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 810117c:	b480      	push	{r7}
 810117e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8101180:	b672      	cpsid	i
}
 8101182:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8101184:	e7fe      	b.n	8101184 <Error_Handler+0x8>
	...

08101188 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8101188:	b480      	push	{r7}
 810118a:	b083      	sub	sp, #12
 810118c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 810118e:	4b0a      	ldr	r3, [pc, #40]	; (81011b8 <HAL_MspInit+0x30>)
 8101190:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8101194:	4a08      	ldr	r2, [pc, #32]	; (81011b8 <HAL_MspInit+0x30>)
 8101196:	f043 0302 	orr.w	r3, r3, #2
 810119a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810119e:	4b06      	ldr	r3, [pc, #24]	; (81011b8 <HAL_MspInit+0x30>)
 81011a0:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 81011a4:	f003 0302 	and.w	r3, r3, #2
 81011a8:	607b      	str	r3, [r7, #4]
 81011aa:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 81011ac:	bf00      	nop
 81011ae:	370c      	adds	r7, #12
 81011b0:	46bd      	mov	sp, r7
 81011b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011b6:	4770      	bx	lr
 81011b8:	58024400 	.word	0x58024400

081011bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 81011bc:	b480      	push	{r7}
 81011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 81011c0:	e7fe      	b.n	81011c0 <NMI_Handler+0x4>

081011c2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 81011c2:	b480      	push	{r7}
 81011c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 81011c6:	e7fe      	b.n	81011c6 <HardFault_Handler+0x4>

081011c8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 81011c8:	b480      	push	{r7}
 81011ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 81011cc:	e7fe      	b.n	81011cc <MemManage_Handler+0x4>

081011ce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 81011ce:	b480      	push	{r7}
 81011d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 81011d2:	e7fe      	b.n	81011d2 <BusFault_Handler+0x4>

081011d4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 81011d4:	b480      	push	{r7}
 81011d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 81011d8:	e7fe      	b.n	81011d8 <UsageFault_Handler+0x4>

081011da <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 81011da:	b480      	push	{r7}
 81011dc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 81011de:	bf00      	nop
 81011e0:	46bd      	mov	sp, r7
 81011e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011e6:	4770      	bx	lr

081011e8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 81011e8:	b480      	push	{r7}
 81011ea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 81011ec:	bf00      	nop
 81011ee:	46bd      	mov	sp, r7
 81011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81011f4:	4770      	bx	lr

081011f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 81011f6:	b480      	push	{r7}
 81011f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 81011fa:	bf00      	nop
 81011fc:	46bd      	mov	sp, r7
 81011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101202:	4770      	bx	lr

08101204 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8101204:	b580      	push	{r7, lr}
 8101206:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8101208:	f000 faac 	bl	8101764 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 810120c:	bf00      	nop
 810120e:	bd80      	pop	{r7, pc}

08101210 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8101210:	b580      	push	{r7, lr}
 8101212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8101214:	4802      	ldr	r0, [pc, #8]	; (8101220 <ADC_IRQHandler+0x10>)
 8101216:	f000 ffb5 	bl	8102184 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 810121a:	bf00      	nop
 810121c:	bd80      	pop	{r7, pc}
 810121e:	bf00      	nop
 8101220:	1000005c 	.word	0x1000005c

08101224 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8101224:	b580      	push	{r7, lr}
 8101226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8101228:	4802      	ldr	r0, [pc, #8]	; (8101234 <TIM2_IRQHandler+0x10>)
 810122a:	f005 f96b 	bl	8106504 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 810122e:	bf00      	nop
 8101230:	bd80      	pop	{r7, pc}
 8101232:	bf00      	nop
 8101234:	100002e8 	.word	0x100002e8

08101238 <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8101238:	b580      	push	{r7, lr}
 810123a:	b09a      	sub	sp, #104	; 0x68
 810123c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 810123e:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8101242:	2200      	movs	r2, #0
 8101244:	601a      	str	r2, [r3, #0]
 8101246:	605a      	str	r2, [r3, #4]
 8101248:	609a      	str	r2, [r3, #8]
 810124a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 810124c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8101250:	2200      	movs	r2, #0
 8101252:	601a      	str	r2, [r3, #0]
 8101254:	605a      	str	r2, [r3, #4]
 8101256:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8101258:	f107 0330 	add.w	r3, r7, #48	; 0x30
 810125c:	2200      	movs	r2, #0
 810125e:	601a      	str	r2, [r3, #0]
 8101260:	605a      	str	r2, [r3, #4]
 8101262:	609a      	str	r2, [r3, #8]
 8101264:	60da      	str	r2, [r3, #12]
 8101266:	611a      	str	r2, [r3, #16]
 8101268:	615a      	str	r2, [r3, #20]
 810126a:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 810126c:	1d3b      	adds	r3, r7, #4
 810126e:	222c      	movs	r2, #44	; 0x2c
 8101270:	2100      	movs	r1, #0
 8101272:	4618      	mov	r0, r3
 8101274:	f006 fa04 	bl	8107680 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8101278:	4b43      	ldr	r3, [pc, #268]	; (8101388 <MX_TIM1_Init+0x150>)
 810127a:	4a44      	ldr	r2, [pc, #272]	; (810138c <MX_TIM1_Init+0x154>)
 810127c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 119;
 810127e:	4b42      	ldr	r3, [pc, #264]	; (8101388 <MX_TIM1_Init+0x150>)
 8101280:	2277      	movs	r2, #119	; 0x77
 8101282:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101284:	4b40      	ldr	r3, [pc, #256]	; (8101388 <MX_TIM1_Init+0x150>)
 8101286:	2200      	movs	r2, #0
 8101288:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 100;
 810128a:	4b3f      	ldr	r3, [pc, #252]	; (8101388 <MX_TIM1_Init+0x150>)
 810128c:	2264      	movs	r2, #100	; 0x64
 810128e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101290:	4b3d      	ldr	r3, [pc, #244]	; (8101388 <MX_TIM1_Init+0x150>)
 8101292:	2200      	movs	r2, #0
 8101294:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8101296:	4b3c      	ldr	r3, [pc, #240]	; (8101388 <MX_TIM1_Init+0x150>)
 8101298:	2200      	movs	r2, #0
 810129a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 810129c:	4b3a      	ldr	r3, [pc, #232]	; (8101388 <MX_TIM1_Init+0x150>)
 810129e:	2200      	movs	r2, #0
 81012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 81012a2:	4839      	ldr	r0, [pc, #228]	; (8101388 <MX_TIM1_Init+0x150>)
 81012a4:	f004 fe94 	bl	8105fd0 <HAL_TIM_Base_Init>
 81012a8:	4603      	mov	r3, r0
 81012aa:	2b00      	cmp	r3, #0
 81012ac:	d001      	beq.n	81012b2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 81012ae:	f7ff ff65 	bl	810117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81012b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81012b6:	65bb      	str	r3, [r7, #88]	; 0x58
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 81012b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 81012bc:	4619      	mov	r1, r3
 81012be:	4832      	ldr	r0, [pc, #200]	; (8101388 <MX_TIM1_Init+0x150>)
 81012c0:	f005 fb50 	bl	8106964 <HAL_TIM_ConfigClockSource>
 81012c4:	4603      	mov	r3, r0
 81012c6:	2b00      	cmp	r3, #0
 81012c8:	d001      	beq.n	81012ce <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 81012ca:	f7ff ff57 	bl	810117c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 81012ce:	482e      	ldr	r0, [pc, #184]	; (8101388 <MX_TIM1_Init+0x150>)
 81012d0:	f004 ffae 	bl	8106230 <HAL_TIM_PWM_Init>
 81012d4:	4603      	mov	r3, r0
 81012d6:	2b00      	cmp	r3, #0
 81012d8:	d001      	beq.n	81012de <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 81012da:	f7ff ff4f 	bl	810117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 81012de:	2300      	movs	r3, #0
 81012e0:	64fb      	str	r3, [r7, #76]	; 0x4c
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 81012e2:	2300      	movs	r3, #0
 81012e4:	653b      	str	r3, [r7, #80]	; 0x50
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 81012e6:	2300      	movs	r3, #0
 81012e8:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 81012ea:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 81012ee:	4619      	mov	r1, r3
 81012f0:	4825      	ldr	r0, [pc, #148]	; (8101388 <MX_TIM1_Init+0x150>)
 81012f2:	f006 f87d 	bl	81073f0 <HAL_TIMEx_MasterConfigSynchronization>
 81012f6:	4603      	mov	r3, r0
 81012f8:	2b00      	cmp	r3, #0
 81012fa:	d001      	beq.n	8101300 <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 81012fc:	f7ff ff3e 	bl	810117c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8101300:	2360      	movs	r3, #96	; 0x60
 8101302:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.Pulse = 0;
 8101304:	2300      	movs	r3, #0
 8101306:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8101308:	2300      	movs	r3, #0
 810130a:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 810130c:	2300      	movs	r3, #0
 810130e:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCFastMode = TIM_OCFAST_ENABLE;
 8101310:	2304      	movs	r3, #4
 8101312:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8101314:	2300      	movs	r3, #0
 8101316:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8101318:	2300      	movs	r3, #0
 810131a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 810131c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8101320:	2200      	movs	r2, #0
 8101322:	4619      	mov	r1, r3
 8101324:	4818      	ldr	r0, [pc, #96]	; (8101388 <MX_TIM1_Init+0x150>)
 8101326:	f005 fa0d 	bl	8106744 <HAL_TIM_PWM_ConfigChannel>
 810132a:	4603      	mov	r3, r0
 810132c:	2b00      	cmp	r3, #0
 810132e:	d001      	beq.n	8101334 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 8101330:	f7ff ff24 	bl	810117c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8101334:	2300      	movs	r3, #0
 8101336:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8101338:	2300      	movs	r3, #0
 810133a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 810133c:	2300      	movs	r3, #0
 810133e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8101340:	2300      	movs	r3, #0
 8101342:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8101344:	2300      	movs	r3, #0
 8101346:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8101348:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 810134c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 810134e:	2300      	movs	r3, #0
 8101350:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8101352:	2300      	movs	r3, #0
 8101354:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8101356:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 810135a:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 810135c:	2300      	movs	r3, #0
 810135e:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8101360:	2300      	movs	r3, #0
 8101362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8101364:	1d3b      	adds	r3, r7, #4
 8101366:	4619      	mov	r1, r3
 8101368:	4807      	ldr	r0, [pc, #28]	; (8101388 <MX_TIM1_Init+0x150>)
 810136a:	f006 f8c9 	bl	8107500 <HAL_TIMEx_ConfigBreakDeadTime>
 810136e:	4603      	mov	r3, r0
 8101370:	2b00      	cmp	r3, #0
 8101372:	d001      	beq.n	8101378 <MX_TIM1_Init+0x140>
  {
    Error_Handler();
 8101374:	f7ff ff02 	bl	810117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8101378:	4803      	ldr	r0, [pc, #12]	; (8101388 <MX_TIM1_Init+0x150>)
 810137a:	f000 f8f9 	bl	8101570 <HAL_TIM_MspPostInit>

}
 810137e:	bf00      	nop
 8101380:	3768      	adds	r7, #104	; 0x68
 8101382:	46bd      	mov	sp, r7
 8101384:	bd80      	pop	{r7, pc}
 8101386:	bf00      	nop
 8101388:	1000029c 	.word	0x1000029c
 810138c:	40010000 	.word	0x40010000

08101390 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8101390:	b580      	push	{r7, lr}
 8101392:	b088      	sub	sp, #32
 8101394:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101396:	f107 0310 	add.w	r3, r7, #16
 810139a:	2200      	movs	r2, #0
 810139c:	601a      	str	r2, [r3, #0]
 810139e:	605a      	str	r2, [r3, #4]
 81013a0:	609a      	str	r2, [r3, #8]
 81013a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 81013a4:	1d3b      	adds	r3, r7, #4
 81013a6:	2200      	movs	r2, #0
 81013a8:	601a      	str	r2, [r3, #0]
 81013aa:	605a      	str	r2, [r3, #4]
 81013ac:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 81013ae:	4b1e      	ldr	r3, [pc, #120]	; (8101428 <MX_TIM2_Init+0x98>)
 81013b0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 81013b4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 119;
 81013b6:	4b1c      	ldr	r3, [pc, #112]	; (8101428 <MX_TIM2_Init+0x98>)
 81013b8:	2277      	movs	r2, #119	; 0x77
 81013ba:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 81013bc:	4b1a      	ldr	r3, [pc, #104]	; (8101428 <MX_TIM2_Init+0x98>)
 81013be:	2200      	movs	r2, #0
 81013c0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9999;
 81013c2:	4b19      	ldr	r3, [pc, #100]	; (8101428 <MX_TIM2_Init+0x98>)
 81013c4:	f242 720f 	movw	r2, #9999	; 0x270f
 81013c8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 81013ca:	4b17      	ldr	r3, [pc, #92]	; (8101428 <MX_TIM2_Init+0x98>)
 81013cc:	2200      	movs	r2, #0
 81013ce:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 81013d0:	4b15      	ldr	r3, [pc, #84]	; (8101428 <MX_TIM2_Init+0x98>)
 81013d2:	2200      	movs	r2, #0
 81013d4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 81013d6:	4814      	ldr	r0, [pc, #80]	; (8101428 <MX_TIM2_Init+0x98>)
 81013d8:	f004 fdfa 	bl	8105fd0 <HAL_TIM_Base_Init>
 81013dc:	4603      	mov	r3, r0
 81013de:	2b00      	cmp	r3, #0
 81013e0:	d001      	beq.n	81013e6 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 81013e2:	f7ff fecb 	bl	810117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 81013e6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 81013ea:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 81013ec:	f107 0310 	add.w	r3, r7, #16
 81013f0:	4619      	mov	r1, r3
 81013f2:	480d      	ldr	r0, [pc, #52]	; (8101428 <MX_TIM2_Init+0x98>)
 81013f4:	f005 fab6 	bl	8106964 <HAL_TIM_ConfigClockSource>
 81013f8:	4603      	mov	r3, r0
 81013fa:	2b00      	cmp	r3, #0
 81013fc:	d001      	beq.n	8101402 <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 81013fe:	f7ff febd 	bl	810117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8101402:	2300      	movs	r3, #0
 8101404:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8101406:	2300      	movs	r3, #0
 8101408:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 810140a:	1d3b      	adds	r3, r7, #4
 810140c:	4619      	mov	r1, r3
 810140e:	4806      	ldr	r0, [pc, #24]	; (8101428 <MX_TIM2_Init+0x98>)
 8101410:	f005 ffee 	bl	81073f0 <HAL_TIMEx_MasterConfigSynchronization>
 8101414:	4603      	mov	r3, r0
 8101416:	2b00      	cmp	r3, #0
 8101418:	d001      	beq.n	810141e <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 810141a:	f7ff feaf 	bl	810117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 810141e:	bf00      	nop
 8101420:	3720      	adds	r7, #32
 8101422:	46bd      	mov	sp, r7
 8101424:	bd80      	pop	{r7, pc}
 8101426:	bf00      	nop
 8101428:	100002e8 	.word	0x100002e8

0810142c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 810142c:	b580      	push	{r7, lr}
 810142e:	b088      	sub	sp, #32
 8101430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8101432:	f107 0310 	add.w	r3, r7, #16
 8101436:	2200      	movs	r2, #0
 8101438:	601a      	str	r2, [r3, #0]
 810143a:	605a      	str	r2, [r3, #4]
 810143c:	609a      	str	r2, [r3, #8]
 810143e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8101440:	1d3b      	adds	r3, r7, #4
 8101442:	2200      	movs	r2, #0
 8101444:	601a      	str	r2, [r3, #0]
 8101446:	605a      	str	r2, [r3, #4]
 8101448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 810144a:	4b1d      	ldr	r3, [pc, #116]	; (81014c0 <MX_TIM3_Init+0x94>)
 810144c:	4a1d      	ldr	r2, [pc, #116]	; (81014c4 <MX_TIM3_Init+0x98>)
 810144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 119;
 8101450:	4b1b      	ldr	r3, [pc, #108]	; (81014c0 <MX_TIM3_Init+0x94>)
 8101452:	2277      	movs	r2, #119	; 0x77
 8101454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8101456:	4b1a      	ldr	r3, [pc, #104]	; (81014c0 <MX_TIM3_Init+0x94>)
 8101458:	2200      	movs	r2, #0
 810145a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 810145c:	4b18      	ldr	r3, [pc, #96]	; (81014c0 <MX_TIM3_Init+0x94>)
 810145e:	2263      	movs	r2, #99	; 0x63
 8101460:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8101462:	4b17      	ldr	r3, [pc, #92]	; (81014c0 <MX_TIM3_Init+0x94>)
 8101464:	2200      	movs	r2, #0
 8101466:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8101468:	4b15      	ldr	r3, [pc, #84]	; (81014c0 <MX_TIM3_Init+0x94>)
 810146a:	2200      	movs	r2, #0
 810146c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 810146e:	4814      	ldr	r0, [pc, #80]	; (81014c0 <MX_TIM3_Init+0x94>)
 8101470:	f004 fdae 	bl	8105fd0 <HAL_TIM_Base_Init>
 8101474:	4603      	mov	r3, r0
 8101476:	2b00      	cmp	r3, #0
 8101478:	d001      	beq.n	810147e <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 810147a:	f7ff fe7f 	bl	810117c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 810147e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8101482:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8101484:	f107 0310 	add.w	r3, r7, #16
 8101488:	4619      	mov	r1, r3
 810148a:	480d      	ldr	r0, [pc, #52]	; (81014c0 <MX_TIM3_Init+0x94>)
 810148c:	f005 fa6a 	bl	8106964 <HAL_TIM_ConfigClockSource>
 8101490:	4603      	mov	r3, r0
 8101492:	2b00      	cmp	r3, #0
 8101494:	d001      	beq.n	810149a <MX_TIM3_Init+0x6e>
  {
    Error_Handler();
 8101496:	f7ff fe71 	bl	810117c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 810149a:	2320      	movs	r3, #32
 810149c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 810149e:	2300      	movs	r3, #0
 81014a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 81014a2:	1d3b      	adds	r3, r7, #4
 81014a4:	4619      	mov	r1, r3
 81014a6:	4806      	ldr	r0, [pc, #24]	; (81014c0 <MX_TIM3_Init+0x94>)
 81014a8:	f005 ffa2 	bl	81073f0 <HAL_TIMEx_MasterConfigSynchronization>
 81014ac:	4603      	mov	r3, r0
 81014ae:	2b00      	cmp	r3, #0
 81014b0:	d001      	beq.n	81014b6 <MX_TIM3_Init+0x8a>
  {
    Error_Handler();
 81014b2:	f7ff fe63 	bl	810117c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 81014b6:	bf00      	nop
 81014b8:	3720      	adds	r7, #32
 81014ba:	46bd      	mov	sp, r7
 81014bc:	bd80      	pop	{r7, pc}
 81014be:	bf00      	nop
 81014c0:	10000250 	.word	0x10000250
 81014c4:	40000400 	.word	0x40000400

081014c8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 81014c8:	b580      	push	{r7, lr}
 81014ca:	b086      	sub	sp, #24
 81014cc:	af00      	add	r7, sp, #0
 81014ce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 81014d0:	687b      	ldr	r3, [r7, #4]
 81014d2:	681b      	ldr	r3, [r3, #0]
 81014d4:	4a23      	ldr	r2, [pc, #140]	; (8101564 <HAL_TIM_Base_MspInit+0x9c>)
 81014d6:	4293      	cmp	r3, r2
 81014d8:	d10f      	bne.n	81014fa <HAL_TIM_Base_MspInit+0x32>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 81014da:	4b23      	ldr	r3, [pc, #140]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 81014dc:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014e0:	4a21      	ldr	r2, [pc, #132]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 81014e2:	f043 0301 	orr.w	r3, r3, #1
 81014e6:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 81014ea:	4b1f      	ldr	r3, [pc, #124]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 81014ec:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 81014f0:	f003 0301 	and.w	r3, r3, #1
 81014f4:	617b      	str	r3, [r7, #20]
 81014f6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 81014f8:	e030      	b.n	810155c <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM2)
 81014fa:	687b      	ldr	r3, [r7, #4]
 81014fc:	681b      	ldr	r3, [r3, #0]
 81014fe:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8101502:	d117      	bne.n	8101534 <HAL_TIM_Base_MspInit+0x6c>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8101504:	4b18      	ldr	r3, [pc, #96]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 8101506:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810150a:	4a17      	ldr	r2, [pc, #92]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 810150c:	f043 0301 	orr.w	r3, r3, #1
 8101510:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8101514:	4b14      	ldr	r3, [pc, #80]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 8101516:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 810151a:	f003 0301 	and.w	r3, r3, #1
 810151e:	613b      	str	r3, [r7, #16]
 8101520:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8101522:	2200      	movs	r2, #0
 8101524:	2100      	movs	r1, #0
 8101526:	201c      	movs	r0, #28
 8101528:	f001 ff73 	bl	8103412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 810152c:	201c      	movs	r0, #28
 810152e:	f001 ff8a 	bl	8103446 <HAL_NVIC_EnableIRQ>
}
 8101532:	e013      	b.n	810155c <HAL_TIM_Base_MspInit+0x94>
  else if(tim_baseHandle->Instance==TIM3)
 8101534:	687b      	ldr	r3, [r7, #4]
 8101536:	681b      	ldr	r3, [r3, #0]
 8101538:	4a0c      	ldr	r2, [pc, #48]	; (810156c <HAL_TIM_Base_MspInit+0xa4>)
 810153a:	4293      	cmp	r3, r2
 810153c:	d10e      	bne.n	810155c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM3_CLK_ENABLE();
 810153e:	4b0a      	ldr	r3, [pc, #40]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 8101540:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101544:	4a08      	ldr	r2, [pc, #32]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 8101546:	f043 0302 	orr.w	r3, r3, #2
 810154a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 810154e:	4b06      	ldr	r3, [pc, #24]	; (8101568 <HAL_TIM_Base_MspInit+0xa0>)
 8101550:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8101554:	f003 0302 	and.w	r3, r3, #2
 8101558:	60fb      	str	r3, [r7, #12]
 810155a:	68fb      	ldr	r3, [r7, #12]
}
 810155c:	bf00      	nop
 810155e:	3718      	adds	r7, #24
 8101560:	46bd      	mov	sp, r7
 8101562:	bd80      	pop	{r7, pc}
 8101564:	40010000 	.word	0x40010000
 8101568:	58024400 	.word	0x58024400
 810156c:	40000400 	.word	0x40000400

08101570 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8101570:	b580      	push	{r7, lr}
 8101572:	b088      	sub	sp, #32
 8101574:	af00      	add	r7, sp, #0
 8101576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8101578:	f107 030c 	add.w	r3, r7, #12
 810157c:	2200      	movs	r2, #0
 810157e:	601a      	str	r2, [r3, #0]
 8101580:	605a      	str	r2, [r3, #4]
 8101582:	609a      	str	r2, [r3, #8]
 8101584:	60da      	str	r2, [r3, #12]
 8101586:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8101588:	687b      	ldr	r3, [r7, #4]
 810158a:	681b      	ldr	r3, [r3, #0]
 810158c:	4a13      	ldr	r2, [pc, #76]	; (81015dc <HAL_TIM_MspPostInit+0x6c>)
 810158e:	4293      	cmp	r3, r2
 8101590:	d11f      	bne.n	81015d2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8101592:	4b13      	ldr	r3, [pc, #76]	; (81015e0 <HAL_TIM_MspPostInit+0x70>)
 8101594:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8101598:	4a11      	ldr	r2, [pc, #68]	; (81015e0 <HAL_TIM_MspPostInit+0x70>)
 810159a:	f043 0310 	orr.w	r3, r3, #16
 810159e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 81015a2:	4b0f      	ldr	r3, [pc, #60]	; (81015e0 <HAL_TIM_MspPostInit+0x70>)
 81015a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 81015a8:	f003 0310 	and.w	r3, r3, #16
 81015ac:	60bb      	str	r3, [r7, #8]
 81015ae:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 81015b0:	f44f 7300 	mov.w	r3, #512	; 0x200
 81015b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 81015b6:	2302      	movs	r3, #2
 81015b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 81015ba:	2300      	movs	r3, #0
 81015bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 81015be:	2300      	movs	r3, #0
 81015c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 81015c2:	2301      	movs	r3, #1
 81015c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 81015c6:	f107 030c 	add.w	r3, r7, #12
 81015ca:	4619      	mov	r1, r3
 81015cc:	4805      	ldr	r0, [pc, #20]	; (81015e4 <HAL_TIM_MspPostInit+0x74>)
 81015ce:	f001 ff69 	bl	81034a4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 81015d2:	bf00      	nop
 81015d4:	3720      	adds	r7, #32
 81015d6:	46bd      	mov	sp, r7
 81015d8:	bd80      	pop	{r7, pc}
 81015da:	bf00      	nop
 81015dc:	40010000 	.word	0x40010000
 81015e0:	58024400 	.word	0x58024400
 81015e4:	58021000 	.word	0x58021000

081015e8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 81015e8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8101620 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 81015ec:	f7ff fa02 	bl	81009f4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 81015f0:	480c      	ldr	r0, [pc, #48]	; (8101624 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 81015f2:	490d      	ldr	r1, [pc, #52]	; (8101628 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 81015f4:	4a0d      	ldr	r2, [pc, #52]	; (810162c <LoopFillZerobss+0x1a>)
  movs r3, #0
 81015f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 81015f8:	e002      	b.n	8101600 <LoopCopyDataInit>

081015fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 81015fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 81015fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 81015fe:	3304      	adds	r3, #4

08101600 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8101600:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8101602:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8101604:	d3f9      	bcc.n	81015fa <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8101606:	4a0a      	ldr	r2, [pc, #40]	; (8101630 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8101608:	4c0a      	ldr	r4, [pc, #40]	; (8101634 <LoopFillZerobss+0x22>)
  movs r3, #0
 810160a:	2300      	movs	r3, #0
  b LoopFillZerobss
 810160c:	e001      	b.n	8101612 <LoopFillZerobss>

0810160e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 810160e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8101610:	3204      	adds	r2, #4

08101612 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8101612:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8101614:	d3fb      	bcc.n	810160e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8101616:	f006 f80f 	bl	8107638 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 810161a:	f7ff fc09 	bl	8100e30 <main>
  bx  lr
 810161e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8101620:	10048000 	.word	0x10048000
  ldr r0, =_sdata
 8101624:	10000000 	.word	0x10000000
  ldr r1, =_edata
 8101628:	10000010 	.word	0x10000010
  ldr r2, =_sidata
 810162c:	081076c0 	.word	0x081076c0
  ldr r2, =_sbss
 8101630:	10000010 	.word	0x10000010
  ldr r4, =_ebss
 8101634:	10000338 	.word	0x10000338

08101638 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8101638:	e7fe      	b.n	8101638 <ADC3_IRQHandler>
	...

0810163c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 810163c:	b580      	push	{r7, lr}
 810163e:	b082      	sub	sp, #8
 8101640:	af00      	add	r7, sp, #0

uint32_t common_system_clock;

#if defined(DUAL_CORE) && defined(CORE_CM4)
   /* Configure Cortex-M4 Instruction cache through ART accelerator */
   __HAL_RCC_ART_CLK_ENABLE();                   /* Enable the Cortex-M4 ART Clock */
 8101642:	4b28      	ldr	r3, [pc, #160]	; (81016e4 <HAL_Init+0xa8>)
 8101644:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101648:	4a26      	ldr	r2, [pc, #152]	; (81016e4 <HAL_Init+0xa8>)
 810164a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 810164e:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8101652:	4b24      	ldr	r3, [pc, #144]	; (81016e4 <HAL_Init+0xa8>)
 8101654:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8101658:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 810165c:	603b      	str	r3, [r7, #0]
 810165e:	683b      	ldr	r3, [r7, #0]
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
 8101660:	4b21      	ldr	r3, [pc, #132]	; (81016e8 <HAL_Init+0xac>)
 8101662:	681b      	ldr	r3, [r3, #0]
 8101664:	f423 237f 	bic.w	r3, r3, #1044480	; 0xff000
 8101668:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 810166c:	4a1e      	ldr	r2, [pc, #120]	; (81016e8 <HAL_Init+0xac>)
 810166e:	f443 4301 	orr.w	r3, r3, #33024	; 0x8100
 8101672:	6013      	str	r3, [r2, #0]
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
 8101674:	4b1c      	ldr	r3, [pc, #112]	; (81016e8 <HAL_Init+0xac>)
 8101676:	681b      	ldr	r3, [r3, #0]
 8101678:	4a1b      	ldr	r2, [pc, #108]	; (81016e8 <HAL_Init+0xac>)
 810167a:	f043 0301 	orr.w	r3, r3, #1
 810167e:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8101680:	2003      	movs	r0, #3
 8101682:	f001 febb 	bl	81033fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8101686:	f002 f971 	bl	810396c <HAL_RCC_GetSysClockFreq>
 810168a:	4602      	mov	r2, r0
 810168c:	4b15      	ldr	r3, [pc, #84]	; (81016e4 <HAL_Init+0xa8>)
 810168e:	699b      	ldr	r3, [r3, #24]
 8101690:	0a1b      	lsrs	r3, r3, #8
 8101692:	f003 030f 	and.w	r3, r3, #15
 8101696:	4915      	ldr	r1, [pc, #84]	; (81016ec <HAL_Init+0xb0>)
 8101698:	5ccb      	ldrb	r3, [r1, r3]
 810169a:	f003 031f 	and.w	r3, r3, #31
 810169e:	fa22 f303 	lsr.w	r3, r2, r3
 81016a2:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 81016a4:	4b0f      	ldr	r3, [pc, #60]	; (81016e4 <HAL_Init+0xa8>)
 81016a6:	699b      	ldr	r3, [r3, #24]
 81016a8:	f003 030f 	and.w	r3, r3, #15
 81016ac:	4a0f      	ldr	r2, [pc, #60]	; (81016ec <HAL_Init+0xb0>)
 81016ae:	5cd3      	ldrb	r3, [r2, r3]
 81016b0:	f003 031f 	and.w	r3, r3, #31
 81016b4:	687a      	ldr	r2, [r7, #4]
 81016b6:	fa22 f303 	lsr.w	r3, r2, r3
 81016ba:	4a0d      	ldr	r2, [pc, #52]	; (81016f0 <HAL_Init+0xb4>)
 81016bc:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 81016be:	4b0c      	ldr	r3, [pc, #48]	; (81016f0 <HAL_Init+0xb4>)
 81016c0:	681b      	ldr	r3, [r3, #0]
 81016c2:	4a0c      	ldr	r2, [pc, #48]	; (81016f4 <HAL_Init+0xb8>)
 81016c4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 81016c6:	2000      	movs	r0, #0
 81016c8:	f000 f816 	bl	81016f8 <HAL_InitTick>
 81016cc:	4603      	mov	r3, r0
 81016ce:	2b00      	cmp	r3, #0
 81016d0:	d001      	beq.n	81016d6 <HAL_Init+0x9a>
  {
    return HAL_ERROR;
 81016d2:	2301      	movs	r3, #1
 81016d4:	e002      	b.n	81016dc <HAL_Init+0xa0>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 81016d6:	f7ff fd57 	bl	8101188 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 81016da:	2300      	movs	r3, #0
}
 81016dc:	4618      	mov	r0, r3
 81016de:	3708      	adds	r7, #8
 81016e0:	46bd      	mov	sp, r7
 81016e2:	bd80      	pop	{r7, pc}
 81016e4:	58024400 	.word	0x58024400
 81016e8:	40024400 	.word	0x40024400
 81016ec:	081076a8 	.word	0x081076a8
 81016f0:	10000004 	.word	0x10000004
 81016f4:	10000000 	.word	0x10000000

081016f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 81016f8:	b580      	push	{r7, lr}
 81016fa:	b082      	sub	sp, #8
 81016fc:	af00      	add	r7, sp, #0
 81016fe:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8101700:	4b15      	ldr	r3, [pc, #84]	; (8101758 <HAL_InitTick+0x60>)
 8101702:	781b      	ldrb	r3, [r3, #0]
 8101704:	2b00      	cmp	r3, #0
 8101706:	d101      	bne.n	810170c <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8101708:	2301      	movs	r3, #1
 810170a:	e021      	b.n	8101750 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 810170c:	4b13      	ldr	r3, [pc, #76]	; (810175c <HAL_InitTick+0x64>)
 810170e:	681a      	ldr	r2, [r3, #0]
 8101710:	4b11      	ldr	r3, [pc, #68]	; (8101758 <HAL_InitTick+0x60>)
 8101712:	781b      	ldrb	r3, [r3, #0]
 8101714:	4619      	mov	r1, r3
 8101716:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 810171a:	fbb3 f3f1 	udiv	r3, r3, r1
 810171e:	fbb2 f3f3 	udiv	r3, r2, r3
 8101722:	4618      	mov	r0, r3
 8101724:	f001 fe9d 	bl	8103462 <HAL_SYSTICK_Config>
 8101728:	4603      	mov	r3, r0
 810172a:	2b00      	cmp	r3, #0
 810172c:	d001      	beq.n	8101732 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 810172e:	2301      	movs	r3, #1
 8101730:	e00e      	b.n	8101750 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8101732:	687b      	ldr	r3, [r7, #4]
 8101734:	2b0f      	cmp	r3, #15
 8101736:	d80a      	bhi.n	810174e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8101738:	2200      	movs	r2, #0
 810173a:	6879      	ldr	r1, [r7, #4]
 810173c:	f04f 30ff 	mov.w	r0, #4294967295
 8101740:	f001 fe67 	bl	8103412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8101744:	4a06      	ldr	r2, [pc, #24]	; (8101760 <HAL_InitTick+0x68>)
 8101746:	687b      	ldr	r3, [r7, #4]
 8101748:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 810174a:	2300      	movs	r3, #0
 810174c:	e000      	b.n	8101750 <HAL_InitTick+0x58>
    return HAL_ERROR;
 810174e:	2301      	movs	r3, #1
}
 8101750:	4618      	mov	r0, r3
 8101752:	3708      	adds	r7, #8
 8101754:	46bd      	mov	sp, r7
 8101756:	bd80      	pop	{r7, pc}
 8101758:	1000000c 	.word	0x1000000c
 810175c:	10000000 	.word	0x10000000
 8101760:	10000008 	.word	0x10000008

08101764 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8101764:	b480      	push	{r7}
 8101766:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8101768:	4b06      	ldr	r3, [pc, #24]	; (8101784 <HAL_IncTick+0x20>)
 810176a:	781b      	ldrb	r3, [r3, #0]
 810176c:	461a      	mov	r2, r3
 810176e:	4b06      	ldr	r3, [pc, #24]	; (8101788 <HAL_IncTick+0x24>)
 8101770:	681b      	ldr	r3, [r3, #0]
 8101772:	4413      	add	r3, r2
 8101774:	4a04      	ldr	r2, [pc, #16]	; (8101788 <HAL_IncTick+0x24>)
 8101776:	6013      	str	r3, [r2, #0]
}
 8101778:	bf00      	nop
 810177a:	46bd      	mov	sp, r7
 810177c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101780:	4770      	bx	lr
 8101782:	bf00      	nop
 8101784:	1000000c 	.word	0x1000000c
 8101788:	10000334 	.word	0x10000334

0810178c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 810178c:	b480      	push	{r7}
 810178e:	af00      	add	r7, sp, #0
  return uwTick;
 8101790:	4b03      	ldr	r3, [pc, #12]	; (81017a0 <HAL_GetTick+0x14>)
 8101792:	681b      	ldr	r3, [r3, #0]
}
 8101794:	4618      	mov	r0, r3
 8101796:	46bd      	mov	sp, r7
 8101798:	f85d 7b04 	ldr.w	r7, [sp], #4
 810179c:	4770      	bx	lr
 810179e:	bf00      	nop
 81017a0:	10000334 	.word	0x10000334

081017a4 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 81017a4:	b480      	push	{r7}
 81017a6:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 81017a8:	4b03      	ldr	r3, [pc, #12]	; (81017b8 <HAL_GetREVID+0x14>)
 81017aa:	681b      	ldr	r3, [r3, #0]
 81017ac:	0c1b      	lsrs	r3, r3, #16
}
 81017ae:	4618      	mov	r0, r3
 81017b0:	46bd      	mov	sp, r7
 81017b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017b6:	4770      	bx	lr
 81017b8:	5c001000 	.word	0x5c001000

081017bc <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 81017bc:	b480      	push	{r7}
 81017be:	b083      	sub	sp, #12
 81017c0:	af00      	add	r7, sp, #0
 81017c2:	6078      	str	r0, [r7, #4]
 81017c4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 81017c6:	687b      	ldr	r3, [r7, #4]
 81017c8:	689b      	ldr	r3, [r3, #8]
 81017ca:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 81017ce:	683b      	ldr	r3, [r7, #0]
 81017d0:	431a      	orrs	r2, r3
 81017d2:	687b      	ldr	r3, [r7, #4]
 81017d4:	609a      	str	r2, [r3, #8]
}
 81017d6:	bf00      	nop
 81017d8:	370c      	adds	r7, #12
 81017da:	46bd      	mov	sp, r7
 81017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 81017e0:	4770      	bx	lr

081017e2 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 81017e2:	b480      	push	{r7}
 81017e4:	b083      	sub	sp, #12
 81017e6:	af00      	add	r7, sp, #0
 81017e8:	6078      	str	r0, [r7, #4]
 81017ea:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 81017ec:	687b      	ldr	r3, [r7, #4]
 81017ee:	689b      	ldr	r3, [r3, #8]
 81017f0:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 81017f4:	683b      	ldr	r3, [r7, #0]
 81017f6:	431a      	orrs	r2, r3
 81017f8:	687b      	ldr	r3, [r7, #4]
 81017fa:	609a      	str	r2, [r3, #8]
}
 81017fc:	bf00      	nop
 81017fe:	370c      	adds	r7, #12
 8101800:	46bd      	mov	sp, r7
 8101802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101806:	4770      	bx	lr

08101808 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101808:	b480      	push	{r7}
 810180a:	b083      	sub	sp, #12
 810180c:	af00      	add	r7, sp, #0
 810180e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8101810:	687b      	ldr	r3, [r7, #4]
 8101812:	689b      	ldr	r3, [r3, #8]
 8101814:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8101818:	4618      	mov	r0, r3
 810181a:	370c      	adds	r7, #12
 810181c:	46bd      	mov	sp, r7
 810181e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101822:	4770      	bx	lr

08101824 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x1FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8101824:	b480      	push	{r7}
 8101826:	b087      	sub	sp, #28
 8101828:	af00      	add	r7, sp, #0
 810182a:	60f8      	str	r0, [r7, #12]
 810182c:	60b9      	str	r1, [r7, #8]
 810182e:	607a      	str	r2, [r7, #4]
 8101830:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8101832:	68fb      	ldr	r3, [r7, #12]
 8101834:	3360      	adds	r3, #96	; 0x60
 8101836:	461a      	mov	r2, r3
 8101838:	68bb      	ldr	r3, [r7, #8]
 810183a:	009b      	lsls	r3, r3, #2
 810183c:	4413      	add	r3, r2
 810183e:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 8101840:	697b      	ldr	r3, [r7, #20]
 8101842:	681b      	ldr	r3, [r3, #0]
 8101844:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 8101848:	687b      	ldr	r3, [r7, #4]
 810184a:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 810184e:	683b      	ldr	r3, [r7, #0]
 8101850:	430b      	orrs	r3, r1
 8101852:	431a      	orrs	r2, r3
 8101854:	697b      	ldr	r3, [r7, #20]
 8101856:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8101858:	bf00      	nop
 810185a:	371c      	adds	r7, #28
 810185c:	46bd      	mov	sp, r7
 810185e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101862:	4770      	bx	lr

08101864 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8101864:	b480      	push	{r7}
 8101866:	b085      	sub	sp, #20
 8101868:	af00      	add	r7, sp, #0
 810186a:	60f8      	str	r0, [r7, #12]
 810186c:	60b9      	str	r1, [r7, #8]
 810186e:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 8101870:	68fb      	ldr	r3, [r7, #12]
 8101872:	691b      	ldr	r3, [r3, #16]
 8101874:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8101878:	68bb      	ldr	r3, [r7, #8]
 810187a:	f003 031f 	and.w	r3, r3, #31
 810187e:	6879      	ldr	r1, [r7, #4]
 8101880:	fa01 f303 	lsl.w	r3, r1, r3
 8101884:	431a      	orrs	r2, r3
 8101886:	68fb      	ldr	r3, [r7, #12]
 8101888:	611a      	str	r2, [r3, #16]
}
 810188a:	bf00      	nop
 810188c:	3714      	adds	r7, #20
 810188e:	46bd      	mov	sp, r7
 8101890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101894:	4770      	bx	lr

08101896 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8101896:	b480      	push	{r7}
 8101898:	b087      	sub	sp, #28
 810189a:	af00      	add	r7, sp, #0
 810189c:	60f8      	str	r0, [r7, #12]
 810189e:	60b9      	str	r1, [r7, #8]
 81018a0:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 81018a2:	68fb      	ldr	r3, [r7, #12]
 81018a4:	3360      	adds	r3, #96	; 0x60
 81018a6:	461a      	mov	r2, r3
 81018a8:	68bb      	ldr	r3, [r7, #8]
 81018aa:	009b      	lsls	r3, r3, #2
 81018ac:	4413      	add	r3, r2
 81018ae:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 81018b0:	697b      	ldr	r3, [r7, #20]
 81018b2:	681b      	ldr	r3, [r3, #0]
 81018b4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 81018b8:	687b      	ldr	r3, [r7, #4]
 81018ba:	431a      	orrs	r2, r3
 81018bc:	697b      	ldr	r3, [r7, #20]
 81018be:	601a      	str	r2, [r3, #0]
  }
}
 81018c0:	bf00      	nop
 81018c2:	371c      	adds	r7, #28
 81018c4:	46bd      	mov	sp, r7
 81018c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018ca:	4770      	bx	lr

081018cc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 81018cc:	b480      	push	{r7}
 81018ce:	b083      	sub	sp, #12
 81018d0:	af00      	add	r7, sp, #0
 81018d2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 81018d4:	687b      	ldr	r3, [r7, #4]
 81018d6:	68db      	ldr	r3, [r3, #12]
 81018d8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 81018dc:	2b00      	cmp	r3, #0
 81018de:	d101      	bne.n	81018e4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 81018e0:	2301      	movs	r3, #1
 81018e2:	e000      	b.n	81018e6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 81018e4:	2300      	movs	r3, #0
}
 81018e6:	4618      	mov	r0, r3
 81018e8:	370c      	adds	r7, #12
 81018ea:	46bd      	mov	sp, r7
 81018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81018f0:	4770      	bx	lr

081018f2 <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 81018f2:	b480      	push	{r7}
 81018f4:	b087      	sub	sp, #28
 81018f6:	af00      	add	r7, sp, #0
 81018f8:	60f8      	str	r0, [r7, #12]
 81018fa:	60b9      	str	r1, [r7, #8]
 81018fc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 81018fe:	68fb      	ldr	r3, [r7, #12]
 8101900:	3330      	adds	r3, #48	; 0x30
 8101902:	461a      	mov	r2, r3
 8101904:	68bb      	ldr	r3, [r7, #8]
 8101906:	0a1b      	lsrs	r3, r3, #8
 8101908:	009b      	lsls	r3, r3, #2
 810190a:	f003 030c 	and.w	r3, r3, #12
 810190e:	4413      	add	r3, r2
 8101910:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101912:	697b      	ldr	r3, [r7, #20]
 8101914:	681a      	ldr	r2, [r3, #0]
 8101916:	68bb      	ldr	r3, [r7, #8]
 8101918:	f003 031f 	and.w	r3, r3, #31
 810191c:	211f      	movs	r1, #31
 810191e:	fa01 f303 	lsl.w	r3, r1, r3
 8101922:	43db      	mvns	r3, r3
 8101924:	401a      	ands	r2, r3
 8101926:	687b      	ldr	r3, [r7, #4]
 8101928:	0e9b      	lsrs	r3, r3, #26
 810192a:	f003 011f 	and.w	r1, r3, #31
 810192e:	68bb      	ldr	r3, [r7, #8]
 8101930:	f003 031f 	and.w	r3, r3, #31
 8101934:	fa01 f303 	lsl.w	r3, r1, r3
 8101938:	431a      	orrs	r2, r3
 810193a:	697b      	ldr	r3, [r7, #20]
 810193c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 810193e:	bf00      	nop
 8101940:	371c      	adds	r7, #28
 8101942:	46bd      	mov	sp, r7
 8101944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101948:	4770      	bx	lr

0810194a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 810194a:	b480      	push	{r7}
 810194c:	b083      	sub	sp, #12
 810194e:	af00      	add	r7, sp, #0
 8101950:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8101952:	687b      	ldr	r3, [r7, #4]
 8101954:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8101956:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 810195a:	2b00      	cmp	r3, #0
 810195c:	d101      	bne.n	8101962 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 810195e:	2301      	movs	r3, #1
 8101960:	e000      	b.n	8101964 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8101962:	2300      	movs	r3, #0
}
 8101964:	4618      	mov	r0, r3
 8101966:	370c      	adds	r7, #12
 8101968:	46bd      	mov	sp, r7
 810196a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810196e:	4770      	bx	lr

08101970 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8101970:	b480      	push	{r7}
 8101972:	b087      	sub	sp, #28
 8101974:	af00      	add	r7, sp, #0
 8101976:	60f8      	str	r0, [r7, #12]
 8101978:	60b9      	str	r1, [r7, #8]
 810197a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 810197c:	68fb      	ldr	r3, [r7, #12]
 810197e:	3314      	adds	r3, #20
 8101980:	461a      	mov	r2, r3
 8101982:	68bb      	ldr	r3, [r7, #8]
 8101984:	0e5b      	lsrs	r3, r3, #25
 8101986:	009b      	lsls	r3, r3, #2
 8101988:	f003 0304 	and.w	r3, r3, #4
 810198c:	4413      	add	r3, r2
 810198e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8101990:	697b      	ldr	r3, [r7, #20]
 8101992:	681a      	ldr	r2, [r3, #0]
 8101994:	68bb      	ldr	r3, [r7, #8]
 8101996:	0d1b      	lsrs	r3, r3, #20
 8101998:	f003 031f 	and.w	r3, r3, #31
 810199c:	2107      	movs	r1, #7
 810199e:	fa01 f303 	lsl.w	r3, r1, r3
 81019a2:	43db      	mvns	r3, r3
 81019a4:	401a      	ands	r2, r3
 81019a6:	68bb      	ldr	r3, [r7, #8]
 81019a8:	0d1b      	lsrs	r3, r3, #20
 81019aa:	f003 031f 	and.w	r3, r3, #31
 81019ae:	6879      	ldr	r1, [r7, #4]
 81019b0:	fa01 f303 	lsl.w	r3, r1, r3
 81019b4:	431a      	orrs	r2, r3
 81019b6:	697b      	ldr	r3, [r7, #20]
 81019b8:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 81019ba:	bf00      	nop
 81019bc:	371c      	adds	r7, #28
 81019be:	46bd      	mov	sp, r7
 81019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81019c4:	4770      	bx	lr
	...

081019c8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 81019c8:	b480      	push	{r7}
 81019ca:	b085      	sub	sp, #20
 81019cc:	af00      	add	r7, sp, #0
 81019ce:	60f8      	str	r0, [r7, #12]
 81019d0:	60b9      	str	r1, [r7, #8]
 81019d2:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 81019d4:	68fb      	ldr	r3, [r7, #12]
 81019d6:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 81019da:	68bb      	ldr	r3, [r7, #8]
 81019dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81019e0:	43db      	mvns	r3, r3
 81019e2:	401a      	ands	r2, r3
 81019e4:	687b      	ldr	r3, [r7, #4]
 81019e6:	f003 0318 	and.w	r3, r3, #24
 81019ea:	4908      	ldr	r1, [pc, #32]	; (8101a0c <LL_ADC_SetChannelSingleDiff+0x44>)
 81019ec:	40d9      	lsrs	r1, r3
 81019ee:	68bb      	ldr	r3, [r7, #8]
 81019f0:	400b      	ands	r3, r1
 81019f2:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81019f6:	431a      	orrs	r2, r3
 81019f8:	68fb      	ldr	r3, [r7, #12]
 81019fa:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif
}
 81019fe:	bf00      	nop
 8101a00:	3714      	adds	r7, #20
 8101a02:	46bd      	mov	sp, r7
 8101a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a08:	4770      	bx	lr
 8101a0a:	bf00      	nop
 8101a0c:	000fffff 	.word	0x000fffff

08101a10 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101a10:	b480      	push	{r7}
 8101a12:	b083      	sub	sp, #12
 8101a14:	af00      	add	r7, sp, #0
 8101a16:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8101a18:	687b      	ldr	r3, [r7, #4]
 8101a1a:	689b      	ldr	r3, [r3, #8]
 8101a1c:	f003 031f 	and.w	r3, r3, #31
}
 8101a20:	4618      	mov	r0, r3
 8101a22:	370c      	adds	r7, #12
 8101a24:	46bd      	mov	sp, r7
 8101a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a2a:	4770      	bx	lr

08101a2c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8101a2c:	b480      	push	{r7}
 8101a2e:	b083      	sub	sp, #12
 8101a30:	af00      	add	r7, sp, #0
 8101a32:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 8101a34:	687b      	ldr	r3, [r7, #4]
 8101a36:	689b      	ldr	r3, [r3, #8]
 8101a38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 8101a3c:	4618      	mov	r0, r3
 8101a3e:	370c      	adds	r7, #12
 8101a40:	46bd      	mov	sp, r7
 8101a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a46:	4770      	bx	lr

08101a48 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8101a48:	b480      	push	{r7}
 8101a4a:	b083      	sub	sp, #12
 8101a4c:	af00      	add	r7, sp, #0
 8101a4e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8101a50:	687b      	ldr	r3, [r7, #4]
 8101a52:	689b      	ldr	r3, [r3, #8]
 8101a54:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8101a58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101a5c:	687a      	ldr	r2, [r7, #4]
 8101a5e:	6093      	str	r3, [r2, #8]
}
 8101a60:	bf00      	nop
 8101a62:	370c      	adds	r7, #12
 8101a64:	46bd      	mov	sp, r7
 8101a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a6a:	4770      	bx	lr

08101a6c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8101a6c:	b480      	push	{r7}
 8101a6e:	b083      	sub	sp, #12
 8101a70:	af00      	add	r7, sp, #0
 8101a72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8101a74:	687b      	ldr	r3, [r7, #4]
 8101a76:	689b      	ldr	r3, [r3, #8]
 8101a78:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8101a7c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8101a80:	d101      	bne.n	8101a86 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8101a82:	2301      	movs	r3, #1
 8101a84:	e000      	b.n	8101a88 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8101a86:	2300      	movs	r3, #0
}
 8101a88:	4618      	mov	r0, r3
 8101a8a:	370c      	adds	r7, #12
 8101a8c:	46bd      	mov	sp, r7
 8101a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101a92:	4770      	bx	lr

08101a94 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8101a94:	b480      	push	{r7}
 8101a96:	b083      	sub	sp, #12
 8101a98:	af00      	add	r7, sp, #0
 8101a9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101a9c:	687b      	ldr	r3, [r7, #4]
 8101a9e:	689b      	ldr	r3, [r3, #8]
 8101aa0:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8101aa4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101aa8:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8101aac:	687b      	ldr	r3, [r7, #4]
 8101aae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8101ab0:	bf00      	nop
 8101ab2:	370c      	adds	r7, #12
 8101ab4:	46bd      	mov	sp, r7
 8101ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101aba:	4770      	bx	lr

08101abc <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8101abc:	b480      	push	{r7}
 8101abe:	b083      	sub	sp, #12
 8101ac0:	af00      	add	r7, sp, #0
 8101ac2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8101ac4:	687b      	ldr	r3, [r7, #4]
 8101ac6:	689b      	ldr	r3, [r3, #8]
 8101ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8101acc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8101ad0:	d101      	bne.n	8101ad6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8101ad2:	2301      	movs	r3, #1
 8101ad4:	e000      	b.n	8101ad8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8101ad6:	2300      	movs	r3, #0
}
 8101ad8:	4618      	mov	r0, r3
 8101ada:	370c      	adds	r7, #12
 8101adc:	46bd      	mov	sp, r7
 8101ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ae2:	4770      	bx	lr

08101ae4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8101ae4:	b480      	push	{r7}
 8101ae6:	b083      	sub	sp, #12
 8101ae8:	af00      	add	r7, sp, #0
 8101aea:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101aec:	687b      	ldr	r3, [r7, #4]
 8101aee:	689b      	ldr	r3, [r3, #8]
 8101af0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101af4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101af8:	f043 0201 	orr.w	r2, r3, #1
 8101afc:	687b      	ldr	r3, [r7, #4]
 8101afe:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8101b00:	bf00      	nop
 8101b02:	370c      	adds	r7, #12
 8101b04:	46bd      	mov	sp, r7
 8101b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b0a:	4770      	bx	lr

08101b0c <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8101b0c:	b480      	push	{r7}
 8101b0e:	b083      	sub	sp, #12
 8101b10:	af00      	add	r7, sp, #0
 8101b12:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8101b14:	687b      	ldr	r3, [r7, #4]
 8101b16:	689b      	ldr	r3, [r3, #8]
 8101b18:	f003 0301 	and.w	r3, r3, #1
 8101b1c:	2b01      	cmp	r3, #1
 8101b1e:	d101      	bne.n	8101b24 <LL_ADC_IsEnabled+0x18>
 8101b20:	2301      	movs	r3, #1
 8101b22:	e000      	b.n	8101b26 <LL_ADC_IsEnabled+0x1a>
 8101b24:	2300      	movs	r3, #0
}
 8101b26:	4618      	mov	r0, r3
 8101b28:	370c      	adds	r7, #12
 8101b2a:	46bd      	mov	sp, r7
 8101b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b30:	4770      	bx	lr

08101b32 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8101b32:	b480      	push	{r7}
 8101b34:	b083      	sub	sp, #12
 8101b36:	af00      	add	r7, sp, #0
 8101b38:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8101b3a:	687b      	ldr	r3, [r7, #4]
 8101b3c:	689b      	ldr	r3, [r3, #8]
 8101b3e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8101b42:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8101b46:	f043 0204 	orr.w	r2, r3, #4
 8101b4a:	687b      	ldr	r3, [r7, #4]
 8101b4c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8101b4e:	bf00      	nop
 8101b50:	370c      	adds	r7, #12
 8101b52:	46bd      	mov	sp, r7
 8101b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b58:	4770      	bx	lr

08101b5a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101b5a:	b480      	push	{r7}
 8101b5c:	b083      	sub	sp, #12
 8101b5e:	af00      	add	r7, sp, #0
 8101b60:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8101b62:	687b      	ldr	r3, [r7, #4]
 8101b64:	689b      	ldr	r3, [r3, #8]
 8101b66:	f003 0304 	and.w	r3, r3, #4
 8101b6a:	2b04      	cmp	r3, #4
 8101b6c:	d101      	bne.n	8101b72 <LL_ADC_REG_IsConversionOngoing+0x18>
 8101b6e:	2301      	movs	r3, #1
 8101b70:	e000      	b.n	8101b74 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8101b72:	2300      	movs	r3, #0
}
 8101b74:	4618      	mov	r0, r3
 8101b76:	370c      	adds	r7, #12
 8101b78:	46bd      	mov	sp, r7
 8101b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101b7e:	4770      	bx	lr

08101b80 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8101b80:	b480      	push	{r7}
 8101b82:	b083      	sub	sp, #12
 8101b84:	af00      	add	r7, sp, #0
 8101b86:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8101b88:	687b      	ldr	r3, [r7, #4]
 8101b8a:	689b      	ldr	r3, [r3, #8]
 8101b8c:	f003 0308 	and.w	r3, r3, #8
 8101b90:	2b08      	cmp	r3, #8
 8101b92:	d101      	bne.n	8101b98 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8101b94:	2301      	movs	r3, #1
 8101b96:	e000      	b.n	8101b9a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8101b98:	2300      	movs	r3, #0
}
 8101b9a:	4618      	mov	r0, r3
 8101b9c:	370c      	adds	r7, #12
 8101b9e:	46bd      	mov	sp, r7
 8101ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8101ba4:	4770      	bx	lr
	...

08101ba8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8101ba8:	b590      	push	{r4, r7, lr}
 8101baa:	b089      	sub	sp, #36	; 0x24
 8101bac:	af00      	add	r7, sp, #0
 8101bae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8101bb0:	2300      	movs	r3, #0
 8101bb2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8101bb4:	2300      	movs	r3, #0
 8101bb6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8101bb8:	687b      	ldr	r3, [r7, #4]
 8101bba:	2b00      	cmp	r3, #0
 8101bbc:	d101      	bne.n	8101bc2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8101bbe:	2301      	movs	r3, #1
 8101bc0:	e18e      	b.n	8101ee0 <HAL_ADC_Init+0x338>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8101bc2:	687b      	ldr	r3, [r7, #4]
 8101bc4:	68db      	ldr	r3, [r3, #12]
 8101bc6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8101bc8:	687b      	ldr	r3, [r7, #4]
 8101bca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101bcc:	2b00      	cmp	r3, #0
 8101bce:	d109      	bne.n	8101be4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8101bd0:	6878      	ldr	r0, [r7, #4]
 8101bd2:	f7fe ffa7 	bl	8100b24 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8101bd6:	687b      	ldr	r3, [r7, #4]
 8101bd8:	2200      	movs	r2, #0
 8101bda:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8101bdc:	687b      	ldr	r3, [r7, #4]
 8101bde:	2200      	movs	r2, #0
 8101be0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8101be4:	687b      	ldr	r3, [r7, #4]
 8101be6:	681b      	ldr	r3, [r3, #0]
 8101be8:	4618      	mov	r0, r3
 8101bea:	f7ff ff3f 	bl	8101a6c <LL_ADC_IsDeepPowerDownEnabled>
 8101bee:	4603      	mov	r3, r0
 8101bf0:	2b00      	cmp	r3, #0
 8101bf2:	d004      	beq.n	8101bfe <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8101bf4:	687b      	ldr	r3, [r7, #4]
 8101bf6:	681b      	ldr	r3, [r3, #0]
 8101bf8:	4618      	mov	r0, r3
 8101bfa:	f7ff ff25 	bl	8101a48 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101bfe:	687b      	ldr	r3, [r7, #4]
 8101c00:	681b      	ldr	r3, [r3, #0]
 8101c02:	4618      	mov	r0, r3
 8101c04:	f7ff ff5a 	bl	8101abc <LL_ADC_IsInternalRegulatorEnabled>
 8101c08:	4603      	mov	r3, r0
 8101c0a:	2b00      	cmp	r3, #0
 8101c0c:	d114      	bne.n	8101c38 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8101c0e:	687b      	ldr	r3, [r7, #4]
 8101c10:	681b      	ldr	r3, [r3, #0]
 8101c12:	4618      	mov	r0, r3
 8101c14:	f7ff ff3e 	bl	8101a94 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8101c18:	4b9b      	ldr	r3, [pc, #620]	; (8101e88 <HAL_ADC_Init+0x2e0>)
 8101c1a:	681b      	ldr	r3, [r3, #0]
 8101c1c:	099b      	lsrs	r3, r3, #6
 8101c1e:	4a9b      	ldr	r2, [pc, #620]	; (8101e8c <HAL_ADC_Init+0x2e4>)
 8101c20:	fba2 2303 	umull	r2, r3, r2, r3
 8101c24:	099b      	lsrs	r3, r3, #6
 8101c26:	3301      	adds	r3, #1
 8101c28:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101c2a:	e002      	b.n	8101c32 <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 8101c2c:	68bb      	ldr	r3, [r7, #8]
 8101c2e:	3b01      	subs	r3, #1
 8101c30:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8101c32:	68bb      	ldr	r3, [r7, #8]
 8101c34:	2b00      	cmp	r3, #0
 8101c36:	d1f9      	bne.n	8101c2c <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8101c38:	687b      	ldr	r3, [r7, #4]
 8101c3a:	681b      	ldr	r3, [r3, #0]
 8101c3c:	4618      	mov	r0, r3
 8101c3e:	f7ff ff3d 	bl	8101abc <LL_ADC_IsInternalRegulatorEnabled>
 8101c42:	4603      	mov	r3, r0
 8101c44:	2b00      	cmp	r3, #0
 8101c46:	d10d      	bne.n	8101c64 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101c48:	687b      	ldr	r3, [r7, #4]
 8101c4a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c4c:	f043 0210 	orr.w	r2, r3, #16
 8101c50:	687b      	ldr	r3, [r7, #4]
 8101c52:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8101c54:	687b      	ldr	r3, [r7, #4]
 8101c56:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101c58:	f043 0201 	orr.w	r2, r3, #1
 8101c5c:	687b      	ldr	r3, [r7, #4]
 8101c5e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8101c60:	2301      	movs	r3, #1
 8101c62:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101c64:	687b      	ldr	r3, [r7, #4]
 8101c66:	681b      	ldr	r3, [r3, #0]
 8101c68:	4618      	mov	r0, r3
 8101c6a:	f7ff ff76 	bl	8101b5a <LL_ADC_REG_IsConversionOngoing>
 8101c6e:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8101c70:	687b      	ldr	r3, [r7, #4]
 8101c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c74:	f003 0310 	and.w	r3, r3, #16
 8101c78:	2b00      	cmp	r3, #0
 8101c7a:	f040 8128 	bne.w	8101ece <HAL_ADC_Init+0x326>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8101c7e:	697b      	ldr	r3, [r7, #20]
 8101c80:	2b00      	cmp	r3, #0
 8101c82:	f040 8124 	bne.w	8101ece <HAL_ADC_Init+0x326>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8101c86:	687b      	ldr	r3, [r7, #4]
 8101c88:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101c8a:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8101c8e:	f043 0202 	orr.w	r2, r3, #2
 8101c92:	687b      	ldr	r3, [r7, #4]
 8101c94:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8101c96:	687b      	ldr	r3, [r7, #4]
 8101c98:	681b      	ldr	r3, [r3, #0]
 8101c9a:	4618      	mov	r0, r3
 8101c9c:	f7ff ff36 	bl	8101b0c <LL_ADC_IsEnabled>
 8101ca0:	4603      	mov	r3, r0
 8101ca2:	2b00      	cmp	r3, #0
 8101ca4:	d136      	bne.n	8101d14 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8101ca6:	687b      	ldr	r3, [r7, #4]
 8101ca8:	681b      	ldr	r3, [r3, #0]
 8101caa:	4a79      	ldr	r2, [pc, #484]	; (8101e90 <HAL_ADC_Init+0x2e8>)
 8101cac:	4293      	cmp	r3, r2
 8101cae:	d004      	beq.n	8101cba <HAL_ADC_Init+0x112>
 8101cb0:	687b      	ldr	r3, [r7, #4]
 8101cb2:	681b      	ldr	r3, [r3, #0]
 8101cb4:	4a77      	ldr	r2, [pc, #476]	; (8101e94 <HAL_ADC_Init+0x2ec>)
 8101cb6:	4293      	cmp	r3, r2
 8101cb8:	d10e      	bne.n	8101cd8 <HAL_ADC_Init+0x130>
 8101cba:	4875      	ldr	r0, [pc, #468]	; (8101e90 <HAL_ADC_Init+0x2e8>)
 8101cbc:	f7ff ff26 	bl	8101b0c <LL_ADC_IsEnabled>
 8101cc0:	4604      	mov	r4, r0
 8101cc2:	4874      	ldr	r0, [pc, #464]	; (8101e94 <HAL_ADC_Init+0x2ec>)
 8101cc4:	f7ff ff22 	bl	8101b0c <LL_ADC_IsEnabled>
 8101cc8:	4603      	mov	r3, r0
 8101cca:	4323      	orrs	r3, r4
 8101ccc:	2b00      	cmp	r3, #0
 8101cce:	bf0c      	ite	eq
 8101cd0:	2301      	moveq	r3, #1
 8101cd2:	2300      	movne	r3, #0
 8101cd4:	b2db      	uxtb	r3, r3
 8101cd6:	e008      	b.n	8101cea <HAL_ADC_Init+0x142>
 8101cd8:	486f      	ldr	r0, [pc, #444]	; (8101e98 <HAL_ADC_Init+0x2f0>)
 8101cda:	f7ff ff17 	bl	8101b0c <LL_ADC_IsEnabled>
 8101cde:	4603      	mov	r3, r0
 8101ce0:	2b00      	cmp	r3, #0
 8101ce2:	bf0c      	ite	eq
 8101ce4:	2301      	moveq	r3, #1
 8101ce6:	2300      	movne	r3, #0
 8101ce8:	b2db      	uxtb	r3, r3
 8101cea:	2b00      	cmp	r3, #0
 8101cec:	d012      	beq.n	8101d14 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8101cee:	687b      	ldr	r3, [r7, #4]
 8101cf0:	681b      	ldr	r3, [r3, #0]
 8101cf2:	4a67      	ldr	r2, [pc, #412]	; (8101e90 <HAL_ADC_Init+0x2e8>)
 8101cf4:	4293      	cmp	r3, r2
 8101cf6:	d004      	beq.n	8101d02 <HAL_ADC_Init+0x15a>
 8101cf8:	687b      	ldr	r3, [r7, #4]
 8101cfa:	681b      	ldr	r3, [r3, #0]
 8101cfc:	4a65      	ldr	r2, [pc, #404]	; (8101e94 <HAL_ADC_Init+0x2ec>)
 8101cfe:	4293      	cmp	r3, r2
 8101d00:	d101      	bne.n	8101d06 <HAL_ADC_Init+0x15e>
 8101d02:	4a66      	ldr	r2, [pc, #408]	; (8101e9c <HAL_ADC_Init+0x2f4>)
 8101d04:	e000      	b.n	8101d08 <HAL_ADC_Init+0x160>
 8101d06:	4a66      	ldr	r2, [pc, #408]	; (8101ea0 <HAL_ADC_Init+0x2f8>)
 8101d08:	687b      	ldr	r3, [r7, #4]
 8101d0a:	685b      	ldr	r3, [r3, #4]
 8101d0c:	4619      	mov	r1, r3
 8101d0e:	4610      	mov	r0, r2
 8101d10:	f7ff fd54 	bl	81017bc <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 8101d14:	f7ff fd46 	bl	81017a4 <HAL_GetREVID>
 8101d18:	4603      	mov	r3, r0
 8101d1a:	f241 0203 	movw	r2, #4099	; 0x1003
 8101d1e:	4293      	cmp	r3, r2
 8101d20:	d914      	bls.n	8101d4c <HAL_ADC_Init+0x1a4>
 8101d22:	687b      	ldr	r3, [r7, #4]
 8101d24:	689b      	ldr	r3, [r3, #8]
 8101d26:	2b10      	cmp	r3, #16
 8101d28:	d110      	bne.n	8101d4c <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101d2a:	687b      	ldr	r3, [r7, #4]
 8101d2c:	7d5b      	ldrb	r3, [r3, #21]
 8101d2e:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101d30:	687b      	ldr	r3, [r7, #4]
 8101d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101d34:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101d36:	687b      	ldr	r3, [r7, #4]
 8101d38:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101d3a:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101d3c:	687b      	ldr	r3, [r7, #4]
 8101d3e:	7f1b      	ldrb	r3, [r3, #28]
 8101d40:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 8101d42:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101d44:	f043 030c 	orr.w	r3, r3, #12
 8101d48:	61bb      	str	r3, [r7, #24]
 8101d4a:	e00d      	b.n	8101d68 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101d4c:	687b      	ldr	r3, [r7, #4]
 8101d4e:	7d5b      	ldrb	r3, [r3, #21]
 8101d50:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 8101d52:	687b      	ldr	r3, [r7, #4]
 8101d54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101d56:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8101d58:	687b      	ldr	r3, [r7, #4]
 8101d5a:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8101d5c:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8101d5e:	687b      	ldr	r3, [r7, #4]
 8101d60:	7f1b      	ldrb	r3, [r3, #28]
 8101d62:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8101d64:	4313      	orrs	r3, r2
 8101d66:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8101d68:	687b      	ldr	r3, [r7, #4]
 8101d6a:	7f1b      	ldrb	r3, [r3, #28]
 8101d6c:	2b01      	cmp	r3, #1
 8101d6e:	d106      	bne.n	8101d7e <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8101d70:	687b      	ldr	r3, [r7, #4]
 8101d72:	6a1b      	ldr	r3, [r3, #32]
 8101d74:	3b01      	subs	r3, #1
 8101d76:	045b      	lsls	r3, r3, #17
 8101d78:	69ba      	ldr	r2, [r7, #24]
 8101d7a:	4313      	orrs	r3, r2
 8101d7c:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8101d7e:	687b      	ldr	r3, [r7, #4]
 8101d80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d82:	2b00      	cmp	r3, #0
 8101d84:	d009      	beq.n	8101d9a <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101d86:	687b      	ldr	r3, [r7, #4]
 8101d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101d8a:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8101d8e:	687b      	ldr	r3, [r7, #4]
 8101d90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8101d92:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8101d94:	69ba      	ldr	r2, [r7, #24]
 8101d96:	4313      	orrs	r3, r2
 8101d98:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8101d9a:	687b      	ldr	r3, [r7, #4]
 8101d9c:	681b      	ldr	r3, [r3, #0]
 8101d9e:	68da      	ldr	r2, [r3, #12]
 8101da0:	4b40      	ldr	r3, [pc, #256]	; (8101ea4 <HAL_ADC_Init+0x2fc>)
 8101da2:	4013      	ands	r3, r2
 8101da4:	687a      	ldr	r2, [r7, #4]
 8101da6:	6812      	ldr	r2, [r2, #0]
 8101da8:	69b9      	ldr	r1, [r7, #24]
 8101daa:	430b      	orrs	r3, r1
 8101dac:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8101dae:	687b      	ldr	r3, [r7, #4]
 8101db0:	681b      	ldr	r3, [r3, #0]
 8101db2:	4618      	mov	r0, r3
 8101db4:	f7ff fed1 	bl	8101b5a <LL_ADC_REG_IsConversionOngoing>
 8101db8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8101dba:	687b      	ldr	r3, [r7, #4]
 8101dbc:	681b      	ldr	r3, [r3, #0]
 8101dbe:	4618      	mov	r0, r3
 8101dc0:	f7ff fede 	bl	8101b80 <LL_ADC_INJ_IsConversionOngoing>
 8101dc4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8101dc6:	693b      	ldr	r3, [r7, #16]
 8101dc8:	2b00      	cmp	r3, #0
 8101dca:	d14c      	bne.n	8101e66 <HAL_ADC_Init+0x2be>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8101dcc:	68fb      	ldr	r3, [r7, #12]
 8101dce:	2b00      	cmp	r3, #0
 8101dd0:	d149      	bne.n	8101e66 <HAL_ADC_Init+0x2be>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8101dd2:	687b      	ldr	r3, [r7, #4]
 8101dd4:	7d1b      	ldrb	r3, [r3, #20]
 8101dd6:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8101dd8:	687b      	ldr	r3, [r7, #4]
 8101dda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8101ddc:	4313      	orrs	r3, r2
 8101dde:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8101de0:	687b      	ldr	r3, [r7, #4]
 8101de2:	681b      	ldr	r3, [r3, #0]
 8101de4:	68db      	ldr	r3, [r3, #12]
 8101de6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8101dea:	f023 0303 	bic.w	r3, r3, #3
 8101dee:	687a      	ldr	r2, [r7, #4]
 8101df0:	6812      	ldr	r2, [r2, #0]
 8101df2:	69b9      	ldr	r1, [r7, #24]
 8101df4:	430b      	orrs	r3, r1
 8101df6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 8101df8:	687b      	ldr	r3, [r7, #4]
 8101dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8101dfe:	2b01      	cmp	r3, #1
 8101e00:	d11b      	bne.n	8101e3a <HAL_ADC_Init+0x292>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 8101e02:	687b      	ldr	r3, [r7, #4]
 8101e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8101e06:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 8101e08:	687b      	ldr	r3, [r7, #4]
 8101e0a:	681b      	ldr	r3, [r3, #0]
 8101e0c:	691a      	ldr	r2, [r3, #16]
 8101e0e:	4b26      	ldr	r3, [pc, #152]	; (8101ea8 <HAL_ADC_Init+0x300>)
 8101e10:	4013      	ands	r3, r2
 8101e12:	687a      	ldr	r2, [r7, #4]
 8101e14:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8101e16:	3a01      	subs	r2, #1
 8101e18:	0411      	lsls	r1, r2, #16
 8101e1a:	687a      	ldr	r2, [r7, #4]
 8101e1c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8101e1e:	4311      	orrs	r1, r2
 8101e20:	687a      	ldr	r2, [r7, #4]
 8101e22:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8101e24:	4311      	orrs	r1, r2
 8101e26:	687a      	ldr	r2, [r7, #4]
 8101e28:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8101e2a:	430a      	orrs	r2, r1
 8101e2c:	431a      	orrs	r2, r3
 8101e2e:	687b      	ldr	r3, [r7, #4]
 8101e30:	681b      	ldr	r3, [r3, #0]
 8101e32:	f042 0201 	orr.w	r2, r2, #1
 8101e36:	611a      	str	r2, [r3, #16]
 8101e38:	e007      	b.n	8101e4a <HAL_ADC_Init+0x2a2>

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8101e3a:	687b      	ldr	r3, [r7, #4]
 8101e3c:	681b      	ldr	r3, [r3, #0]
 8101e3e:	691a      	ldr	r2, [r3, #16]
 8101e40:	687b      	ldr	r3, [r7, #4]
 8101e42:	681b      	ldr	r3, [r3, #0]
 8101e44:	f022 0201 	bic.w	r2, r2, #1
 8101e48:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 8101e4a:	687b      	ldr	r3, [r7, #4]
 8101e4c:	681b      	ldr	r3, [r3, #0]
 8101e4e:	691b      	ldr	r3, [r3, #16]
 8101e50:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8101e54:	687b      	ldr	r3, [r7, #4]
 8101e56:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8101e58:	687b      	ldr	r3, [r7, #4]
 8101e5a:	681b      	ldr	r3, [r3, #0]
 8101e5c:	430a      	orrs	r2, r1
 8101e5e:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8101e60:	6878      	ldr	r0, [r7, #4]
 8101e62:	f000 ffb7 	bl	8102dd4 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8101e66:	687b      	ldr	r3, [r7, #4]
 8101e68:	68db      	ldr	r3, [r3, #12]
 8101e6a:	2b01      	cmp	r3, #1
 8101e6c:	d11e      	bne.n	8101eac <HAL_ADC_Init+0x304>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8101e6e:	687b      	ldr	r3, [r7, #4]
 8101e70:	681b      	ldr	r3, [r3, #0]
 8101e72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101e74:	f023 010f 	bic.w	r1, r3, #15
 8101e78:	687b      	ldr	r3, [r7, #4]
 8101e7a:	699b      	ldr	r3, [r3, #24]
 8101e7c:	1e5a      	subs	r2, r3, #1
 8101e7e:	687b      	ldr	r3, [r7, #4]
 8101e80:	681b      	ldr	r3, [r3, #0]
 8101e82:	430a      	orrs	r2, r1
 8101e84:	631a      	str	r2, [r3, #48]	; 0x30
 8101e86:	e019      	b.n	8101ebc <HAL_ADC_Init+0x314>
 8101e88:	10000000 	.word	0x10000000
 8101e8c:	053e2d63 	.word	0x053e2d63
 8101e90:	40022000 	.word	0x40022000
 8101e94:	40022100 	.word	0x40022100
 8101e98:	58026000 	.word	0x58026000
 8101e9c:	40022300 	.word	0x40022300
 8101ea0:	58026300 	.word	0x58026300
 8101ea4:	fff0c003 	.word	0xfff0c003
 8101ea8:	fc00f81e 	.word	0xfc00f81e
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8101eac:	687b      	ldr	r3, [r7, #4]
 8101eae:	681b      	ldr	r3, [r3, #0]
 8101eb0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8101eb2:	687b      	ldr	r3, [r7, #4]
 8101eb4:	681b      	ldr	r3, [r3, #0]
 8101eb6:	f022 020f 	bic.w	r2, r2, #15
 8101eba:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8101ebc:	687b      	ldr	r3, [r7, #4]
 8101ebe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ec0:	f023 0303 	bic.w	r3, r3, #3
 8101ec4:	f043 0201 	orr.w	r2, r3, #1
 8101ec8:	687b      	ldr	r3, [r7, #4]
 8101eca:	655a      	str	r2, [r3, #84]	; 0x54
 8101ecc:	e007      	b.n	8101ede <HAL_ADC_Init+0x336>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8101ece:	687b      	ldr	r3, [r7, #4]
 8101ed0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101ed2:	f043 0210 	orr.w	r2, r3, #16
 8101ed6:	687b      	ldr	r3, [r7, #4]
 8101ed8:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8101eda:	2301      	movs	r3, #1
 8101edc:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8101ede:	7ffb      	ldrb	r3, [r7, #31]
}
 8101ee0:	4618      	mov	r0, r3
 8101ee2:	3724      	adds	r7, #36	; 0x24
 8101ee4:	46bd      	mov	sp, r7
 8101ee6:	bd90      	pop	{r4, r7, pc}

08101ee8 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8101ee8:	b580      	push	{r7, lr}
 8101eea:	b086      	sub	sp, #24
 8101eec:	af00      	add	r7, sp, #0
 8101eee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8101ef0:	687b      	ldr	r3, [r7, #4]
 8101ef2:	681b      	ldr	r3, [r3, #0]
 8101ef4:	4a98      	ldr	r2, [pc, #608]	; (8102158 <HAL_ADC_Start_IT+0x270>)
 8101ef6:	4293      	cmp	r3, r2
 8101ef8:	d004      	beq.n	8101f04 <HAL_ADC_Start_IT+0x1c>
 8101efa:	687b      	ldr	r3, [r7, #4]
 8101efc:	681b      	ldr	r3, [r3, #0]
 8101efe:	4a97      	ldr	r2, [pc, #604]	; (810215c <HAL_ADC_Start_IT+0x274>)
 8101f00:	4293      	cmp	r3, r2
 8101f02:	d101      	bne.n	8101f08 <HAL_ADC_Start_IT+0x20>
 8101f04:	4b96      	ldr	r3, [pc, #600]	; (8102160 <HAL_ADC_Start_IT+0x278>)
 8101f06:	e000      	b.n	8101f0a <HAL_ADC_Start_IT+0x22>
 8101f08:	4b96      	ldr	r3, [pc, #600]	; (8102164 <HAL_ADC_Start_IT+0x27c>)
 8101f0a:	4618      	mov	r0, r3
 8101f0c:	f7ff fd80 	bl	8101a10 <LL_ADC_GetMultimode>
 8101f10:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8101f12:	687b      	ldr	r3, [r7, #4]
 8101f14:	681b      	ldr	r3, [r3, #0]
 8101f16:	4618      	mov	r0, r3
 8101f18:	f7ff fe1f 	bl	8101b5a <LL_ADC_REG_IsConversionOngoing>
 8101f1c:	4603      	mov	r3, r0
 8101f1e:	2b00      	cmp	r3, #0
 8101f20:	f040 8111 	bne.w	8102146 <HAL_ADC_Start_IT+0x25e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8101f24:	687b      	ldr	r3, [r7, #4]
 8101f26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8101f2a:	2b01      	cmp	r3, #1
 8101f2c:	d101      	bne.n	8101f32 <HAL_ADC_Start_IT+0x4a>
 8101f2e:	2302      	movs	r3, #2
 8101f30:	e10e      	b.n	8102150 <HAL_ADC_Start_IT+0x268>
 8101f32:	687b      	ldr	r3, [r7, #4]
 8101f34:	2201      	movs	r2, #1
 8101f36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8101f3a:	6878      	ldr	r0, [r7, #4]
 8101f3c:	f000 fec0 	bl	8102cc0 <ADC_Enable>
 8101f40:	4603      	mov	r3, r0
 8101f42:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8101f44:	7dfb      	ldrb	r3, [r7, #23]
 8101f46:	2b00      	cmp	r3, #0
 8101f48:	f040 80f8 	bne.w	810213c <HAL_ADC_Start_IT+0x254>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8101f4c:	687b      	ldr	r3, [r7, #4]
 8101f4e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f50:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8101f54:	f023 0301 	bic.w	r3, r3, #1
 8101f58:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8101f5c:	687b      	ldr	r3, [r7, #4]
 8101f5e:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8101f60:	687b      	ldr	r3, [r7, #4]
 8101f62:	681b      	ldr	r3, [r3, #0]
 8101f64:	4a7d      	ldr	r2, [pc, #500]	; (810215c <HAL_ADC_Start_IT+0x274>)
 8101f66:	4293      	cmp	r3, r2
 8101f68:	d002      	beq.n	8101f70 <HAL_ADC_Start_IT+0x88>
 8101f6a:	687b      	ldr	r3, [r7, #4]
 8101f6c:	681b      	ldr	r3, [r3, #0]
 8101f6e:	e000      	b.n	8101f72 <HAL_ADC_Start_IT+0x8a>
 8101f70:	4b79      	ldr	r3, [pc, #484]	; (8102158 <HAL_ADC_Start_IT+0x270>)
 8101f72:	687a      	ldr	r2, [r7, #4]
 8101f74:	6812      	ldr	r2, [r2, #0]
 8101f76:	4293      	cmp	r3, r2
 8101f78:	d002      	beq.n	8101f80 <HAL_ADC_Start_IT+0x98>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8101f7a:	693b      	ldr	r3, [r7, #16]
 8101f7c:	2b00      	cmp	r3, #0
 8101f7e:	d105      	bne.n	8101f8c <HAL_ADC_Start_IT+0xa4>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8101f80:	687b      	ldr	r3, [r7, #4]
 8101f82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f84:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8101f88:	687b      	ldr	r3, [r7, #4]
 8101f8a:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8101f8c:	687b      	ldr	r3, [r7, #4]
 8101f8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8101f90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8101f94:	2b00      	cmp	r3, #0
 8101f96:	d006      	beq.n	8101fa6 <HAL_ADC_Start_IT+0xbe>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8101f98:	687b      	ldr	r3, [r7, #4]
 8101f9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8101f9c:	f023 0206 	bic.w	r2, r3, #6
 8101fa0:	687b      	ldr	r3, [r7, #4]
 8101fa2:	659a      	str	r2, [r3, #88]	; 0x58
 8101fa4:	e002      	b.n	8101fac <HAL_ADC_Start_IT+0xc4>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8101fa6:	687b      	ldr	r3, [r7, #4]
 8101fa8:	2200      	movs	r2, #0
 8101faa:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8101fac:	687b      	ldr	r3, [r7, #4]
 8101fae:	681b      	ldr	r3, [r3, #0]
 8101fb0:	221c      	movs	r2, #28
 8101fb2:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8101fb4:	687b      	ldr	r3, [r7, #4]
 8101fb6:	2200      	movs	r2, #0
 8101fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8101fbc:	687b      	ldr	r3, [r7, #4]
 8101fbe:	681b      	ldr	r3, [r3, #0]
 8101fc0:	685a      	ldr	r2, [r3, #4]
 8101fc2:	687b      	ldr	r3, [r7, #4]
 8101fc4:	681b      	ldr	r3, [r3, #0]
 8101fc6:	f022 021c 	bic.w	r2, r2, #28
 8101fca:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8101fcc:	687b      	ldr	r3, [r7, #4]
 8101fce:	691b      	ldr	r3, [r3, #16]
 8101fd0:	2b08      	cmp	r3, #8
 8101fd2:	d108      	bne.n	8101fe6 <HAL_ADC_Start_IT+0xfe>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8101fd4:	687b      	ldr	r3, [r7, #4]
 8101fd6:	681b      	ldr	r3, [r3, #0]
 8101fd8:	685a      	ldr	r2, [r3, #4]
 8101fda:	687b      	ldr	r3, [r7, #4]
 8101fdc:	681b      	ldr	r3, [r3, #0]
 8101fde:	f042 0208 	orr.w	r2, r2, #8
 8101fe2:	605a      	str	r2, [r3, #4]
          break;
 8101fe4:	e008      	b.n	8101ff8 <HAL_ADC_Start_IT+0x110>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8101fe6:	687b      	ldr	r3, [r7, #4]
 8101fe8:	681b      	ldr	r3, [r3, #0]
 8101fea:	685a      	ldr	r2, [r3, #4]
 8101fec:	687b      	ldr	r3, [r7, #4]
 8101fee:	681b      	ldr	r3, [r3, #0]
 8101ff0:	f042 0204 	orr.w	r2, r2, #4
 8101ff4:	605a      	str	r2, [r3, #4]
          break;
 8101ff6:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8101ff8:	687b      	ldr	r3, [r7, #4]
 8101ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8101ffc:	2b00      	cmp	r3, #0
 8101ffe:	d107      	bne.n	8102010 <HAL_ADC_Start_IT+0x128>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8102000:	687b      	ldr	r3, [r7, #4]
 8102002:	681b      	ldr	r3, [r3, #0]
 8102004:	685a      	ldr	r2, [r3, #4]
 8102006:	687b      	ldr	r3, [r7, #4]
 8102008:	681b      	ldr	r3, [r3, #0]
 810200a:	f042 0210 	orr.w	r2, r2, #16
 810200e:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102010:	687b      	ldr	r3, [r7, #4]
 8102012:	681b      	ldr	r3, [r3, #0]
 8102014:	4a51      	ldr	r2, [pc, #324]	; (810215c <HAL_ADC_Start_IT+0x274>)
 8102016:	4293      	cmp	r3, r2
 8102018:	d002      	beq.n	8102020 <HAL_ADC_Start_IT+0x138>
 810201a:	687b      	ldr	r3, [r7, #4]
 810201c:	681b      	ldr	r3, [r3, #0]
 810201e:	e000      	b.n	8102022 <HAL_ADC_Start_IT+0x13a>
 8102020:	4b4d      	ldr	r3, [pc, #308]	; (8102158 <HAL_ADC_Start_IT+0x270>)
 8102022:	687a      	ldr	r2, [r7, #4]
 8102024:	6812      	ldr	r2, [r2, #0]
 8102026:	4293      	cmp	r3, r2
 8102028:	d008      	beq.n	810203c <HAL_ADC_Start_IT+0x154>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 810202a:	693b      	ldr	r3, [r7, #16]
 810202c:	2b00      	cmp	r3, #0
 810202e:	d005      	beq.n	810203c <HAL_ADC_Start_IT+0x154>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8102030:	693b      	ldr	r3, [r7, #16]
 8102032:	2b05      	cmp	r3, #5
 8102034:	d002      	beq.n	810203c <HAL_ADC_Start_IT+0x154>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102036:	693b      	ldr	r3, [r7, #16]
 8102038:	2b09      	cmp	r3, #9
 810203a:	d13b      	bne.n	81020b4 <HAL_ADC_Start_IT+0x1cc>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 810203c:	687b      	ldr	r3, [r7, #4]
 810203e:	681b      	ldr	r3, [r3, #0]
 8102040:	68db      	ldr	r3, [r3, #12]
 8102042:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8102046:	2b00      	cmp	r3, #0
 8102048:	d02d      	beq.n	81020a6 <HAL_ADC_Start_IT+0x1be>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 810204a:	687b      	ldr	r3, [r7, #4]
 810204c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810204e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8102052:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8102056:	687b      	ldr	r3, [r7, #4]
 8102058:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 810205a:	687b      	ldr	r3, [r7, #4]
 810205c:	691b      	ldr	r3, [r3, #16]
 810205e:	2b08      	cmp	r3, #8
 8102060:	d110      	bne.n	8102084 <HAL_ADC_Start_IT+0x19c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 8102062:	687b      	ldr	r3, [r7, #4]
 8102064:	681b      	ldr	r3, [r3, #0]
 8102066:	685a      	ldr	r2, [r3, #4]
 8102068:	687b      	ldr	r3, [r7, #4]
 810206a:	681b      	ldr	r3, [r3, #0]
 810206c:	f022 0220 	bic.w	r2, r2, #32
 8102070:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8102072:	687b      	ldr	r3, [r7, #4]
 8102074:	681b      	ldr	r3, [r3, #0]
 8102076:	685a      	ldr	r2, [r3, #4]
 8102078:	687b      	ldr	r3, [r7, #4]
 810207a:	681b      	ldr	r3, [r3, #0]
 810207c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102080:	605a      	str	r2, [r3, #4]
              break;
 8102082:	e011      	b.n	81020a8 <HAL_ADC_Start_IT+0x1c0>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8102084:	687b      	ldr	r3, [r7, #4]
 8102086:	681b      	ldr	r3, [r3, #0]
 8102088:	685a      	ldr	r2, [r3, #4]
 810208a:	687b      	ldr	r3, [r7, #4]
 810208c:	681b      	ldr	r3, [r3, #0]
 810208e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8102092:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8102094:	687b      	ldr	r3, [r7, #4]
 8102096:	681b      	ldr	r3, [r3, #0]
 8102098:	685a      	ldr	r2, [r3, #4]
 810209a:	687b      	ldr	r3, [r7, #4]
 810209c:	681b      	ldr	r3, [r3, #0]
 810209e:	f042 0220 	orr.w	r2, r2, #32
 81020a2:	605a      	str	r2, [r3, #4]
              break;
 81020a4:	e000      	b.n	81020a8 <HAL_ADC_Start_IT+0x1c0>
          }
        }
 81020a6:	bf00      	nop

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 81020a8:	687b      	ldr	r3, [r7, #4]
 81020aa:	681b      	ldr	r3, [r3, #0]
 81020ac:	4618      	mov	r0, r3
 81020ae:	f7ff fd40 	bl	8101b32 <LL_ADC_REG_StartConversion>
 81020b2:	e04c      	b.n	810214e <HAL_ADC_Start_IT+0x266>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 81020b4:	687b      	ldr	r3, [r7, #4]
 81020b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020b8:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 81020bc:	687b      	ldr	r3, [r7, #4]
 81020be:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81020c0:	687b      	ldr	r3, [r7, #4]
 81020c2:	681b      	ldr	r3, [r3, #0]
 81020c4:	4a25      	ldr	r2, [pc, #148]	; (810215c <HAL_ADC_Start_IT+0x274>)
 81020c6:	4293      	cmp	r3, r2
 81020c8:	d002      	beq.n	81020d0 <HAL_ADC_Start_IT+0x1e8>
 81020ca:	687b      	ldr	r3, [r7, #4]
 81020cc:	681b      	ldr	r3, [r3, #0]
 81020ce:	e000      	b.n	81020d2 <HAL_ADC_Start_IT+0x1ea>
 81020d0:	4b21      	ldr	r3, [pc, #132]	; (8102158 <HAL_ADC_Start_IT+0x270>)
 81020d2:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 81020d4:	68fb      	ldr	r3, [r7, #12]
 81020d6:	68db      	ldr	r3, [r3, #12]
 81020d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81020dc:	2b00      	cmp	r3, #0
 81020de:	d035      	beq.n	810214c <HAL_ADC_Start_IT+0x264>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 81020e0:	687b      	ldr	r3, [r7, #4]
 81020e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81020e4:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 81020e8:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 81020ec:	687b      	ldr	r3, [r7, #4]
 81020ee:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 81020f0:	687b      	ldr	r3, [r7, #4]
 81020f2:	691b      	ldr	r3, [r3, #16]
 81020f4:	2b08      	cmp	r3, #8
 81020f6:	d110      	bne.n	810211a <HAL_ADC_Start_IT+0x232>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 81020f8:	687b      	ldr	r3, [r7, #4]
 81020fa:	681b      	ldr	r3, [r3, #0]
 81020fc:	685a      	ldr	r2, [r3, #4]
 81020fe:	687b      	ldr	r3, [r7, #4]
 8102100:	681b      	ldr	r3, [r3, #0]
 8102102:	f022 0220 	bic.w	r2, r2, #32
 8102106:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 8102108:	687b      	ldr	r3, [r7, #4]
 810210a:	681b      	ldr	r3, [r3, #0]
 810210c:	685a      	ldr	r2, [r3, #4]
 810210e:	687b      	ldr	r3, [r7, #4]
 8102110:	681b      	ldr	r3, [r3, #0]
 8102112:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8102116:	605a      	str	r2, [r3, #4]
              break;
 8102118:	e019      	b.n	810214e <HAL_ADC_Start_IT+0x266>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 810211a:	687b      	ldr	r3, [r7, #4]
 810211c:	681b      	ldr	r3, [r3, #0]
 810211e:	685a      	ldr	r2, [r3, #4]
 8102120:	687b      	ldr	r3, [r7, #4]
 8102122:	681b      	ldr	r3, [r3, #0]
 8102124:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8102128:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 810212a:	687b      	ldr	r3, [r7, #4]
 810212c:	681b      	ldr	r3, [r3, #0]
 810212e:	685a      	ldr	r2, [r3, #4]
 8102130:	687b      	ldr	r3, [r7, #4]
 8102132:	681b      	ldr	r3, [r3, #0]
 8102134:	f042 0220 	orr.w	r2, r2, #32
 8102138:	605a      	str	r2, [r3, #4]
              break;
 810213a:	e008      	b.n	810214e <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 810213c:	687b      	ldr	r3, [r7, #4]
 810213e:	2200      	movs	r2, #0
 8102140:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 8102144:	e003      	b.n	810214e <HAL_ADC_Start_IT+0x266>
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8102146:	2302      	movs	r3, #2
 8102148:	75fb      	strb	r3, [r7, #23]
 810214a:	e000      	b.n	810214e <HAL_ADC_Start_IT+0x266>
        }
 810214c:	bf00      	nop
  }

  /* Return function status */
  return tmp_hal_status;
 810214e:	7dfb      	ldrb	r3, [r7, #23]
}
 8102150:	4618      	mov	r0, r3
 8102152:	3718      	adds	r7, #24
 8102154:	46bd      	mov	sp, r7
 8102156:	bd80      	pop	{r7, pc}
 8102158:	40022000 	.word	0x40022000
 810215c:	40022100 	.word	0x40022100
 8102160:	40022300 	.word	0x40022300
 8102164:	58026300 	.word	0x58026300

08102168 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8102168:	b480      	push	{r7}
 810216a:	b083      	sub	sp, #12
 810216c:	af00      	add	r7, sp, #0
 810216e:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8102170:	687b      	ldr	r3, [r7, #4]
 8102172:	681b      	ldr	r3, [r3, #0]
 8102174:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8102176:	4618      	mov	r0, r3
 8102178:	370c      	adds	r7, #12
 810217a:	46bd      	mov	sp, r7
 810217c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8102180:	4770      	bx	lr
	...

08102184 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8102184:	b580      	push	{r7, lr}
 8102186:	b08a      	sub	sp, #40	; 0x28
 8102188:	af00      	add	r7, sp, #0
 810218a:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 810218c:	2300      	movs	r3, #0
 810218e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8102190:	687b      	ldr	r3, [r7, #4]
 8102192:	681b      	ldr	r3, [r3, #0]
 8102194:	681b      	ldr	r3, [r3, #0]
 8102196:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8102198:	687b      	ldr	r3, [r7, #4]
 810219a:	681b      	ldr	r3, [r3, #0]
 810219c:	685b      	ldr	r3, [r3, #4]
 810219e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 81021a0:	687b      	ldr	r3, [r7, #4]
 81021a2:	681b      	ldr	r3, [r3, #0]
 81021a4:	4a87      	ldr	r2, [pc, #540]	; (81023c4 <HAL_ADC_IRQHandler+0x240>)
 81021a6:	4293      	cmp	r3, r2
 81021a8:	d004      	beq.n	81021b4 <HAL_ADC_IRQHandler+0x30>
 81021aa:	687b      	ldr	r3, [r7, #4]
 81021ac:	681b      	ldr	r3, [r3, #0]
 81021ae:	4a86      	ldr	r2, [pc, #536]	; (81023c8 <HAL_ADC_IRQHandler+0x244>)
 81021b0:	4293      	cmp	r3, r2
 81021b2:	d101      	bne.n	81021b8 <HAL_ADC_IRQHandler+0x34>
 81021b4:	4b85      	ldr	r3, [pc, #532]	; (81023cc <HAL_ADC_IRQHandler+0x248>)
 81021b6:	e000      	b.n	81021ba <HAL_ADC_IRQHandler+0x36>
 81021b8:	4b85      	ldr	r3, [pc, #532]	; (81023d0 <HAL_ADC_IRQHandler+0x24c>)
 81021ba:	4618      	mov	r0, r3
 81021bc:	f7ff fc28 	bl	8101a10 <LL_ADC_GetMultimode>
 81021c0:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 81021c2:	69fb      	ldr	r3, [r7, #28]
 81021c4:	f003 0302 	and.w	r3, r3, #2
 81021c8:	2b00      	cmp	r3, #0
 81021ca:	d017      	beq.n	81021fc <HAL_ADC_IRQHandler+0x78>
 81021cc:	69bb      	ldr	r3, [r7, #24]
 81021ce:	f003 0302 	and.w	r3, r3, #2
 81021d2:	2b00      	cmp	r3, #0
 81021d4:	d012      	beq.n	81021fc <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 81021d6:	687b      	ldr	r3, [r7, #4]
 81021d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021da:	f003 0310 	and.w	r3, r3, #16
 81021de:	2b00      	cmp	r3, #0
 81021e0:	d105      	bne.n	81021ee <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 81021e2:	687b      	ldr	r3, [r7, #4]
 81021e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81021e6:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 81021ea:	687b      	ldr	r3, [r7, #4]
 81021ec:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 81021ee:	6878      	ldr	r0, [r7, #4]
 81021f0:	f000 ff48 	bl	8103084 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 81021f4:	687b      	ldr	r3, [r7, #4]
 81021f6:	681b      	ldr	r3, [r3, #0]
 81021f8:	2202      	movs	r2, #2
 81021fa:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 81021fc:	69fb      	ldr	r3, [r7, #28]
 81021fe:	f003 0304 	and.w	r3, r3, #4
 8102202:	2b00      	cmp	r3, #0
 8102204:	d004      	beq.n	8102210 <HAL_ADC_IRQHandler+0x8c>
 8102206:	69bb      	ldr	r3, [r7, #24]
 8102208:	f003 0304 	and.w	r3, r3, #4
 810220c:	2b00      	cmp	r3, #0
 810220e:	d10a      	bne.n	8102226 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8102210:	69fb      	ldr	r3, [r7, #28]
 8102212:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8102216:	2b00      	cmp	r3, #0
 8102218:	f000 8083 	beq.w	8102322 <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 810221c:	69bb      	ldr	r3, [r7, #24]
 810221e:	f003 0308 	and.w	r3, r3, #8
 8102222:	2b00      	cmp	r3, #0
 8102224:	d07d      	beq.n	8102322 <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8102226:	687b      	ldr	r3, [r7, #4]
 8102228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810222a:	f003 0310 	and.w	r3, r3, #16
 810222e:	2b00      	cmp	r3, #0
 8102230:	d105      	bne.n	810223e <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8102232:	687b      	ldr	r3, [r7, #4]
 8102234:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102236:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 810223a:	687b      	ldr	r3, [r7, #4]
 810223c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 810223e:	687b      	ldr	r3, [r7, #4]
 8102240:	681b      	ldr	r3, [r3, #0]
 8102242:	4618      	mov	r0, r3
 8102244:	f7ff fb42 	bl	81018cc <LL_ADC_REG_IsTriggerSourceSWStart>
 8102248:	4603      	mov	r3, r0
 810224a:	2b00      	cmp	r3, #0
 810224c:	d062      	beq.n	8102314 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810224e:	687b      	ldr	r3, [r7, #4]
 8102250:	681b      	ldr	r3, [r3, #0]
 8102252:	4a5d      	ldr	r2, [pc, #372]	; (81023c8 <HAL_ADC_IRQHandler+0x244>)
 8102254:	4293      	cmp	r3, r2
 8102256:	d002      	beq.n	810225e <HAL_ADC_IRQHandler+0xda>
 8102258:	687b      	ldr	r3, [r7, #4]
 810225a:	681b      	ldr	r3, [r3, #0]
 810225c:	e000      	b.n	8102260 <HAL_ADC_IRQHandler+0xdc>
 810225e:	4b59      	ldr	r3, [pc, #356]	; (81023c4 <HAL_ADC_IRQHandler+0x240>)
 8102260:	687a      	ldr	r2, [r7, #4]
 8102262:	6812      	ldr	r2, [r2, #0]
 8102264:	4293      	cmp	r3, r2
 8102266:	d008      	beq.n	810227a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102268:	697b      	ldr	r3, [r7, #20]
 810226a:	2b00      	cmp	r3, #0
 810226c:	d005      	beq.n	810227a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 810226e:	697b      	ldr	r3, [r7, #20]
 8102270:	2b05      	cmp	r3, #5
 8102272:	d002      	beq.n	810227a <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8102274:	697b      	ldr	r3, [r7, #20]
 8102276:	2b09      	cmp	r3, #9
 8102278:	d104      	bne.n	8102284 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 810227a:	687b      	ldr	r3, [r7, #4]
 810227c:	681b      	ldr	r3, [r3, #0]
 810227e:	68db      	ldr	r3, [r3, #12]
 8102280:	623b      	str	r3, [r7, #32]
 8102282:	e00c      	b.n	810229e <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8102284:	687b      	ldr	r3, [r7, #4]
 8102286:	681b      	ldr	r3, [r3, #0]
 8102288:	4a4f      	ldr	r2, [pc, #316]	; (81023c8 <HAL_ADC_IRQHandler+0x244>)
 810228a:	4293      	cmp	r3, r2
 810228c:	d002      	beq.n	8102294 <HAL_ADC_IRQHandler+0x110>
 810228e:	687b      	ldr	r3, [r7, #4]
 8102290:	681b      	ldr	r3, [r3, #0]
 8102292:	e000      	b.n	8102296 <HAL_ADC_IRQHandler+0x112>
 8102294:	4b4b      	ldr	r3, [pc, #300]	; (81023c4 <HAL_ADC_IRQHandler+0x240>)
 8102296:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8102298:	693b      	ldr	r3, [r7, #16]
 810229a:	68db      	ldr	r3, [r3, #12]
 810229c:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 810229e:	6a3b      	ldr	r3, [r7, #32]
 81022a0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81022a4:	2b00      	cmp	r3, #0
 81022a6:	d135      	bne.n	8102314 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 81022a8:	687b      	ldr	r3, [r7, #4]
 81022aa:	681b      	ldr	r3, [r3, #0]
 81022ac:	681b      	ldr	r3, [r3, #0]
 81022ae:	f003 0308 	and.w	r3, r3, #8
 81022b2:	2b08      	cmp	r3, #8
 81022b4:	d12e      	bne.n	8102314 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 81022b6:	687b      	ldr	r3, [r7, #4]
 81022b8:	681b      	ldr	r3, [r3, #0]
 81022ba:	4618      	mov	r0, r3
 81022bc:	f7ff fc4d 	bl	8101b5a <LL_ADC_REG_IsConversionOngoing>
 81022c0:	4603      	mov	r3, r0
 81022c2:	2b00      	cmp	r3, #0
 81022c4:	d11a      	bne.n	81022fc <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 81022c6:	687b      	ldr	r3, [r7, #4]
 81022c8:	681b      	ldr	r3, [r3, #0]
 81022ca:	685a      	ldr	r2, [r3, #4]
 81022cc:	687b      	ldr	r3, [r7, #4]
 81022ce:	681b      	ldr	r3, [r3, #0]
 81022d0:	f022 020c 	bic.w	r2, r2, #12
 81022d4:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 81022d6:	687b      	ldr	r3, [r7, #4]
 81022d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 81022de:	687b      	ldr	r3, [r7, #4]
 81022e0:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 81022e2:	687b      	ldr	r3, [r7, #4]
 81022e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022e6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 81022ea:	2b00      	cmp	r3, #0
 81022ec:	d112      	bne.n	8102314 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 81022ee:	687b      	ldr	r3, [r7, #4]
 81022f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81022f2:	f043 0201 	orr.w	r2, r3, #1
 81022f6:	687b      	ldr	r3, [r7, #4]
 81022f8:	655a      	str	r2, [r3, #84]	; 0x54
 81022fa:	e00b      	b.n	8102314 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 81022fc:	687b      	ldr	r3, [r7, #4]
 81022fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102300:	f043 0210 	orr.w	r2, r3, #16
 8102304:	687b      	ldr	r3, [r7, #4]
 8102306:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102308:	687b      	ldr	r3, [r7, #4]
 810230a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810230c:	f043 0201 	orr.w	r2, r3, #1
 8102310:	687b      	ldr	r3, [r7, #4]
 8102312:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8102314:	6878      	ldr	r0, [r7, #4]
 8102316:	f7fe fd05 	bl	8100d24 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 810231a:	687b      	ldr	r3, [r7, #4]
 810231c:	681b      	ldr	r3, [r3, #0]
 810231e:	220c      	movs	r2, #12
 8102320:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8102322:	69fb      	ldr	r3, [r7, #28]
 8102324:	f003 0320 	and.w	r3, r3, #32
 8102328:	2b00      	cmp	r3, #0
 810232a:	d004      	beq.n	8102336 <HAL_ADC_IRQHandler+0x1b2>
 810232c:	69bb      	ldr	r3, [r7, #24]
 810232e:	f003 0320 	and.w	r3, r3, #32
 8102332:	2b00      	cmp	r3, #0
 8102334:	d10b      	bne.n	810234e <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8102336:	69fb      	ldr	r3, [r7, #28]
 8102338:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 810233c:	2b00      	cmp	r3, #0
 810233e:	f000 80a0 	beq.w	8102482 <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8102342:	69bb      	ldr	r3, [r7, #24]
 8102344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102348:	2b00      	cmp	r3, #0
 810234a:	f000 809a 	beq.w	8102482 <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 810234e:	687b      	ldr	r3, [r7, #4]
 8102350:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102352:	f003 0310 	and.w	r3, r3, #16
 8102356:	2b00      	cmp	r3, #0
 8102358:	d105      	bne.n	8102366 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 810235a:	687b      	ldr	r3, [r7, #4]
 810235c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810235e:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8102362:	687b      	ldr	r3, [r7, #4]
 8102364:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8102366:	687b      	ldr	r3, [r7, #4]
 8102368:	681b      	ldr	r3, [r3, #0]
 810236a:	4618      	mov	r0, r3
 810236c:	f7ff faed 	bl	810194a <LL_ADC_INJ_IsTriggerSourceSWStart>
 8102370:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8102372:	687b      	ldr	r3, [r7, #4]
 8102374:	681b      	ldr	r3, [r3, #0]
 8102376:	4618      	mov	r0, r3
 8102378:	f7ff faa8 	bl	81018cc <LL_ADC_REG_IsTriggerSourceSWStart>
 810237c:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 810237e:	687b      	ldr	r3, [r7, #4]
 8102380:	681b      	ldr	r3, [r3, #0]
 8102382:	4a11      	ldr	r2, [pc, #68]	; (81023c8 <HAL_ADC_IRQHandler+0x244>)
 8102384:	4293      	cmp	r3, r2
 8102386:	d002      	beq.n	810238e <HAL_ADC_IRQHandler+0x20a>
 8102388:	687b      	ldr	r3, [r7, #4]
 810238a:	681b      	ldr	r3, [r3, #0]
 810238c:	e000      	b.n	8102390 <HAL_ADC_IRQHandler+0x20c>
 810238e:	4b0d      	ldr	r3, [pc, #52]	; (81023c4 <HAL_ADC_IRQHandler+0x240>)
 8102390:	687a      	ldr	r2, [r7, #4]
 8102392:	6812      	ldr	r2, [r2, #0]
 8102394:	4293      	cmp	r3, r2
 8102396:	d008      	beq.n	81023aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102398:	697b      	ldr	r3, [r7, #20]
 810239a:	2b00      	cmp	r3, #0
 810239c:	d005      	beq.n	81023aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 810239e:	697b      	ldr	r3, [r7, #20]
 81023a0:	2b06      	cmp	r3, #6
 81023a2:	d002      	beq.n	81023aa <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 81023a4:	697b      	ldr	r3, [r7, #20]
 81023a6:	2b07      	cmp	r3, #7
 81023a8:	d104      	bne.n	81023b4 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 81023aa:	687b      	ldr	r3, [r7, #4]
 81023ac:	681b      	ldr	r3, [r3, #0]
 81023ae:	68db      	ldr	r3, [r3, #12]
 81023b0:	623b      	str	r3, [r7, #32]
 81023b2:	e014      	b.n	81023de <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 81023b4:	687b      	ldr	r3, [r7, #4]
 81023b6:	681b      	ldr	r3, [r3, #0]
 81023b8:	4a03      	ldr	r2, [pc, #12]	; (81023c8 <HAL_ADC_IRQHandler+0x244>)
 81023ba:	4293      	cmp	r3, r2
 81023bc:	d00a      	beq.n	81023d4 <HAL_ADC_IRQHandler+0x250>
 81023be:	687b      	ldr	r3, [r7, #4]
 81023c0:	681b      	ldr	r3, [r3, #0]
 81023c2:	e008      	b.n	81023d6 <HAL_ADC_IRQHandler+0x252>
 81023c4:	40022000 	.word	0x40022000
 81023c8:	40022100 	.word	0x40022100
 81023cc:	40022300 	.word	0x40022300
 81023d0:	58026300 	.word	0x58026300
 81023d4:	4b84      	ldr	r3, [pc, #528]	; (81025e8 <HAL_ADC_IRQHandler+0x464>)
 81023d6:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 81023d8:	693b      	ldr	r3, [r7, #16]
 81023da:	68db      	ldr	r3, [r3, #12]
 81023dc:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81023de:	68fb      	ldr	r3, [r7, #12]
 81023e0:	2b00      	cmp	r3, #0
 81023e2:	d10c      	bne.n	81023fe <HAL_ADC_IRQHandler+0x27a>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81023e4:	6a3b      	ldr	r3, [r7, #32]
 81023e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
    if ((tmp_adc_inj_is_trigger_source_sw_start != 0UL)            ||
 81023ea:	2b00      	cmp	r3, #0
 81023ec:	d142      	bne.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
        ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL)      &&
 81023ee:	68bb      	ldr	r3, [r7, #8]
 81023f0:	2b00      	cmp	r3, #0
 81023f2:	d03f      	beq.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
          (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL))))
 81023f4:	6a3b      	ldr	r3, [r7, #32]
 81023f6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
         ((tmp_adc_reg_is_trigger_source_sw_start != 0UL)  &&
 81023fa:	2b00      	cmp	r3, #0
 81023fc:	d13a      	bne.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
    {
      /* If End of Sequence is reached, disable interrupts */
      if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 81023fe:	687b      	ldr	r3, [r7, #4]
 8102400:	681b      	ldr	r3, [r3, #0]
 8102402:	681b      	ldr	r3, [r3, #0]
 8102404:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8102408:	2b40      	cmp	r3, #64	; 0x40
 810240a:	d133      	bne.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
        /* when the last context has been fully processed, JSQR is reset      */
        /* by the hardware. Even if no injected conversion is planned to come */
        /* (queue empty, triggers are ignored), it can start again            */
        /* immediately after setting a new context (JADSTART is still set).   */
        /* Therefore, state of HAL ADC injected group is kept to busy.        */
        if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 810240c:	6a3b      	ldr	r3, [r7, #32]
 810240e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8102412:	2b00      	cmp	r3, #0
 8102414:	d12e      	bne.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
        {
          /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
          /* JADSTART==0 (no conversion on going)                             */
          if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8102416:	687b      	ldr	r3, [r7, #4]
 8102418:	681b      	ldr	r3, [r3, #0]
 810241a:	4618      	mov	r0, r3
 810241c:	f7ff fbb0 	bl	8101b80 <LL_ADC_INJ_IsConversionOngoing>
 8102420:	4603      	mov	r3, r0
 8102422:	2b00      	cmp	r3, #0
 8102424:	d11a      	bne.n	810245c <HAL_ADC_IRQHandler+0x2d8>
          {
            /* Disable ADC end of sequence conversion interrupt  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8102426:	687b      	ldr	r3, [r7, #4]
 8102428:	681b      	ldr	r3, [r3, #0]
 810242a:	685a      	ldr	r2, [r3, #4]
 810242c:	687b      	ldr	r3, [r7, #4]
 810242e:	681b      	ldr	r3, [r3, #0]
 8102430:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8102434:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8102436:	687b      	ldr	r3, [r7, #4]
 8102438:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810243a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 810243e:	687b      	ldr	r3, [r7, #4]
 8102440:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8102442:	687b      	ldr	r3, [r7, #4]
 8102444:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102446:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810244a:	2b00      	cmp	r3, #0
 810244c:	d112      	bne.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 810244e:	687b      	ldr	r3, [r7, #4]
 8102450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102452:	f043 0201 	orr.w	r2, r3, #1
 8102456:	687b      	ldr	r3, [r7, #4]
 8102458:	655a      	str	r2, [r3, #84]	; 0x54
 810245a:	e00b      	b.n	8102474 <HAL_ADC_IRQHandler+0x2f0>
            }
          }
          else
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 810245c:	687b      	ldr	r3, [r7, #4]
 810245e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102460:	f043 0210 	orr.w	r2, r3, #16
 8102464:	687b      	ldr	r3, [r7, #4]
 8102466:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102468:	687b      	ldr	r3, [r7, #4]
 810246a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810246c:	f043 0201 	orr.w	r2, r3, #1
 8102470:	687b      	ldr	r3, [r7, #4]
 8102472:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8102474:	6878      	ldr	r0, [r7, #4]
 8102476:	f000 fddd 	bl	8103034 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 810247a:	687b      	ldr	r3, [r7, #4]
 810247c:	681b      	ldr	r3, [r3, #0]
 810247e:	2260      	movs	r2, #96	; 0x60
 8102480:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8102482:	69fb      	ldr	r3, [r7, #28]
 8102484:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102488:	2b00      	cmp	r3, #0
 810248a:	d011      	beq.n	81024b0 <HAL_ADC_IRQHandler+0x32c>
 810248c:	69bb      	ldr	r3, [r7, #24]
 810248e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8102492:	2b00      	cmp	r3, #0
 8102494:	d00c      	beq.n	81024b0 <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8102496:	687b      	ldr	r3, [r7, #4]
 8102498:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810249a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 810249e:	687b      	ldr	r3, [r7, #4]
 81024a0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 81024a2:	6878      	ldr	r0, [r7, #4]
 81024a4:	f000 f8a8 	bl	81025f8 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 81024a8:	687b      	ldr	r3, [r7, #4]
 81024aa:	681b      	ldr	r3, [r3, #0]
 81024ac:	2280      	movs	r2, #128	; 0x80
 81024ae:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 81024b0:	69fb      	ldr	r3, [r7, #28]
 81024b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81024b6:	2b00      	cmp	r3, #0
 81024b8:	d012      	beq.n	81024e0 <HAL_ADC_IRQHandler+0x35c>
 81024ba:	69bb      	ldr	r3, [r7, #24]
 81024bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81024c0:	2b00      	cmp	r3, #0
 81024c2:	d00d      	beq.n	81024e0 <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 81024c4:	687b      	ldr	r3, [r7, #4]
 81024c6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024c8:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 81024cc:	687b      	ldr	r3, [r7, #4]
 81024ce:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 81024d0:	6878      	ldr	r0, [r7, #4]
 81024d2:	f000 fdc3 	bl	810305c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 81024d6:	687b      	ldr	r3, [r7, #4]
 81024d8:	681b      	ldr	r3, [r3, #0]
 81024da:	f44f 7280 	mov.w	r2, #256	; 0x100
 81024de:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 81024e0:	69fb      	ldr	r3, [r7, #28]
 81024e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81024e6:	2b00      	cmp	r3, #0
 81024e8:	d012      	beq.n	8102510 <HAL_ADC_IRQHandler+0x38c>
 81024ea:	69bb      	ldr	r3, [r7, #24]
 81024ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 81024f0:	2b00      	cmp	r3, #0
 81024f2:	d00d      	beq.n	8102510 <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 81024f4:	687b      	ldr	r3, [r7, #4]
 81024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81024f8:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 81024fc:	687b      	ldr	r3, [r7, #4]
 81024fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8102500:	6878      	ldr	r0, [r7, #4]
 8102502:	f000 fdb5 	bl	8103070 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8102506:	687b      	ldr	r3, [r7, #4]
 8102508:	681b      	ldr	r3, [r3, #0]
 810250a:	f44f 7200 	mov.w	r2, #512	; 0x200
 810250e:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8102510:	69fb      	ldr	r3, [r7, #28]
 8102512:	f003 0310 	and.w	r3, r3, #16
 8102516:	2b00      	cmp	r3, #0
 8102518:	d043      	beq.n	81025a2 <HAL_ADC_IRQHandler+0x41e>
 810251a:	69bb      	ldr	r3, [r7, #24]
 810251c:	f003 0310 	and.w	r3, r3, #16
 8102520:	2b00      	cmp	r3, #0
 8102522:	d03e      	beq.n	81025a2 <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8102524:	687b      	ldr	r3, [r7, #4]
 8102526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8102528:	2b00      	cmp	r3, #0
 810252a:	d102      	bne.n	8102532 <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 810252c:	2301      	movs	r3, #1
 810252e:	627b      	str	r3, [r7, #36]	; 0x24
 8102530:	e021      	b.n	8102576 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8102532:	697b      	ldr	r3, [r7, #20]
 8102534:	2b00      	cmp	r3, #0
 8102536:	d015      	beq.n	8102564 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8102538:	687b      	ldr	r3, [r7, #4]
 810253a:	681b      	ldr	r3, [r3, #0]
 810253c:	4a2a      	ldr	r2, [pc, #168]	; (81025e8 <HAL_ADC_IRQHandler+0x464>)
 810253e:	4293      	cmp	r3, r2
 8102540:	d004      	beq.n	810254c <HAL_ADC_IRQHandler+0x3c8>
 8102542:	687b      	ldr	r3, [r7, #4]
 8102544:	681b      	ldr	r3, [r3, #0]
 8102546:	4a29      	ldr	r2, [pc, #164]	; (81025ec <HAL_ADC_IRQHandler+0x468>)
 8102548:	4293      	cmp	r3, r2
 810254a:	d101      	bne.n	8102550 <HAL_ADC_IRQHandler+0x3cc>
 810254c:	4b28      	ldr	r3, [pc, #160]	; (81025f0 <HAL_ADC_IRQHandler+0x46c>)
 810254e:	e000      	b.n	8102552 <HAL_ADC_IRQHandler+0x3ce>
 8102550:	4b28      	ldr	r3, [pc, #160]	; (81025f4 <HAL_ADC_IRQHandler+0x470>)
 8102552:	4618      	mov	r0, r3
 8102554:	f7ff fa6a 	bl	8101a2c <LL_ADC_GetMultiDMATransfer>
 8102558:	4603      	mov	r3, r0
 810255a:	2b00      	cmp	r3, #0
 810255c:	d00b      	beq.n	8102576 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 810255e:	2301      	movs	r3, #1
 8102560:	627b      	str	r3, [r7, #36]	; 0x24
 8102562:	e008      	b.n	8102576 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8102564:	687b      	ldr	r3, [r7, #4]
 8102566:	681b      	ldr	r3, [r3, #0]
 8102568:	68db      	ldr	r3, [r3, #12]
 810256a:	f003 0303 	and.w	r3, r3, #3
 810256e:	2b00      	cmp	r3, #0
 8102570:	d001      	beq.n	8102576 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8102572:	2301      	movs	r3, #1
 8102574:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8102576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102578:	2b01      	cmp	r3, #1
 810257a:	d10e      	bne.n	810259a <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 810257c:	687b      	ldr	r3, [r7, #4]
 810257e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102580:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8102584:	687b      	ldr	r3, [r7, #4]
 8102586:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8102588:	687b      	ldr	r3, [r7, #4]
 810258a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810258c:	f043 0202 	orr.w	r2, r3, #2
 8102590:	687b      	ldr	r3, [r7, #4]
 8102592:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8102594:	6878      	ldr	r0, [r7, #4]
 8102596:	f000 f839 	bl	810260c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 810259a:	687b      	ldr	r3, [r7, #4]
 810259c:	681b      	ldr	r3, [r3, #0]
 810259e:	2210      	movs	r2, #16
 81025a0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 81025a2:	69fb      	ldr	r3, [r7, #28]
 81025a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025a8:	2b00      	cmp	r3, #0
 81025aa:	d018      	beq.n	81025de <HAL_ADC_IRQHandler+0x45a>
 81025ac:	69bb      	ldr	r3, [r7, #24]
 81025ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 81025b2:	2b00      	cmp	r3, #0
 81025b4:	d013      	beq.n	81025de <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 81025b6:	687b      	ldr	r3, [r7, #4]
 81025b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81025ba:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 81025be:	687b      	ldr	r3, [r7, #4]
 81025c0:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 81025c2:	687b      	ldr	r3, [r7, #4]
 81025c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81025c6:	f043 0208 	orr.w	r2, r3, #8
 81025ca:	687b      	ldr	r3, [r7, #4]
 81025cc:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 81025ce:	687b      	ldr	r3, [r7, #4]
 81025d0:	681b      	ldr	r3, [r3, #0]
 81025d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 81025d6:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 81025d8:	6878      	ldr	r0, [r7, #4]
 81025da:	f000 fd35 	bl	8103048 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 81025de:	bf00      	nop
 81025e0:	3728      	adds	r7, #40	; 0x28
 81025e2:	46bd      	mov	sp, r7
 81025e4:	bd80      	pop	{r7, pc}
 81025e6:	bf00      	nop
 81025e8:	40022000 	.word	0x40022000
 81025ec:	40022100 	.word	0x40022100
 81025f0:	40022300 	.word	0x40022300
 81025f4:	58026300 	.word	0x58026300

081025f8 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 81025f8:	b480      	push	{r7}
 81025fa:	b083      	sub	sp, #12
 81025fc:	af00      	add	r7, sp, #0
 81025fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8102600:	bf00      	nop
 8102602:	370c      	adds	r7, #12
 8102604:	46bd      	mov	sp, r7
 8102606:	f85d 7b04 	ldr.w	r7, [sp], #4
 810260a:	4770      	bx	lr

0810260c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 810260c:	b480      	push	{r7}
 810260e:	b083      	sub	sp, #12
 8102610:	af00      	add	r7, sp, #0
 8102612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8102614:	bf00      	nop
 8102616:	370c      	adds	r7, #12
 8102618:	46bd      	mov	sp, r7
 810261a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810261e:	4770      	bx	lr

08102620 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8102620:	b590      	push	{r4, r7, lr}
 8102622:	b0a1      	sub	sp, #132	; 0x84
 8102624:	af00      	add	r7, sp, #0
 8102626:	6078      	str	r0, [r7, #4]
 8102628:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 810262a:	2300      	movs	r3, #0
 810262c:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8102630:	2300      	movs	r3, #0
 8102632:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8102634:	683b      	ldr	r3, [r7, #0]
 8102636:	68db      	ldr	r3, [r3, #12]
 8102638:	4a9d      	ldr	r2, [pc, #628]	; (81028b0 <HAL_ADC_ConfigChannel+0x290>)
 810263a:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 810263c:	687b      	ldr	r3, [r7, #4]
 810263e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8102642:	2b01      	cmp	r3, #1
 8102644:	d101      	bne.n	810264a <HAL_ADC_ConfigChannel+0x2a>
 8102646:	2302      	movs	r3, #2
 8102648:	e321      	b.n	8102c8e <HAL_ADC_ConfigChannel+0x66e>
 810264a:	687b      	ldr	r3, [r7, #4]
 810264c:	2201      	movs	r2, #1
 810264e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8102652:	687b      	ldr	r3, [r7, #4]
 8102654:	681b      	ldr	r3, [r3, #0]
 8102656:	4618      	mov	r0, r3
 8102658:	f7ff fa7f 	bl	8101b5a <LL_ADC_REG_IsConversionOngoing>
 810265c:	4603      	mov	r3, r0
 810265e:	2b00      	cmp	r3, #0
 8102660:	f040 8306 	bne.w	8102c70 <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8102664:	683b      	ldr	r3, [r7, #0]
 8102666:	681b      	ldr	r3, [r3, #0]
 8102668:	f3c3 0313 	ubfx	r3, r3, #0, #20
 810266c:	2b00      	cmp	r3, #0
 810266e:	d108      	bne.n	8102682 <HAL_ADC_ConfigChannel+0x62>
 8102670:	683b      	ldr	r3, [r7, #0]
 8102672:	681b      	ldr	r3, [r3, #0]
 8102674:	0e9b      	lsrs	r3, r3, #26
 8102676:	f003 031f 	and.w	r3, r3, #31
 810267a:	2201      	movs	r2, #1
 810267c:	fa02 f303 	lsl.w	r3, r2, r3
 8102680:	e016      	b.n	81026b0 <HAL_ADC_ConfigChannel+0x90>
 8102682:	683b      	ldr	r3, [r7, #0]
 8102684:	681b      	ldr	r3, [r3, #0]
 8102686:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102688:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 810268a:	fa93 f3a3 	rbit	r3, r3
 810268e:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8102690:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8102692:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8102694:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8102696:	2b00      	cmp	r3, #0
 8102698:	d101      	bne.n	810269e <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 810269a:	2320      	movs	r3, #32
 810269c:	e003      	b.n	81026a6 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 810269e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 81026a0:	fab3 f383 	clz	r3, r3
 81026a4:	b2db      	uxtb	r3, r3
 81026a6:	f003 031f 	and.w	r3, r3, #31
 81026aa:	2201      	movs	r2, #1
 81026ac:	fa02 f303 	lsl.w	r3, r2, r3
 81026b0:	687a      	ldr	r2, [r7, #4]
 81026b2:	6812      	ldr	r2, [r2, #0]
 81026b4:	69d1      	ldr	r1, [r2, #28]
 81026b6:	687a      	ldr	r2, [r7, #4]
 81026b8:	6812      	ldr	r2, [r2, #0]
 81026ba:	430b      	orrs	r3, r1
 81026bc:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 81026be:	687b      	ldr	r3, [r7, #4]
 81026c0:	6818      	ldr	r0, [r3, #0]
 81026c2:	683b      	ldr	r3, [r7, #0]
 81026c4:	6859      	ldr	r1, [r3, #4]
 81026c6:	683b      	ldr	r3, [r7, #0]
 81026c8:	681b      	ldr	r3, [r3, #0]
 81026ca:	461a      	mov	r2, r3
 81026cc:	f7ff f911 	bl	81018f2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 81026d0:	687b      	ldr	r3, [r7, #4]
 81026d2:	681b      	ldr	r3, [r3, #0]
 81026d4:	4618      	mov	r0, r3
 81026d6:	f7ff fa40 	bl	8101b5a <LL_ADC_REG_IsConversionOngoing>
 81026da:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 81026dc:	687b      	ldr	r3, [r7, #4]
 81026de:	681b      	ldr	r3, [r3, #0]
 81026e0:	4618      	mov	r0, r3
 81026e2:	f7ff fa4d 	bl	8101b80 <LL_ADC_INJ_IsConversionOngoing>
 81026e6:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 81026e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 81026ea:	2b00      	cmp	r3, #0
 81026ec:	f040 80b3 	bne.w	8102856 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 81026f0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 81026f2:	2b00      	cmp	r3, #0
 81026f4:	f040 80af 	bne.w	8102856 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 81026f8:	687b      	ldr	r3, [r7, #4]
 81026fa:	6818      	ldr	r0, [r3, #0]
 81026fc:	683b      	ldr	r3, [r7, #0]
 81026fe:	6819      	ldr	r1, [r3, #0]
 8102700:	683b      	ldr	r3, [r7, #0]
 8102702:	689b      	ldr	r3, [r3, #8]
 8102704:	461a      	mov	r2, r3
 8102706:	f7ff f933 	bl	8101970 <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 810270a:	4b6a      	ldr	r3, [pc, #424]	; (81028b4 <HAL_ADC_ConfigChannel+0x294>)
 810270c:	681b      	ldr	r3, [r3, #0]
 810270e:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8102712:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8102716:	d10b      	bne.n	8102730 <HAL_ADC_ConfigChannel+0x110>
 8102718:	683b      	ldr	r3, [r7, #0]
 810271a:	695a      	ldr	r2, [r3, #20]
 810271c:	687b      	ldr	r3, [r7, #4]
 810271e:	681b      	ldr	r3, [r3, #0]
 8102720:	68db      	ldr	r3, [r3, #12]
 8102722:	089b      	lsrs	r3, r3, #2
 8102724:	f003 0307 	and.w	r3, r3, #7
 8102728:	005b      	lsls	r3, r3, #1
 810272a:	fa02 f303 	lsl.w	r3, r2, r3
 810272e:	e01d      	b.n	810276c <HAL_ADC_ConfigChannel+0x14c>
 8102730:	687b      	ldr	r3, [r7, #4]
 8102732:	681b      	ldr	r3, [r3, #0]
 8102734:	68db      	ldr	r3, [r3, #12]
 8102736:	f003 0310 	and.w	r3, r3, #16
 810273a:	2b00      	cmp	r3, #0
 810273c:	d10b      	bne.n	8102756 <HAL_ADC_ConfigChannel+0x136>
 810273e:	683b      	ldr	r3, [r7, #0]
 8102740:	695a      	ldr	r2, [r3, #20]
 8102742:	687b      	ldr	r3, [r7, #4]
 8102744:	681b      	ldr	r3, [r3, #0]
 8102746:	68db      	ldr	r3, [r3, #12]
 8102748:	089b      	lsrs	r3, r3, #2
 810274a:	f003 0307 	and.w	r3, r3, #7
 810274e:	005b      	lsls	r3, r3, #1
 8102750:	fa02 f303 	lsl.w	r3, r2, r3
 8102754:	e00a      	b.n	810276c <HAL_ADC_ConfigChannel+0x14c>
 8102756:	683b      	ldr	r3, [r7, #0]
 8102758:	695a      	ldr	r2, [r3, #20]
 810275a:	687b      	ldr	r3, [r7, #4]
 810275c:	681b      	ldr	r3, [r3, #0]
 810275e:	68db      	ldr	r3, [r3, #12]
 8102760:	089b      	lsrs	r3, r3, #2
 8102762:	f003 0304 	and.w	r3, r3, #4
 8102766:	005b      	lsls	r3, r3, #1
 8102768:	fa02 f303 	lsl.w	r3, r2, r3
 810276c:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 810276e:	683b      	ldr	r3, [r7, #0]
 8102770:	691b      	ldr	r3, [r3, #16]
 8102772:	2b04      	cmp	r3, #4
 8102774:	d027      	beq.n	81027c6 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8102776:	687b      	ldr	r3, [r7, #4]
 8102778:	6818      	ldr	r0, [r3, #0]
 810277a:	683b      	ldr	r3, [r7, #0]
 810277c:	6919      	ldr	r1, [r3, #16]
 810277e:	683b      	ldr	r3, [r7, #0]
 8102780:	681a      	ldr	r2, [r3, #0]
 8102782:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8102784:	f7ff f84e 	bl	8101824 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8102788:	687b      	ldr	r3, [r7, #4]
 810278a:	6818      	ldr	r0, [r3, #0]
 810278c:	683b      	ldr	r3, [r7, #0]
 810278e:	6919      	ldr	r1, [r3, #16]
 8102790:	683b      	ldr	r3, [r7, #0]
 8102792:	7e5b      	ldrb	r3, [r3, #25]
 8102794:	2b01      	cmp	r3, #1
 8102796:	d102      	bne.n	810279e <HAL_ADC_ConfigChannel+0x17e>
 8102798:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 810279c:	e000      	b.n	81027a0 <HAL_ADC_ConfigChannel+0x180>
 810279e:	2300      	movs	r3, #0
 81027a0:	461a      	mov	r2, r3
 81027a2:	f7ff f878 	bl	8101896 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 81027a6:	687b      	ldr	r3, [r7, #4]
 81027a8:	6818      	ldr	r0, [r3, #0]
 81027aa:	683b      	ldr	r3, [r7, #0]
 81027ac:	6919      	ldr	r1, [r3, #16]
 81027ae:	683b      	ldr	r3, [r7, #0]
 81027b0:	7e1b      	ldrb	r3, [r3, #24]
 81027b2:	2b01      	cmp	r3, #1
 81027b4:	d102      	bne.n	81027bc <HAL_ADC_ConfigChannel+0x19c>
 81027b6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 81027ba:	e000      	b.n	81027be <HAL_ADC_ConfigChannel+0x19e>
 81027bc:	2300      	movs	r3, #0
 81027be:	461a      	mov	r2, r3
 81027c0:	f7ff f850 	bl	8101864 <LL_ADC_SetDataRightShift>
 81027c4:	e047      	b.n	8102856 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027c6:	687b      	ldr	r3, [r7, #4]
 81027c8:	681b      	ldr	r3, [r3, #0]
 81027ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81027cc:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81027d0:	683b      	ldr	r3, [r7, #0]
 81027d2:	681b      	ldr	r3, [r3, #0]
 81027d4:	069b      	lsls	r3, r3, #26
 81027d6:	429a      	cmp	r2, r3
 81027d8:	d107      	bne.n	81027ea <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 81027da:	687b      	ldr	r3, [r7, #4]
 81027dc:	681b      	ldr	r3, [r3, #0]
 81027de:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 81027e0:	687b      	ldr	r3, [r7, #4]
 81027e2:	681b      	ldr	r3, [r3, #0]
 81027e4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 81027e8:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 81027ea:	687b      	ldr	r3, [r7, #4]
 81027ec:	681b      	ldr	r3, [r3, #0]
 81027ee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 81027f0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81027f4:	683b      	ldr	r3, [r7, #0]
 81027f6:	681b      	ldr	r3, [r3, #0]
 81027f8:	069b      	lsls	r3, r3, #26
 81027fa:	429a      	cmp	r2, r3
 81027fc:	d107      	bne.n	810280e <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 81027fe:	687b      	ldr	r3, [r7, #4]
 8102800:	681b      	ldr	r3, [r3, #0]
 8102802:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8102804:	687b      	ldr	r3, [r7, #4]
 8102806:	681b      	ldr	r3, [r3, #0]
 8102808:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 810280c:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 810280e:	687b      	ldr	r3, [r7, #4]
 8102810:	681b      	ldr	r3, [r3, #0]
 8102812:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8102814:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102818:	683b      	ldr	r3, [r7, #0]
 810281a:	681b      	ldr	r3, [r3, #0]
 810281c:	069b      	lsls	r3, r3, #26
 810281e:	429a      	cmp	r2, r3
 8102820:	d107      	bne.n	8102832 <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 8102822:	687b      	ldr	r3, [r7, #4]
 8102824:	681b      	ldr	r3, [r3, #0]
 8102826:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 8102828:	687b      	ldr	r3, [r7, #4]
 810282a:	681b      	ldr	r3, [r3, #0]
 810282c:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102830:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8102832:	687b      	ldr	r3, [r7, #4]
 8102834:	681b      	ldr	r3, [r3, #0]
 8102836:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8102838:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810283c:	683b      	ldr	r3, [r7, #0]
 810283e:	681b      	ldr	r3, [r3, #0]
 8102840:	069b      	lsls	r3, r3, #26
 8102842:	429a      	cmp	r2, r3
 8102844:	d107      	bne.n	8102856 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 8102846:	687b      	ldr	r3, [r7, #4]
 8102848:	681b      	ldr	r3, [r3, #0]
 810284a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 810284c:	687b      	ldr	r3, [r7, #4]
 810284e:	681b      	ldr	r3, [r3, #0]
 8102850:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8102854:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102856:	687b      	ldr	r3, [r7, #4]
 8102858:	681b      	ldr	r3, [r3, #0]
 810285a:	4618      	mov	r0, r3
 810285c:	f7ff f956 	bl	8101b0c <LL_ADC_IsEnabled>
 8102860:	4603      	mov	r3, r0
 8102862:	2b00      	cmp	r3, #0
 8102864:	f040 820d 	bne.w	8102c82 <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8102868:	687b      	ldr	r3, [r7, #4]
 810286a:	6818      	ldr	r0, [r3, #0]
 810286c:	683b      	ldr	r3, [r7, #0]
 810286e:	6819      	ldr	r1, [r3, #0]
 8102870:	683b      	ldr	r3, [r7, #0]
 8102872:	68db      	ldr	r3, [r3, #12]
 8102874:	461a      	mov	r2, r3
 8102876:	f7ff f8a7 	bl	81019c8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 810287a:	683b      	ldr	r3, [r7, #0]
 810287c:	68db      	ldr	r3, [r3, #12]
 810287e:	4a0c      	ldr	r2, [pc, #48]	; (81028b0 <HAL_ADC_ConfigChannel+0x290>)
 8102880:	4293      	cmp	r3, r2
 8102882:	f040 8133 	bne.w	8102aec <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102886:	687b      	ldr	r3, [r7, #4]
 8102888:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 810288a:	683b      	ldr	r3, [r7, #0]
 810288c:	681b      	ldr	r3, [r3, #0]
 810288e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102892:	2b00      	cmp	r3, #0
 8102894:	d110      	bne.n	81028b8 <HAL_ADC_ConfigChannel+0x298>
 8102896:	683b      	ldr	r3, [r7, #0]
 8102898:	681b      	ldr	r3, [r3, #0]
 810289a:	0e9b      	lsrs	r3, r3, #26
 810289c:	3301      	adds	r3, #1
 810289e:	f003 031f 	and.w	r3, r3, #31
 81028a2:	2b09      	cmp	r3, #9
 81028a4:	bf94      	ite	ls
 81028a6:	2301      	movls	r3, #1
 81028a8:	2300      	movhi	r3, #0
 81028aa:	b2db      	uxtb	r3, r3
 81028ac:	e01e      	b.n	81028ec <HAL_ADC_ConfigChannel+0x2cc>
 81028ae:	bf00      	nop
 81028b0:	47ff0000 	.word	0x47ff0000
 81028b4:	5c001000 	.word	0x5c001000
 81028b8:	683b      	ldr	r3, [r7, #0]
 81028ba:	681b      	ldr	r3, [r3, #0]
 81028bc:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81028be:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 81028c0:	fa93 f3a3 	rbit	r3, r3
 81028c4:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 81028c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 81028c8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 81028ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81028cc:	2b00      	cmp	r3, #0
 81028ce:	d101      	bne.n	81028d4 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 81028d0:	2320      	movs	r3, #32
 81028d2:	e003      	b.n	81028dc <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 81028d4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 81028d6:	fab3 f383 	clz	r3, r3
 81028da:	b2db      	uxtb	r3, r3
 81028dc:	3301      	adds	r3, #1
 81028de:	f003 031f 	and.w	r3, r3, #31
 81028e2:	2b09      	cmp	r3, #9
 81028e4:	bf94      	ite	ls
 81028e6:	2301      	movls	r3, #1
 81028e8:	2300      	movhi	r3, #0
 81028ea:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81028ec:	2b00      	cmp	r3, #0
 81028ee:	d079      	beq.n	81029e4 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81028f0:	683b      	ldr	r3, [r7, #0]
 81028f2:	681b      	ldr	r3, [r3, #0]
 81028f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81028f8:	2b00      	cmp	r3, #0
 81028fa:	d107      	bne.n	810290c <HAL_ADC_ConfigChannel+0x2ec>
 81028fc:	683b      	ldr	r3, [r7, #0]
 81028fe:	681b      	ldr	r3, [r3, #0]
 8102900:	0e9b      	lsrs	r3, r3, #26
 8102902:	3301      	adds	r3, #1
 8102904:	069b      	lsls	r3, r3, #26
 8102906:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 810290a:	e015      	b.n	8102938 <HAL_ADC_ConfigChannel+0x318>
 810290c:	683b      	ldr	r3, [r7, #0]
 810290e:	681b      	ldr	r3, [r3, #0]
 8102910:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8102914:	fa93 f3a3 	rbit	r3, r3
 8102918:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 810291a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 810291c:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 810291e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8102920:	2b00      	cmp	r3, #0
 8102922:	d101      	bne.n	8102928 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 8102924:	2320      	movs	r3, #32
 8102926:	e003      	b.n	8102930 <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 8102928:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 810292a:	fab3 f383 	clz	r3, r3
 810292e:	b2db      	uxtb	r3, r3
 8102930:	3301      	adds	r3, #1
 8102932:	069b      	lsls	r3, r3, #26
 8102934:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102938:	683b      	ldr	r3, [r7, #0]
 810293a:	681b      	ldr	r3, [r3, #0]
 810293c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102940:	2b00      	cmp	r3, #0
 8102942:	d109      	bne.n	8102958 <HAL_ADC_ConfigChannel+0x338>
 8102944:	683b      	ldr	r3, [r7, #0]
 8102946:	681b      	ldr	r3, [r3, #0]
 8102948:	0e9b      	lsrs	r3, r3, #26
 810294a:	3301      	adds	r3, #1
 810294c:	f003 031f 	and.w	r3, r3, #31
 8102950:	2101      	movs	r1, #1
 8102952:	fa01 f303 	lsl.w	r3, r1, r3
 8102956:	e017      	b.n	8102988 <HAL_ADC_ConfigChannel+0x368>
 8102958:	683b      	ldr	r3, [r7, #0]
 810295a:	681b      	ldr	r3, [r3, #0]
 810295c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 810295e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8102960:	fa93 f3a3 	rbit	r3, r3
 8102964:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8102966:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8102968:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 810296a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 810296c:	2b00      	cmp	r3, #0
 810296e:	d101      	bne.n	8102974 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 8102970:	2320      	movs	r3, #32
 8102972:	e003      	b.n	810297c <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8102974:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8102976:	fab3 f383 	clz	r3, r3
 810297a:	b2db      	uxtb	r3, r3
 810297c:	3301      	adds	r3, #1
 810297e:	f003 031f 	and.w	r3, r3, #31
 8102982:	2101      	movs	r1, #1
 8102984:	fa01 f303 	lsl.w	r3, r1, r3
 8102988:	ea42 0103 	orr.w	r1, r2, r3
 810298c:	683b      	ldr	r3, [r7, #0]
 810298e:	681b      	ldr	r3, [r3, #0]
 8102990:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102994:	2b00      	cmp	r3, #0
 8102996:	d10a      	bne.n	81029ae <HAL_ADC_ConfigChannel+0x38e>
 8102998:	683b      	ldr	r3, [r7, #0]
 810299a:	681b      	ldr	r3, [r3, #0]
 810299c:	0e9b      	lsrs	r3, r3, #26
 810299e:	3301      	adds	r3, #1
 81029a0:	f003 021f 	and.w	r2, r3, #31
 81029a4:	4613      	mov	r3, r2
 81029a6:	005b      	lsls	r3, r3, #1
 81029a8:	4413      	add	r3, r2
 81029aa:	051b      	lsls	r3, r3, #20
 81029ac:	e018      	b.n	81029e0 <HAL_ADC_ConfigChannel+0x3c0>
 81029ae:	683b      	ldr	r3, [r7, #0]
 81029b0:	681b      	ldr	r3, [r3, #0]
 81029b2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 81029b4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 81029b6:	fa93 f3a3 	rbit	r3, r3
 81029ba:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 81029bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 81029be:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 81029c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029c2:	2b00      	cmp	r3, #0
 81029c4:	d101      	bne.n	81029ca <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 81029c6:	2320      	movs	r3, #32
 81029c8:	e003      	b.n	81029d2 <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 81029ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81029cc:	fab3 f383 	clz	r3, r3
 81029d0:	b2db      	uxtb	r3, r3
 81029d2:	3301      	adds	r3, #1
 81029d4:	f003 021f 	and.w	r2, r3, #31
 81029d8:	4613      	mov	r3, r2
 81029da:	005b      	lsls	r3, r3, #1
 81029dc:	4413      	add	r3, r2
 81029de:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 81029e0:	430b      	orrs	r3, r1
 81029e2:	e07e      	b.n	8102ae2 <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 81029e4:	683b      	ldr	r3, [r7, #0]
 81029e6:	681b      	ldr	r3, [r3, #0]
 81029e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 81029ec:	2b00      	cmp	r3, #0
 81029ee:	d107      	bne.n	8102a00 <HAL_ADC_ConfigChannel+0x3e0>
 81029f0:	683b      	ldr	r3, [r7, #0]
 81029f2:	681b      	ldr	r3, [r3, #0]
 81029f4:	0e9b      	lsrs	r3, r3, #26
 81029f6:	3301      	adds	r3, #1
 81029f8:	069b      	lsls	r3, r3, #26
 81029fa:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 81029fe:	e015      	b.n	8102a2c <HAL_ADC_ConfigChannel+0x40c>
 8102a00:	683b      	ldr	r3, [r7, #0]
 8102a02:	681b      	ldr	r3, [r3, #0]
 8102a04:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8102a08:	fa93 f3a3 	rbit	r3, r3
 8102a0c:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 8102a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8102a10:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 8102a12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a14:	2b00      	cmp	r3, #0
 8102a16:	d101      	bne.n	8102a1c <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 8102a18:	2320      	movs	r3, #32
 8102a1a:	e003      	b.n	8102a24 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 8102a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8102a1e:	fab3 f383 	clz	r3, r3
 8102a22:	b2db      	uxtb	r3, r3
 8102a24:	3301      	adds	r3, #1
 8102a26:	069b      	lsls	r3, r3, #26
 8102a28:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8102a2c:	683b      	ldr	r3, [r7, #0]
 8102a2e:	681b      	ldr	r3, [r3, #0]
 8102a30:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102a34:	2b00      	cmp	r3, #0
 8102a36:	d109      	bne.n	8102a4c <HAL_ADC_ConfigChannel+0x42c>
 8102a38:	683b      	ldr	r3, [r7, #0]
 8102a3a:	681b      	ldr	r3, [r3, #0]
 8102a3c:	0e9b      	lsrs	r3, r3, #26
 8102a3e:	3301      	adds	r3, #1
 8102a40:	f003 031f 	and.w	r3, r3, #31
 8102a44:	2101      	movs	r1, #1
 8102a46:	fa01 f303 	lsl.w	r3, r1, r3
 8102a4a:	e017      	b.n	8102a7c <HAL_ADC_ConfigChannel+0x45c>
 8102a4c:	683b      	ldr	r3, [r7, #0]
 8102a4e:	681b      	ldr	r3, [r3, #0]
 8102a50:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102a52:	69fb      	ldr	r3, [r7, #28]
 8102a54:	fa93 f3a3 	rbit	r3, r3
 8102a58:	61bb      	str	r3, [r7, #24]
  return result;
 8102a5a:	69bb      	ldr	r3, [r7, #24]
 8102a5c:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 8102a5e:	6a3b      	ldr	r3, [r7, #32]
 8102a60:	2b00      	cmp	r3, #0
 8102a62:	d101      	bne.n	8102a68 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8102a64:	2320      	movs	r3, #32
 8102a66:	e003      	b.n	8102a70 <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8102a68:	6a3b      	ldr	r3, [r7, #32]
 8102a6a:	fab3 f383 	clz	r3, r3
 8102a6e:	b2db      	uxtb	r3, r3
 8102a70:	3301      	adds	r3, #1
 8102a72:	f003 031f 	and.w	r3, r3, #31
 8102a76:	2101      	movs	r1, #1
 8102a78:	fa01 f303 	lsl.w	r3, r1, r3
 8102a7c:	ea42 0103 	orr.w	r1, r2, r3
 8102a80:	683b      	ldr	r3, [r7, #0]
 8102a82:	681b      	ldr	r3, [r3, #0]
 8102a84:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8102a88:	2b00      	cmp	r3, #0
 8102a8a:	d10d      	bne.n	8102aa8 <HAL_ADC_ConfigChannel+0x488>
 8102a8c:	683b      	ldr	r3, [r7, #0]
 8102a8e:	681b      	ldr	r3, [r3, #0]
 8102a90:	0e9b      	lsrs	r3, r3, #26
 8102a92:	3301      	adds	r3, #1
 8102a94:	f003 021f 	and.w	r2, r3, #31
 8102a98:	4613      	mov	r3, r2
 8102a9a:	005b      	lsls	r3, r3, #1
 8102a9c:	4413      	add	r3, r2
 8102a9e:	3b1e      	subs	r3, #30
 8102aa0:	051b      	lsls	r3, r3, #20
 8102aa2:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8102aa6:	e01b      	b.n	8102ae0 <HAL_ADC_ConfigChannel+0x4c0>
 8102aa8:	683b      	ldr	r3, [r7, #0]
 8102aaa:	681b      	ldr	r3, [r3, #0]
 8102aac:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8102aae:	693b      	ldr	r3, [r7, #16]
 8102ab0:	fa93 f3a3 	rbit	r3, r3
 8102ab4:	60fb      	str	r3, [r7, #12]
  return result;
 8102ab6:	68fb      	ldr	r3, [r7, #12]
 8102ab8:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8102aba:	697b      	ldr	r3, [r7, #20]
 8102abc:	2b00      	cmp	r3, #0
 8102abe:	d101      	bne.n	8102ac4 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 8102ac0:	2320      	movs	r3, #32
 8102ac2:	e003      	b.n	8102acc <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8102ac4:	697b      	ldr	r3, [r7, #20]
 8102ac6:	fab3 f383 	clz	r3, r3
 8102aca:	b2db      	uxtb	r3, r3
 8102acc:	3301      	adds	r3, #1
 8102ace:	f003 021f 	and.w	r2, r3, #31
 8102ad2:	4613      	mov	r3, r2
 8102ad4:	005b      	lsls	r3, r3, #1
 8102ad6:	4413      	add	r3, r2
 8102ad8:	3b1e      	subs	r3, #30
 8102ada:	051b      	lsls	r3, r3, #20
 8102adc:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8102ae0:	430b      	orrs	r3, r1
 8102ae2:	683a      	ldr	r2, [r7, #0]
 8102ae4:	6892      	ldr	r2, [r2, #8]
 8102ae6:	4619      	mov	r1, r3
 8102ae8:	f7fe ff42 	bl	8101970 <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8102aec:	683b      	ldr	r3, [r7, #0]
 8102aee:	681b      	ldr	r3, [r3, #0]
 8102af0:	2b00      	cmp	r3, #0
 8102af2:	f280 80c6 	bge.w	8102c82 <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102af6:	687b      	ldr	r3, [r7, #4]
 8102af8:	681b      	ldr	r3, [r3, #0]
 8102afa:	4a67      	ldr	r2, [pc, #412]	; (8102c98 <HAL_ADC_ConfigChannel+0x678>)
 8102afc:	4293      	cmp	r3, r2
 8102afe:	d004      	beq.n	8102b0a <HAL_ADC_ConfigChannel+0x4ea>
 8102b00:	687b      	ldr	r3, [r7, #4]
 8102b02:	681b      	ldr	r3, [r3, #0]
 8102b04:	4a65      	ldr	r2, [pc, #404]	; (8102c9c <HAL_ADC_ConfigChannel+0x67c>)
 8102b06:	4293      	cmp	r3, r2
 8102b08:	d101      	bne.n	8102b0e <HAL_ADC_ConfigChannel+0x4ee>
 8102b0a:	4b65      	ldr	r3, [pc, #404]	; (8102ca0 <HAL_ADC_ConfigChannel+0x680>)
 8102b0c:	e000      	b.n	8102b10 <HAL_ADC_ConfigChannel+0x4f0>
 8102b0e:	4b65      	ldr	r3, [pc, #404]	; (8102ca4 <HAL_ADC_ConfigChannel+0x684>)
 8102b10:	4618      	mov	r0, r3
 8102b12:	f7fe fe79 	bl	8101808 <LL_ADC_GetCommonPathInternalCh>
 8102b16:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8102b18:	687b      	ldr	r3, [r7, #4]
 8102b1a:	681b      	ldr	r3, [r3, #0]
 8102b1c:	4a5e      	ldr	r2, [pc, #376]	; (8102c98 <HAL_ADC_ConfigChannel+0x678>)
 8102b1e:	4293      	cmp	r3, r2
 8102b20:	d004      	beq.n	8102b2c <HAL_ADC_ConfigChannel+0x50c>
 8102b22:	687b      	ldr	r3, [r7, #4]
 8102b24:	681b      	ldr	r3, [r3, #0]
 8102b26:	4a5d      	ldr	r2, [pc, #372]	; (8102c9c <HAL_ADC_ConfigChannel+0x67c>)
 8102b28:	4293      	cmp	r3, r2
 8102b2a:	d10e      	bne.n	8102b4a <HAL_ADC_ConfigChannel+0x52a>
 8102b2c:	485a      	ldr	r0, [pc, #360]	; (8102c98 <HAL_ADC_ConfigChannel+0x678>)
 8102b2e:	f7fe ffed 	bl	8101b0c <LL_ADC_IsEnabled>
 8102b32:	4604      	mov	r4, r0
 8102b34:	4859      	ldr	r0, [pc, #356]	; (8102c9c <HAL_ADC_ConfigChannel+0x67c>)
 8102b36:	f7fe ffe9 	bl	8101b0c <LL_ADC_IsEnabled>
 8102b3a:	4603      	mov	r3, r0
 8102b3c:	4323      	orrs	r3, r4
 8102b3e:	2b00      	cmp	r3, #0
 8102b40:	bf0c      	ite	eq
 8102b42:	2301      	moveq	r3, #1
 8102b44:	2300      	movne	r3, #0
 8102b46:	b2db      	uxtb	r3, r3
 8102b48:	e008      	b.n	8102b5c <HAL_ADC_ConfigChannel+0x53c>
 8102b4a:	4857      	ldr	r0, [pc, #348]	; (8102ca8 <HAL_ADC_ConfigChannel+0x688>)
 8102b4c:	f7fe ffde 	bl	8101b0c <LL_ADC_IsEnabled>
 8102b50:	4603      	mov	r3, r0
 8102b52:	2b00      	cmp	r3, #0
 8102b54:	bf0c      	ite	eq
 8102b56:	2301      	moveq	r3, #1
 8102b58:	2300      	movne	r3, #0
 8102b5a:	b2db      	uxtb	r3, r3
 8102b5c:	2b00      	cmp	r3, #0
 8102b5e:	d07d      	beq.n	8102c5c <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8102b60:	683b      	ldr	r3, [r7, #0]
 8102b62:	681b      	ldr	r3, [r3, #0]
 8102b64:	4a51      	ldr	r2, [pc, #324]	; (8102cac <HAL_ADC_ConfigChannel+0x68c>)
 8102b66:	4293      	cmp	r3, r2
 8102b68:	d130      	bne.n	8102bcc <HAL_ADC_ConfigChannel+0x5ac>
 8102b6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102b6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8102b70:	2b00      	cmp	r3, #0
 8102b72:	d12b      	bne.n	8102bcc <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102b74:	687b      	ldr	r3, [r7, #4]
 8102b76:	681b      	ldr	r3, [r3, #0]
 8102b78:	4a4b      	ldr	r2, [pc, #300]	; (8102ca8 <HAL_ADC_ConfigChannel+0x688>)
 8102b7a:	4293      	cmp	r3, r2
 8102b7c:	f040 8081 	bne.w	8102c82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 8102b80:	687b      	ldr	r3, [r7, #4]
 8102b82:	681b      	ldr	r3, [r3, #0]
 8102b84:	4a44      	ldr	r2, [pc, #272]	; (8102c98 <HAL_ADC_ConfigChannel+0x678>)
 8102b86:	4293      	cmp	r3, r2
 8102b88:	d004      	beq.n	8102b94 <HAL_ADC_ConfigChannel+0x574>
 8102b8a:	687b      	ldr	r3, [r7, #4]
 8102b8c:	681b      	ldr	r3, [r3, #0]
 8102b8e:	4a43      	ldr	r2, [pc, #268]	; (8102c9c <HAL_ADC_ConfigChannel+0x67c>)
 8102b90:	4293      	cmp	r3, r2
 8102b92:	d101      	bne.n	8102b98 <HAL_ADC_ConfigChannel+0x578>
 8102b94:	4a42      	ldr	r2, [pc, #264]	; (8102ca0 <HAL_ADC_ConfigChannel+0x680>)
 8102b96:	e000      	b.n	8102b9a <HAL_ADC_ConfigChannel+0x57a>
 8102b98:	4a42      	ldr	r2, [pc, #264]	; (8102ca4 <HAL_ADC_ConfigChannel+0x684>)
 8102b9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102b9c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8102ba0:	4619      	mov	r1, r3
 8102ba2:	4610      	mov	r0, r2
 8102ba4:	f7fe fe1d 	bl	81017e2 <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8102ba8:	4b41      	ldr	r3, [pc, #260]	; (8102cb0 <HAL_ADC_ConfigChannel+0x690>)
 8102baa:	681b      	ldr	r3, [r3, #0]
 8102bac:	099b      	lsrs	r3, r3, #6
 8102bae:	4a41      	ldr	r2, [pc, #260]	; (8102cb4 <HAL_ADC_ConfigChannel+0x694>)
 8102bb0:	fba2 2303 	umull	r2, r3, r2, r3
 8102bb4:	099b      	lsrs	r3, r3, #6
 8102bb6:	3301      	adds	r3, #1
 8102bb8:	005b      	lsls	r3, r3, #1
 8102bba:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102bbc:	e002      	b.n	8102bc4 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 8102bbe:	68bb      	ldr	r3, [r7, #8]
 8102bc0:	3b01      	subs	r3, #1
 8102bc2:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8102bc4:	68bb      	ldr	r3, [r7, #8]
 8102bc6:	2b00      	cmp	r3, #0
 8102bc8:	d1f9      	bne.n	8102bbe <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8102bca:	e05a      	b.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8102bcc:	683b      	ldr	r3, [r7, #0]
 8102bce:	681b      	ldr	r3, [r3, #0]
 8102bd0:	4a39      	ldr	r2, [pc, #228]	; (8102cb8 <HAL_ADC_ConfigChannel+0x698>)
 8102bd2:	4293      	cmp	r3, r2
 8102bd4:	d11e      	bne.n	8102c14 <HAL_ADC_ConfigChannel+0x5f4>
 8102bd6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102bd8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8102bdc:	2b00      	cmp	r3, #0
 8102bde:	d119      	bne.n	8102c14 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102be0:	687b      	ldr	r3, [r7, #4]
 8102be2:	681b      	ldr	r3, [r3, #0]
 8102be4:	4a30      	ldr	r2, [pc, #192]	; (8102ca8 <HAL_ADC_ConfigChannel+0x688>)
 8102be6:	4293      	cmp	r3, r2
 8102be8:	d14b      	bne.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8102bea:	687b      	ldr	r3, [r7, #4]
 8102bec:	681b      	ldr	r3, [r3, #0]
 8102bee:	4a2a      	ldr	r2, [pc, #168]	; (8102c98 <HAL_ADC_ConfigChannel+0x678>)
 8102bf0:	4293      	cmp	r3, r2
 8102bf2:	d004      	beq.n	8102bfe <HAL_ADC_ConfigChannel+0x5de>
 8102bf4:	687b      	ldr	r3, [r7, #4]
 8102bf6:	681b      	ldr	r3, [r3, #0]
 8102bf8:	4a28      	ldr	r2, [pc, #160]	; (8102c9c <HAL_ADC_ConfigChannel+0x67c>)
 8102bfa:	4293      	cmp	r3, r2
 8102bfc:	d101      	bne.n	8102c02 <HAL_ADC_ConfigChannel+0x5e2>
 8102bfe:	4a28      	ldr	r2, [pc, #160]	; (8102ca0 <HAL_ADC_ConfigChannel+0x680>)
 8102c00:	e000      	b.n	8102c04 <HAL_ADC_ConfigChannel+0x5e4>
 8102c02:	4a28      	ldr	r2, [pc, #160]	; (8102ca4 <HAL_ADC_ConfigChannel+0x684>)
 8102c04:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c06:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8102c0a:	4619      	mov	r1, r3
 8102c0c:	4610      	mov	r0, r2
 8102c0e:	f7fe fde8 	bl	81017e2 <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8102c12:	e036      	b.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8102c14:	683b      	ldr	r3, [r7, #0]
 8102c16:	681b      	ldr	r3, [r3, #0]
 8102c18:	4a28      	ldr	r2, [pc, #160]	; (8102cbc <HAL_ADC_ConfigChannel+0x69c>)
 8102c1a:	4293      	cmp	r3, r2
 8102c1c:	d131      	bne.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
 8102c1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c20:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8102c24:	2b00      	cmp	r3, #0
 8102c26:	d12c      	bne.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 8102c28:	687b      	ldr	r3, [r7, #4]
 8102c2a:	681b      	ldr	r3, [r3, #0]
 8102c2c:	4a1e      	ldr	r2, [pc, #120]	; (8102ca8 <HAL_ADC_ConfigChannel+0x688>)
 8102c2e:	4293      	cmp	r3, r2
 8102c30:	d127      	bne.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 8102c32:	687b      	ldr	r3, [r7, #4]
 8102c34:	681b      	ldr	r3, [r3, #0]
 8102c36:	4a18      	ldr	r2, [pc, #96]	; (8102c98 <HAL_ADC_ConfigChannel+0x678>)
 8102c38:	4293      	cmp	r3, r2
 8102c3a:	d004      	beq.n	8102c46 <HAL_ADC_ConfigChannel+0x626>
 8102c3c:	687b      	ldr	r3, [r7, #4]
 8102c3e:	681b      	ldr	r3, [r3, #0]
 8102c40:	4a16      	ldr	r2, [pc, #88]	; (8102c9c <HAL_ADC_ConfigChannel+0x67c>)
 8102c42:	4293      	cmp	r3, r2
 8102c44:	d101      	bne.n	8102c4a <HAL_ADC_ConfigChannel+0x62a>
 8102c46:	4a16      	ldr	r2, [pc, #88]	; (8102ca0 <HAL_ADC_ConfigChannel+0x680>)
 8102c48:	e000      	b.n	8102c4c <HAL_ADC_ConfigChannel+0x62c>
 8102c4a:	4a16      	ldr	r2, [pc, #88]	; (8102ca4 <HAL_ADC_ConfigChannel+0x684>)
 8102c4c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8102c4e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8102c52:	4619      	mov	r1, r3
 8102c54:	4610      	mov	r0, r2
 8102c56:	f7fe fdc4 	bl	81017e2 <LL_ADC_SetCommonPathInternalCh>
 8102c5a:	e012      	b.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102c5c:	687b      	ldr	r3, [r7, #4]
 8102c5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c60:	f043 0220 	orr.w	r2, r3, #32
 8102c64:	687b      	ldr	r3, [r7, #4]
 8102c66:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8102c68:	2301      	movs	r3, #1
 8102c6a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8102c6e:	e008      	b.n	8102c82 <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8102c70:	687b      	ldr	r3, [r7, #4]
 8102c72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102c74:	f043 0220 	orr.w	r2, r3, #32
 8102c78:	687b      	ldr	r3, [r7, #4]
 8102c7a:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8102c7c:	2301      	movs	r3, #1
 8102c7e:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8102c82:	687b      	ldr	r3, [r7, #4]
 8102c84:	2200      	movs	r2, #0
 8102c86:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8102c8a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8102c8e:	4618      	mov	r0, r3
 8102c90:	3784      	adds	r7, #132	; 0x84
 8102c92:	46bd      	mov	sp, r7
 8102c94:	bd90      	pop	{r4, r7, pc}
 8102c96:	bf00      	nop
 8102c98:	40022000 	.word	0x40022000
 8102c9c:	40022100 	.word	0x40022100
 8102ca0:	40022300 	.word	0x40022300
 8102ca4:	58026300 	.word	0x58026300
 8102ca8:	58026000 	.word	0x58026000
 8102cac:	cb840000 	.word	0xcb840000
 8102cb0:	10000000 	.word	0x10000000
 8102cb4:	053e2d63 	.word	0x053e2d63
 8102cb8:	c7520000 	.word	0xc7520000
 8102cbc:	cfb80000 	.word	0xcfb80000

08102cc0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8102cc0:	b580      	push	{r7, lr}
 8102cc2:	b084      	sub	sp, #16
 8102cc4:	af00      	add	r7, sp, #0
 8102cc6:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102cc8:	687b      	ldr	r3, [r7, #4]
 8102cca:	681b      	ldr	r3, [r3, #0]
 8102ccc:	4618      	mov	r0, r3
 8102cce:	f7fe ff1d 	bl	8101b0c <LL_ADC_IsEnabled>
 8102cd2:	4603      	mov	r3, r0
 8102cd4:	2b00      	cmp	r3, #0
 8102cd6:	d16e      	bne.n	8102db6 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8102cd8:	687b      	ldr	r3, [r7, #4]
 8102cda:	681b      	ldr	r3, [r3, #0]
 8102cdc:	689a      	ldr	r2, [r3, #8]
 8102cde:	4b38      	ldr	r3, [pc, #224]	; (8102dc0 <ADC_Enable+0x100>)
 8102ce0:	4013      	ands	r3, r2
 8102ce2:	2b00      	cmp	r3, #0
 8102ce4:	d00d      	beq.n	8102d02 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102ce6:	687b      	ldr	r3, [r7, #4]
 8102ce8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102cea:	f043 0210 	orr.w	r2, r3, #16
 8102cee:	687b      	ldr	r3, [r7, #4]
 8102cf0:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102cf2:	687b      	ldr	r3, [r7, #4]
 8102cf4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102cf6:	f043 0201 	orr.w	r2, r3, #1
 8102cfa:	687b      	ldr	r3, [r7, #4]
 8102cfc:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8102cfe:	2301      	movs	r3, #1
 8102d00:	e05a      	b.n	8102db8 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8102d02:	687b      	ldr	r3, [r7, #4]
 8102d04:	681b      	ldr	r3, [r3, #0]
 8102d06:	4618      	mov	r0, r3
 8102d08:	f7fe feec 	bl	8101ae4 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8102d0c:	f7fe fd3e 	bl	810178c <HAL_GetTick>
 8102d10:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8102d12:	687b      	ldr	r3, [r7, #4]
 8102d14:	681b      	ldr	r3, [r3, #0]
 8102d16:	4a2b      	ldr	r2, [pc, #172]	; (8102dc4 <ADC_Enable+0x104>)
 8102d18:	4293      	cmp	r3, r2
 8102d1a:	d004      	beq.n	8102d26 <ADC_Enable+0x66>
 8102d1c:	687b      	ldr	r3, [r7, #4]
 8102d1e:	681b      	ldr	r3, [r3, #0]
 8102d20:	4a29      	ldr	r2, [pc, #164]	; (8102dc8 <ADC_Enable+0x108>)
 8102d22:	4293      	cmp	r3, r2
 8102d24:	d101      	bne.n	8102d2a <ADC_Enable+0x6a>
 8102d26:	4b29      	ldr	r3, [pc, #164]	; (8102dcc <ADC_Enable+0x10c>)
 8102d28:	e000      	b.n	8102d2c <ADC_Enable+0x6c>
 8102d2a:	4b29      	ldr	r3, [pc, #164]	; (8102dd0 <ADC_Enable+0x110>)
 8102d2c:	4618      	mov	r0, r3
 8102d2e:	f7fe fe6f 	bl	8101a10 <LL_ADC_GetMultimode>
 8102d32:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8102d34:	687b      	ldr	r3, [r7, #4]
 8102d36:	681b      	ldr	r3, [r3, #0]
 8102d38:	4a23      	ldr	r2, [pc, #140]	; (8102dc8 <ADC_Enable+0x108>)
 8102d3a:	4293      	cmp	r3, r2
 8102d3c:	d002      	beq.n	8102d44 <ADC_Enable+0x84>
 8102d3e:	687b      	ldr	r3, [r7, #4]
 8102d40:	681b      	ldr	r3, [r3, #0]
 8102d42:	e000      	b.n	8102d46 <ADC_Enable+0x86>
 8102d44:	4b1f      	ldr	r3, [pc, #124]	; (8102dc4 <ADC_Enable+0x104>)
 8102d46:	687a      	ldr	r2, [r7, #4]
 8102d48:	6812      	ldr	r2, [r2, #0]
 8102d4a:	4293      	cmp	r3, r2
 8102d4c:	d02c      	beq.n	8102da8 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8102d4e:	68bb      	ldr	r3, [r7, #8]
 8102d50:	2b00      	cmp	r3, #0
 8102d52:	d130      	bne.n	8102db6 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102d54:	e028      	b.n	8102da8 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8102d56:	687b      	ldr	r3, [r7, #4]
 8102d58:	681b      	ldr	r3, [r3, #0]
 8102d5a:	4618      	mov	r0, r3
 8102d5c:	f7fe fed6 	bl	8101b0c <LL_ADC_IsEnabled>
 8102d60:	4603      	mov	r3, r0
 8102d62:	2b00      	cmp	r3, #0
 8102d64:	d104      	bne.n	8102d70 <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8102d66:	687b      	ldr	r3, [r7, #4]
 8102d68:	681b      	ldr	r3, [r3, #0]
 8102d6a:	4618      	mov	r0, r3
 8102d6c:	f7fe feba 	bl	8101ae4 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8102d70:	f7fe fd0c 	bl	810178c <HAL_GetTick>
 8102d74:	4602      	mov	r2, r0
 8102d76:	68fb      	ldr	r3, [r7, #12]
 8102d78:	1ad3      	subs	r3, r2, r3
 8102d7a:	2b02      	cmp	r3, #2
 8102d7c:	d914      	bls.n	8102da8 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102d7e:	687b      	ldr	r3, [r7, #4]
 8102d80:	681b      	ldr	r3, [r3, #0]
 8102d82:	681b      	ldr	r3, [r3, #0]
 8102d84:	f003 0301 	and.w	r3, r3, #1
 8102d88:	2b01      	cmp	r3, #1
 8102d8a:	d00d      	beq.n	8102da8 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8102d8c:	687b      	ldr	r3, [r7, #4]
 8102d8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8102d90:	f043 0210 	orr.w	r2, r3, #16
 8102d94:	687b      	ldr	r3, [r7, #4]
 8102d96:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8102d98:	687b      	ldr	r3, [r7, #4]
 8102d9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8102d9c:	f043 0201 	orr.w	r2, r3, #1
 8102da0:	687b      	ldr	r3, [r7, #4]
 8102da2:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8102da4:	2301      	movs	r3, #1
 8102da6:	e007      	b.n	8102db8 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8102da8:	687b      	ldr	r3, [r7, #4]
 8102daa:	681b      	ldr	r3, [r3, #0]
 8102dac:	681b      	ldr	r3, [r3, #0]
 8102dae:	f003 0301 	and.w	r3, r3, #1
 8102db2:	2b01      	cmp	r3, #1
 8102db4:	d1cf      	bne.n	8102d56 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8102db6:	2300      	movs	r3, #0
}
 8102db8:	4618      	mov	r0, r3
 8102dba:	3710      	adds	r7, #16
 8102dbc:	46bd      	mov	sp, r7
 8102dbe:	bd80      	pop	{r7, pc}
 8102dc0:	8000003f 	.word	0x8000003f
 8102dc4:	40022000 	.word	0x40022000
 8102dc8:	40022100 	.word	0x40022100
 8102dcc:	40022300 	.word	0x40022300
 8102dd0:	58026300 	.word	0x58026300

08102dd4 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8102dd4:	b580      	push	{r7, lr}
 8102dd6:	b084      	sub	sp, #16
 8102dd8:	af00      	add	r7, sp, #0
 8102dda:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8102ddc:	687b      	ldr	r3, [r7, #4]
 8102dde:	681b      	ldr	r3, [r3, #0]
 8102de0:	4a79      	ldr	r2, [pc, #484]	; (8102fc8 <ADC_ConfigureBoostMode+0x1f4>)
 8102de2:	4293      	cmp	r3, r2
 8102de4:	d004      	beq.n	8102df0 <ADC_ConfigureBoostMode+0x1c>
 8102de6:	687b      	ldr	r3, [r7, #4]
 8102de8:	681b      	ldr	r3, [r3, #0]
 8102dea:	4a78      	ldr	r2, [pc, #480]	; (8102fcc <ADC_ConfigureBoostMode+0x1f8>)
 8102dec:	4293      	cmp	r3, r2
 8102dee:	d109      	bne.n	8102e04 <ADC_ConfigureBoostMode+0x30>
 8102df0:	4b77      	ldr	r3, [pc, #476]	; (8102fd0 <ADC_ConfigureBoostMode+0x1fc>)
 8102df2:	689b      	ldr	r3, [r3, #8]
 8102df4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102df8:	2b00      	cmp	r3, #0
 8102dfa:	bf14      	ite	ne
 8102dfc:	2301      	movne	r3, #1
 8102dfe:	2300      	moveq	r3, #0
 8102e00:	b2db      	uxtb	r3, r3
 8102e02:	e008      	b.n	8102e16 <ADC_ConfigureBoostMode+0x42>
 8102e04:	4b73      	ldr	r3, [pc, #460]	; (8102fd4 <ADC_ConfigureBoostMode+0x200>)
 8102e06:	689b      	ldr	r3, [r3, #8]
 8102e08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8102e0c:	2b00      	cmp	r3, #0
 8102e0e:	bf14      	ite	ne
 8102e10:	2301      	movne	r3, #1
 8102e12:	2300      	moveq	r3, #0
 8102e14:	b2db      	uxtb	r3, r3
 8102e16:	2b00      	cmp	r3, #0
 8102e18:	d01c      	beq.n	8102e54 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 8102e1a:	f000 ff21 	bl	8103c60 <HAL_RCC_GetHCLKFreq>
 8102e1e:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102e20:	687b      	ldr	r3, [r7, #4]
 8102e22:	685b      	ldr	r3, [r3, #4]
 8102e24:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102e28:	d010      	beq.n	8102e4c <ADC_ConfigureBoostMode+0x78>
 8102e2a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8102e2e:	d871      	bhi.n	8102f14 <ADC_ConfigureBoostMode+0x140>
 8102e30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8102e34:	d002      	beq.n	8102e3c <ADC_ConfigureBoostMode+0x68>
 8102e36:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8102e3a:	d16b      	bne.n	8102f14 <ADC_ConfigureBoostMode+0x140>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 8102e3c:	687b      	ldr	r3, [r7, #4]
 8102e3e:	685b      	ldr	r3, [r3, #4]
 8102e40:	0c1b      	lsrs	r3, r3, #16
 8102e42:	68fa      	ldr	r2, [r7, #12]
 8102e44:	fbb2 f3f3 	udiv	r3, r2, r3
 8102e48:	60fb      	str	r3, [r7, #12]
        break;
 8102e4a:	e066      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 8102e4c:	68fb      	ldr	r3, [r7, #12]
 8102e4e:	089b      	lsrs	r3, r3, #2
 8102e50:	60fb      	str	r3, [r7, #12]
        break;
 8102e52:	e062      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8102e54:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8102e58:	f001 fe74 	bl	8104b44 <HAL_RCCEx_GetPeriphCLKFreq>
 8102e5c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 8102e5e:	687b      	ldr	r3, [r7, #4]
 8102e60:	685b      	ldr	r3, [r3, #4]
 8102e62:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102e66:	d051      	beq.n	8102f0c <ADC_ConfigureBoostMode+0x138>
 8102e68:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8102e6c:	d854      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102e6e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102e72:	d047      	beq.n	8102f04 <ADC_ConfigureBoostMode+0x130>
 8102e74:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8102e78:	d84e      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102e7a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102e7e:	d03d      	beq.n	8102efc <ADC_ConfigureBoostMode+0x128>
 8102e80:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8102e84:	d848      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102e86:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102e8a:	d033      	beq.n	8102ef4 <ADC_ConfigureBoostMode+0x120>
 8102e8c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8102e90:	d842      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102e92:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102e96:	d029      	beq.n	8102eec <ADC_ConfigureBoostMode+0x118>
 8102e98:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8102e9c:	d83c      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102e9e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102ea2:	d01a      	beq.n	8102eda <ADC_ConfigureBoostMode+0x106>
 8102ea4:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8102ea8:	d836      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102eaa:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102eae:	d014      	beq.n	8102eda <ADC_ConfigureBoostMode+0x106>
 8102eb0:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8102eb4:	d830      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102eb6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102eba:	d00e      	beq.n	8102eda <ADC_ConfigureBoostMode+0x106>
 8102ebc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8102ec0:	d82a      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102ec2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102ec6:	d008      	beq.n	8102eda <ADC_ConfigureBoostMode+0x106>
 8102ec8:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8102ecc:	d824      	bhi.n	8102f18 <ADC_ConfigureBoostMode+0x144>
 8102ece:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8102ed2:	d002      	beq.n	8102eda <ADC_ConfigureBoostMode+0x106>
 8102ed4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8102ed8:	d11e      	bne.n	8102f18 <ADC_ConfigureBoostMode+0x144>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 8102eda:	687b      	ldr	r3, [r7, #4]
 8102edc:	685b      	ldr	r3, [r3, #4]
 8102ede:	0c9b      	lsrs	r3, r3, #18
 8102ee0:	005b      	lsls	r3, r3, #1
 8102ee2:	68fa      	ldr	r2, [r7, #12]
 8102ee4:	fbb2 f3f3 	udiv	r3, r2, r3
 8102ee8:	60fb      	str	r3, [r7, #12]
        break;
 8102eea:	e016      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 8102eec:	68fb      	ldr	r3, [r7, #12]
 8102eee:	091b      	lsrs	r3, r3, #4
 8102ef0:	60fb      	str	r3, [r7, #12]
        break;
 8102ef2:	e012      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 8102ef4:	68fb      	ldr	r3, [r7, #12]
 8102ef6:	095b      	lsrs	r3, r3, #5
 8102ef8:	60fb      	str	r3, [r7, #12]
        break;
 8102efa:	e00e      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 8102efc:	68fb      	ldr	r3, [r7, #12]
 8102efe:	099b      	lsrs	r3, r3, #6
 8102f00:	60fb      	str	r3, [r7, #12]
        break;
 8102f02:	e00a      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 8102f04:	68fb      	ldr	r3, [r7, #12]
 8102f06:	09db      	lsrs	r3, r3, #7
 8102f08:	60fb      	str	r3, [r7, #12]
        break;
 8102f0a:	e006      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 8102f0c:	68fb      	ldr	r3, [r7, #12]
 8102f0e:	0a1b      	lsrs	r3, r3, #8
 8102f10:	60fb      	str	r3, [r7, #12]
        break;
 8102f12:	e002      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
        break;
 8102f14:	bf00      	nop
 8102f16:	e000      	b.n	8102f1a <ADC_ConfigureBoostMode+0x146>
      default:
        break;
 8102f18:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 8102f1a:	f7fe fc43 	bl	81017a4 <HAL_GetREVID>
 8102f1e:	4603      	mov	r3, r0
 8102f20:	f241 0203 	movw	r2, #4099	; 0x1003
 8102f24:	4293      	cmp	r3, r2
 8102f26:	d815      	bhi.n	8102f54 <ADC_ConfigureBoostMode+0x180>
  {
    if (freq > 20000000UL)
 8102f28:	68fb      	ldr	r3, [r7, #12]
 8102f2a:	4a2b      	ldr	r2, [pc, #172]	; (8102fd8 <ADC_ConfigureBoostMode+0x204>)
 8102f2c:	4293      	cmp	r3, r2
 8102f2e:	d908      	bls.n	8102f42 <ADC_ConfigureBoostMode+0x16e>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102f30:	687b      	ldr	r3, [r7, #4]
 8102f32:	681b      	ldr	r3, [r3, #0]
 8102f34:	689a      	ldr	r2, [r3, #8]
 8102f36:	687b      	ldr	r3, [r7, #4]
 8102f38:	681b      	ldr	r3, [r3, #0]
 8102f3a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f3e:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 8102f40:	e03e      	b.n	8102fc0 <ADC_ConfigureBoostMode+0x1ec>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 8102f42:	687b      	ldr	r3, [r7, #4]
 8102f44:	681b      	ldr	r3, [r3, #0]
 8102f46:	689a      	ldr	r2, [r3, #8]
 8102f48:	687b      	ldr	r3, [r7, #4]
 8102f4a:	681b      	ldr	r3, [r3, #0]
 8102f4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8102f50:	609a      	str	r2, [r3, #8]
}
 8102f52:	e035      	b.n	8102fc0 <ADC_ConfigureBoostMode+0x1ec>
    freq /= 2U; /* divider by 2 for Rev.V */
 8102f54:	68fb      	ldr	r3, [r7, #12]
 8102f56:	085b      	lsrs	r3, r3, #1
 8102f58:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 8102f5a:	68fb      	ldr	r3, [r7, #12]
 8102f5c:	4a1f      	ldr	r2, [pc, #124]	; (8102fdc <ADC_ConfigureBoostMode+0x208>)
 8102f5e:	4293      	cmp	r3, r2
 8102f60:	d808      	bhi.n	8102f74 <ADC_ConfigureBoostMode+0x1a0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8102f62:	687b      	ldr	r3, [r7, #4]
 8102f64:	681b      	ldr	r3, [r3, #0]
 8102f66:	689a      	ldr	r2, [r3, #8]
 8102f68:	687b      	ldr	r3, [r7, #4]
 8102f6a:	681b      	ldr	r3, [r3, #0]
 8102f6c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8102f70:	609a      	str	r2, [r3, #8]
}
 8102f72:	e025      	b.n	8102fc0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 12500000UL)
 8102f74:	68fb      	ldr	r3, [r7, #12]
 8102f76:	4a1a      	ldr	r2, [pc, #104]	; (8102fe0 <ADC_ConfigureBoostMode+0x20c>)
 8102f78:	4293      	cmp	r3, r2
 8102f7a:	d80a      	bhi.n	8102f92 <ADC_ConfigureBoostMode+0x1be>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 8102f7c:	687b      	ldr	r3, [r7, #4]
 8102f7e:	681b      	ldr	r3, [r3, #0]
 8102f80:	689b      	ldr	r3, [r3, #8]
 8102f82:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102f86:	687b      	ldr	r3, [r7, #4]
 8102f88:	681b      	ldr	r3, [r3, #0]
 8102f8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8102f8e:	609a      	str	r2, [r3, #8]
}
 8102f90:	e016      	b.n	8102fc0 <ADC_ConfigureBoostMode+0x1ec>
    else if (freq <= 25000000UL)
 8102f92:	68fb      	ldr	r3, [r7, #12]
 8102f94:	4a13      	ldr	r2, [pc, #76]	; (8102fe4 <ADC_ConfigureBoostMode+0x210>)
 8102f96:	4293      	cmp	r3, r2
 8102f98:	d80a      	bhi.n	8102fb0 <ADC_ConfigureBoostMode+0x1dc>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 8102f9a:	687b      	ldr	r3, [r7, #4]
 8102f9c:	681b      	ldr	r3, [r3, #0]
 8102f9e:	689b      	ldr	r3, [r3, #8]
 8102fa0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8102fa4:	687b      	ldr	r3, [r7, #4]
 8102fa6:	681b      	ldr	r3, [r3, #0]
 8102fa8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8102fac:	609a      	str	r2, [r3, #8]
}
 8102fae:	e007      	b.n	8102fc0 <ADC_ConfigureBoostMode+0x1ec>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8102fb0:	687b      	ldr	r3, [r7, #4]
 8102fb2:	681b      	ldr	r3, [r3, #0]
 8102fb4:	689a      	ldr	r2, [r3, #8]
 8102fb6:	687b      	ldr	r3, [r7, #4]
 8102fb8:	681b      	ldr	r3, [r3, #0]
 8102fba:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 8102fbe:	609a      	str	r2, [r3, #8]
}
 8102fc0:	bf00      	nop
 8102fc2:	3710      	adds	r7, #16
 8102fc4:	46bd      	mov	sp, r7
 8102fc6:	bd80      	pop	{r7, pc}
 8102fc8:	40022000 	.word	0x40022000
 8102fcc:	40022100 	.word	0x40022100
 8102fd0:	40022300 	.word	0x40022300
 8102fd4:	58026300 	.word	0x58026300
 8102fd8:	01312d00 	.word	0x01312d00
 8102fdc:	005f5e10 	.word	0x005f5e10
 8102fe0:	00bebc20 	.word	0x00bebc20
 8102fe4:	017d7840 	.word	0x017d7840

08102fe8 <LL_ADC_IsEnabled>:
{
 8102fe8:	b480      	push	{r7}
 8102fea:	b083      	sub	sp, #12
 8102fec:	af00      	add	r7, sp, #0
 8102fee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8102ff0:	687b      	ldr	r3, [r7, #4]
 8102ff2:	689b      	ldr	r3, [r3, #8]
 8102ff4:	f003 0301 	and.w	r3, r3, #1
 8102ff8:	2b01      	cmp	r3, #1
 8102ffa:	d101      	bne.n	8103000 <LL_ADC_IsEnabled+0x18>
 8102ffc:	2301      	movs	r3, #1
 8102ffe:	e000      	b.n	8103002 <LL_ADC_IsEnabled+0x1a>
 8103000:	2300      	movs	r3, #0
}
 8103002:	4618      	mov	r0, r3
 8103004:	370c      	adds	r7, #12
 8103006:	46bd      	mov	sp, r7
 8103008:	f85d 7b04 	ldr.w	r7, [sp], #4
 810300c:	4770      	bx	lr

0810300e <LL_ADC_REG_IsConversionOngoing>:
{
 810300e:	b480      	push	{r7}
 8103010:	b083      	sub	sp, #12
 8103012:	af00      	add	r7, sp, #0
 8103014:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8103016:	687b      	ldr	r3, [r7, #4]
 8103018:	689b      	ldr	r3, [r3, #8]
 810301a:	f003 0304 	and.w	r3, r3, #4
 810301e:	2b04      	cmp	r3, #4
 8103020:	d101      	bne.n	8103026 <LL_ADC_REG_IsConversionOngoing+0x18>
 8103022:	2301      	movs	r3, #1
 8103024:	e000      	b.n	8103028 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8103026:	2300      	movs	r3, #0
}
 8103028:	4618      	mov	r0, r3
 810302a:	370c      	adds	r7, #12
 810302c:	46bd      	mov	sp, r7
 810302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103032:	4770      	bx	lr

08103034 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8103034:	b480      	push	{r7}
 8103036:	b083      	sub	sp, #12
 8103038:	af00      	add	r7, sp, #0
 810303a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 810303c:	bf00      	nop
 810303e:	370c      	adds	r7, #12
 8103040:	46bd      	mov	sp, r7
 8103042:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103046:	4770      	bx	lr

08103048 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8103048:	b480      	push	{r7}
 810304a:	b083      	sub	sp, #12
 810304c:	af00      	add	r7, sp, #0
 810304e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8103050:	bf00      	nop
 8103052:	370c      	adds	r7, #12
 8103054:	46bd      	mov	sp, r7
 8103056:	f85d 7b04 	ldr.w	r7, [sp], #4
 810305a:	4770      	bx	lr

0810305c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 810305c:	b480      	push	{r7}
 810305e:	b083      	sub	sp, #12
 8103060:	af00      	add	r7, sp, #0
 8103062:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8103064:	bf00      	nop
 8103066:	370c      	adds	r7, #12
 8103068:	46bd      	mov	sp, r7
 810306a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810306e:	4770      	bx	lr

08103070 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8103070:	b480      	push	{r7}
 8103072:	b083      	sub	sp, #12
 8103074:	af00      	add	r7, sp, #0
 8103076:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8103078:	bf00      	nop
 810307a:	370c      	adds	r7, #12
 810307c:	46bd      	mov	sp, r7
 810307e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103082:	4770      	bx	lr

08103084 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8103084:	b480      	push	{r7}
 8103086:	b083      	sub	sp, #12
 8103088:	af00      	add	r7, sp, #0
 810308a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 810308c:	bf00      	nop
 810308e:	370c      	adds	r7, #12
 8103090:	46bd      	mov	sp, r7
 8103092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103096:	4770      	bx	lr

08103098 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8103098:	b590      	push	{r4, r7, lr}
 810309a:	b09f      	sub	sp, #124	; 0x7c
 810309c:	af00      	add	r7, sp, #0
 810309e:	6078      	str	r0, [r7, #4]
 81030a0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 81030a2:	2300      	movs	r3, #0
 81030a4:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 81030a8:	687b      	ldr	r3, [r7, #4]
 81030aa:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 81030ae:	2b01      	cmp	r3, #1
 81030b0:	d101      	bne.n	81030b6 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 81030b2:	2302      	movs	r3, #2
 81030b4:	e0c4      	b.n	8103240 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>
 81030b6:	687b      	ldr	r3, [r7, #4]
 81030b8:	2201      	movs	r2, #1
 81030ba:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 81030be:	2300      	movs	r3, #0
 81030c0:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 81030c2:	2300      	movs	r3, #0
 81030c4:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 81030c6:	687b      	ldr	r3, [r7, #4]
 81030c8:	681b      	ldr	r3, [r3, #0]
 81030ca:	4a5f      	ldr	r2, [pc, #380]	; (8103248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81030cc:	4293      	cmp	r3, r2
 81030ce:	d102      	bne.n	81030d6 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 81030d0:	4b5e      	ldr	r3, [pc, #376]	; (810324c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81030d2:	60bb      	str	r3, [r7, #8]
 81030d4:	e001      	b.n	81030da <HAL_ADCEx_MultiModeConfigChannel+0x42>
 81030d6:	2300      	movs	r3, #0
 81030d8:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 81030da:	68bb      	ldr	r3, [r7, #8]
 81030dc:	2b00      	cmp	r3, #0
 81030de:	d10b      	bne.n	81030f8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 81030e0:	687b      	ldr	r3, [r7, #4]
 81030e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81030e4:	f043 0220 	orr.w	r2, r3, #32
 81030e8:	687b      	ldr	r3, [r7, #4]
 81030ea:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 81030ec:	687b      	ldr	r3, [r7, #4]
 81030ee:	2200      	movs	r2, #0
 81030f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 81030f4:	2301      	movs	r3, #1
 81030f6:	e0a3      	b.n	8103240 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 81030f8:	68bb      	ldr	r3, [r7, #8]
 81030fa:	4618      	mov	r0, r3
 81030fc:	f7ff ff87 	bl	810300e <LL_ADC_REG_IsConversionOngoing>
 8103100:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8103102:	687b      	ldr	r3, [r7, #4]
 8103104:	681b      	ldr	r3, [r3, #0]
 8103106:	4618      	mov	r0, r3
 8103108:	f7ff ff81 	bl	810300e <LL_ADC_REG_IsConversionOngoing>
 810310c:	4603      	mov	r3, r0
 810310e:	2b00      	cmp	r3, #0
 8103110:	f040 8085 	bne.w	810321e <HAL_ADCEx_MultiModeConfigChannel+0x186>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8103114:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8103116:	2b00      	cmp	r3, #0
 8103118:	f040 8081 	bne.w	810321e <HAL_ADCEx_MultiModeConfigChannel+0x186>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 810311c:	687b      	ldr	r3, [r7, #4]
 810311e:	681b      	ldr	r3, [r3, #0]
 8103120:	4a49      	ldr	r2, [pc, #292]	; (8103248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103122:	4293      	cmp	r3, r2
 8103124:	d004      	beq.n	8103130 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 8103126:	687b      	ldr	r3, [r7, #4]
 8103128:	681b      	ldr	r3, [r3, #0]
 810312a:	4a48      	ldr	r2, [pc, #288]	; (810324c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 810312c:	4293      	cmp	r3, r2
 810312e:	d101      	bne.n	8103134 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 8103130:	4b47      	ldr	r3, [pc, #284]	; (8103250 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8103132:	e000      	b.n	8103136 <HAL_ADCEx_MultiModeConfigChannel+0x9e>
 8103134:	4b47      	ldr	r3, [pc, #284]	; (8103254 <HAL_ADCEx_MultiModeConfigChannel+0x1bc>)
 8103136:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103138:	683b      	ldr	r3, [r7, #0]
 810313a:	681b      	ldr	r3, [r3, #0]
 810313c:	2b00      	cmp	r3, #0
 810313e:	d03b      	beq.n	81031b8 <HAL_ADCEx_MultiModeConfigChannel+0x120>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 8103140:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103142:	689b      	ldr	r3, [r3, #8]
 8103144:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8103148:	683b      	ldr	r3, [r7, #0]
 810314a:	685b      	ldr	r3, [r3, #4]
 810314c:	431a      	orrs	r2, r3
 810314e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8103150:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8103152:	687b      	ldr	r3, [r7, #4]
 8103154:	681b      	ldr	r3, [r3, #0]
 8103156:	4a3c      	ldr	r2, [pc, #240]	; (8103248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103158:	4293      	cmp	r3, r2
 810315a:	d004      	beq.n	8103166 <HAL_ADCEx_MultiModeConfigChannel+0xce>
 810315c:	687b      	ldr	r3, [r7, #4]
 810315e:	681b      	ldr	r3, [r3, #0]
 8103160:	4a3a      	ldr	r2, [pc, #232]	; (810324c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103162:	4293      	cmp	r3, r2
 8103164:	d10e      	bne.n	8103184 <HAL_ADCEx_MultiModeConfigChannel+0xec>
 8103166:	4838      	ldr	r0, [pc, #224]	; (8103248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 8103168:	f7ff ff3e 	bl	8102fe8 <LL_ADC_IsEnabled>
 810316c:	4604      	mov	r4, r0
 810316e:	4837      	ldr	r0, [pc, #220]	; (810324c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8103170:	f7ff ff3a 	bl	8102fe8 <LL_ADC_IsEnabled>
 8103174:	4603      	mov	r3, r0
 8103176:	4323      	orrs	r3, r4
 8103178:	2b00      	cmp	r3, #0
 810317a:	bf0c      	ite	eq
 810317c:	2301      	moveq	r3, #1
 810317e:	2300      	movne	r3, #0
 8103180:	b2db      	uxtb	r3, r3
 8103182:	e008      	b.n	8103196 <HAL_ADCEx_MultiModeConfigChannel+0xfe>
 8103184:	4834      	ldr	r0, [pc, #208]	; (8103258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 8103186:	f7ff ff2f 	bl	8102fe8 <LL_ADC_IsEnabled>
 810318a:	4603      	mov	r3, r0
 810318c:	2b00      	cmp	r3, #0
 810318e:	bf0c      	ite	eq
 8103190:	2301      	moveq	r3, #1
 8103192:	2300      	movne	r3, #0
 8103194:	b2db      	uxtb	r3, r3
 8103196:	2b00      	cmp	r3, #0
 8103198:	d04b      	beq.n	8103232 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 810319a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810319c:	689b      	ldr	r3, [r3, #8]
 810319e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 81031a2:	f023 030f 	bic.w	r3, r3, #15
 81031a6:	683a      	ldr	r2, [r7, #0]
 81031a8:	6811      	ldr	r1, [r2, #0]
 81031aa:	683a      	ldr	r2, [r7, #0]
 81031ac:	6892      	ldr	r2, [r2, #8]
 81031ae:	430a      	orrs	r2, r1
 81031b0:	431a      	orrs	r2, r3
 81031b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81031b4:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 81031b6:	e03c      	b.n	8103232 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 81031b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81031ba:	689b      	ldr	r3, [r3, #8]
 81031bc:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 81031c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 81031c2:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 81031c4:	687b      	ldr	r3, [r7, #4]
 81031c6:	681b      	ldr	r3, [r3, #0]
 81031c8:	4a1f      	ldr	r2, [pc, #124]	; (8103248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81031ca:	4293      	cmp	r3, r2
 81031cc:	d004      	beq.n	81031d8 <HAL_ADCEx_MultiModeConfigChannel+0x140>
 81031ce:	687b      	ldr	r3, [r7, #4]
 81031d0:	681b      	ldr	r3, [r3, #0]
 81031d2:	4a1e      	ldr	r2, [pc, #120]	; (810324c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81031d4:	4293      	cmp	r3, r2
 81031d6:	d10e      	bne.n	81031f6 <HAL_ADCEx_MultiModeConfigChannel+0x15e>
 81031d8:	481b      	ldr	r0, [pc, #108]	; (8103248 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 81031da:	f7ff ff05 	bl	8102fe8 <LL_ADC_IsEnabled>
 81031de:	4604      	mov	r4, r0
 81031e0:	481a      	ldr	r0, [pc, #104]	; (810324c <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 81031e2:	f7ff ff01 	bl	8102fe8 <LL_ADC_IsEnabled>
 81031e6:	4603      	mov	r3, r0
 81031e8:	4323      	orrs	r3, r4
 81031ea:	2b00      	cmp	r3, #0
 81031ec:	bf0c      	ite	eq
 81031ee:	2301      	moveq	r3, #1
 81031f0:	2300      	movne	r3, #0
 81031f2:	b2db      	uxtb	r3, r3
 81031f4:	e008      	b.n	8103208 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 81031f6:	4818      	ldr	r0, [pc, #96]	; (8103258 <HAL_ADCEx_MultiModeConfigChannel+0x1c0>)
 81031f8:	f7ff fef6 	bl	8102fe8 <LL_ADC_IsEnabled>
 81031fc:	4603      	mov	r3, r0
 81031fe:	2b00      	cmp	r3, #0
 8103200:	bf0c      	ite	eq
 8103202:	2301      	moveq	r3, #1
 8103204:	2300      	movne	r3, #0
 8103206:	b2db      	uxtb	r3, r3
 8103208:	2b00      	cmp	r3, #0
 810320a:	d012      	beq.n	8103232 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 810320c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 810320e:	689b      	ldr	r3, [r3, #8]
 8103210:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8103214:	f023 030f 	bic.w	r3, r3, #15
 8103218:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 810321a:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 810321c:	e009      	b.n	8103232 <HAL_ADCEx_MultiModeConfigChannel+0x19a>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 810321e:	687b      	ldr	r3, [r7, #4]
 8103220:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103222:	f043 0220 	orr.w	r2, r3, #32
 8103226:	687b      	ldr	r3, [r7, #4]
 8103228:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 810322a:	2301      	movs	r3, #1
 810322c:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8103230:	e000      	b.n	8103234 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8103232:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8103234:	687b      	ldr	r3, [r7, #4]
 8103236:	2200      	movs	r2, #0
 8103238:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 810323c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8103240:	4618      	mov	r0, r3
 8103242:	377c      	adds	r7, #124	; 0x7c
 8103244:	46bd      	mov	sp, r7
 8103246:	bd90      	pop	{r4, r7, pc}
 8103248:	40022000 	.word	0x40022000
 810324c:	40022100 	.word	0x40022100
 8103250:	40022300 	.word	0x40022300
 8103254:	58026300 	.word	0x58026300
 8103258:	58026000 	.word	0x58026000

0810325c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 810325c:	b480      	push	{r7}
 810325e:	b085      	sub	sp, #20
 8103260:	af00      	add	r7, sp, #0
 8103262:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8103264:	687b      	ldr	r3, [r7, #4]
 8103266:	f003 0307 	and.w	r3, r3, #7
 810326a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 810326c:	4b0c      	ldr	r3, [pc, #48]	; (81032a0 <__NVIC_SetPriorityGrouping+0x44>)
 810326e:	68db      	ldr	r3, [r3, #12]
 8103270:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8103272:	68ba      	ldr	r2, [r7, #8]
 8103274:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8103278:	4013      	ands	r3, r2
 810327a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 810327c:	68fb      	ldr	r3, [r7, #12]
 810327e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8103280:	68bb      	ldr	r3, [r7, #8]
 8103282:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8103284:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8103288:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810328c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 810328e:	4a04      	ldr	r2, [pc, #16]	; (81032a0 <__NVIC_SetPriorityGrouping+0x44>)
 8103290:	68bb      	ldr	r3, [r7, #8]
 8103292:	60d3      	str	r3, [r2, #12]
}
 8103294:	bf00      	nop
 8103296:	3714      	adds	r7, #20
 8103298:	46bd      	mov	sp, r7
 810329a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810329e:	4770      	bx	lr
 81032a0:	e000ed00 	.word	0xe000ed00

081032a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 81032a4:	b480      	push	{r7}
 81032a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 81032a8:	4b04      	ldr	r3, [pc, #16]	; (81032bc <__NVIC_GetPriorityGrouping+0x18>)
 81032aa:	68db      	ldr	r3, [r3, #12]
 81032ac:	0a1b      	lsrs	r3, r3, #8
 81032ae:	f003 0307 	and.w	r3, r3, #7
}
 81032b2:	4618      	mov	r0, r3
 81032b4:	46bd      	mov	sp, r7
 81032b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032ba:	4770      	bx	lr
 81032bc:	e000ed00 	.word	0xe000ed00

081032c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 81032c0:	b480      	push	{r7}
 81032c2:	b083      	sub	sp, #12
 81032c4:	af00      	add	r7, sp, #0
 81032c6:	4603      	mov	r3, r0
 81032c8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 81032ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032ce:	2b00      	cmp	r3, #0
 81032d0:	db0b      	blt.n	81032ea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 81032d2:	88fb      	ldrh	r3, [r7, #6]
 81032d4:	f003 021f 	and.w	r2, r3, #31
 81032d8:	4907      	ldr	r1, [pc, #28]	; (81032f8 <__NVIC_EnableIRQ+0x38>)
 81032da:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 81032de:	095b      	lsrs	r3, r3, #5
 81032e0:	2001      	movs	r0, #1
 81032e2:	fa00 f202 	lsl.w	r2, r0, r2
 81032e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 81032ea:	bf00      	nop
 81032ec:	370c      	adds	r7, #12
 81032ee:	46bd      	mov	sp, r7
 81032f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81032f4:	4770      	bx	lr
 81032f6:	bf00      	nop
 81032f8:	e000e100 	.word	0xe000e100

081032fc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 81032fc:	b480      	push	{r7}
 81032fe:	b083      	sub	sp, #12
 8103300:	af00      	add	r7, sp, #0
 8103302:	4603      	mov	r3, r0
 8103304:	6039      	str	r1, [r7, #0]
 8103306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8103308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810330c:	2b00      	cmp	r3, #0
 810330e:	db0a      	blt.n	8103326 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103310:	683b      	ldr	r3, [r7, #0]
 8103312:	b2da      	uxtb	r2, r3
 8103314:	490c      	ldr	r1, [pc, #48]	; (8103348 <__NVIC_SetPriority+0x4c>)
 8103316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 810331a:	0112      	lsls	r2, r2, #4
 810331c:	b2d2      	uxtb	r2, r2
 810331e:	440b      	add	r3, r1
 8103320:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8103324:	e00a      	b.n	810333c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8103326:	683b      	ldr	r3, [r7, #0]
 8103328:	b2da      	uxtb	r2, r3
 810332a:	4908      	ldr	r1, [pc, #32]	; (810334c <__NVIC_SetPriority+0x50>)
 810332c:	88fb      	ldrh	r3, [r7, #6]
 810332e:	f003 030f 	and.w	r3, r3, #15
 8103332:	3b04      	subs	r3, #4
 8103334:	0112      	lsls	r2, r2, #4
 8103336:	b2d2      	uxtb	r2, r2
 8103338:	440b      	add	r3, r1
 810333a:	761a      	strb	r2, [r3, #24]
}
 810333c:	bf00      	nop
 810333e:	370c      	adds	r7, #12
 8103340:	46bd      	mov	sp, r7
 8103342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103346:	4770      	bx	lr
 8103348:	e000e100 	.word	0xe000e100
 810334c:	e000ed00 	.word	0xe000ed00

08103350 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103350:	b480      	push	{r7}
 8103352:	b089      	sub	sp, #36	; 0x24
 8103354:	af00      	add	r7, sp, #0
 8103356:	60f8      	str	r0, [r7, #12]
 8103358:	60b9      	str	r1, [r7, #8]
 810335a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 810335c:	68fb      	ldr	r3, [r7, #12]
 810335e:	f003 0307 	and.w	r3, r3, #7
 8103362:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8103364:	69fb      	ldr	r3, [r7, #28]
 8103366:	f1c3 0307 	rsb	r3, r3, #7
 810336a:	2b04      	cmp	r3, #4
 810336c:	bf28      	it	cs
 810336e:	2304      	movcs	r3, #4
 8103370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8103372:	69fb      	ldr	r3, [r7, #28]
 8103374:	3304      	adds	r3, #4
 8103376:	2b06      	cmp	r3, #6
 8103378:	d902      	bls.n	8103380 <NVIC_EncodePriority+0x30>
 810337a:	69fb      	ldr	r3, [r7, #28]
 810337c:	3b03      	subs	r3, #3
 810337e:	e000      	b.n	8103382 <NVIC_EncodePriority+0x32>
 8103380:	2300      	movs	r3, #0
 8103382:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8103384:	f04f 32ff 	mov.w	r2, #4294967295
 8103388:	69bb      	ldr	r3, [r7, #24]
 810338a:	fa02 f303 	lsl.w	r3, r2, r3
 810338e:	43da      	mvns	r2, r3
 8103390:	68bb      	ldr	r3, [r7, #8]
 8103392:	401a      	ands	r2, r3
 8103394:	697b      	ldr	r3, [r7, #20]
 8103396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8103398:	f04f 31ff 	mov.w	r1, #4294967295
 810339c:	697b      	ldr	r3, [r7, #20]
 810339e:	fa01 f303 	lsl.w	r3, r1, r3
 81033a2:	43d9      	mvns	r1, r3
 81033a4:	687b      	ldr	r3, [r7, #4]
 81033a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 81033a8:	4313      	orrs	r3, r2
         );
}
 81033aa:	4618      	mov	r0, r3
 81033ac:	3724      	adds	r7, #36	; 0x24
 81033ae:	46bd      	mov	sp, r7
 81033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81033b4:	4770      	bx	lr
	...

081033b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 81033b8:	b580      	push	{r7, lr}
 81033ba:	b082      	sub	sp, #8
 81033bc:	af00      	add	r7, sp, #0
 81033be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 81033c0:	687b      	ldr	r3, [r7, #4]
 81033c2:	3b01      	subs	r3, #1
 81033c4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 81033c8:	d301      	bcc.n	81033ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 81033ca:	2301      	movs	r3, #1
 81033cc:	e00f      	b.n	81033ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 81033ce:	4a0a      	ldr	r2, [pc, #40]	; (81033f8 <SysTick_Config+0x40>)
 81033d0:	687b      	ldr	r3, [r7, #4]
 81033d2:	3b01      	subs	r3, #1
 81033d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 81033d6:	210f      	movs	r1, #15
 81033d8:	f04f 30ff 	mov.w	r0, #4294967295
 81033dc:	f7ff ff8e 	bl	81032fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 81033e0:	4b05      	ldr	r3, [pc, #20]	; (81033f8 <SysTick_Config+0x40>)
 81033e2:	2200      	movs	r2, #0
 81033e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 81033e6:	4b04      	ldr	r3, [pc, #16]	; (81033f8 <SysTick_Config+0x40>)
 81033e8:	2207      	movs	r2, #7
 81033ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 81033ec:	2300      	movs	r3, #0
}
 81033ee:	4618      	mov	r0, r3
 81033f0:	3708      	adds	r7, #8
 81033f2:	46bd      	mov	sp, r7
 81033f4:	bd80      	pop	{r7, pc}
 81033f6:	bf00      	nop
 81033f8:	e000e010 	.word	0xe000e010

081033fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 81033fc:	b580      	push	{r7, lr}
 81033fe:	b082      	sub	sp, #8
 8103400:	af00      	add	r7, sp, #0
 8103402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8103404:	6878      	ldr	r0, [r7, #4]
 8103406:	f7ff ff29 	bl	810325c <__NVIC_SetPriorityGrouping>
}
 810340a:	bf00      	nop
 810340c:	3708      	adds	r7, #8
 810340e:	46bd      	mov	sp, r7
 8103410:	bd80      	pop	{r7, pc}

08103412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8103412:	b580      	push	{r7, lr}
 8103414:	b086      	sub	sp, #24
 8103416:	af00      	add	r7, sp, #0
 8103418:	4603      	mov	r3, r0
 810341a:	60b9      	str	r1, [r7, #8]
 810341c:	607a      	str	r2, [r7, #4]
 810341e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8103420:	f7ff ff40 	bl	81032a4 <__NVIC_GetPriorityGrouping>
 8103424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8103426:	687a      	ldr	r2, [r7, #4]
 8103428:	68b9      	ldr	r1, [r7, #8]
 810342a:	6978      	ldr	r0, [r7, #20]
 810342c:	f7ff ff90 	bl	8103350 <NVIC_EncodePriority>
 8103430:	4602      	mov	r2, r0
 8103432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8103436:	4611      	mov	r1, r2
 8103438:	4618      	mov	r0, r3
 810343a:	f7ff ff5f 	bl	81032fc <__NVIC_SetPriority>
}
 810343e:	bf00      	nop
 8103440:	3718      	adds	r7, #24
 8103442:	46bd      	mov	sp, r7
 8103444:	bd80      	pop	{r7, pc}

08103446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8103446:	b580      	push	{r7, lr}
 8103448:	b082      	sub	sp, #8
 810344a:	af00      	add	r7, sp, #0
 810344c:	4603      	mov	r3, r0
 810344e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8103450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8103454:	4618      	mov	r0, r3
 8103456:	f7ff ff33 	bl	81032c0 <__NVIC_EnableIRQ>
}
 810345a:	bf00      	nop
 810345c:	3708      	adds	r7, #8
 810345e:	46bd      	mov	sp, r7
 8103460:	bd80      	pop	{r7, pc}

08103462 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8103462:	b580      	push	{r7, lr}
 8103464:	b082      	sub	sp, #8
 8103466:	af00      	add	r7, sp, #0
 8103468:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 810346a:	6878      	ldr	r0, [r7, #4]
 810346c:	f7ff ffa4 	bl	81033b8 <SysTick_Config>
 8103470:	4603      	mov	r3, r0
}
 8103472:	4618      	mov	r0, r3
 8103474:	3708      	adds	r7, #8
 8103476:	46bd      	mov	sp, r7
 8103478:	bd80      	pop	{r7, pc}
	...

0810347c <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 810347c:	b480      	push	{r7}
 810347e:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8103480:	4b07      	ldr	r3, [pc, #28]	; (81034a0 <HAL_GetCurrentCPUID+0x24>)
 8103482:	681b      	ldr	r3, [r3, #0]
 8103484:	091b      	lsrs	r3, r3, #4
 8103486:	f003 030f 	and.w	r3, r3, #15
 810348a:	2b07      	cmp	r3, #7
 810348c:	d101      	bne.n	8103492 <HAL_GetCurrentCPUID+0x16>
  {
    return  CM7_CPUID;
 810348e:	2303      	movs	r3, #3
 8103490:	e000      	b.n	8103494 <HAL_GetCurrentCPUID+0x18>
  }
  else
  {
    return CM4_CPUID;
 8103492:	2301      	movs	r3, #1
  }
}
 8103494:	4618      	mov	r0, r3
 8103496:	46bd      	mov	sp, r7
 8103498:	f85d 7b04 	ldr.w	r7, [sp], #4
 810349c:	4770      	bx	lr
 810349e:	bf00      	nop
 81034a0:	e000ed00 	.word	0xe000ed00

081034a4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 81034a4:	b480      	push	{r7}
 81034a6:	b089      	sub	sp, #36	; 0x24
 81034a8:	af00      	add	r7, sp, #0
 81034aa:	6078      	str	r0, [r7, #4]
 81034ac:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 81034ae:	2300      	movs	r3, #0
 81034b0:	61fb      	str	r3, [r7, #28]
  uint32_t iocurrent;
  uint32_t temp;
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
 81034b2:	4b89      	ldr	r3, [pc, #548]	; (81036d8 <HAL_GPIO_Init+0x234>)
 81034b4:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81034b6:	e194      	b.n	81037e2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 81034b8:	683b      	ldr	r3, [r7, #0]
 81034ba:	681a      	ldr	r2, [r3, #0]
 81034bc:	2101      	movs	r1, #1
 81034be:	69fb      	ldr	r3, [r7, #28]
 81034c0:	fa01 f303 	lsl.w	r3, r1, r3
 81034c4:	4013      	ands	r3, r2
 81034c6:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 81034c8:	693b      	ldr	r3, [r7, #16]
 81034ca:	2b00      	cmp	r3, #0
 81034cc:	f000 8186 	beq.w	81037dc <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81034d0:	683b      	ldr	r3, [r7, #0]
 81034d2:	685b      	ldr	r3, [r3, #4]
 81034d4:	2b01      	cmp	r3, #1
 81034d6:	d00b      	beq.n	81034f0 <HAL_GPIO_Init+0x4c>
 81034d8:	683b      	ldr	r3, [r7, #0]
 81034da:	685b      	ldr	r3, [r3, #4]
 81034dc:	2b02      	cmp	r3, #2
 81034de:	d007      	beq.n	81034f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81034e0:	683b      	ldr	r3, [r7, #0]
 81034e2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 81034e4:	2b11      	cmp	r3, #17
 81034e6:	d003      	beq.n	81034f0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 81034e8:	683b      	ldr	r3, [r7, #0]
 81034ea:	685b      	ldr	r3, [r3, #4]
 81034ec:	2b12      	cmp	r3, #18
 81034ee:	d130      	bne.n	8103552 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 81034f0:	687b      	ldr	r3, [r7, #4]
 81034f2:	689b      	ldr	r3, [r3, #8]
 81034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 81034f6:	69fb      	ldr	r3, [r7, #28]
 81034f8:	005b      	lsls	r3, r3, #1
 81034fa:	2203      	movs	r2, #3
 81034fc:	fa02 f303 	lsl.w	r3, r2, r3
 8103500:	43db      	mvns	r3, r3
 8103502:	69ba      	ldr	r2, [r7, #24]
 8103504:	4013      	ands	r3, r2
 8103506:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8103508:	683b      	ldr	r3, [r7, #0]
 810350a:	68da      	ldr	r2, [r3, #12]
 810350c:	69fb      	ldr	r3, [r7, #28]
 810350e:	005b      	lsls	r3, r3, #1
 8103510:	fa02 f303 	lsl.w	r3, r2, r3
 8103514:	69ba      	ldr	r2, [r7, #24]
 8103516:	4313      	orrs	r3, r2
 8103518:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 810351a:	687b      	ldr	r3, [r7, #4]
 810351c:	69ba      	ldr	r2, [r7, #24]
 810351e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8103520:	687b      	ldr	r3, [r7, #4]
 8103522:	685b      	ldr	r3, [r3, #4]
 8103524:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8103526:	2201      	movs	r2, #1
 8103528:	69fb      	ldr	r3, [r7, #28]
 810352a:	fa02 f303 	lsl.w	r3, r2, r3
 810352e:	43db      	mvns	r3, r3
 8103530:	69ba      	ldr	r2, [r7, #24]
 8103532:	4013      	ands	r3, r2
 8103534:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8103536:	683b      	ldr	r3, [r7, #0]
 8103538:	685b      	ldr	r3, [r3, #4]
 810353a:	091b      	lsrs	r3, r3, #4
 810353c:	f003 0201 	and.w	r2, r3, #1
 8103540:	69fb      	ldr	r3, [r7, #28]
 8103542:	fa02 f303 	lsl.w	r3, r2, r3
 8103546:	69ba      	ldr	r2, [r7, #24]
 8103548:	4313      	orrs	r3, r2
 810354a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 810354c:	687b      	ldr	r3, [r7, #4]
 810354e:	69ba      	ldr	r2, [r7, #24]
 8103550:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8103552:	687b      	ldr	r3, [r7, #4]
 8103554:	68db      	ldr	r3, [r3, #12]
 8103556:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8103558:	69fb      	ldr	r3, [r7, #28]
 810355a:	005b      	lsls	r3, r3, #1
 810355c:	2203      	movs	r2, #3
 810355e:	fa02 f303 	lsl.w	r3, r2, r3
 8103562:	43db      	mvns	r3, r3
 8103564:	69ba      	ldr	r2, [r7, #24]
 8103566:	4013      	ands	r3, r2
 8103568:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 810356a:	683b      	ldr	r3, [r7, #0]
 810356c:	689a      	ldr	r2, [r3, #8]
 810356e:	69fb      	ldr	r3, [r7, #28]
 8103570:	005b      	lsls	r3, r3, #1
 8103572:	fa02 f303 	lsl.w	r3, r2, r3
 8103576:	69ba      	ldr	r2, [r7, #24]
 8103578:	4313      	orrs	r3, r2
 810357a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 810357c:	687b      	ldr	r3, [r7, #4]
 810357e:	69ba      	ldr	r2, [r7, #24]
 8103580:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8103582:	683b      	ldr	r3, [r7, #0]
 8103584:	685b      	ldr	r3, [r3, #4]
 8103586:	2b02      	cmp	r3, #2
 8103588:	d003      	beq.n	8103592 <HAL_GPIO_Init+0xee>
 810358a:	683b      	ldr	r3, [r7, #0]
 810358c:	685b      	ldr	r3, [r3, #4]
 810358e:	2b12      	cmp	r3, #18
 8103590:	d123      	bne.n	81035da <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8103592:	69fb      	ldr	r3, [r7, #28]
 8103594:	08da      	lsrs	r2, r3, #3
 8103596:	687b      	ldr	r3, [r7, #4]
 8103598:	3208      	adds	r2, #8
 810359a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 810359e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 81035a0:	69fb      	ldr	r3, [r7, #28]
 81035a2:	f003 0307 	and.w	r3, r3, #7
 81035a6:	009b      	lsls	r3, r3, #2
 81035a8:	220f      	movs	r2, #15
 81035aa:	fa02 f303 	lsl.w	r3, r2, r3
 81035ae:	43db      	mvns	r3, r3
 81035b0:	69ba      	ldr	r2, [r7, #24]
 81035b2:	4013      	ands	r3, r2
 81035b4:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 81035b6:	683b      	ldr	r3, [r7, #0]
 81035b8:	691a      	ldr	r2, [r3, #16]
 81035ba:	69fb      	ldr	r3, [r7, #28]
 81035bc:	f003 0307 	and.w	r3, r3, #7
 81035c0:	009b      	lsls	r3, r3, #2
 81035c2:	fa02 f303 	lsl.w	r3, r2, r3
 81035c6:	69ba      	ldr	r2, [r7, #24]
 81035c8:	4313      	orrs	r3, r2
 81035ca:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 81035cc:	69fb      	ldr	r3, [r7, #28]
 81035ce:	08da      	lsrs	r2, r3, #3
 81035d0:	687b      	ldr	r3, [r7, #4]
 81035d2:	3208      	adds	r2, #8
 81035d4:	69b9      	ldr	r1, [r7, #24]
 81035d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 81035da:	687b      	ldr	r3, [r7, #4]
 81035dc:	681b      	ldr	r3, [r3, #0]
 81035de:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 81035e0:	69fb      	ldr	r3, [r7, #28]
 81035e2:	005b      	lsls	r3, r3, #1
 81035e4:	2203      	movs	r2, #3
 81035e6:	fa02 f303 	lsl.w	r3, r2, r3
 81035ea:	43db      	mvns	r3, r3
 81035ec:	69ba      	ldr	r2, [r7, #24]
 81035ee:	4013      	ands	r3, r2
 81035f0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 81035f2:	683b      	ldr	r3, [r7, #0]
 81035f4:	685b      	ldr	r3, [r3, #4]
 81035f6:	f003 0203 	and.w	r2, r3, #3
 81035fa:	69fb      	ldr	r3, [r7, #28]
 81035fc:	005b      	lsls	r3, r3, #1
 81035fe:	fa02 f303 	lsl.w	r3, r2, r3
 8103602:	69ba      	ldr	r2, [r7, #24]
 8103604:	4313      	orrs	r3, r2
 8103606:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8103608:	687b      	ldr	r3, [r7, #4]
 810360a:	69ba      	ldr	r2, [r7, #24]
 810360c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 810360e:	683b      	ldr	r3, [r7, #0]
 8103610:	685b      	ldr	r3, [r3, #4]
 8103612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8103616:	2b00      	cmp	r3, #0
 8103618:	f000 80e0 	beq.w	81037dc <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 810361c:	4b2f      	ldr	r3, [pc, #188]	; (81036dc <HAL_GPIO_Init+0x238>)
 810361e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103622:	4a2e      	ldr	r2, [pc, #184]	; (81036dc <HAL_GPIO_Init+0x238>)
 8103624:	f043 0302 	orr.w	r3, r3, #2
 8103628:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 810362c:	4b2b      	ldr	r3, [pc, #172]	; (81036dc <HAL_GPIO_Init+0x238>)
 810362e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8103632:	f003 0302 	and.w	r3, r3, #2
 8103636:	60fb      	str	r3, [r7, #12]
 8103638:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 810363a:	4a29      	ldr	r2, [pc, #164]	; (81036e0 <HAL_GPIO_Init+0x23c>)
 810363c:	69fb      	ldr	r3, [r7, #28]
 810363e:	089b      	lsrs	r3, r3, #2
 8103640:	3302      	adds	r3, #2
 8103642:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8103646:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8103648:	69fb      	ldr	r3, [r7, #28]
 810364a:	f003 0303 	and.w	r3, r3, #3
 810364e:	009b      	lsls	r3, r3, #2
 8103650:	220f      	movs	r2, #15
 8103652:	fa02 f303 	lsl.w	r3, r2, r3
 8103656:	43db      	mvns	r3, r3
 8103658:	69ba      	ldr	r2, [r7, #24]
 810365a:	4013      	ands	r3, r2
 810365c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 810365e:	687b      	ldr	r3, [r7, #4]
 8103660:	4a20      	ldr	r2, [pc, #128]	; (81036e4 <HAL_GPIO_Init+0x240>)
 8103662:	4293      	cmp	r3, r2
 8103664:	d052      	beq.n	810370c <HAL_GPIO_Init+0x268>
 8103666:	687b      	ldr	r3, [r7, #4]
 8103668:	4a1f      	ldr	r2, [pc, #124]	; (81036e8 <HAL_GPIO_Init+0x244>)
 810366a:	4293      	cmp	r3, r2
 810366c:	d031      	beq.n	81036d2 <HAL_GPIO_Init+0x22e>
 810366e:	687b      	ldr	r3, [r7, #4]
 8103670:	4a1e      	ldr	r2, [pc, #120]	; (81036ec <HAL_GPIO_Init+0x248>)
 8103672:	4293      	cmp	r3, r2
 8103674:	d02b      	beq.n	81036ce <HAL_GPIO_Init+0x22a>
 8103676:	687b      	ldr	r3, [r7, #4]
 8103678:	4a1d      	ldr	r2, [pc, #116]	; (81036f0 <HAL_GPIO_Init+0x24c>)
 810367a:	4293      	cmp	r3, r2
 810367c:	d025      	beq.n	81036ca <HAL_GPIO_Init+0x226>
 810367e:	687b      	ldr	r3, [r7, #4]
 8103680:	4a1c      	ldr	r2, [pc, #112]	; (81036f4 <HAL_GPIO_Init+0x250>)
 8103682:	4293      	cmp	r3, r2
 8103684:	d01f      	beq.n	81036c6 <HAL_GPIO_Init+0x222>
 8103686:	687b      	ldr	r3, [r7, #4]
 8103688:	4a1b      	ldr	r2, [pc, #108]	; (81036f8 <HAL_GPIO_Init+0x254>)
 810368a:	4293      	cmp	r3, r2
 810368c:	d019      	beq.n	81036c2 <HAL_GPIO_Init+0x21e>
 810368e:	687b      	ldr	r3, [r7, #4]
 8103690:	4a1a      	ldr	r2, [pc, #104]	; (81036fc <HAL_GPIO_Init+0x258>)
 8103692:	4293      	cmp	r3, r2
 8103694:	d013      	beq.n	81036be <HAL_GPIO_Init+0x21a>
 8103696:	687b      	ldr	r3, [r7, #4]
 8103698:	4a19      	ldr	r2, [pc, #100]	; (8103700 <HAL_GPIO_Init+0x25c>)
 810369a:	4293      	cmp	r3, r2
 810369c:	d00d      	beq.n	81036ba <HAL_GPIO_Init+0x216>
 810369e:	687b      	ldr	r3, [r7, #4]
 81036a0:	4a18      	ldr	r2, [pc, #96]	; (8103704 <HAL_GPIO_Init+0x260>)
 81036a2:	4293      	cmp	r3, r2
 81036a4:	d007      	beq.n	81036b6 <HAL_GPIO_Init+0x212>
 81036a6:	687b      	ldr	r3, [r7, #4]
 81036a8:	4a17      	ldr	r2, [pc, #92]	; (8103708 <HAL_GPIO_Init+0x264>)
 81036aa:	4293      	cmp	r3, r2
 81036ac:	d101      	bne.n	81036b2 <HAL_GPIO_Init+0x20e>
 81036ae:	2309      	movs	r3, #9
 81036b0:	e02d      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036b2:	230a      	movs	r3, #10
 81036b4:	e02b      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036b6:	2308      	movs	r3, #8
 81036b8:	e029      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036ba:	2307      	movs	r3, #7
 81036bc:	e027      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036be:	2306      	movs	r3, #6
 81036c0:	e025      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036c2:	2305      	movs	r3, #5
 81036c4:	e023      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036c6:	2304      	movs	r3, #4
 81036c8:	e021      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036ca:	2303      	movs	r3, #3
 81036cc:	e01f      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036ce:	2302      	movs	r3, #2
 81036d0:	e01d      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036d2:	2301      	movs	r3, #1
 81036d4:	e01b      	b.n	810370e <HAL_GPIO_Init+0x26a>
 81036d6:	bf00      	nop
 81036d8:	580000c0 	.word	0x580000c0
 81036dc:	58024400 	.word	0x58024400
 81036e0:	58000400 	.word	0x58000400
 81036e4:	58020000 	.word	0x58020000
 81036e8:	58020400 	.word	0x58020400
 81036ec:	58020800 	.word	0x58020800
 81036f0:	58020c00 	.word	0x58020c00
 81036f4:	58021000 	.word	0x58021000
 81036f8:	58021400 	.word	0x58021400
 81036fc:	58021800 	.word	0x58021800
 8103700:	58021c00 	.word	0x58021c00
 8103704:	58022000 	.word	0x58022000
 8103708:	58022400 	.word	0x58022400
 810370c:	2300      	movs	r3, #0
 810370e:	69fa      	ldr	r2, [r7, #28]
 8103710:	f002 0203 	and.w	r2, r2, #3
 8103714:	0092      	lsls	r2, r2, #2
 8103716:	4093      	lsls	r3, r2
 8103718:	69ba      	ldr	r2, [r7, #24]
 810371a:	4313      	orrs	r3, r2
 810371c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 810371e:	4938      	ldr	r1, [pc, #224]	; (8103800 <HAL_GPIO_Init+0x35c>)
 8103720:	69fb      	ldr	r3, [r7, #28]
 8103722:	089b      	lsrs	r3, r3, #2
 8103724:	3302      	adds	r3, #2
 8103726:	69ba      	ldr	r2, [r7, #24]
 8103728:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 810372c:	697b      	ldr	r3, [r7, #20]
 810372e:	681b      	ldr	r3, [r3, #0]
 8103730:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103732:	693b      	ldr	r3, [r7, #16]
 8103734:	43db      	mvns	r3, r3
 8103736:	69ba      	ldr	r2, [r7, #24]
 8103738:	4013      	ands	r3, r2
 810373a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 810373c:	683b      	ldr	r3, [r7, #0]
 810373e:	685b      	ldr	r3, [r3, #4]
 8103740:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8103744:	2b00      	cmp	r3, #0
 8103746:	d003      	beq.n	8103750 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8103748:	69ba      	ldr	r2, [r7, #24]
 810374a:	693b      	ldr	r3, [r7, #16]
 810374c:	4313      	orrs	r3, r2
 810374e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8103750:	697b      	ldr	r3, [r7, #20]
 8103752:	69ba      	ldr	r2, [r7, #24]
 8103754:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8103756:	697b      	ldr	r3, [r7, #20]
 8103758:	685b      	ldr	r3, [r3, #4]
 810375a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 810375c:	693b      	ldr	r3, [r7, #16]
 810375e:	43db      	mvns	r3, r3
 8103760:	69ba      	ldr	r2, [r7, #24]
 8103762:	4013      	ands	r3, r2
 8103764:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8103766:	683b      	ldr	r3, [r7, #0]
 8103768:	685b      	ldr	r3, [r3, #4]
 810376a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810376e:	2b00      	cmp	r3, #0
 8103770:	d003      	beq.n	810377a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8103772:	69ba      	ldr	r2, [r7, #24]
 8103774:	693b      	ldr	r3, [r7, #16]
 8103776:	4313      	orrs	r3, r2
 8103778:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 810377a:	697b      	ldr	r3, [r7, #20]
 810377c:	69ba      	ldr	r2, [r7, #24]
 810377e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8103780:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8103784:	681b      	ldr	r3, [r3, #0]
 8103786:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8103788:	693b      	ldr	r3, [r7, #16]
 810378a:	43db      	mvns	r3, r3
 810378c:	69ba      	ldr	r2, [r7, #24]
 810378e:	4013      	ands	r3, r2
 8103790:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8103792:	683b      	ldr	r3, [r7, #0]
 8103794:	685b      	ldr	r3, [r3, #4]
 8103796:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 810379a:	2b00      	cmp	r3, #0
 810379c:	d003      	beq.n	81037a6 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 810379e:	69ba      	ldr	r2, [r7, #24]
 81037a0:	693b      	ldr	r3, [r7, #16]
 81037a2:	4313      	orrs	r3, r2
 81037a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 81037a6:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81037aa:	69bb      	ldr	r3, [r7, #24]
 81037ac:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 81037ae:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 81037b2:	685b      	ldr	r3, [r3, #4]
 81037b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 81037b6:	693b      	ldr	r3, [r7, #16]
 81037b8:	43db      	mvns	r3, r3
 81037ba:	69ba      	ldr	r2, [r7, #24]
 81037bc:	4013      	ands	r3, r2
 81037be:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 81037c0:	683b      	ldr	r3, [r7, #0]
 81037c2:	685b      	ldr	r3, [r3, #4]
 81037c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 81037c8:	2b00      	cmp	r3, #0
 81037ca:	d003      	beq.n	81037d4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 81037cc:	69ba      	ldr	r2, [r7, #24]
 81037ce:	693b      	ldr	r3, [r7, #16]
 81037d0:	4313      	orrs	r3, r2
 81037d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 81037d4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 81037d8:	69bb      	ldr	r3, [r7, #24]
 81037da:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 81037dc:	69fb      	ldr	r3, [r7, #28]
 81037de:	3301      	adds	r3, #1
 81037e0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 81037e2:	683b      	ldr	r3, [r7, #0]
 81037e4:	681a      	ldr	r2, [r3, #0]
 81037e6:	69fb      	ldr	r3, [r7, #28]
 81037e8:	fa22 f303 	lsr.w	r3, r2, r3
 81037ec:	2b00      	cmp	r3, #0
 81037ee:	f47f ae63 	bne.w	81034b8 <HAL_GPIO_Init+0x14>
  }
}
 81037f2:	bf00      	nop
 81037f4:	bf00      	nop
 81037f6:	3724      	adds	r7, #36	; 0x24
 81037f8:	46bd      	mov	sp, r7
 81037fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 81037fe:	4770      	bx	lr
 8103800:	58000400 	.word	0x58000400

08103804 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8103804:	b480      	push	{r7}
 8103806:	b083      	sub	sp, #12
 8103808:	af00      	add	r7, sp, #0
 810380a:	6078      	str	r0, [r7, #4]
 810380c:	460b      	mov	r3, r1
 810380e:	807b      	strh	r3, [r7, #2]
 8103810:	4613      	mov	r3, r2
 8103812:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8103814:	787b      	ldrb	r3, [r7, #1]
 8103816:	2b00      	cmp	r3, #0
 8103818:	d003      	beq.n	8103822 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 810381a:	887a      	ldrh	r2, [r7, #2]
 810381c:	687b      	ldr	r3, [r7, #4]
 810381e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8103820:	e003      	b.n	810382a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8103822:	887b      	ldrh	r3, [r7, #2]
 8103824:	041a      	lsls	r2, r3, #16
 8103826:	687b      	ldr	r3, [r7, #4]
 8103828:	619a      	str	r2, [r3, #24]
}
 810382a:	bf00      	nop
 810382c:	370c      	adds	r7, #12
 810382e:	46bd      	mov	sp, r7
 8103830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103834:	4770      	bx	lr
	...

08103838 <HAL_HSEM_ActivateNotification>:
  * @brief  Activate Semaphore release Notification for a given Semaphores Mask .
  * @param  SemMask: Mask of Released semaphores
  * @retval Semaphore Key
  */
void HAL_HSEM_ActivateNotification(uint32_t SemMask)
{
 8103838:	b480      	push	{r7}
 810383a:	b083      	sub	sp, #12
 810383c:	af00      	add	r7, sp, #0
 810383e:	6078      	str	r0, [r7, #4]
  {
    /*Use interrupt line 1 for CPU2 Master*/
    HSEM->C2IER |= SemMask;
  }
#else
  HSEM_COMMON->IER |= SemMask;
 8103840:	4b05      	ldr	r3, [pc, #20]	; (8103858 <HAL_HSEM_ActivateNotification+0x20>)
 8103842:	681a      	ldr	r2, [r3, #0]
 8103844:	4904      	ldr	r1, [pc, #16]	; (8103858 <HAL_HSEM_ActivateNotification+0x20>)
 8103846:	687b      	ldr	r3, [r7, #4]
 8103848:	4313      	orrs	r3, r2
 810384a:	600b      	str	r3, [r1, #0]
#endif
}
 810384c:	bf00      	nop
 810384e:	370c      	adds	r7, #12
 8103850:	46bd      	mov	sp, r7
 8103852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103856:	4770      	bx	lr
 8103858:	58026510 	.word	0x58026510

0810385c <HAL_PWREx_EnterSTOPMode>:
  *            @arg PWR_D2_DOMAIN : Enter D2 Domain to DSTOP mode.
  *            @arg PWR_D3_DOMAIN : Enter D3/SRD Domain to DSTOP mode.
  * @retval None.
  */
void HAL_PWREx_EnterSTOPMode (uint32_t Regulator, uint8_t STOPEntry, uint32_t Domain)
{
 810385c:	b580      	push	{r7, lr}
 810385e:	b084      	sub	sp, #16
 8103860:	af00      	add	r7, sp, #0
 8103862:	60f8      	str	r0, [r7, #12]
 8103864:	460b      	mov	r3, r1
 8103866:	607a      	str	r2, [r7, #4]
 8103868:	72fb      	strb	r3, [r7, #11]
  assert_param (IS_PWR_REGULATOR (Regulator));
  assert_param (IS_PWR_STOP_ENTRY (STOPEntry));
  assert_param (IS_PWR_DOMAIN (Domain));

  /* Select the regulator state in Stop mode */
  MODIFY_REG (PWR->CR1, PWR_CR1_LPDS, Regulator);
 810386a:	4b37      	ldr	r3, [pc, #220]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 810386c:	681b      	ldr	r3, [r3, #0]
 810386e:	f023 0201 	bic.w	r2, r3, #1
 8103872:	4935      	ldr	r1, [pc, #212]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103874:	68fb      	ldr	r3, [r7, #12]
 8103876:	4313      	orrs	r3, r2
 8103878:	600b      	str	r3, [r1, #0]

  /* Select the domain Power Down DeepSleep */
  if (Domain == PWR_D1_DOMAIN)
 810387a:	687b      	ldr	r3, [r7, #4]
 810387c:	2b00      	cmp	r3, #0
 810387e:	d123      	bne.n	81038c8 <HAL_PWREx_EnterSTOPMode+0x6c>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM7_CPUID)
 8103880:	f7ff fdfc 	bl	810347c <HAL_GetCurrentCPUID>
 8103884:	4603      	mov	r3, r0
 8103886:	2b03      	cmp	r3, #3
 8103888:	d158      	bne.n	810393c <HAL_PWREx_EnterSTOPMode+0xe0>
      return;
    }
#endif /* defined (DUAL_CORE) */

    /* Keep DSTOP mode when D1/CD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D1);
 810388a:	4b2f      	ldr	r3, [pc, #188]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 810388c:	691b      	ldr	r3, [r3, #16]
 810388e:	4a2e      	ldr	r2, [pc, #184]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103890:	f023 0301 	bic.w	r3, r3, #1
 8103894:	6113      	str	r3, [r2, #16]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103896:	4b2d      	ldr	r3, [pc, #180]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 8103898:	691b      	ldr	r3, [r3, #16]
 810389a:	4a2c      	ldr	r2, [pc, #176]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810389c:	f043 0304 	orr.w	r3, r3, #4
 81038a0:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81038a2:	f3bf 8f4f 	dsb	sy
}
 81038a6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81038a8:	f3bf 8f6f 	isb	sy
}
 81038ac:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81038ae:	7afb      	ldrb	r3, [r7, #11]
 81038b0:	2b01      	cmp	r3, #1
 81038b2:	d101      	bne.n	81038b8 <HAL_PWREx_EnterSTOPMode+0x5c>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 81038b4:	bf30      	wfi
 81038b6:	e000      	b.n	81038ba <HAL_PWREx_EnterSTOPMode+0x5e>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 81038b8:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81038ba:	4b24      	ldr	r3, [pc, #144]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038bc:	691b      	ldr	r3, [r3, #16]
 81038be:	4a23      	ldr	r2, [pc, #140]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038c0:	f023 0304 	bic.w	r3, r3, #4
 81038c4:	6113      	str	r3, [r2, #16]
 81038c6:	e03c      	b.n	8103942 <HAL_PWREx_EnterSTOPMode+0xe6>
  }
#if defined (PWR_CPUCR_PDDS_D2)
  else if (Domain == PWR_D2_DOMAIN)
 81038c8:	687b      	ldr	r3, [r7, #4]
 81038ca:	2b01      	cmp	r3, #1
 81038cc:	d123      	bne.n	8103916 <HAL_PWREx_EnterSTOPMode+0xba>
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () != CM4_CPUID)
 81038ce:	f7ff fdd5 	bl	810347c <HAL_GetCurrentCPUID>
 81038d2:	4603      	mov	r3, r0
 81038d4:	2b01      	cmp	r3, #1
 81038d6:	d133      	bne.n	8103940 <HAL_PWREx_EnterSTOPMode+0xe4>
      */
      return;
    }

    /* Keep DSTOP mode when D2 domain enters Deepsleep */
    CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D2);
 81038d8:	4b1b      	ldr	r3, [pc, #108]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 81038da:	695b      	ldr	r3, [r3, #20]
 81038dc:	4a1a      	ldr	r2, [pc, #104]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 81038de:	f023 0302 	bic.w	r3, r3, #2
 81038e2:	6153      	str	r3, [r2, #20]

    /* Set SLEEPDEEP bit of Cortex System Control Register */
    SET_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 81038e4:	4b19      	ldr	r3, [pc, #100]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038e6:	691b      	ldr	r3, [r3, #16]
 81038e8:	4a18      	ldr	r2, [pc, #96]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 81038ea:	f043 0304 	orr.w	r3, r3, #4
 81038ee:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 81038f0:	f3bf 8f4f 	dsb	sy
}
 81038f4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 81038f6:	f3bf 8f6f 	isb	sy
}
 81038fa:	bf00      	nop
    /* Ensure that all instructions are done before entering STOP mode */
    __DSB ();
    __ISB ();

    /* Select Stop mode entry */
    if (STOPEntry == PWR_STOPENTRY_WFI)
 81038fc:	7afb      	ldrb	r3, [r7, #11]
 81038fe:	2b01      	cmp	r3, #1
 8103900:	d101      	bne.n	8103906 <HAL_PWREx_EnterSTOPMode+0xaa>
    {
      /* Request Wait For Interrupt */
      __WFI ();
 8103902:	bf30      	wfi
 8103904:	e000      	b.n	8103908 <HAL_PWREx_EnterSTOPMode+0xac>
    }
    else
    {
      /* Request Wait For Event */
      __WFE ();
 8103906:	bf20      	wfe
    }

    /* Clear SLEEPDEEP bit of Cortex-Mx in the System Control Register */
    CLEAR_BIT (SCB->SCR, SCB_SCR_SLEEPDEEP_Msk);
 8103908:	4b10      	ldr	r3, [pc, #64]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810390a:	691b      	ldr	r3, [r3, #16]
 810390c:	4a0f      	ldr	r2, [pc, #60]	; (810394c <HAL_PWREx_EnterSTOPMode+0xf0>)
 810390e:	f023 0304 	bic.w	r3, r3, #4
 8103912:	6113      	str	r3, [r2, #16]
 8103914:	e015      	b.n	8103942 <HAL_PWREx_EnterSTOPMode+0xe6>
#endif /* defined (PWR_CPUCR_PDDS_D2) */
  else
  {
#if defined (DUAL_CORE)
    /* Check current core */
    if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103916:	f7ff fdb1 	bl	810347c <HAL_GetCurrentCPUID>
 810391a:	4603      	mov	r3, r0
 810391c:	2b03      	cmp	r3, #3
 810391e:	d106      	bne.n	810392e <HAL_PWREx_EnterSTOPMode+0xd2>
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
 8103920:	4b09      	ldr	r3, [pc, #36]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103922:	691b      	ldr	r3, [r3, #16]
 8103924:	4a08      	ldr	r2, [pc, #32]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103926:	f023 0304 	bic.w	r3, r3, #4
 810392a:	6113      	str	r3, [r2, #16]
 810392c:	e009      	b.n	8103942 <HAL_PWREx_EnterSTOPMode+0xe6>
    }
    else
    {
      /* Keep DSTOP mode when D3 domain enters Deepsleep */
      CLEAR_BIT (PWR->CPU2CR, PWR_CPU2CR_PDDS_D3);
 810392e:	4b06      	ldr	r3, [pc, #24]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103930:	695b      	ldr	r3, [r3, #20]
 8103932:	4a05      	ldr	r2, [pc, #20]	; (8103948 <HAL_PWREx_EnterSTOPMode+0xec>)
 8103934:	f023 0304 	bic.w	r3, r3, #4
 8103938:	6153      	str	r3, [r2, #20]
 810393a:	e002      	b.n	8103942 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 810393c:	bf00      	nop
 810393e:	e000      	b.n	8103942 <HAL_PWREx_EnterSTOPMode+0xe6>
      return;
 8103940:	bf00      	nop
#else
    /* Keep DSTOP mode when D3/SRD domain enters Deepsleep */
    CLEAR_BIT (PWR->CPUCR, PWR_CPUCR_PDDS_D3);
#endif  /* defined (DUAL_CORE) */
  }
}
 8103942:	3710      	adds	r7, #16
 8103944:	46bd      	mov	sp, r7
 8103946:	bd80      	pop	{r7, pc}
 8103948:	58024800 	.word	0x58024800
 810394c:	e000ed00 	.word	0xe000ed00

08103950 <HAL_PWREx_ClearPendingEvent>:
  *         enter low power mode using Wait For Event request.
  * @note   Cortex-M7 must be in CRUN mode when calling this API by Cortex-M4.
  * @retval None.
  */
void HAL_PWREx_ClearPendingEvent (void)
{
 8103950:	b580      	push	{r7, lr}
 8103952:	af00      	add	r7, sp, #0
#if defined (DUAL_CORE)
  /* Check the current Core */
  if (HAL_GetCurrentCPUID () == CM7_CPUID)
 8103954:	f7ff fd92 	bl	810347c <HAL_GetCurrentCPUID>
 8103958:	4603      	mov	r3, r0
 810395a:	2b03      	cmp	r3, #3
 810395c:	d101      	bne.n	8103962 <HAL_PWREx_ClearPendingEvent+0x12>
  {
    __WFE ();
 810395e:	bf20      	wfe
    __WFE ();
  }
#else
  __WFE ();
#endif /* defined (DUAL_CORE) */
}
 8103960:	e001      	b.n	8103966 <HAL_PWREx_ClearPendingEvent+0x16>
    __SEV ();
 8103962:	bf40      	sev
    __WFE ();
 8103964:	bf20      	wfe
}
 8103966:	bf00      	nop
 8103968:	bd80      	pop	{r7, pc}
	...

0810396c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 810396c:	b480      	push	{r7}
 810396e:	b089      	sub	sp, #36	; 0x24
 8103970:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8103972:	4bb3      	ldr	r3, [pc, #716]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103974:	691b      	ldr	r3, [r3, #16]
 8103976:	f003 0338 	and.w	r3, r3, #56	; 0x38
 810397a:	2b18      	cmp	r3, #24
 810397c:	f200 8155 	bhi.w	8103c2a <HAL_RCC_GetSysClockFreq+0x2be>
 8103980:	a201      	add	r2, pc, #4	; (adr r2, 8103988 <HAL_RCC_GetSysClockFreq+0x1c>)
 8103982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103986:	bf00      	nop
 8103988:	081039ed 	.word	0x081039ed
 810398c:	08103c2b 	.word	0x08103c2b
 8103990:	08103c2b 	.word	0x08103c2b
 8103994:	08103c2b 	.word	0x08103c2b
 8103998:	08103c2b 	.word	0x08103c2b
 810399c:	08103c2b 	.word	0x08103c2b
 81039a0:	08103c2b 	.word	0x08103c2b
 81039a4:	08103c2b 	.word	0x08103c2b
 81039a8:	08103a13 	.word	0x08103a13
 81039ac:	08103c2b 	.word	0x08103c2b
 81039b0:	08103c2b 	.word	0x08103c2b
 81039b4:	08103c2b 	.word	0x08103c2b
 81039b8:	08103c2b 	.word	0x08103c2b
 81039bc:	08103c2b 	.word	0x08103c2b
 81039c0:	08103c2b 	.word	0x08103c2b
 81039c4:	08103c2b 	.word	0x08103c2b
 81039c8:	08103a19 	.word	0x08103a19
 81039cc:	08103c2b 	.word	0x08103c2b
 81039d0:	08103c2b 	.word	0x08103c2b
 81039d4:	08103c2b 	.word	0x08103c2b
 81039d8:	08103c2b 	.word	0x08103c2b
 81039dc:	08103c2b 	.word	0x08103c2b
 81039e0:	08103c2b 	.word	0x08103c2b
 81039e4:	08103c2b 	.word	0x08103c2b
 81039e8:	08103a1f 	.word	0x08103a1f
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 81039ec:	4b94      	ldr	r3, [pc, #592]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039ee:	681b      	ldr	r3, [r3, #0]
 81039f0:	f003 0320 	and.w	r3, r3, #32
 81039f4:	2b00      	cmp	r3, #0
 81039f6:	d009      	beq.n	8103a0c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81039f8:	4b91      	ldr	r3, [pc, #580]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 81039fa:	681b      	ldr	r3, [r3, #0]
 81039fc:	08db      	lsrs	r3, r3, #3
 81039fe:	f003 0303 	and.w	r3, r3, #3
 8103a02:	4a90      	ldr	r2, [pc, #576]	; (8103c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a04:	fa22 f303 	lsr.w	r3, r2, r3
 8103a08:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8103a0a:	e111      	b.n	8103c30 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8103a0c:	4b8d      	ldr	r3, [pc, #564]	; (8103c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a0e:	61bb      	str	r3, [r7, #24]
    break;
 8103a10:	e10e      	b.n	8103c30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8103a12:	4b8d      	ldr	r3, [pc, #564]	; (8103c48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103a14:	61bb      	str	r3, [r7, #24]
    break;
 8103a16:	e10b      	b.n	8103c30 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8103a18:	4b8c      	ldr	r3, [pc, #560]	; (8103c4c <HAL_RCC_GetSysClockFreq+0x2e0>)
 8103a1a:	61bb      	str	r3, [r7, #24]
    break;
 8103a1c:	e108      	b.n	8103c30 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8103a1e:	4b88      	ldr	r3, [pc, #544]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a22:	f003 0303 	and.w	r3, r3, #3
 8103a26:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8103a28:	4b85      	ldr	r3, [pc, #532]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8103a2c:	091b      	lsrs	r3, r3, #4
 8103a2e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8103a32:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8103a34:	4b82      	ldr	r3, [pc, #520]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103a38:	f003 0301 	and.w	r3, r3, #1
 8103a3c:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8103a3e:	4b80      	ldr	r3, [pc, #512]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8103a42:	08db      	lsrs	r3, r3, #3
 8103a44:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8103a48:	68fa      	ldr	r2, [r7, #12]
 8103a4a:	fb02 f303 	mul.w	r3, r2, r3
 8103a4e:	ee07 3a90 	vmov	s15, r3
 8103a52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103a56:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8103a5a:	693b      	ldr	r3, [r7, #16]
 8103a5c:	2b00      	cmp	r3, #0
 8103a5e:	f000 80e1 	beq.w	8103c24 <HAL_RCC_GetSysClockFreq+0x2b8>
 8103a62:	697b      	ldr	r3, [r7, #20]
 8103a64:	2b02      	cmp	r3, #2
 8103a66:	f000 8083 	beq.w	8103b70 <HAL_RCC_GetSysClockFreq+0x204>
 8103a6a:	697b      	ldr	r3, [r7, #20]
 8103a6c:	2b02      	cmp	r3, #2
 8103a6e:	f200 80a1 	bhi.w	8103bb4 <HAL_RCC_GetSysClockFreq+0x248>
 8103a72:	697b      	ldr	r3, [r7, #20]
 8103a74:	2b00      	cmp	r3, #0
 8103a76:	d003      	beq.n	8103a80 <HAL_RCC_GetSysClockFreq+0x114>
 8103a78:	697b      	ldr	r3, [r7, #20]
 8103a7a:	2b01      	cmp	r3, #1
 8103a7c:	d056      	beq.n	8103b2c <HAL_RCC_GetSysClockFreq+0x1c0>
 8103a7e:	e099      	b.n	8103bb4 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8103a80:	4b6f      	ldr	r3, [pc, #444]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a82:	681b      	ldr	r3, [r3, #0]
 8103a84:	f003 0320 	and.w	r3, r3, #32
 8103a88:	2b00      	cmp	r3, #0
 8103a8a:	d02d      	beq.n	8103ae8 <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8103a8c:	4b6c      	ldr	r3, [pc, #432]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103a8e:	681b      	ldr	r3, [r3, #0]
 8103a90:	08db      	lsrs	r3, r3, #3
 8103a92:	f003 0303 	and.w	r3, r3, #3
 8103a96:	4a6b      	ldr	r2, [pc, #428]	; (8103c44 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8103a98:	fa22 f303 	lsr.w	r3, r2, r3
 8103a9c:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103a9e:	687b      	ldr	r3, [r7, #4]
 8103aa0:	ee07 3a90 	vmov	s15, r3
 8103aa4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103aa8:	693b      	ldr	r3, [r7, #16]
 8103aaa:	ee07 3a90 	vmov	s15, r3
 8103aae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103ab2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103ab6:	4b62      	ldr	r3, [pc, #392]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103aba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103abe:	ee07 3a90 	vmov	s15, r3
 8103ac2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103ac6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103aca:	eddf 5a61 	vldr	s11, [pc, #388]	; 8103c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103ace:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103ad2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ad6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ada:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103ade:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103ae2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8103ae6:	e087      	b.n	8103bf8 <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103ae8:	693b      	ldr	r3, [r7, #16]
 8103aea:	ee07 3a90 	vmov	s15, r3
 8103aee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103af2:	eddf 6a58 	vldr	s13, [pc, #352]	; 8103c54 <HAL_RCC_GetSysClockFreq+0x2e8>
 8103af6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103afa:	4b51      	ldr	r3, [pc, #324]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103afc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103afe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b02:	ee07 3a90 	vmov	s15, r3
 8103b06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b0a:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b0e:	eddf 5a50 	vldr	s11, [pc, #320]	; 8103c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b12:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b16:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b1a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103b1e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b22:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b26:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103b2a:	e065      	b.n	8103bf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103b2c:	693b      	ldr	r3, [r7, #16]
 8103b2e:	ee07 3a90 	vmov	s15, r3
 8103b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b36:	eddf 6a48 	vldr	s13, [pc, #288]	; 8103c58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103b3a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b3e:	4b40      	ldr	r3, [pc, #256]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b46:	ee07 3a90 	vmov	s15, r3
 8103b4a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b4e:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b52:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8103c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b56:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b5a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103b5e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103b62:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103b66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103b6a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103b6e:	e043      	b.n	8103bf8 <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103b70:	693b      	ldr	r3, [r7, #16]
 8103b72:	ee07 3a90 	vmov	s15, r3
 8103b76:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103b7a:	eddf 6a38 	vldr	s13, [pc, #224]	; 8103c5c <HAL_RCC_GetSysClockFreq+0x2f0>
 8103b7e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103b82:	4b2f      	ldr	r3, [pc, #188]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103b86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103b8a:	ee07 3a90 	vmov	s15, r3
 8103b8e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103b92:	ed97 6a02 	vldr	s12, [r7, #8]
 8103b96:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8103c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103b9a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103b9e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103ba2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103ba6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103bb2:	e021      	b.n	8103bf8 <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8103bb4:	693b      	ldr	r3, [r7, #16]
 8103bb6:	ee07 3a90 	vmov	s15, r3
 8103bba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8103bbe:	eddf 6a26 	vldr	s13, [pc, #152]	; 8103c58 <HAL_RCC_GetSysClockFreq+0x2ec>
 8103bc2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8103bc6:	4b1e      	ldr	r3, [pc, #120]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103bca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8103bce:	ee07 3a90 	vmov	s15, r3
 8103bd2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8103bd6:	ed97 6a02 	vldr	s12, [r7, #8]
 8103bda:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8103c50 <HAL_RCC_GetSysClockFreq+0x2e4>
 8103bde:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8103be2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8103be6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8103bea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8103bee:	ee67 7a27 	vmul.f32	s15, s14, s15
 8103bf2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8103bf6:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8103bf8:	4b11      	ldr	r3, [pc, #68]	; (8103c40 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8103bfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8103bfc:	0a5b      	lsrs	r3, r3, #9
 8103bfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8103c02:	3301      	adds	r3, #1
 8103c04:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8103c06:	683b      	ldr	r3, [r7, #0]
 8103c08:	ee07 3a90 	vmov	s15, r3
 8103c0c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8103c10:	edd7 6a07 	vldr	s13, [r7, #28]
 8103c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8103c18:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8103c1c:	ee17 3a90 	vmov	r3, s15
 8103c20:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8103c22:	e005      	b.n	8103c30 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8103c24:	2300      	movs	r3, #0
 8103c26:	61bb      	str	r3, [r7, #24]
    break;
 8103c28:	e002      	b.n	8103c30 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8103c2a:	4b07      	ldr	r3, [pc, #28]	; (8103c48 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8103c2c:	61bb      	str	r3, [r7, #24]
    break;
 8103c2e:	bf00      	nop
  }

  return sysclockfreq;
 8103c30:	69bb      	ldr	r3, [r7, #24]
}
 8103c32:	4618      	mov	r0, r3
 8103c34:	3724      	adds	r7, #36	; 0x24
 8103c36:	46bd      	mov	sp, r7
 8103c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8103c3c:	4770      	bx	lr
 8103c3e:	bf00      	nop
 8103c40:	58024400 	.word	0x58024400
 8103c44:	03d09000 	.word	0x03d09000
 8103c48:	003d0900 	.word	0x003d0900
 8103c4c:	007a1200 	.word	0x007a1200
 8103c50:	46000000 	.word	0x46000000
 8103c54:	4c742400 	.word	0x4c742400
 8103c58:	4a742400 	.word	0x4a742400
 8103c5c:	4af42400 	.word	0x4af42400

08103c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8103c60:	b580      	push	{r7, lr}
 8103c62:	b082      	sub	sp, #8
 8103c64:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8103c66:	f7ff fe81 	bl	810396c <HAL_RCC_GetSysClockFreq>
 8103c6a:	4602      	mov	r2, r0
 8103c6c:	4b11      	ldr	r3, [pc, #68]	; (8103cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8103c6e:	699b      	ldr	r3, [r3, #24]
 8103c70:	0a1b      	lsrs	r3, r3, #8
 8103c72:	f003 030f 	and.w	r3, r3, #15
 8103c76:	4910      	ldr	r1, [pc, #64]	; (8103cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8103c78:	5ccb      	ldrb	r3, [r1, r3]
 8103c7a:	f003 031f 	and.w	r3, r3, #31
 8103c7e:	fa22 f303 	lsr.w	r3, r2, r3
 8103c82:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8103c84:	4b0b      	ldr	r3, [pc, #44]	; (8103cb4 <HAL_RCC_GetHCLKFreq+0x54>)
 8103c86:	699b      	ldr	r3, [r3, #24]
 8103c88:	f003 030f 	and.w	r3, r3, #15
 8103c8c:	4a0a      	ldr	r2, [pc, #40]	; (8103cb8 <HAL_RCC_GetHCLKFreq+0x58>)
 8103c8e:	5cd3      	ldrb	r3, [r2, r3]
 8103c90:	f003 031f 	and.w	r3, r3, #31
 8103c94:	687a      	ldr	r2, [r7, #4]
 8103c96:	fa22 f303 	lsr.w	r3, r2, r3
 8103c9a:	4a08      	ldr	r2, [pc, #32]	; (8103cbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8103c9c:	6013      	str	r3, [r2, #0]
#else
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_HPRE)>> RCC_CDCFGR1_HPRE_Pos]) & 0x1FU));
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
 8103c9e:	4b07      	ldr	r3, [pc, #28]	; (8103cbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8103ca0:	681b      	ldr	r3, [r3, #0]
 8103ca2:	4a07      	ldr	r2, [pc, #28]	; (8103cc0 <HAL_RCC_GetHCLKFreq+0x60>)
 8103ca4:	6013      	str	r3, [r2, #0]
#else
  SystemCoreClock = common_system_clock;
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8103ca6:	4b05      	ldr	r3, [pc, #20]	; (8103cbc <HAL_RCC_GetHCLKFreq+0x5c>)
 8103ca8:	681b      	ldr	r3, [r3, #0]
}
 8103caa:	4618      	mov	r0, r3
 8103cac:	3708      	adds	r7, #8
 8103cae:	46bd      	mov	sp, r7
 8103cb0:	bd80      	pop	{r7, pc}
 8103cb2:	bf00      	nop
 8103cb4:	58024400 	.word	0x58024400
 8103cb8:	081076a8 	.word	0x081076a8
 8103cbc:	10000004 	.word	0x10000004
 8103cc0:	10000000 	.word	0x10000000

08103cc4 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8103cc4:	b580      	push	{r7, lr}
 8103cc6:	b086      	sub	sp, #24
 8103cc8:	af00      	add	r7, sp, #0
 8103cca:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8103ccc:	2300      	movs	r3, #0
 8103cce:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8103cd0:	2300      	movs	r3, #0
 8103cd2:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8103cd4:	687b      	ldr	r3, [r7, #4]
 8103cd6:	681b      	ldr	r3, [r3, #0]
 8103cd8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8103cdc:	2b00      	cmp	r3, #0
 8103cde:	d03f      	beq.n	8103d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8103ce0:	687b      	ldr	r3, [r7, #4]
 8103ce2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103ce4:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103ce8:	d02a      	beq.n	8103d40 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8103cea:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8103cee:	d824      	bhi.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103cf0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103cf4:	d018      	beq.n	8103d28 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8103cf6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103cfa:	d81e      	bhi.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8103cfc:	2b00      	cmp	r3, #0
 8103cfe:	d003      	beq.n	8103d08 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8103d00:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8103d04:	d007      	beq.n	8103d16 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8103d06:	e018      	b.n	8103d3a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d08:	4bab      	ldr	r3, [pc, #684]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d0c:	4aaa      	ldr	r2, [pc, #680]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103d0e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d12:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103d14:	e015      	b.n	8103d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103d16:	687b      	ldr	r3, [r7, #4]
 8103d18:	3304      	adds	r3, #4
 8103d1a:	2102      	movs	r1, #2
 8103d1c:	4618      	mov	r0, r3
 8103d1e:	f001 fff3 	bl	8105d08 <RCCEx_PLL2_Config>
 8103d22:	4603      	mov	r3, r0
 8103d24:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103d26:	e00c      	b.n	8103d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8103d28:	687b      	ldr	r3, [r7, #4]
 8103d2a:	3324      	adds	r3, #36	; 0x24
 8103d2c:	2102      	movs	r1, #2
 8103d2e:	4618      	mov	r0, r3
 8103d30:	f002 f89c 	bl	8105e6c <RCCEx_PLL3_Config>
 8103d34:	4603      	mov	r3, r0
 8103d36:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8103d38:	e003      	b.n	8103d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103d3a:	2301      	movs	r3, #1
 8103d3c:	75fb      	strb	r3, [r7, #23]
      break;
 8103d3e:	e000      	b.n	8103d42 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8103d40:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103d42:	7dfb      	ldrb	r3, [r7, #23]
 8103d44:	2b00      	cmp	r3, #0
 8103d46:	d109      	bne.n	8103d5c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8103d48:	4b9b      	ldr	r3, [pc, #620]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103d4c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8103d50:	687b      	ldr	r3, [r7, #4]
 8103d52:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8103d54:	4998      	ldr	r1, [pc, #608]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103d56:	4313      	orrs	r3, r2
 8103d58:	650b      	str	r3, [r1, #80]	; 0x50
 8103d5a:	e001      	b.n	8103d60 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103d5c:	7dfb      	ldrb	r3, [r7, #23]
 8103d5e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8103d60:	687b      	ldr	r3, [r7, #4]
 8103d62:	681b      	ldr	r3, [r3, #0]
 8103d64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8103d68:	2b00      	cmp	r3, #0
 8103d6a:	d03d      	beq.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8103d6c:	687b      	ldr	r3, [r7, #4]
 8103d6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103d70:	2b04      	cmp	r3, #4
 8103d72:	d826      	bhi.n	8103dc2 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8103d74:	a201      	add	r2, pc, #4	; (adr r2, 8103d7c <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8103d76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8103d7a:	bf00      	nop
 8103d7c:	08103d91 	.word	0x08103d91
 8103d80:	08103d9f 	.word	0x08103d9f
 8103d84:	08103db1 	.word	0x08103db1
 8103d88:	08103dc9 	.word	0x08103dc9
 8103d8c:	08103dc9 	.word	0x08103dc9
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103d90:	4b89      	ldr	r3, [pc, #548]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103d94:	4a88      	ldr	r2, [pc, #544]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103d96:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103d9a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103d9c:	e015      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103d9e:	687b      	ldr	r3, [r7, #4]
 8103da0:	3304      	adds	r3, #4
 8103da2:	2100      	movs	r1, #0
 8103da4:	4618      	mov	r0, r3
 8103da6:	f001 ffaf 	bl	8105d08 <RCCEx_PLL2_Config>
 8103daa:	4603      	mov	r3, r0
 8103dac:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103dae:	e00c      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103db0:	687b      	ldr	r3, [r7, #4]
 8103db2:	3324      	adds	r3, #36	; 0x24
 8103db4:	2100      	movs	r1, #0
 8103db6:	4618      	mov	r0, r3
 8103db8:	f002 f858 	bl	8105e6c <RCCEx_PLL3_Config>
 8103dbc:	4603      	mov	r3, r0
 8103dbe:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103dc0:	e003      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103dc2:	2301      	movs	r3, #1
 8103dc4:	75fb      	strb	r3, [r7, #23]
      break;
 8103dc6:	e000      	b.n	8103dca <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8103dc8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103dca:	7dfb      	ldrb	r3, [r7, #23]
 8103dcc:	2b00      	cmp	r3, #0
 8103dce:	d109      	bne.n	8103de4 <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8103dd0:	4b79      	ldr	r3, [pc, #484]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103dd2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103dd4:	f023 0207 	bic.w	r2, r3, #7
 8103dd8:	687b      	ldr	r3, [r7, #4]
 8103dda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8103ddc:	4976      	ldr	r1, [pc, #472]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103dde:	4313      	orrs	r3, r2
 8103de0:	650b      	str	r3, [r1, #80]	; 0x50
 8103de2:	e001      	b.n	8103de8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103de4:	7dfb      	ldrb	r3, [r7, #23]
 8103de6:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8103de8:	687b      	ldr	r3, [r7, #4]
 8103dea:	681b      	ldr	r3, [r3, #0]
 8103dec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8103df0:	2b00      	cmp	r3, #0
 8103df2:	d042      	beq.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8103df4:	687b      	ldr	r3, [r7, #4]
 8103df6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103dfc:	d02b      	beq.n	8103e56 <HAL_RCCEx_PeriphCLKConfig+0x192>
 8103dfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8103e02:	d825      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103e04:	2bc0      	cmp	r3, #192	; 0xc0
 8103e06:	d028      	beq.n	8103e5a <HAL_RCCEx_PeriphCLKConfig+0x196>
 8103e08:	2bc0      	cmp	r3, #192	; 0xc0
 8103e0a:	d821      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103e0c:	2b80      	cmp	r3, #128	; 0x80
 8103e0e:	d016      	beq.n	8103e3e <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8103e10:	2b80      	cmp	r3, #128	; 0x80
 8103e12:	d81d      	bhi.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8103e14:	2b00      	cmp	r3, #0
 8103e16:	d002      	beq.n	8103e1e <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8103e18:	2b40      	cmp	r3, #64	; 0x40
 8103e1a:	d007      	beq.n	8103e2c <HAL_RCCEx_PeriphCLKConfig+0x168>
 8103e1c:	e018      	b.n	8103e50 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103e1e:	4b66      	ldr	r3, [pc, #408]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103e22:	4a65      	ldr	r2, [pc, #404]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103e24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103e28:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103e2a:	e017      	b.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103e2c:	687b      	ldr	r3, [r7, #4]
 8103e2e:	3304      	adds	r3, #4
 8103e30:	2100      	movs	r1, #0
 8103e32:	4618      	mov	r0, r3
 8103e34:	f001 ff68 	bl	8105d08 <RCCEx_PLL2_Config>
 8103e38:	4603      	mov	r3, r0
 8103e3a:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103e3c:	e00e      	b.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103e3e:	687b      	ldr	r3, [r7, #4]
 8103e40:	3324      	adds	r3, #36	; 0x24
 8103e42:	2100      	movs	r1, #0
 8103e44:	4618      	mov	r0, r3
 8103e46:	f002 f811 	bl	8105e6c <RCCEx_PLL3_Config>
 8103e4a:	4603      	mov	r3, r0
 8103e4c:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8103e4e:	e005      	b.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8103e50:	2301      	movs	r3, #1
 8103e52:	75fb      	strb	r3, [r7, #23]
      break;
 8103e54:	e002      	b.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103e56:	bf00      	nop
 8103e58:	e000      	b.n	8103e5c <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8103e5a:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103e5c:	7dfb      	ldrb	r3, [r7, #23]
 8103e5e:	2b00      	cmp	r3, #0
 8103e60:	d109      	bne.n	8103e76 <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8103e62:	4b55      	ldr	r3, [pc, #340]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103e64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8103e66:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8103e6a:	687b      	ldr	r3, [r7, #4]
 8103e6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103e6e:	4952      	ldr	r1, [pc, #328]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103e70:	4313      	orrs	r3, r2
 8103e72:	650b      	str	r3, [r1, #80]	; 0x50
 8103e74:	e001      	b.n	8103e7a <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103e76:	7dfb      	ldrb	r3, [r7, #23]
 8103e78:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8103e7a:	687b      	ldr	r3, [r7, #4]
 8103e7c:	681b      	ldr	r3, [r3, #0]
 8103e7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8103e82:	2b00      	cmp	r3, #0
 8103e84:	d049      	beq.n	8103f1a <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 8103e86:	687b      	ldr	r3, [r7, #4]
 8103e88:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103e8c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103e90:	d030      	beq.n	8103ef4 <HAL_RCCEx_PeriphCLKConfig+0x230>
 8103e92:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8103e96:	d82a      	bhi.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103e98:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103e9c:	d02c      	beq.n	8103ef8 <HAL_RCCEx_PeriphCLKConfig+0x234>
 8103e9e:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8103ea2:	d824      	bhi.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103ea4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103ea8:	d018      	beq.n	8103edc <HAL_RCCEx_PeriphCLKConfig+0x218>
 8103eaa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8103eae:	d81e      	bhi.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
 8103eb0:	2b00      	cmp	r3, #0
 8103eb2:	d003      	beq.n	8103ebc <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8103eb4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8103eb8:	d007      	beq.n	8103eca <HAL_RCCEx_PeriphCLKConfig+0x206>
 8103eba:	e018      	b.n	8103eee <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103ebc:	4b3e      	ldr	r3, [pc, #248]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103ec0:	4a3d      	ldr	r2, [pc, #244]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103ec2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ec6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103ec8:	e017      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103eca:	687b      	ldr	r3, [r7, #4]
 8103ecc:	3304      	adds	r3, #4
 8103ece:	2100      	movs	r1, #0
 8103ed0:	4618      	mov	r0, r3
 8103ed2:	f001 ff19 	bl	8105d08 <RCCEx_PLL2_Config>
 8103ed6:	4603      	mov	r3, r0
 8103ed8:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103eda:	e00e      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8103edc:	687b      	ldr	r3, [r7, #4]
 8103ede:	3324      	adds	r3, #36	; 0x24
 8103ee0:	2100      	movs	r1, #0
 8103ee2:	4618      	mov	r0, r3
 8103ee4:	f001 ffc2 	bl	8105e6c <RCCEx_PLL3_Config>
 8103ee8:	4603      	mov	r3, r0
 8103eea:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103eec:	e005      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103eee:	2301      	movs	r3, #1
 8103ef0:	75fb      	strb	r3, [r7, #23]
      break;
 8103ef2:	e002      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103ef4:	bf00      	nop
 8103ef6:	e000      	b.n	8103efa <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8103ef8:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103efa:	7dfb      	ldrb	r3, [r7, #23]
 8103efc:	2b00      	cmp	r3, #0
 8103efe:	d10a      	bne.n	8103f16 <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8103f00:	4b2d      	ldr	r3, [pc, #180]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103f02:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103f04:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8103f08:	687b      	ldr	r3, [r7, #4]
 8103f0a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8103f0e:	492a      	ldr	r1, [pc, #168]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103f10:	4313      	orrs	r3, r2
 8103f12:	658b      	str	r3, [r1, #88]	; 0x58
 8103f14:	e001      	b.n	8103f1a <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103f16:	7dfb      	ldrb	r3, [r7, #23]
 8103f18:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8103f1a:	687b      	ldr	r3, [r7, #4]
 8103f1c:	681b      	ldr	r3, [r3, #0]
 8103f1e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8103f22:	2b00      	cmp	r3, #0
 8103f24:	d04c      	beq.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 8103f26:	687b      	ldr	r3, [r7, #4]
 8103f28:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103f2c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103f30:	d030      	beq.n	8103f94 <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 8103f32:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8103f36:	d82a      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103f38:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103f3c:	d02c      	beq.n	8103f98 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8103f3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8103f42:	d824      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103f44:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103f48:	d018      	beq.n	8103f7c <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8103f4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8103f4e:	d81e      	bhi.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8103f50:	2b00      	cmp	r3, #0
 8103f52:	d003      	beq.n	8103f5c <HAL_RCCEx_PeriphCLKConfig+0x298>
 8103f54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8103f58:	d007      	beq.n	8103f6a <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8103f5a:	e018      	b.n	8103f8e <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103f5c:	4b16      	ldr	r3, [pc, #88]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103f5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103f60:	4a15      	ldr	r2, [pc, #84]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103f62:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103f66:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103f68:	e017      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8103f6a:	687b      	ldr	r3, [r7, #4]
 8103f6c:	3304      	adds	r3, #4
 8103f6e:	2100      	movs	r1, #0
 8103f70:	4618      	mov	r0, r3
 8103f72:	f001 fec9 	bl	8105d08 <RCCEx_PLL2_Config>
 8103f76:	4603      	mov	r3, r0
 8103f78:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8103f7a:	e00e      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8103f7c:	687b      	ldr	r3, [r7, #4]
 8103f7e:	3324      	adds	r3, #36	; 0x24
 8103f80:	2100      	movs	r1, #0
 8103f82:	4618      	mov	r0, r3
 8103f84:	f001 ff72 	bl	8105e6c <RCCEx_PLL3_Config>
 8103f88:	4603      	mov	r3, r0
 8103f8a:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8103f8c:	e005      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8103f8e:	2301      	movs	r3, #1
 8103f90:	75fb      	strb	r3, [r7, #23]
      break;
 8103f92:	e002      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103f94:	bf00      	nop
 8103f96:	e000      	b.n	8103f9a <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 8103f98:	bf00      	nop
    }

    if(ret == HAL_OK)
 8103f9a:	7dfb      	ldrb	r3, [r7, #23]
 8103f9c:	2b00      	cmp	r3, #0
 8103f9e:	d10d      	bne.n	8103fbc <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8103fa0:	4b05      	ldr	r3, [pc, #20]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103fa2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8103fa4:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 8103fa8:	687b      	ldr	r3, [r7, #4]
 8103faa:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8103fae:	4902      	ldr	r1, [pc, #8]	; (8103fb8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8103fb0:	4313      	orrs	r3, r2
 8103fb2:	658b      	str	r3, [r1, #88]	; 0x58
 8103fb4:	e004      	b.n	8103fc0 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 8103fb6:	bf00      	nop
 8103fb8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8103fbc:	7dfb      	ldrb	r3, [r7, #23]
 8103fbe:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8103fc0:	687b      	ldr	r3, [r7, #4]
 8103fc2:	681b      	ldr	r3, [r3, #0]
 8103fc4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8103fc8:	2b00      	cmp	r3, #0
 8103fca:	d032      	beq.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 8103fcc:	687b      	ldr	r3, [r7, #4]
 8103fce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8103fd0:	2b30      	cmp	r3, #48	; 0x30
 8103fd2:	d01c      	beq.n	810400e <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8103fd4:	2b30      	cmp	r3, #48	; 0x30
 8103fd6:	d817      	bhi.n	8104008 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103fd8:	2b20      	cmp	r3, #32
 8103fda:	d00c      	beq.n	8103ff6 <HAL_RCCEx_PeriphCLKConfig+0x332>
 8103fdc:	2b20      	cmp	r3, #32
 8103fde:	d813      	bhi.n	8104008 <HAL_RCCEx_PeriphCLKConfig+0x344>
 8103fe0:	2b00      	cmp	r3, #0
 8103fe2:	d016      	beq.n	8104012 <HAL_RCCEx_PeriphCLKConfig+0x34e>
 8103fe4:	2b10      	cmp	r3, #16
 8103fe6:	d10f      	bne.n	8104008 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8103fe8:	4baf      	ldr	r3, [pc, #700]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103fea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8103fec:	4aae      	ldr	r2, [pc, #696]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8103fee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8103ff2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8103ff4:	e00e      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8103ff6:	687b      	ldr	r3, [r7, #4]
 8103ff8:	3304      	adds	r3, #4
 8103ffa:	2102      	movs	r1, #2
 8103ffc:	4618      	mov	r0, r3
 8103ffe:	f001 fe83 	bl	8105d08 <RCCEx_PLL2_Config>
 8104002:	4603      	mov	r3, r0
 8104004:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 8104006:	e005      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8104008:	2301      	movs	r3, #1
 810400a:	75fb      	strb	r3, [r7, #23]
      break;
 810400c:	e002      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 810400e:	bf00      	nop
 8104010:	e000      	b.n	8104014 <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8104012:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104014:	7dfb      	ldrb	r3, [r7, #23]
 8104016:	2b00      	cmp	r3, #0
 8104018:	d109      	bne.n	810402e <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 810401a:	4ba3      	ldr	r3, [pc, #652]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810401c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810401e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8104022:	687b      	ldr	r3, [r7, #4]
 8104024:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8104026:	49a0      	ldr	r1, [pc, #640]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104028:	4313      	orrs	r3, r2
 810402a:	64cb      	str	r3, [r1, #76]	; 0x4c
 810402c:	e001      	b.n	8104032 <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810402e:	7dfb      	ldrb	r3, [r7, #23]
 8104030:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8104032:	687b      	ldr	r3, [r7, #4]
 8104034:	681b      	ldr	r3, [r3, #0]
 8104036:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 810403a:	2b00      	cmp	r3, #0
 810403c:	d047      	beq.n	81040ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 810403e:	687b      	ldr	r3, [r7, #4]
 8104040:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8104042:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8104046:	d030      	beq.n	81040aa <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8104048:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810404c:	d82a      	bhi.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810404e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104052:	d02c      	beq.n	81040ae <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 8104054:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8104058:	d824      	bhi.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 810405a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810405e:	d018      	beq.n	8104092 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8104060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8104064:	d81e      	bhi.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8104066:	2b00      	cmp	r3, #0
 8104068:	d003      	beq.n	8104072 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 810406a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 810406e:	d007      	beq.n	8104080 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8104070:	e018      	b.n	81040a4 <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104072:	4b8d      	ldr	r3, [pc, #564]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104074:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104076:	4a8c      	ldr	r2, [pc, #560]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104078:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 810407c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 810407e:	e017      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104080:	687b      	ldr	r3, [r7, #4]
 8104082:	3304      	adds	r3, #4
 8104084:	2100      	movs	r1, #0
 8104086:	4618      	mov	r0, r3
 8104088:	f001 fe3e 	bl	8105d08 <RCCEx_PLL2_Config>
 810408c:	4603      	mov	r3, r0
 810408e:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8104090:	e00e      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8104092:	687b      	ldr	r3, [r7, #4]
 8104094:	3324      	adds	r3, #36	; 0x24
 8104096:	2100      	movs	r1, #0
 8104098:	4618      	mov	r0, r3
 810409a:	f001 fee7 	bl	8105e6c <RCCEx_PLL3_Config>
 810409e:	4603      	mov	r3, r0
 81040a0:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 81040a2:	e005      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81040a4:	2301      	movs	r3, #1
 81040a6:	75fb      	strb	r3, [r7, #23]
      break;
 81040a8:	e002      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81040aa:	bf00      	nop
 81040ac:	e000      	b.n	81040b0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 81040ae:	bf00      	nop
    }

    if(ret == HAL_OK)
 81040b0:	7dfb      	ldrb	r3, [r7, #23]
 81040b2:	2b00      	cmp	r3, #0
 81040b4:	d109      	bne.n	81040ca <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 81040b6:	4b7c      	ldr	r3, [pc, #496]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81040b8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 81040ba:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 81040be:	687b      	ldr	r3, [r7, #4]
 81040c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 81040c2:	4979      	ldr	r1, [pc, #484]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81040c4:	4313      	orrs	r3, r2
 81040c6:	650b      	str	r3, [r1, #80]	; 0x50
 81040c8:	e001      	b.n	81040ce <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81040ca:	7dfb      	ldrb	r3, [r7, #23]
 81040cc:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 81040ce:	687b      	ldr	r3, [r7, #4]
 81040d0:	681b      	ldr	r3, [r3, #0]
 81040d2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 81040d6:	2b00      	cmp	r3, #0
 81040d8:	d049      	beq.n	810416e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 81040da:	687b      	ldr	r3, [r7, #4]
 81040dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 81040de:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81040e2:	d02e      	beq.n	8104142 <HAL_RCCEx_PeriphCLKConfig+0x47e>
 81040e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 81040e8:	d828      	bhi.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81040ea:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81040ee:	d02a      	beq.n	8104146 <HAL_RCCEx_PeriphCLKConfig+0x482>
 81040f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 81040f4:	d822      	bhi.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x478>
 81040f6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 81040fa:	d026      	beq.n	810414a <HAL_RCCEx_PeriphCLKConfig+0x486>
 81040fc:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8104100:	d81c      	bhi.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x478>
 8104102:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104106:	d010      	beq.n	810412a <HAL_RCCEx_PeriphCLKConfig+0x466>
 8104108:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810410c:	d816      	bhi.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x478>
 810410e:	2b00      	cmp	r3, #0
 8104110:	d01d      	beq.n	810414e <HAL_RCCEx_PeriphCLKConfig+0x48a>
 8104112:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104116:	d111      	bne.n	810413c <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104118:	687b      	ldr	r3, [r7, #4]
 810411a:	3304      	adds	r3, #4
 810411c:	2101      	movs	r1, #1
 810411e:	4618      	mov	r0, r3
 8104120:	f001 fdf2 	bl	8105d08 <RCCEx_PLL2_Config>
 8104124:	4603      	mov	r3, r0
 8104126:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8104128:	e012      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810412a:	687b      	ldr	r3, [r7, #4]
 810412c:	3324      	adds	r3, #36	; 0x24
 810412e:	2101      	movs	r1, #1
 8104130:	4618      	mov	r0, r3
 8104132:	f001 fe9b 	bl	8105e6c <RCCEx_PLL3_Config>
 8104136:	4603      	mov	r3, r0
 8104138:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 810413a:	e009      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 810413c:	2301      	movs	r3, #1
 810413e:	75fb      	strb	r3, [r7, #23]
      break;
 8104140:	e006      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8104142:	bf00      	nop
 8104144:	e004      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8104146:	bf00      	nop
 8104148:	e002      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810414a:	bf00      	nop
 810414c:	e000      	b.n	8104150 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 810414e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104150:	7dfb      	ldrb	r3, [r7, #23]
 8104152:	2b00      	cmp	r3, #0
 8104154:	d109      	bne.n	810416a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8104156:	4b54      	ldr	r3, [pc, #336]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104158:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810415a:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 810415e:	687b      	ldr	r3, [r7, #4]
 8104160:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8104162:	4951      	ldr	r1, [pc, #324]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104164:	4313      	orrs	r3, r2
 8104166:	650b      	str	r3, [r1, #80]	; 0x50
 8104168:	e001      	b.n	810416e <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810416a:	7dfb      	ldrb	r3, [r7, #23]
 810416c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 810416e:	687b      	ldr	r3, [r7, #4]
 8104170:	681b      	ldr	r3, [r3, #0]
 8104172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8104176:	2b00      	cmp	r3, #0
 8104178:	d04b      	beq.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 810417a:	687b      	ldr	r3, [r7, #4]
 810417c:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104180:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104184:	d02e      	beq.n	81041e4 <HAL_RCCEx_PeriphCLKConfig+0x520>
 8104186:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810418a:	d828      	bhi.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 810418c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104190:	d02a      	beq.n	81041e8 <HAL_RCCEx_PeriphCLKConfig+0x524>
 8104192:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104196:	d822      	bhi.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8104198:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810419c:	d026      	beq.n	81041ec <HAL_RCCEx_PeriphCLKConfig+0x528>
 810419e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 81041a2:	d81c      	bhi.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81041a4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81041a8:	d010      	beq.n	81041cc <HAL_RCCEx_PeriphCLKConfig+0x508>
 81041aa:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81041ae:	d816      	bhi.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x51a>
 81041b0:	2b00      	cmp	r3, #0
 81041b2:	d01d      	beq.n	81041f0 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 81041b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 81041b8:	d111      	bne.n	81041de <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81041ba:	687b      	ldr	r3, [r7, #4]
 81041bc:	3304      	adds	r3, #4
 81041be:	2101      	movs	r1, #1
 81041c0:	4618      	mov	r0, r3
 81041c2:	f001 fda1 	bl	8105d08 <RCCEx_PLL2_Config>
 81041c6:	4603      	mov	r3, r0
 81041c8:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81041ca:	e012      	b.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81041cc:	687b      	ldr	r3, [r7, #4]
 81041ce:	3324      	adds	r3, #36	; 0x24
 81041d0:	2101      	movs	r1, #1
 81041d2:	4618      	mov	r0, r3
 81041d4:	f001 fe4a 	bl	8105e6c <RCCEx_PLL3_Config>
 81041d8:	4603      	mov	r3, r0
 81041da:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 81041dc:	e009      	b.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 81041de:	2301      	movs	r3, #1
 81041e0:	75fb      	strb	r3, [r7, #23]
      break;
 81041e2:	e006      	b.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81041e4:	bf00      	nop
 81041e6:	e004      	b.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81041e8:	bf00      	nop
 81041ea:	e002      	b.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81041ec:	bf00      	nop
 81041ee:	e000      	b.n	81041f2 <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 81041f0:	bf00      	nop
    }

    if(ret == HAL_OK)
 81041f2:	7dfb      	ldrb	r3, [r7, #23]
 81041f4:	2b00      	cmp	r3, #0
 81041f6:	d10a      	bne.n	810420e <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 81041f8:	4b2b      	ldr	r3, [pc, #172]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 81041fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81041fc:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8104200:	687b      	ldr	r3, [r7, #4]
 8104202:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8104206:	4928      	ldr	r1, [pc, #160]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104208:	4313      	orrs	r3, r2
 810420a:	658b      	str	r3, [r1, #88]	; 0x58
 810420c:	e001      	b.n	8104212 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810420e:	7dfb      	ldrb	r3, [r7, #23]
 8104210:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8104212:	687b      	ldr	r3, [r7, #4]
 8104214:	681b      	ldr	r3, [r3, #0]
 8104216:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 810421a:	2b00      	cmp	r3, #0
 810421c:	d02f      	beq.n	810427e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 810421e:	687b      	ldr	r3, [r7, #4]
 8104220:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104222:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104226:	d00e      	beq.n	8104246 <HAL_RCCEx_PeriphCLKConfig+0x582>
 8104228:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810422c:	d814      	bhi.n	8104258 <HAL_RCCEx_PeriphCLKConfig+0x594>
 810422e:	2b00      	cmp	r3, #0
 8104230:	d015      	beq.n	810425e <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8104232:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104236:	d10f      	bne.n	8104258 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104238:	4b1b      	ldr	r3, [pc, #108]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810423a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810423c:	4a1a      	ldr	r2, [pc, #104]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 810423e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104242:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104244:	e00c      	b.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8104246:	687b      	ldr	r3, [r7, #4]
 8104248:	3304      	adds	r3, #4
 810424a:	2101      	movs	r1, #1
 810424c:	4618      	mov	r0, r3
 810424e:	f001 fd5b 	bl	8105d08 <RCCEx_PLL2_Config>
 8104252:	4603      	mov	r3, r0
 8104254:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 8104256:	e003      	b.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104258:	2301      	movs	r3, #1
 810425a:	75fb      	strb	r3, [r7, #23]
      break;
 810425c:	e000      	b.n	8104260 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 810425e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104260:	7dfb      	ldrb	r3, [r7, #23]
 8104262:	2b00      	cmp	r3, #0
 8104264:	d109      	bne.n	810427a <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8104266:	4b10      	ldr	r3, [pc, #64]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104268:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810426a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 810426e:	687b      	ldr	r3, [r7, #4]
 8104270:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8104272:	490d      	ldr	r1, [pc, #52]	; (81042a8 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8104274:	4313      	orrs	r3, r2
 8104276:	650b      	str	r3, [r1, #80]	; 0x50
 8104278:	e001      	b.n	810427e <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810427a:	7dfb      	ldrb	r3, [r7, #23]
 810427c:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 810427e:	687b      	ldr	r3, [r7, #4]
 8104280:	681b      	ldr	r3, [r3, #0]
 8104282:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8104286:	2b00      	cmp	r3, #0
 8104288:	d033      	beq.n	81042f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 810428a:	687b      	ldr	r3, [r7, #4]
 810428c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 810428e:	2b03      	cmp	r3, #3
 8104290:	d81c      	bhi.n	81042cc <HAL_RCCEx_PeriphCLKConfig+0x608>
 8104292:	a201      	add	r2, pc, #4	; (adr r2, 8104298 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 8104294:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104298:	081042d3 	.word	0x081042d3
 810429c:	081042ad 	.word	0x081042ad
 81042a0:	081042bb 	.word	0x081042bb
 81042a4:	081042d3 	.word	0x081042d3
 81042a8:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 81042ac:	4bb9      	ldr	r3, [pc, #740]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81042ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81042b0:	4ab8      	ldr	r2, [pc, #736]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81042b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81042b6:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 81042b8:	e00c      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81042ba:	687b      	ldr	r3, [r7, #4]
 81042bc:	3304      	adds	r3, #4
 81042be:	2102      	movs	r1, #2
 81042c0:	4618      	mov	r0, r3
 81042c2:	f001 fd21 	bl	8105d08 <RCCEx_PLL2_Config>
 81042c6:	4603      	mov	r3, r0
 81042c8:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 81042ca:	e003      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 81042cc:	2301      	movs	r3, #1
 81042ce:	75fb      	strb	r3, [r7, #23]
      break;
 81042d0:	e000      	b.n	81042d4 <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 81042d2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81042d4:	7dfb      	ldrb	r3, [r7, #23]
 81042d6:	2b00      	cmp	r3, #0
 81042d8:	d109      	bne.n	81042ee <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 81042da:	4bae      	ldr	r3, [pc, #696]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81042dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81042de:	f023 0203 	bic.w	r2, r3, #3
 81042e2:	687b      	ldr	r3, [r7, #4]
 81042e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81042e6:	49ab      	ldr	r1, [pc, #684]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81042e8:	4313      	orrs	r3, r2
 81042ea:	64cb      	str	r3, [r1, #76]	; 0x4c
 81042ec:	e001      	b.n	81042f2 <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81042ee:	7dfb      	ldrb	r3, [r7, #23]
 81042f0:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 81042f2:	687b      	ldr	r3, [r7, #4]
 81042f4:	681b      	ldr	r3, [r3, #0]
 81042f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 81042fa:	2b00      	cmp	r3, #0
 81042fc:	f000 8088 	beq.w	8104410 <HAL_RCCEx_PeriphCLKConfig+0x74c>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8104300:	4ba5      	ldr	r3, [pc, #660]	; (8104598 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8104302:	681b      	ldr	r3, [r3, #0]
 8104304:	4aa4      	ldr	r2, [pc, #656]	; (8104598 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 8104306:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 810430a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 810430c:	f7fd fa3e 	bl	810178c <HAL_GetTick>
 8104310:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104312:	e009      	b.n	8104328 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8104314:	f7fd fa3a 	bl	810178c <HAL_GetTick>
 8104318:	4602      	mov	r2, r0
 810431a:	693b      	ldr	r3, [r7, #16]
 810431c:	1ad3      	subs	r3, r2, r3
 810431e:	2b64      	cmp	r3, #100	; 0x64
 8104320:	d902      	bls.n	8104328 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 8104322:	2303      	movs	r3, #3
 8104324:	75fb      	strb	r3, [r7, #23]
        break;
 8104326:	e005      	b.n	8104334 <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8104328:	4b9b      	ldr	r3, [pc, #620]	; (8104598 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 810432a:	681b      	ldr	r3, [r3, #0]
 810432c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104330:	2b00      	cmp	r3, #0
 8104332:	d0ef      	beq.n	8104314 <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 8104334:	7dfb      	ldrb	r3, [r7, #23]
 8104336:	2b00      	cmp	r3, #0
 8104338:	d168      	bne.n	810440c <HAL_RCCEx_PeriphCLKConfig+0x748>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 810433a:	4b96      	ldr	r3, [pc, #600]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810433c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 810433e:	687b      	ldr	r3, [r7, #4]
 8104340:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8104344:	4053      	eors	r3, r2
 8104346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810434a:	2b00      	cmp	r3, #0
 810434c:	d013      	beq.n	8104376 <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 810434e:	4b91      	ldr	r3, [pc, #580]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104350:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104352:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8104356:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8104358:	4b8e      	ldr	r3, [pc, #568]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810435a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 810435c:	4a8d      	ldr	r2, [pc, #564]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810435e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8104362:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8104364:	4b8b      	ldr	r3, [pc, #556]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104366:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104368:	4a8a      	ldr	r2, [pc, #552]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810436a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810436e:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8104370:	4a88      	ldr	r2, [pc, #544]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104372:	68fb      	ldr	r3, [r7, #12]
 8104374:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8104376:	687b      	ldr	r3, [r7, #4]
 8104378:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 810437c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104380:	d115      	bne.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8104382:	f7fd fa03 	bl	810178c <HAL_GetTick>
 8104386:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8104388:	e00b      	b.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 810438a:	f7fd f9ff 	bl	810178c <HAL_GetTick>
 810438e:	4602      	mov	r2, r0
 8104390:	693b      	ldr	r3, [r7, #16]
 8104392:	1ad3      	subs	r3, r2, r3
 8104394:	f241 3288 	movw	r2, #5000	; 0x1388
 8104398:	4293      	cmp	r3, r2
 810439a:	d902      	bls.n	81043a2 <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 810439c:	2303      	movs	r3, #3
 810439e:	75fb      	strb	r3, [r7, #23]
            break;
 81043a0:	e005      	b.n	81043ae <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 81043a2:	4b7c      	ldr	r3, [pc, #496]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81043a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 81043a6:	f003 0302 	and.w	r3, r3, #2
 81043aa:	2b00      	cmp	r3, #0
 81043ac:	d0ed      	beq.n	810438a <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 81043ae:	7dfb      	ldrb	r3, [r7, #23]
 81043b0:	2b00      	cmp	r3, #0
 81043b2:	d128      	bne.n	8104406 <HAL_RCCEx_PeriphCLKConfig+0x742>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 81043b4:	687b      	ldr	r3, [r7, #4]
 81043b6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81043ba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 81043be:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 81043c2:	d10f      	bne.n	81043e4 <HAL_RCCEx_PeriphCLKConfig+0x720>
 81043c4:	4b73      	ldr	r3, [pc, #460]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81043c6:	691b      	ldr	r3, [r3, #16]
 81043c8:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 81043cc:	687b      	ldr	r3, [r7, #4]
 81043ce:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81043d2:	091b      	lsrs	r3, r3, #4
 81043d4:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 81043d8:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 81043dc:	496d      	ldr	r1, [pc, #436]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81043de:	4313      	orrs	r3, r2
 81043e0:	610b      	str	r3, [r1, #16]
 81043e2:	e005      	b.n	81043f0 <HAL_RCCEx_PeriphCLKConfig+0x72c>
 81043e4:	4b6b      	ldr	r3, [pc, #428]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81043e6:	691b      	ldr	r3, [r3, #16]
 81043e8:	4a6a      	ldr	r2, [pc, #424]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81043ea:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 81043ee:	6113      	str	r3, [r2, #16]
 81043f0:	4b68      	ldr	r3, [pc, #416]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 81043f2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 81043f4:	687b      	ldr	r3, [r7, #4]
 81043f6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 81043fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 81043fe:	4965      	ldr	r1, [pc, #404]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104400:	4313      	orrs	r3, r2
 8104402:	670b      	str	r3, [r1, #112]	; 0x70
 8104404:	e004      	b.n	8104410 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8104406:	7dfb      	ldrb	r3, [r7, #23]
 8104408:	75bb      	strb	r3, [r7, #22]
 810440a:	e001      	b.n	8104410 <HAL_RCCEx_PeriphCLKConfig+0x74c>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 810440c:	7dfb      	ldrb	r3, [r7, #23]
 810440e:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8104410:	687b      	ldr	r3, [r7, #4]
 8104412:	681b      	ldr	r3, [r3, #0]
 8104414:	f003 0301 	and.w	r3, r3, #1
 8104418:	2b00      	cmp	r3, #0
 810441a:	d07e      	beq.n	810451a <HAL_RCCEx_PeriphCLKConfig+0x856>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 810441c:	687b      	ldr	r3, [r7, #4]
 810441e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8104420:	2b28      	cmp	r3, #40	; 0x28
 8104422:	d867      	bhi.n	81044f4 <HAL_RCCEx_PeriphCLKConfig+0x830>
 8104424:	a201      	add	r2, pc, #4	; (adr r2, 810442c <HAL_RCCEx_PeriphCLKConfig+0x768>)
 8104426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 810442a:	bf00      	nop
 810442c:	081044fb 	.word	0x081044fb
 8104430:	081044f5 	.word	0x081044f5
 8104434:	081044f5 	.word	0x081044f5
 8104438:	081044f5 	.word	0x081044f5
 810443c:	081044f5 	.word	0x081044f5
 8104440:	081044f5 	.word	0x081044f5
 8104444:	081044f5 	.word	0x081044f5
 8104448:	081044f5 	.word	0x081044f5
 810444c:	081044d1 	.word	0x081044d1
 8104450:	081044f5 	.word	0x081044f5
 8104454:	081044f5 	.word	0x081044f5
 8104458:	081044f5 	.word	0x081044f5
 810445c:	081044f5 	.word	0x081044f5
 8104460:	081044f5 	.word	0x081044f5
 8104464:	081044f5 	.word	0x081044f5
 8104468:	081044f5 	.word	0x081044f5
 810446c:	081044e3 	.word	0x081044e3
 8104470:	081044f5 	.word	0x081044f5
 8104474:	081044f5 	.word	0x081044f5
 8104478:	081044f5 	.word	0x081044f5
 810447c:	081044f5 	.word	0x081044f5
 8104480:	081044f5 	.word	0x081044f5
 8104484:	081044f5 	.word	0x081044f5
 8104488:	081044f5 	.word	0x081044f5
 810448c:	081044fb 	.word	0x081044fb
 8104490:	081044f5 	.word	0x081044f5
 8104494:	081044f5 	.word	0x081044f5
 8104498:	081044f5 	.word	0x081044f5
 810449c:	081044f5 	.word	0x081044f5
 81044a0:	081044f5 	.word	0x081044f5
 81044a4:	081044f5 	.word	0x081044f5
 81044a8:	081044f5 	.word	0x081044f5
 81044ac:	081044fb 	.word	0x081044fb
 81044b0:	081044f5 	.word	0x081044f5
 81044b4:	081044f5 	.word	0x081044f5
 81044b8:	081044f5 	.word	0x081044f5
 81044bc:	081044f5 	.word	0x081044f5
 81044c0:	081044f5 	.word	0x081044f5
 81044c4:	081044f5 	.word	0x081044f5
 81044c8:	081044f5 	.word	0x081044f5
 81044cc:	081044fb 	.word	0x081044fb
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81044d0:	687b      	ldr	r3, [r7, #4]
 81044d2:	3304      	adds	r3, #4
 81044d4:	2101      	movs	r1, #1
 81044d6:	4618      	mov	r0, r3
 81044d8:	f001 fc16 	bl	8105d08 <RCCEx_PLL2_Config>
 81044dc:	4603      	mov	r3, r0
 81044de:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81044e0:	e00c      	b.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0x838>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81044e2:	687b      	ldr	r3, [r7, #4]
 81044e4:	3324      	adds	r3, #36	; 0x24
 81044e6:	2101      	movs	r1, #1
 81044e8:	4618      	mov	r0, r3
 81044ea:	f001 fcbf 	bl	8105e6c <RCCEx_PLL3_Config>
 81044ee:	4603      	mov	r3, r0
 81044f0:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 81044f2:	e003      	b.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0x838>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81044f4:	2301      	movs	r3, #1
 81044f6:	75fb      	strb	r3, [r7, #23]
      break;
 81044f8:	e000      	b.n	81044fc <HAL_RCCEx_PeriphCLKConfig+0x838>
      break;
 81044fa:	bf00      	nop
    }

    if(ret == HAL_OK)
 81044fc:	7dfb      	ldrb	r3, [r7, #23]
 81044fe:	2b00      	cmp	r3, #0
 8104500:	d109      	bne.n	8104516 <HAL_RCCEx_PeriphCLKConfig+0x852>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8104502:	4b24      	ldr	r3, [pc, #144]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104506:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 810450a:	687b      	ldr	r3, [r7, #4]
 810450c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 810450e:	4921      	ldr	r1, [pc, #132]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104510:	4313      	orrs	r3, r2
 8104512:	654b      	str	r3, [r1, #84]	; 0x54
 8104514:	e001      	b.n	810451a <HAL_RCCEx_PeriphCLKConfig+0x856>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104516:	7dfb      	ldrb	r3, [r7, #23]
 8104518:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 810451a:	687b      	ldr	r3, [r7, #4]
 810451c:	681b      	ldr	r3, [r3, #0]
 810451e:	f003 0302 	and.w	r3, r3, #2
 8104522:	2b00      	cmp	r3, #0
 8104524:	d03c      	beq.n	81045a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 8104526:	687b      	ldr	r3, [r7, #4]
 8104528:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810452a:	2b05      	cmp	r3, #5
 810452c:	d820      	bhi.n	8104570 <HAL_RCCEx_PeriphCLKConfig+0x8ac>
 810452e:	a201      	add	r2, pc, #4	; (adr r2, 8104534 <HAL_RCCEx_PeriphCLKConfig+0x870>)
 8104530:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104534:	08104577 	.word	0x08104577
 8104538:	0810454d 	.word	0x0810454d
 810453c:	0810455f 	.word	0x0810455f
 8104540:	08104577 	.word	0x08104577
 8104544:	08104577 	.word	0x08104577
 8104548:	08104577 	.word	0x08104577
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 810454c:	687b      	ldr	r3, [r7, #4]
 810454e:	3304      	adds	r3, #4
 8104550:	2101      	movs	r1, #1
 8104552:	4618      	mov	r0, r3
 8104554:	f001 fbd8 	bl	8105d08 <RCCEx_PLL2_Config>
 8104558:	4603      	mov	r3, r0
 810455a:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810455c:	e00c      	b.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0x8b4>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 810455e:	687b      	ldr	r3, [r7, #4]
 8104560:	3324      	adds	r3, #36	; 0x24
 8104562:	2101      	movs	r1, #1
 8104564:	4618      	mov	r0, r3
 8104566:	f001 fc81 	bl	8105e6c <RCCEx_PLL3_Config>
 810456a:	4603      	mov	r3, r0
 810456c:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 810456e:	e003      	b.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104570:	2301      	movs	r3, #1
 8104572:	75fb      	strb	r3, [r7, #23]
      break;
 8104574:	e000      	b.n	8104578 <HAL_RCCEx_PeriphCLKConfig+0x8b4>
      break;
 8104576:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104578:	7dfb      	ldrb	r3, [r7, #23]
 810457a:	2b00      	cmp	r3, #0
 810457c:	d10e      	bne.n	810459c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 810457e:	4b05      	ldr	r3, [pc, #20]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8104580:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104582:	f023 0207 	bic.w	r2, r3, #7
 8104586:	687b      	ldr	r3, [r7, #4]
 8104588:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 810458a:	4902      	ldr	r1, [pc, #8]	; (8104594 <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 810458c:	4313      	orrs	r3, r2
 810458e:	654b      	str	r3, [r1, #84]	; 0x54
 8104590:	e006      	b.n	81045a0 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8104592:	bf00      	nop
 8104594:	58024400 	.word	0x58024400
 8104598:	58024800 	.word	0x58024800
    }
    else
    {
      /* set overall return value */
      status = ret;
 810459c:	7dfb      	ldrb	r3, [r7, #23]
 810459e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 81045a0:	687b      	ldr	r3, [r7, #4]
 81045a2:	681b      	ldr	r3, [r3, #0]
 81045a4:	f003 0304 	and.w	r3, r3, #4
 81045a8:	2b00      	cmp	r3, #0
 81045aa:	d039      	beq.n	8104620 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 81045ac:	687b      	ldr	r3, [r7, #4]
 81045ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 81045b2:	2b05      	cmp	r3, #5
 81045b4:	d820      	bhi.n	81045f8 <HAL_RCCEx_PeriphCLKConfig+0x934>
 81045b6:	a201      	add	r2, pc, #4	; (adr r2, 81045bc <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 81045b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 81045bc:	081045ff 	.word	0x081045ff
 81045c0:	081045d5 	.word	0x081045d5
 81045c4:	081045e7 	.word	0x081045e7
 81045c8:	081045ff 	.word	0x081045ff
 81045cc:	081045ff 	.word	0x081045ff
 81045d0:	081045ff 	.word	0x081045ff
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 81045d4:	687b      	ldr	r3, [r7, #4]
 81045d6:	3304      	adds	r3, #4
 81045d8:	2101      	movs	r1, #1
 81045da:	4618      	mov	r0, r3
 81045dc:	f001 fb94 	bl	8105d08 <RCCEx_PLL2_Config>
 81045e0:	4603      	mov	r3, r0
 81045e2:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81045e4:	e00c      	b.n	8104600 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 81045e6:	687b      	ldr	r3, [r7, #4]
 81045e8:	3324      	adds	r3, #36	; 0x24
 81045ea:	2101      	movs	r1, #1
 81045ec:	4618      	mov	r0, r3
 81045ee:	f001 fc3d 	bl	8105e6c <RCCEx_PLL3_Config>
 81045f2:	4603      	mov	r3, r0
 81045f4:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 81045f6:	e003      	b.n	8104600 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81045f8:	2301      	movs	r3, #1
 81045fa:	75fb      	strb	r3, [r7, #23]
      break;
 81045fc:	e000      	b.n	8104600 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 81045fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104600:	7dfb      	ldrb	r3, [r7, #23]
 8104602:	2b00      	cmp	r3, #0
 8104604:	d10a      	bne.n	810461c <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8104606:	4bb7      	ldr	r3, [pc, #732]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104608:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 810460a:	f023 0207 	bic.w	r2, r3, #7
 810460e:	687b      	ldr	r3, [r7, #4]
 8104610:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8104614:	49b3      	ldr	r1, [pc, #716]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104616:	4313      	orrs	r3, r2
 8104618:	658b      	str	r3, [r1, #88]	; 0x58
 810461a:	e001      	b.n	8104620 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810461c:	7dfb      	ldrb	r3, [r7, #23]
 810461e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8104620:	687b      	ldr	r3, [r7, #4]
 8104622:	681b      	ldr	r3, [r3, #0]
 8104624:	f003 0320 	and.w	r3, r3, #32
 8104628:	2b00      	cmp	r3, #0
 810462a:	d04b      	beq.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 810462c:	687b      	ldr	r3, [r7, #4]
 810462e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8104632:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8104636:	d02e      	beq.n	8104696 <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8104638:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810463c:	d828      	bhi.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810463e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104642:	d02a      	beq.n	810469a <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 8104644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8104648:	d822      	bhi.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 810464a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810464e:	d026      	beq.n	810469e <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8104650:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8104654:	d81c      	bhi.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104656:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810465a:	d010      	beq.n	810467e <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 810465c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104660:	d816      	bhi.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8104662:	2b00      	cmp	r3, #0
 8104664:	d01d      	beq.n	81046a2 <HAL_RCCEx_PeriphCLKConfig+0x9de>
 8104666:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810466a:	d111      	bne.n	8104690 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 810466c:	687b      	ldr	r3, [r7, #4]
 810466e:	3304      	adds	r3, #4
 8104670:	2100      	movs	r1, #0
 8104672:	4618      	mov	r0, r3
 8104674:	f001 fb48 	bl	8105d08 <RCCEx_PLL2_Config>
 8104678:	4603      	mov	r3, r0
 810467a:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810467c:	e012      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 810467e:	687b      	ldr	r3, [r7, #4]
 8104680:	3324      	adds	r3, #36	; 0x24
 8104682:	2102      	movs	r1, #2
 8104684:	4618      	mov	r0, r3
 8104686:	f001 fbf1 	bl	8105e6c <RCCEx_PLL3_Config>
 810468a:	4603      	mov	r3, r0
 810468c:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 810468e:	e009      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104690:	2301      	movs	r3, #1
 8104692:	75fb      	strb	r3, [r7, #23]
      break;
 8104694:	e006      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 8104696:	bf00      	nop
 8104698:	e004      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810469a:	bf00      	nop
 810469c:	e002      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 810469e:	bf00      	nop
 81046a0:	e000      	b.n	81046a4 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 81046a2:	bf00      	nop
    }

    if(ret == HAL_OK)
 81046a4:	7dfb      	ldrb	r3, [r7, #23]
 81046a6:	2b00      	cmp	r3, #0
 81046a8:	d10a      	bne.n	81046c0 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 81046aa:	4b8e      	ldr	r3, [pc, #568]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81046ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81046ae:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 81046b2:	687b      	ldr	r3, [r7, #4]
 81046b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 81046b8:	498a      	ldr	r1, [pc, #552]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81046ba:	4313      	orrs	r3, r2
 81046bc:	654b      	str	r3, [r1, #84]	; 0x54
 81046be:	e001      	b.n	81046c4 <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81046c0:	7dfb      	ldrb	r3, [r7, #23]
 81046c2:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 81046c4:	687b      	ldr	r3, [r7, #4]
 81046c6:	681b      	ldr	r3, [r3, #0]
 81046c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81046cc:	2b00      	cmp	r3, #0
 81046ce:	d04b      	beq.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 81046d0:	687b      	ldr	r3, [r7, #4]
 81046d2:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 81046d6:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81046da:	d02e      	beq.n	810473a <HAL_RCCEx_PeriphCLKConfig+0xa76>
 81046dc:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 81046e0:	d828      	bhi.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81046e2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81046e6:	d02a      	beq.n	810473e <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 81046e8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81046ec:	d822      	bhi.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81046ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81046f2:	d026      	beq.n	8104742 <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 81046f4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 81046f8:	d81c      	bhi.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 81046fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 81046fe:	d010      	beq.n	8104722 <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8104700:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104704:	d816      	bhi.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8104706:	2b00      	cmp	r3, #0
 8104708:	d01d      	beq.n	8104746 <HAL_RCCEx_PeriphCLKConfig+0xa82>
 810470a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 810470e:	d111      	bne.n	8104734 <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8104710:	687b      	ldr	r3, [r7, #4]
 8104712:	3304      	adds	r3, #4
 8104714:	2100      	movs	r1, #0
 8104716:	4618      	mov	r0, r3
 8104718:	f001 faf6 	bl	8105d08 <RCCEx_PLL2_Config>
 810471c:	4603      	mov	r3, r0
 810471e:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104720:	e012      	b.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8104722:	687b      	ldr	r3, [r7, #4]
 8104724:	3324      	adds	r3, #36	; 0x24
 8104726:	2102      	movs	r1, #2
 8104728:	4618      	mov	r0, r3
 810472a:	f001 fb9f 	bl	8105e6c <RCCEx_PLL3_Config>
 810472e:	4603      	mov	r3, r0
 8104730:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8104732:	e009      	b.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104734:	2301      	movs	r3, #1
 8104736:	75fb      	strb	r3, [r7, #23]
      break;
 8104738:	e006      	b.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810473a:	bf00      	nop
 810473c:	e004      	b.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 810473e:	bf00      	nop
 8104740:	e002      	b.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104742:	bf00      	nop
 8104744:	e000      	b.n	8104748 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8104746:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104748:	7dfb      	ldrb	r3, [r7, #23]
 810474a:	2b00      	cmp	r3, #0
 810474c:	d10a      	bne.n	8104764 <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 810474e:	4b65      	ldr	r3, [pc, #404]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104750:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104752:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8104756:	687b      	ldr	r3, [r7, #4]
 8104758:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 810475c:	4961      	ldr	r1, [pc, #388]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810475e:	4313      	orrs	r3, r2
 8104760:	658b      	str	r3, [r1, #88]	; 0x58
 8104762:	e001      	b.n	8104768 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104764:	7dfb      	ldrb	r3, [r7, #23]
 8104766:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8104768:	687b      	ldr	r3, [r7, #4]
 810476a:	681b      	ldr	r3, [r3, #0]
 810476c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8104770:	2b00      	cmp	r3, #0
 8104772:	d04b      	beq.n	810480c <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 8104774:	687b      	ldr	r3, [r7, #4]
 8104776:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 810477a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 810477e:	d02e      	beq.n	81047de <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8104780:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8104784:	d828      	bhi.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104786:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 810478a:	d02a      	beq.n	81047e2 <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 810478c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8104790:	d822      	bhi.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 8104792:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8104796:	d026      	beq.n	81047e6 <HAL_RCCEx_PeriphCLKConfig+0xb22>
 8104798:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 810479c:	d81c      	bhi.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 810479e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81047a2:	d010      	beq.n	81047c6 <HAL_RCCEx_PeriphCLKConfig+0xb02>
 81047a4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 81047a8:	d816      	bhi.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 81047aa:	2b00      	cmp	r3, #0
 81047ac:	d01d      	beq.n	81047ea <HAL_RCCEx_PeriphCLKConfig+0xb26>
 81047ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 81047b2:	d111      	bne.n	81047d8 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81047b4:	687b      	ldr	r3, [r7, #4]
 81047b6:	3304      	adds	r3, #4
 81047b8:	2100      	movs	r1, #0
 81047ba:	4618      	mov	r0, r3
 81047bc:	f001 faa4 	bl	8105d08 <RCCEx_PLL2_Config>
 81047c0:	4603      	mov	r3, r0
 81047c2:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81047c4:	e012      	b.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81047c6:	687b      	ldr	r3, [r7, #4]
 81047c8:	3324      	adds	r3, #36	; 0x24
 81047ca:	2102      	movs	r1, #2
 81047cc:	4618      	mov	r0, r3
 81047ce:	f001 fb4d 	bl	8105e6c <RCCEx_PLL3_Config>
 81047d2:	4603      	mov	r3, r0
 81047d4:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 81047d6:	e009      	b.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81047d8:	2301      	movs	r3, #1
 81047da:	75fb      	strb	r3, [r7, #23]
      break;
 81047dc:	e006      	b.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81047de:	bf00      	nop
 81047e0:	e004      	b.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81047e2:	bf00      	nop
 81047e4:	e002      	b.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81047e6:	bf00      	nop
 81047e8:	e000      	b.n	81047ec <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 81047ea:	bf00      	nop
    }

    if(ret == HAL_OK)
 81047ec:	7dfb      	ldrb	r3, [r7, #23]
 81047ee:	2b00      	cmp	r3, #0
 81047f0:	d10a      	bne.n	8104808 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 81047f2:	4b3c      	ldr	r3, [pc, #240]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 81047f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81047f6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 81047fa:	687b      	ldr	r3, [r7, #4]
 81047fc:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8104800:	4938      	ldr	r1, [pc, #224]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8104802:	4313      	orrs	r3, r2
 8104804:	658b      	str	r3, [r1, #88]	; 0x58
 8104806:	e001      	b.n	810480c <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104808:	7dfb      	ldrb	r3, [r7, #23]
 810480a:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 810480c:	687b      	ldr	r3, [r7, #4]
 810480e:	681b      	ldr	r3, [r3, #0]
 8104810:	f003 0308 	and.w	r3, r3, #8
 8104814:	2b00      	cmp	r3, #0
 8104816:	d01a      	beq.n	810484e <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8104818:	687b      	ldr	r3, [r7, #4]
 810481a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 810481e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8104822:	d10a      	bne.n	810483a <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104824:	687b      	ldr	r3, [r7, #4]
 8104826:	3324      	adds	r3, #36	; 0x24
 8104828:	2102      	movs	r1, #2
 810482a:	4618      	mov	r0, r3
 810482c:	f001 fb1e 	bl	8105e6c <RCCEx_PLL3_Config>
 8104830:	4603      	mov	r3, r0
 8104832:	2b00      	cmp	r3, #0
 8104834:	d001      	beq.n	810483a <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8104836:	2301      	movs	r3, #1
 8104838:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 810483a:	4b2a      	ldr	r3, [pc, #168]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810483c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 810483e:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8104842:	687b      	ldr	r3, [r7, #4]
 8104844:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8104848:	4926      	ldr	r1, [pc, #152]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810484a:	4313      	orrs	r3, r2
 810484c:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 810484e:	687b      	ldr	r3, [r7, #4]
 8104850:	681b      	ldr	r3, [r3, #0]
 8104852:	f003 0310 	and.w	r3, r3, #16
 8104856:	2b00      	cmp	r3, #0
 8104858:	d01a      	beq.n	8104890 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 810485a:	687b      	ldr	r3, [r7, #4]
 810485c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8104860:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104864:	d10a      	bne.n	810487c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8104866:	687b      	ldr	r3, [r7, #4]
 8104868:	3324      	adds	r3, #36	; 0x24
 810486a:	2102      	movs	r1, #2
 810486c:	4618      	mov	r0, r3
 810486e:	f001 fafd 	bl	8105e6c <RCCEx_PLL3_Config>
 8104872:	4603      	mov	r3, r0
 8104874:	2b00      	cmp	r3, #0
 8104876:	d001      	beq.n	810487c <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8104878:	2301      	movs	r3, #1
 810487a:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 810487c:	4b19      	ldr	r3, [pc, #100]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810487e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104880:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104884:	687b      	ldr	r3, [r7, #4]
 8104886:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 810488a:	4916      	ldr	r1, [pc, #88]	; (81048e4 <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 810488c:	4313      	orrs	r3, r2
 810488e:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8104890:	687b      	ldr	r3, [r7, #4]
 8104892:	681b      	ldr	r3, [r3, #0]
 8104894:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8104898:	2b00      	cmp	r3, #0
 810489a:	d036      	beq.n	810490a <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 810489c:	687b      	ldr	r3, [r7, #4]
 810489e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81048a2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048a6:	d01f      	beq.n	81048e8 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 81048a8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81048ac:	d817      	bhi.n	81048de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 81048ae:	2b00      	cmp	r3, #0
 81048b0:	d003      	beq.n	81048ba <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 81048b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81048b6:	d009      	beq.n	81048cc <HAL_RCCEx_PeriphCLKConfig+0xc08>
 81048b8:	e011      	b.n	81048de <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 81048ba:	687b      	ldr	r3, [r7, #4]
 81048bc:	3304      	adds	r3, #4
 81048be:	2100      	movs	r1, #0
 81048c0:	4618      	mov	r0, r3
 81048c2:	f001 fa21 	bl	8105d08 <RCCEx_PLL2_Config>
 81048c6:	4603      	mov	r3, r0
 81048c8:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81048ca:	e00e      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 81048cc:	687b      	ldr	r3, [r7, #4]
 81048ce:	3324      	adds	r3, #36	; 0x24
 81048d0:	2102      	movs	r1, #2
 81048d2:	4618      	mov	r0, r3
 81048d4:	f001 faca 	bl	8105e6c <RCCEx_PLL3_Config>
 81048d8:	4603      	mov	r3, r0
 81048da:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 81048dc:	e005      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 81048de:	2301      	movs	r3, #1
 81048e0:	75fb      	strb	r3, [r7, #23]
      break;
 81048e2:	e002      	b.n	81048ea <HAL_RCCEx_PeriphCLKConfig+0xc26>
 81048e4:	58024400 	.word	0x58024400
      break;
 81048e8:	bf00      	nop
    }

    if(ret == HAL_OK)
 81048ea:	7dfb      	ldrb	r3, [r7, #23]
 81048ec:	2b00      	cmp	r3, #0
 81048ee:	d10a      	bne.n	8104906 <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 81048f0:	4b93      	ldr	r3, [pc, #588]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81048f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81048f4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 81048f8:	687b      	ldr	r3, [r7, #4]
 81048fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 81048fe:	4990      	ldr	r1, [pc, #576]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104900:	4313      	orrs	r3, r2
 8104902:	658b      	str	r3, [r1, #88]	; 0x58
 8104904:	e001      	b.n	810490a <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104906:	7dfb      	ldrb	r3, [r7, #23]
 8104908:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 810490a:	687b      	ldr	r3, [r7, #4]
 810490c:	681b      	ldr	r3, [r3, #0]
 810490e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8104912:	2b00      	cmp	r3, #0
 8104914:	d033      	beq.n	810497e <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8104916:	687b      	ldr	r3, [r7, #4]
 8104918:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 810491c:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104920:	d01c      	beq.n	810495c <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8104922:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8104926:	d816      	bhi.n	8104956 <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8104928:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 810492c:	d003      	beq.n	8104936 <HAL_RCCEx_PeriphCLKConfig+0xc72>
 810492e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104932:	d007      	beq.n	8104944 <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8104934:	e00f      	b.n	8104956 <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104936:	4b82      	ldr	r3, [pc, #520]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104938:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810493a:	4a81      	ldr	r2, [pc, #516]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810493c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104940:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8104942:	e00c      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8104944:	687b      	ldr	r3, [r7, #4]
 8104946:	3324      	adds	r3, #36	; 0x24
 8104948:	2101      	movs	r1, #1
 810494a:	4618      	mov	r0, r3
 810494c:	f001 fa8e 	bl	8105e6c <RCCEx_PLL3_Config>
 8104950:	4603      	mov	r3, r0
 8104952:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8104954:	e003      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104956:	2301      	movs	r3, #1
 8104958:	75fb      	strb	r3, [r7, #23]
      break;
 810495a:	e000      	b.n	810495e <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 810495c:	bf00      	nop
    }

    if(ret == HAL_OK)
 810495e:	7dfb      	ldrb	r3, [r7, #23]
 8104960:	2b00      	cmp	r3, #0
 8104962:	d10a      	bne.n	810497a <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8104964:	4b76      	ldr	r3, [pc, #472]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104966:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104968:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 810496c:	687b      	ldr	r3, [r7, #4]
 810496e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8104972:	4973      	ldr	r1, [pc, #460]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104974:	4313      	orrs	r3, r2
 8104976:	654b      	str	r3, [r1, #84]	; 0x54
 8104978:	e001      	b.n	810497e <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 810497a:	7dfb      	ldrb	r3, [r7, #23]
 810497c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 810497e:	687b      	ldr	r3, [r7, #4]
 8104980:	681b      	ldr	r3, [r3, #0]
 8104982:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8104986:	2b00      	cmp	r3, #0
 8104988:	d029      	beq.n	81049de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 810498a:	687b      	ldr	r3, [r7, #4]
 810498c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 810498e:	2b00      	cmp	r3, #0
 8104990:	d003      	beq.n	810499a <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8104992:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8104996:	d007      	beq.n	81049a8 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8104998:	e00f      	b.n	81049ba <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 810499a:	4b69      	ldr	r3, [pc, #420]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 810499c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 810499e:	4a68      	ldr	r2, [pc, #416]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81049a0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 81049a4:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81049a6:	e00b      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 81049a8:	687b      	ldr	r3, [r7, #4]
 81049aa:	3304      	adds	r3, #4
 81049ac:	2102      	movs	r1, #2
 81049ae:	4618      	mov	r0, r3
 81049b0:	f001 f9aa 	bl	8105d08 <RCCEx_PLL2_Config>
 81049b4:	4603      	mov	r3, r0
 81049b6:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 81049b8:	e002      	b.n	81049c0 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 81049ba:	2301      	movs	r3, #1
 81049bc:	75fb      	strb	r3, [r7, #23]
      break;
 81049be:	bf00      	nop
    }

    if(ret == HAL_OK)
 81049c0:	7dfb      	ldrb	r3, [r7, #23]
 81049c2:	2b00      	cmp	r3, #0
 81049c4:	d109      	bne.n	81049da <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 81049c6:	4b5e      	ldr	r3, [pc, #376]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81049c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81049ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81049ce:	687b      	ldr	r3, [r7, #4]
 81049d0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81049d2:	495b      	ldr	r1, [pc, #364]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 81049d4:	4313      	orrs	r3, r2
 81049d6:	64cb      	str	r3, [r1, #76]	; 0x4c
 81049d8:	e001      	b.n	81049de <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 81049da:	7dfb      	ldrb	r3, [r7, #23]
 81049dc:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 81049de:	687b      	ldr	r3, [r7, #4]
 81049e0:	681b      	ldr	r3, [r3, #0]
 81049e2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81049e6:	2b00      	cmp	r3, #0
 81049e8:	d00a      	beq.n	8104a00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 81049ea:	687b      	ldr	r3, [r7, #4]
 81049ec:	3324      	adds	r3, #36	; 0x24
 81049ee:	2102      	movs	r1, #2
 81049f0:	4618      	mov	r0, r3
 81049f2:	f001 fa3b 	bl	8105e6c <RCCEx_PLL3_Config>
 81049f6:	4603      	mov	r3, r0
 81049f8:	2b00      	cmp	r3, #0
 81049fa:	d001      	beq.n	8104a00 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 81049fc:	2301      	movs	r3, #1
 81049fe:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8104a00:	687b      	ldr	r3, [r7, #4]
 8104a02:	681b      	ldr	r3, [r3, #0]
 8104a04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104a08:	2b00      	cmp	r3, #0
 8104a0a:	d030      	beq.n	8104a6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8104a0c:	687b      	ldr	r3, [r7, #4]
 8104a0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a10:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104a14:	d017      	beq.n	8104a46 <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8104a16:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8104a1a:	d811      	bhi.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104a20:	d013      	beq.n	8104a4a <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8104a22:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104a26:	d80b      	bhi.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8104a28:	2b00      	cmp	r3, #0
 8104a2a:	d010      	beq.n	8104a4e <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8104a2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104a30:	d106      	bne.n	8104a40 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8104a32:	4b43      	ldr	r3, [pc, #268]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8104a36:	4a42      	ldr	r2, [pc, #264]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a38:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8104a3c:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8104a3e:	e007      	b.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8104a40:	2301      	movs	r3, #1
 8104a42:	75fb      	strb	r3, [r7, #23]
      break;
 8104a44:	e004      	b.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104a46:	bf00      	nop
 8104a48:	e002      	b.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104a4a:	bf00      	nop
 8104a4c:	e000      	b.n	8104a50 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8104a4e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8104a50:	7dfb      	ldrb	r3, [r7, #23]
 8104a52:	2b00      	cmp	r3, #0
 8104a54:	d109      	bne.n	8104a6a <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8104a56:	4b3a      	ldr	r3, [pc, #232]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104a5a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8104a5e:	687b      	ldr	r3, [r7, #4]
 8104a60:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8104a62:	4937      	ldr	r1, [pc, #220]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a64:	4313      	orrs	r3, r2
 8104a66:	654b      	str	r3, [r1, #84]	; 0x54
 8104a68:	e001      	b.n	8104a6e <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8104a6a:	7dfb      	ldrb	r3, [r7, #23]
 8104a6c:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8104a6e:	687b      	ldr	r3, [r7, #4]
 8104a70:	681b      	ldr	r3, [r3, #0]
 8104a72:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8104a76:	2b00      	cmp	r3, #0
 8104a78:	d008      	beq.n	8104a8c <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8104a7a:	4b31      	ldr	r3, [pc, #196]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a7c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104a7e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8104a82:	687b      	ldr	r3, [r7, #4]
 8104a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8104a86:	492e      	ldr	r1, [pc, #184]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a88:	4313      	orrs	r3, r2
 8104a8a:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8104a8c:	687b      	ldr	r3, [r7, #4]
 8104a8e:	681b      	ldr	r3, [r3, #0]
 8104a90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8104a94:	2b00      	cmp	r3, #0
 8104a96:	d009      	beq.n	8104aac <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8104a98:	4b29      	ldr	r3, [pc, #164]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104a9a:	691b      	ldr	r3, [r3, #16]
 8104a9c:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8104aa0:	687b      	ldr	r3, [r7, #4]
 8104aa2:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8104aa6:	4926      	ldr	r1, [pc, #152]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104aa8:	4313      	orrs	r3, r2
 8104aaa:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8104aac:	687b      	ldr	r3, [r7, #4]
 8104aae:	681b      	ldr	r3, [r3, #0]
 8104ab0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8104ab4:	2b00      	cmp	r3, #0
 8104ab6:	d008      	beq.n	8104aca <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8104ab8:	4b21      	ldr	r3, [pc, #132]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104abc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8104ac0:	687b      	ldr	r3, [r7, #4]
 8104ac2:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8104ac4:	491e      	ldr	r1, [pc, #120]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ac6:	4313      	orrs	r3, r2
 8104ac8:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8104aca:	687b      	ldr	r3, [r7, #4]
 8104acc:	681b      	ldr	r3, [r3, #0]
 8104ace:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8104ad2:	2b00      	cmp	r3, #0
 8104ad4:	d00d      	beq.n	8104af2 <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8104ad6:	4b1a      	ldr	r3, [pc, #104]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ad8:	691b      	ldr	r3, [r3, #16]
 8104ada:	4a19      	ldr	r2, [pc, #100]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104adc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8104ae0:	6113      	str	r3, [r2, #16]
 8104ae2:	4b17      	ldr	r3, [pc, #92]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104ae4:	691a      	ldr	r2, [r3, #16]
 8104ae6:	687b      	ldr	r3, [r7, #4]
 8104ae8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8104aec:	4914      	ldr	r1, [pc, #80]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104aee:	4313      	orrs	r3, r2
 8104af0:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8104af2:	687b      	ldr	r3, [r7, #4]
 8104af4:	681b      	ldr	r3, [r3, #0]
 8104af6:	2b00      	cmp	r3, #0
 8104af8:	da08      	bge.n	8104b0c <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8104afa:	4b11      	ldr	r3, [pc, #68]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104afc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104afe:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8104b02:	687b      	ldr	r3, [r7, #4]
 8104b04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b06:	490e      	ldr	r1, [pc, #56]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104b08:	4313      	orrs	r3, r2
 8104b0a:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8104b0c:	687b      	ldr	r3, [r7, #4]
 8104b0e:	681b      	ldr	r3, [r3, #0]
 8104b10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8104b14:	2b00      	cmp	r3, #0
 8104b16:	d009      	beq.n	8104b2c <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8104b18:	4b09      	ldr	r3, [pc, #36]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104b1a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8104b1c:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8104b20:	687b      	ldr	r3, [r7, #4]
 8104b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8104b26:	4906      	ldr	r1, [pc, #24]	; (8104b40 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8104b28:	4313      	orrs	r3, r2
 8104b2a:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8104b2c:	7dbb      	ldrb	r3, [r7, #22]
 8104b2e:	2b00      	cmp	r3, #0
 8104b30:	d101      	bne.n	8104b36 <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8104b32:	2300      	movs	r3, #0
 8104b34:	e000      	b.n	8104b38 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8104b36:	2301      	movs	r3, #1
}
 8104b38:	4618      	mov	r0, r3
 8104b3a:	3718      	adds	r7, #24
 8104b3c:	46bd      	mov	sp, r7
 8104b3e:	bd80      	pop	{r7, pc}
 8104b40:	58024400 	.word	0x58024400

08104b44 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8104b44:	b580      	push	{r7, lr}
 8104b46:	b090      	sub	sp, #64	; 0x40
 8104b48:	af00      	add	r7, sp, #0
 8104b4a:	6078      	str	r0, [r7, #4]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8104b4c:	687b      	ldr	r3, [r7, #4]
 8104b4e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104b52:	f040 8095 	bne.w	8104c80 <HAL_RCCEx_GetPeriphCLKFreq+0x13c>
    {

      saiclocksource= __HAL_RCC_GET_SAI1_SOURCE();
 8104b56:	4bae      	ldr	r3, [pc, #696]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104b58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104b5a:	f003 0307 	and.w	r3, r3, #7
 8104b5e:	633b      	str	r3, [r7, #48]	; 0x30
 8104b60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104b62:	2b04      	cmp	r3, #4
 8104b64:	f200 8088 	bhi.w	8104c78 <HAL_RCCEx_GetPeriphCLKFreq+0x134>
 8104b68:	a201      	add	r2, pc, #4	; (adr r2, 8104b70 <HAL_RCCEx_GetPeriphCLKFreq+0x2c>)
 8104b6a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8104b6e:	bf00      	nop
 8104b70:	08104b85 	.word	0x08104b85
 8104b74:	08104bad 	.word	0x08104bad
 8104b78:	08104bd5 	.word	0x08104bd5
 8104b7c:	08104c71 	.word	0x08104c71
 8104b80:	08104bfd 	.word	0x08104bfd

      switch (saiclocksource)
      {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104b84:	4ba2      	ldr	r3, [pc, #648]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104b86:	681b      	ldr	r3, [r3, #0]
 8104b88:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104b8c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104b90:	d108      	bne.n	8104ba4 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
         {
           HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104b92:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104b96:	4618      	mov	r0, r3
 8104b98:	f000 ff64 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
           frequency = pll1_clocks.PLL1_Q_Frequency;
 8104b9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104b9e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104ba0:	f000 bc95 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104ba4:	2300      	movs	r3, #0
 8104ba6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104ba8:	f000 bc91 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104bac:	4b98      	ldr	r3, [pc, #608]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104bae:	681b      	ldr	r3, [r3, #0]
 8104bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104bb4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104bb8:	d108      	bne.n	8104bcc <HAL_RCCEx_GetPeriphCLKFreq+0x88>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104bba:	f107 0318 	add.w	r3, r7, #24
 8104bbe:	4618      	mov	r0, r3
 8104bc0:	f000 fca8 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104bc4:	69bb      	ldr	r3, [r7, #24]
 8104bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104bc8:	f000 bc81 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104bcc:	2300      	movs	r3, #0
 8104bce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104bd0:	f000 bc7d 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104bd4:	4b8e      	ldr	r3, [pc, #568]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104bd6:	681b      	ldr	r3, [r3, #0]
 8104bd8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104bdc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104be0:	d108      	bne.n	8104bf4 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104be2:	f107 030c 	add.w	r3, r7, #12
 8104be6:	4618      	mov	r0, r3
 8104be8:	f000 fde8 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104bec:	68fb      	ldr	r3, [r7, #12]
 8104bee:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104bf0:	f000 bc6d 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104bf4:	2300      	movs	r3, #0
 8104bf6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104bf8:	f000 bc69 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104bfc:	4b84      	ldr	r3, [pc, #528]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104bfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104c00:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104c04:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104c06:	4b82      	ldr	r3, [pc, #520]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104c08:	681b      	ldr	r3, [r3, #0]
 8104c0a:	f003 0304 	and.w	r3, r3, #4
 8104c0e:	2b04      	cmp	r3, #4
 8104c10:	d10c      	bne.n	8104c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
 8104c12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c14:	2b00      	cmp	r3, #0
 8104c16:	d109      	bne.n	8104c2c <HAL_RCCEx_GetPeriphCLKFreq+0xe8>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104c18:	4b7d      	ldr	r3, [pc, #500]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104c1a:	681b      	ldr	r3, [r3, #0]
 8104c1c:	08db      	lsrs	r3, r3, #3
 8104c1e:	f003 0303 	and.w	r3, r3, #3
 8104c22:	4a7c      	ldr	r2, [pc, #496]	; (8104e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8104c24:	fa22 f303 	lsr.w	r3, r2, r3
 8104c28:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104c2a:	e01f      	b.n	8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104c2c:	4b78      	ldr	r3, [pc, #480]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104c2e:	681b      	ldr	r3, [r3, #0]
 8104c30:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c38:	d106      	bne.n	8104c48 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
 8104c3a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c3c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104c40:	d102      	bne.n	8104c48 <HAL_RCCEx_GetPeriphCLKFreq+0x104>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104c42:	4b75      	ldr	r3, [pc, #468]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8104c44:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104c46:	e011      	b.n	8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104c48:	4b71      	ldr	r3, [pc, #452]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104c4a:	681b      	ldr	r3, [r3, #0]
 8104c4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104c50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104c54:	d106      	bne.n	8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 8104c56:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104c58:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104c5c:	d102      	bne.n	8104c64 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104c5e:	4b6f      	ldr	r3, [pc, #444]	; (8104e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8104c60:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104c62:	e003      	b.n	8104c6c <HAL_RCCEx_GetPeriphCLKFreq+0x128>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104c64:	2300      	movs	r3, #0
 8104c66:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104c68:	f000 bc31 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8104c6c:	f000 bc2f 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104c70:	4b6b      	ldr	r3, [pc, #428]	; (8104e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8104c72:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104c74:	f000 bc2b 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8104c78:	2300      	movs	r3, #0
 8104c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104c7c:	f000 bc27 	b.w	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8104c80:	687b      	ldr	r3, [r7, #4]
 8104c82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8104c86:	f040 8095 	bne.w	8104db4 <HAL_RCCEx_GetPeriphCLKFreq+0x270>
    {

      saiclocksource= __HAL_RCC_GET_SAI23_SOURCE();
 8104c8a:	4b61      	ldr	r3, [pc, #388]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104c8c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8104c8e:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 8104c92:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104c94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c96:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104c9a:	d04d      	beq.n	8104d38 <HAL_RCCEx_GetPeriphCLKFreq+0x1f4>
 8104c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104c9e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ca2:	f200 8084 	bhi.w	8104dae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104ca6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ca8:	2bc0      	cmp	r3, #192	; 0xc0
 8104caa:	d07d      	beq.n	8104da8 <HAL_RCCEx_GetPeriphCLKFreq+0x264>
 8104cac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104cae:	2bc0      	cmp	r3, #192	; 0xc0
 8104cb0:	d87d      	bhi.n	8104dae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104cb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104cb4:	2b80      	cmp	r3, #128	; 0x80
 8104cb6:	d02d      	beq.n	8104d14 <HAL_RCCEx_GetPeriphCLKFreq+0x1d0>
 8104cb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104cba:	2b80      	cmp	r3, #128	; 0x80
 8104cbc:	d877      	bhi.n	8104dae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
 8104cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104cc0:	2b00      	cmp	r3, #0
 8104cc2:	d003      	beq.n	8104ccc <HAL_RCCEx_GetPeriphCLKFreq+0x188>
 8104cc4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104cc6:	2b40      	cmp	r3, #64	; 0x40
 8104cc8:	d012      	beq.n	8104cf0 <HAL_RCCEx_GetPeriphCLKFreq+0x1ac>
 8104cca:	e070      	b.n	8104dae <HAL_RCCEx_GetPeriphCLKFreq+0x26a>
      {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104ccc:	4b50      	ldr	r3, [pc, #320]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104cce:	681b      	ldr	r3, [r3, #0]
 8104cd0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104cd4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104cd8:	d107      	bne.n	8104cea <HAL_RCCEx_GetPeriphCLKFreq+0x1a6>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104cda:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104cde:	4618      	mov	r0, r3
 8104ce0:	f000 fec0 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104ce4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104ce6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104ce8:	e3f1      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104cea:	2300      	movs	r3, #0
 8104cec:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104cee:	e3ee      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104cf0:	4b47      	ldr	r3, [pc, #284]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104cf2:	681b      	ldr	r3, [r3, #0]
 8104cf4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104cf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104cfc:	d107      	bne.n	8104d0e <HAL_RCCEx_GetPeriphCLKFreq+0x1ca>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104cfe:	f107 0318 	add.w	r3, r7, #24
 8104d02:	4618      	mov	r0, r3
 8104d04:	f000 fc06 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104d08:	69bb      	ldr	r3, [r7, #24]
 8104d0a:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104d0c:	e3df      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104d0e:	2300      	movs	r3, #0
 8104d10:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104d12:	e3dc      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104d14:	4b3e      	ldr	r3, [pc, #248]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104d16:	681b      	ldr	r3, [r3, #0]
 8104d18:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104d1c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d20:	d107      	bne.n	8104d32 <HAL_RCCEx_GetPeriphCLKFreq+0x1ee>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104d22:	f107 030c 	add.w	r3, r7, #12
 8104d26:	4618      	mov	r0, r3
 8104d28:	f000 fd48 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104d2c:	68fb      	ldr	r3, [r7, #12]
 8104d2e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104d30:	e3cd      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104d32:	2300      	movs	r3, #0
 8104d34:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104d36:	e3ca      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104d38:	4b35      	ldr	r3, [pc, #212]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104d3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104d40:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104d42:	4b33      	ldr	r3, [pc, #204]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104d44:	681b      	ldr	r3, [r3, #0]
 8104d46:	f003 0304 	and.w	r3, r3, #4
 8104d4a:	2b04      	cmp	r3, #4
 8104d4c:	d10c      	bne.n	8104d68 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
 8104d4e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d50:	2b00      	cmp	r3, #0
 8104d52:	d109      	bne.n	8104d68 <HAL_RCCEx_GetPeriphCLKFreq+0x224>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104d54:	4b2e      	ldr	r3, [pc, #184]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104d56:	681b      	ldr	r3, [r3, #0]
 8104d58:	08db      	lsrs	r3, r3, #3
 8104d5a:	f003 0303 	and.w	r3, r3, #3
 8104d5e:	4a2d      	ldr	r2, [pc, #180]	; (8104e14 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>)
 8104d60:	fa22 f303 	lsr.w	r3, r2, r3
 8104d64:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d66:	e01e      	b.n	8104da6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104d68:	4b29      	ldr	r3, [pc, #164]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104d6a:	681b      	ldr	r3, [r3, #0]
 8104d6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104d70:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104d74:	d106      	bne.n	8104d84 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
 8104d76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104d7c:	d102      	bne.n	8104d84 <HAL_RCCEx_GetPeriphCLKFreq+0x240>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104d7e:	4b26      	ldr	r3, [pc, #152]	; (8104e18 <HAL_RCCEx_GetPeriphCLKFreq+0x2d4>)
 8104d80:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d82:	e010      	b.n	8104da6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104d84:	4b22      	ldr	r3, [pc, #136]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104d86:	681b      	ldr	r3, [r3, #0]
 8104d88:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104d8c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104d90:	d106      	bne.n	8104da0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
 8104d92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104d94:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104d98:	d102      	bne.n	8104da0 <HAL_RCCEx_GetPeriphCLKFreq+0x25c>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104d9a:	4b20      	ldr	r3, [pc, #128]	; (8104e1c <HAL_RCCEx_GetPeriphCLKFreq+0x2d8>)
 8104d9c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104d9e:	e002      	b.n	8104da6 <HAL_RCCEx_GetPeriphCLKFreq+0x262>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104da0:	2300      	movs	r3, #0
 8104da2:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104da4:	e393      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8104da6:	e392      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104da8:	4b1d      	ldr	r3, [pc, #116]	; (8104e20 <HAL_RCCEx_GetPeriphCLKFreq+0x2dc>)
 8104daa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104dac:	e38f      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 8104dae:	2300      	movs	r3, #0
 8104db0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104db2:	e38c      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
      }
    }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8104db4:	687b      	ldr	r3, [r7, #4]
 8104db6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8104dba:	f040 80a7 	bne.w	8104f0c <HAL_RCCEx_GetPeriphCLKFreq+0x3c8>
    {

      saiclocksource= __HAL_RCC_GET_SAI4A_SOURCE();
 8104dbe:	4b14      	ldr	r3, [pc, #80]	; (8104e10 <HAL_RCCEx_GetPeriphCLKFreq+0x2cc>)
 8104dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104dc2:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 8104dc6:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104dca:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104dce:	d05f      	beq.n	8104e90 <HAL_RCCEx_GetPeriphCLKFreq+0x34c>
 8104dd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104dd2:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8104dd6:	f200 8096 	bhi.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8104dda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104ddc:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104de0:	f000 808e 	beq.w	8104f00 <HAL_RCCEx_GetPeriphCLKFreq+0x3bc>
 8104de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104de6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 8104dea:	f200 808c 	bhi.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8104dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104df0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104df4:	d03a      	beq.n	8104e6c <HAL_RCCEx_GetPeriphCLKFreq+0x328>
 8104df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104df8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8104dfc:	f200 8083 	bhi.w	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8104e00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104e02:	2b00      	cmp	r3, #0
 8104e04:	d00e      	beq.n	8104e24 <HAL_RCCEx_GetPeriphCLKFreq+0x2e0>
 8104e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104e08:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8104e0c:	d01c      	beq.n	8104e48 <HAL_RCCEx_GetPeriphCLKFreq+0x304>
 8104e0e:	e07a      	b.n	8104f06 <HAL_RCCEx_GetPeriphCLKFreq+0x3c2>
 8104e10:	58024400 	.word	0x58024400
 8104e14:	03d09000 	.word	0x03d09000
 8104e18:	003d0900 	.word	0x003d0900
 8104e1c:	007a1200 	.word	0x007a1200
 8104e20:	00bb8000 	.word	0x00bb8000
      {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104e24:	4baa      	ldr	r3, [pc, #680]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104e26:	681b      	ldr	r3, [r3, #0]
 8104e28:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104e2c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104e30:	d107      	bne.n	8104e42 <HAL_RCCEx_GetPeriphCLKFreq+0x2fe>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104e32:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104e36:	4618      	mov	r0, r3
 8104e38:	f000 fe14 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104e3e:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104e40:	e345      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104e42:	2300      	movs	r3, #0
 8104e44:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e46:	e342      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104e48:	4ba1      	ldr	r3, [pc, #644]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104e4a:	681b      	ldr	r3, [r3, #0]
 8104e4c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104e50:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104e54:	d107      	bne.n	8104e66 <HAL_RCCEx_GetPeriphCLKFreq+0x322>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104e56:	f107 0318 	add.w	r3, r7, #24
 8104e5a:	4618      	mov	r0, r3
 8104e5c:	f000 fb5a 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104e60:	69bb      	ldr	r3, [r7, #24]
 8104e62:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104e64:	e333      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104e66:	2300      	movs	r3, #0
 8104e68:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e6a:	e330      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104e6c:	4b98      	ldr	r3, [pc, #608]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104e6e:	681b      	ldr	r3, [r3, #0]
 8104e70:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104e74:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104e78:	d107      	bne.n	8104e8a <HAL_RCCEx_GetPeriphCLKFreq+0x346>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104e7a:	f107 030c 	add.w	r3, r7, #12
 8104e7e:	4618      	mov	r0, r3
 8104e80:	f000 fc9c 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104e84:	68fb      	ldr	r3, [r7, #12]
 8104e86:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104e88:	e321      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104e8a:	2300      	movs	r3, #0
 8104e8c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104e8e:	e31e      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104e90:	4b8f      	ldr	r3, [pc, #572]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104e92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104e94:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104e98:	637b      	str	r3, [r7, #52]	; 0x34

          if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104e9a:	4b8d      	ldr	r3, [pc, #564]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104e9c:	681b      	ldr	r3, [r3, #0]
 8104e9e:	f003 0304 	and.w	r3, r3, #4
 8104ea2:	2b04      	cmp	r3, #4
 8104ea4:	d10c      	bne.n	8104ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
 8104ea6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ea8:	2b00      	cmp	r3, #0
 8104eaa:	d109      	bne.n	8104ec0 <HAL_RCCEx_GetPeriphCLKFreq+0x37c>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104eac:	4b88      	ldr	r3, [pc, #544]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104eae:	681b      	ldr	r3, [r3, #0]
 8104eb0:	08db      	lsrs	r3, r3, #3
 8104eb2:	f003 0303 	and.w	r3, r3, #3
 8104eb6:	4a87      	ldr	r2, [pc, #540]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8104eb8:	fa22 f303 	lsr.w	r3, r2, r3
 8104ebc:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ebe:	e01e      	b.n	8104efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8104ec0:	4b83      	ldr	r3, [pc, #524]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104ec2:	681b      	ldr	r3, [r3, #0]
 8104ec4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8104ec8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8104ecc:	d106      	bne.n	8104edc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
 8104ece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104ed0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8104ed4:	d102      	bne.n	8104edc <HAL_RCCEx_GetPeriphCLKFreq+0x398>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8104ed6:	4b80      	ldr	r3, [pc, #512]	; (81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 8104ed8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104eda:	e010      	b.n	8104efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8104edc:	4b7c      	ldr	r3, [pc, #496]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104ede:	681b      	ldr	r3, [r3, #0]
 8104ee0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8104ee4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8104ee8:	d106      	bne.n	8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
 8104eea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104eec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104ef0:	d102      	bne.n	8104ef8 <HAL_RCCEx_GetPeriphCLKFreq+0x3b4>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8104ef2:	4b7a      	ldr	r3, [pc, #488]	; (81050dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8104ef4:	63fb      	str	r3, [r7, #60]	; 0x3c
 8104ef6:	e002      	b.n	8104efe <HAL_RCCEx_GetPeriphCLKFreq+0x3ba>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8104ef8:	2300      	movs	r3, #0
 8104efa:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8104efc:	e2e7      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8104efe:	e2e6      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8104f00:	4b77      	ldr	r3, [pc, #476]	; (81050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8104f02:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f04:	e2e3      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8104f06:	2300      	movs	r3, #0
 8104f08:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f0a:	e2e0      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 8104f0c:	687b      	ldr	r3, [r7, #4]
 8104f0e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8104f12:	f040 809c 	bne.w	810504e <HAL_RCCEx_GetPeriphCLKFreq+0x50a>
    {

      saiclocksource= __HAL_RCC_GET_SAI4B_SOURCE();
 8104f16:	4b6e      	ldr	r3, [pc, #440]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8104f1a:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 8104f1e:	633b      	str	r3, [r7, #48]	; 0x30

      switch (saiclocksource)
 8104f20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f22:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104f26:	d054      	beq.n	8104fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
 8104f28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f2a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8104f2e:	f200 808b 	bhi.w	8105048 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8104f32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f34:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104f38:	f000 8083 	beq.w	8105042 <HAL_RCCEx_GetPeriphCLKFreq+0x4fe>
 8104f3c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f3e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8104f42:	f200 8081 	bhi.w	8105048 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8104f46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f48:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f4c:	d02f      	beq.n	8104fae <HAL_RCCEx_GetPeriphCLKFreq+0x46a>
 8104f4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f50:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f54:	d878      	bhi.n	8105048 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
 8104f56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f58:	2b00      	cmp	r3, #0
 8104f5a:	d004      	beq.n	8104f66 <HAL_RCCEx_GetPeriphCLKFreq+0x422>
 8104f5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8104f5e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8104f62:	d012      	beq.n	8104f8a <HAL_RCCEx_GetPeriphCLKFreq+0x446>
 8104f64:	e070      	b.n	8105048 <HAL_RCCEx_GetPeriphCLKFreq+0x504>
      {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8104f66:	4b5a      	ldr	r3, [pc, #360]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104f68:	681b      	ldr	r3, [r3, #0]
 8104f6a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8104f6e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8104f72:	d107      	bne.n	8104f84 <HAL_RCCEx_GetPeriphCLKFreq+0x440>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8104f74:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8104f78:	4618      	mov	r0, r3
 8104f7a:	f000 fd73 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8104f7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8104f80:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104f82:	e2a4      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104f84:	2300      	movs	r3, #0
 8104f86:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104f88:	e2a1      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8104f8a:	4b51      	ldr	r3, [pc, #324]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104f8c:	681b      	ldr	r3, [r3, #0]
 8104f8e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8104f92:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8104f96:	d107      	bne.n	8104fa8 <HAL_RCCEx_GetPeriphCLKFreq+0x464>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8104f98:	f107 0318 	add.w	r3, r7, #24
 8104f9c:	4618      	mov	r0, r3
 8104f9e:	f000 fab9 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8104fa2:	69bb      	ldr	r3, [r7, #24]
 8104fa4:	63fb      	str	r3, [r7, #60]	; 0x3c
          }
         else
         {
           frequency = 0;
         }
          break;
 8104fa6:	e292      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104fa8:	2300      	movs	r3, #0
 8104faa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fac:	e28f      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8104fae:	4b48      	ldr	r3, [pc, #288]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104fb0:	681b      	ldr	r3, [r3, #0]
 8104fb2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8104fb6:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8104fba:	d107      	bne.n	8104fcc <HAL_RCCEx_GetPeriphCLKFreq+0x488>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8104fbc:	f107 030c 	add.w	r3, r7, #12
 8104fc0:	4618      	mov	r0, r3
 8104fc2:	f000 fbfb 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8104fc6:	68fb      	ldr	r3, [r7, #12]
 8104fc8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8104fca:	e280      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8104fcc:	2300      	movs	r3, #0
 8104fce:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8104fd0:	e27d      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8104fd2:	4b3f      	ldr	r3, [pc, #252]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104fd4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8104fd6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8104fda:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8104fdc:	4b3c      	ldr	r3, [pc, #240]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104fde:	681b      	ldr	r3, [r3, #0]
 8104fe0:	f003 0304 	and.w	r3, r3, #4
 8104fe4:	2b04      	cmp	r3, #4
 8104fe6:	d10c      	bne.n	8105002 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
 8104fe8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8104fea:	2b00      	cmp	r3, #0
 8104fec:	d109      	bne.n	8105002 <HAL_RCCEx_GetPeriphCLKFreq+0x4be>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8104fee:	4b38      	ldr	r3, [pc, #224]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8104ff0:	681b      	ldr	r3, [r3, #0]
 8104ff2:	08db      	lsrs	r3, r3, #3
 8104ff4:	f003 0303 	and.w	r3, r3, #3
 8104ff8:	4a36      	ldr	r2, [pc, #216]	; (81050d4 <HAL_RCCEx_GetPeriphCLKFreq+0x590>)
 8104ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8104ffe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105000:	e01e      	b.n	8105040 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105002:	4b33      	ldr	r3, [pc, #204]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105004:	681b      	ldr	r3, [r3, #0]
 8105006:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810500a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810500e:	d106      	bne.n	810501e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
 8105010:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105012:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105016:	d102      	bne.n	810501e <HAL_RCCEx_GetPeriphCLKFreq+0x4da>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105018:	4b2f      	ldr	r3, [pc, #188]	; (81050d8 <HAL_RCCEx_GetPeriphCLKFreq+0x594>)
 810501a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810501c:	e010      	b.n	8105040 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810501e:	4b2c      	ldr	r3, [pc, #176]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 8105020:	681b      	ldr	r3, [r3, #0]
 8105022:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105026:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810502a:	d106      	bne.n	810503a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
 810502c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810502e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105032:	d102      	bne.n	810503a <HAL_RCCEx_GetPeriphCLKFreq+0x4f6>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105034:	4b29      	ldr	r3, [pc, #164]	; (81050dc <HAL_RCCEx_GetPeriphCLKFreq+0x598>)
 8105036:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105038:	e002      	b.n	8105040 <HAL_RCCEx_GetPeriphCLKFreq+0x4fc>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810503a:	2300      	movs	r3, #0
 810503c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810503e:	e246      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105040:	e245      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 8105042:	4b27      	ldr	r3, [pc, #156]	; (81050e0 <HAL_RCCEx_GetPeriphCLKFreq+0x59c>)
 8105044:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105046:	e242      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8105048:	2300      	movs	r3, #0
 810504a:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810504c:	e23f      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 810504e:	687b      	ldr	r3, [r7, #4]
 8105050:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8105054:	f040 80a8 	bne.w	81051a8 <HAL_RCCEx_GetPeriphCLKFreq+0x664>
    {
      /* Get SPI1/2/3 clock source */
      srcclk= __HAL_RCC_GET_SPI123_SOURCE();
 8105058:	4b1d      	ldr	r3, [pc, #116]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 810505a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810505c:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8105060:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105064:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105068:	d060      	beq.n	810512c <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>
 810506a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810506c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8105070:	f200 8097 	bhi.w	81051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8105074:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105076:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 810507a:	f000 808f 	beq.w	810519c <HAL_RCCEx_GetPeriphCLKFreq+0x658>
 810507e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105080:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8105084:	f200 808d 	bhi.w	81051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8105088:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810508a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 810508e:	d03b      	beq.n	8105108 <HAL_RCCEx_GetPeriphCLKFreq+0x5c4>
 8105090:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105092:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8105096:	f200 8084 	bhi.w	81051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 810509a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810509c:	2b00      	cmp	r3, #0
 810509e:	d004      	beq.n	81050aa <HAL_RCCEx_GetPeriphCLKFreq+0x566>
 81050a0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81050a2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 81050a6:	d01d      	beq.n	81050e4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a0>
 81050a8:	e07b      	b.n	81051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
      {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81050aa:	4b09      	ldr	r3, [pc, #36]	; (81050d0 <HAL_RCCEx_GetPeriphCLKFreq+0x58c>)
 81050ac:	681b      	ldr	r3, [r3, #0]
 81050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81050b2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81050b6:	d107      	bne.n	81050c8 <HAL_RCCEx_GetPeriphCLKFreq+0x584>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81050b8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81050bc:	4618      	mov	r0, r3
 81050be:	f000 fcd1 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81050c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81050c4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81050c6:	e202      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81050c8:	2300      	movs	r3, #0
 81050ca:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81050cc:	e1ff      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 81050ce:	bf00      	nop
 81050d0:	58024400 	.word	0x58024400
 81050d4:	03d09000 	.word	0x03d09000
 81050d8:	003d0900 	.word	0x003d0900
 81050dc:	007a1200 	.word	0x007a1200
 81050e0:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81050e4:	4ba3      	ldr	r3, [pc, #652]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81050e6:	681b      	ldr	r3, [r3, #0]
 81050e8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81050ec:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81050f0:	d107      	bne.n	8105102 <HAL_RCCEx_GetPeriphCLKFreq+0x5be>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81050f2:	f107 0318 	add.w	r3, r7, #24
 81050f6:	4618      	mov	r0, r3
 81050f8:	f000 fa0c 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81050fc:	69bb      	ldr	r3, [r7, #24]
 81050fe:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105100:	e1e5      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105102:	2300      	movs	r3, #0
 8105104:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105106:	e1e2      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8105108:	4b9a      	ldr	r3, [pc, #616]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810510a:	681b      	ldr	r3, [r3, #0]
 810510c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105110:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105114:	d107      	bne.n	8105126 <HAL_RCCEx_GetPeriphCLKFreq+0x5e2>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8105116:	f107 030c 	add.w	r3, r7, #12
 810511a:	4618      	mov	r0, r3
 810511c:	f000 fb4e 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8105120:	68fb      	ldr	r3, [r7, #12]
 8105122:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105124:	e1d3      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 8105126:	2300      	movs	r3, #0
 8105128:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810512a:	e1d0      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 810512c:	4b91      	ldr	r3, [pc, #580]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810512e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105130:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105134:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8105136:	4b8f      	ldr	r3, [pc, #572]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105138:	681b      	ldr	r3, [r3, #0]
 810513a:	f003 0304 	and.w	r3, r3, #4
 810513e:	2b04      	cmp	r3, #4
 8105140:	d10c      	bne.n	810515c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
 8105142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105144:	2b00      	cmp	r3, #0
 8105146:	d109      	bne.n	810515c <HAL_RCCEx_GetPeriphCLKFreq+0x618>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105148:	4b8a      	ldr	r3, [pc, #552]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810514a:	681b      	ldr	r3, [r3, #0]
 810514c:	08db      	lsrs	r3, r3, #3
 810514e:	f003 0303 	and.w	r3, r3, #3
 8105152:	4a89      	ldr	r2, [pc, #548]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 8105154:	fa22 f303 	lsr.w	r3, r2, r3
 8105158:	63fb      	str	r3, [r7, #60]	; 0x3c
 810515a:	e01e      	b.n	810519a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 810515c:	4b85      	ldr	r3, [pc, #532]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810515e:	681b      	ldr	r3, [r3, #0]
 8105160:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8105164:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105168:	d106      	bne.n	8105178 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
 810516a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810516c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105170:	d102      	bne.n	8105178 <HAL_RCCEx_GetPeriphCLKFreq+0x634>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105172:	4b82      	ldr	r3, [pc, #520]	; (810537c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 8105174:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105176:	e010      	b.n	810519a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8105178:	4b7e      	ldr	r3, [pc, #504]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810517a:	681b      	ldr	r3, [r3, #0]
 810517c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105180:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8105184:	d106      	bne.n	8105194 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
 8105186:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105188:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810518c:	d102      	bne.n	8105194 <HAL_RCCEx_GetPeriphCLKFreq+0x650>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 810518e:	4b7c      	ldr	r3, [pc, #496]	; (8105380 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8105190:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105192:	e002      	b.n	810519a <HAL_RCCEx_GetPeriphCLKFreq+0x656>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 8105194:	2300      	movs	r3, #0
 8105196:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 8105198:	e199      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 810519a:	e198      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
        {
          frequency = EXTERNAL_CLOCK_VALUE;
 810519c:	4b79      	ldr	r3, [pc, #484]	; (8105384 <HAL_RCCEx_GetPeriphCLKFreq+0x840>)
 810519e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051a0:	e195      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81051a2:	2300      	movs	r3, #0
 81051a4:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051a6:	e192      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 81051a8:	687b      	ldr	r3, [r7, #4]
 81051aa:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 81051ae:	d173      	bne.n	8105298 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
    {
      /* Get ADC clock source */
      srcclk= __HAL_RCC_GET_ADC_SOURCE();
 81051b0:	4b70      	ldr	r3, [pc, #448]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81051b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 81051b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 81051b8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81051ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051bc:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81051c0:	d02f      	beq.n	8105222 <HAL_RCCEx_GetPeriphCLKFreq+0x6de>
 81051c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051c4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 81051c8:	d863      	bhi.n	8105292 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
 81051ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051cc:	2b00      	cmp	r3, #0
 81051ce:	d004      	beq.n	81051da <HAL_RCCEx_GetPeriphCLKFreq+0x696>
 81051d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81051d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81051d6:	d012      	beq.n	81051fe <HAL_RCCEx_GetPeriphCLKFreq+0x6ba>
 81051d8:	e05b      	b.n	8105292 <HAL_RCCEx_GetPeriphCLKFreq+0x74e>
      {
      case RCC_ADCCLKSOURCE_PLL2:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81051da:	4b66      	ldr	r3, [pc, #408]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81051dc:	681b      	ldr	r3, [r3, #0]
 81051de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81051e2:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81051e6:	d107      	bne.n	81051f8 <HAL_RCCEx_GetPeriphCLKFreq+0x6b4>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81051e8:	f107 0318 	add.w	r3, r7, #24
 81051ec:	4618      	mov	r0, r3
 81051ee:	f000 f991 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 81051f2:	69bb      	ldr	r3, [r7, #24]
 81051f4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 81051f6:	e16a      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 81051f8:	2300      	movs	r3, #0
 81051fa:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81051fc:	e167      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_ADCCLKSOURCE_PLL3:
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81051fe:	4b5d      	ldr	r3, [pc, #372]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105200:	681b      	ldr	r3, [r3, #0]
 8105202:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105206:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810520a:	d107      	bne.n	810521c <HAL_RCCEx_GetPeriphCLKFreq+0x6d8>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 810520c:	f107 030c 	add.w	r3, r7, #12
 8105210:	4618      	mov	r0, r3
 8105212:	f000 fad3 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8105216:	697b      	ldr	r3, [r7, #20]
 8105218:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 810521a:	e158      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810521c:	2300      	movs	r3, #0
 810521e:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105220:	e155      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      case RCC_ADCCLKSOURCE_CLKP:
        {

          ckpclocksource= __HAL_RCC_GET_CLKP_SOURCE();
 8105222:	4b54      	ldr	r3, [pc, #336]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8105226:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 810522a:	637b      	str	r3, [r7, #52]	; 0x34

         if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 810522c:	4b51      	ldr	r3, [pc, #324]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 810522e:	681b      	ldr	r3, [r3, #0]
 8105230:	f003 0304 	and.w	r3, r3, #4
 8105234:	2b04      	cmp	r3, #4
 8105236:	d10c      	bne.n	8105252 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
 8105238:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810523a:	2b00      	cmp	r3, #0
 810523c:	d109      	bne.n	8105252 <HAL_RCCEx_GetPeriphCLKFreq+0x70e>
          {
            /* In Case the CKPER Source is HSI */
            frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810523e:	4b4d      	ldr	r3, [pc, #308]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105240:	681b      	ldr	r3, [r3, #0]
 8105242:	08db      	lsrs	r3, r3, #3
 8105244:	f003 0303 	and.w	r3, r3, #3
 8105248:	4a4b      	ldr	r2, [pc, #300]	; (8105378 <HAL_RCCEx_GetPeriphCLKFreq+0x834>)
 810524a:	fa22 f303 	lsr.w	r3, r2, r3
 810524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105250:	e01e      	b.n	8105290 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8105252:	4b48      	ldr	r3, [pc, #288]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105254:	681b      	ldr	r3, [r3, #0]
 8105256:	f403 7380 	and.w	r3, r3, #256	; 0x100
 810525a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 810525e:	d106      	bne.n	810526e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
 8105260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8105262:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105266:	d102      	bne.n	810526e <HAL_RCCEx_GetPeriphCLKFreq+0x72a>
          {
            /* In Case the CKPER Source is CSI */
            frequency = CSI_VALUE;
 8105268:	4b44      	ldr	r3, [pc, #272]	; (810537c <HAL_RCCEx_GetPeriphCLKFreq+0x838>)
 810526a:	63fb      	str	r3, [r7, #60]	; 0x3c
 810526c:	e010      	b.n	8105290 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 810526e:	4b41      	ldr	r3, [pc, #260]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105270:	681b      	ldr	r3, [r3, #0]
 8105272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105276:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810527a:	d106      	bne.n	810528a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
 810527c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 810527e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105282:	d102      	bne.n	810528a <HAL_RCCEx_GetPeriphCLKFreq+0x746>
          {
            /* In Case the CKPER Source is HSE */
            frequency = HSE_VALUE;
 8105284:	4b3e      	ldr	r3, [pc, #248]	; (8105380 <HAL_RCCEx_GetPeriphCLKFreq+0x83c>)
 8105286:	63fb      	str	r3, [r7, #60]	; 0x3c
 8105288:	e002      	b.n	8105290 <HAL_RCCEx_GetPeriphCLKFreq+0x74c>
          }

          else
          {
            /* In Case the CKPER is disabled*/
            frequency = 0;
 810528a:	2300      	movs	r3, #0
 810528c:	63fb      	str	r3, [r7, #60]	; 0x3c
          }

          break;
 810528e:	e11e      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105290:	e11d      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8105292:	2300      	movs	r3, #0
 8105294:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105296:	e11a      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8105298:	687b      	ldr	r3, [r7, #4]
 810529a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 810529e:	d133      	bne.n	8105308 <HAL_RCCEx_GetPeriphCLKFreq+0x7c4>
    {
      /* Get SDMMC clock source */
      srcclk= __HAL_RCC_GET_SDMMC_SOURCE();
 81052a0:	4b34      	ldr	r3, [pc, #208]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81052a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 81052a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 81052a8:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 81052aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052ac:	2b00      	cmp	r3, #0
 81052ae:	d004      	beq.n	81052ba <HAL_RCCEx_GetPeriphCLKFreq+0x776>
 81052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 81052b2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81052b6:	d012      	beq.n	81052de <HAL_RCCEx_GetPeriphCLKFreq+0x79a>
 81052b8:	e023      	b.n	8105302 <HAL_RCCEx_GetPeriphCLKFreq+0x7be>
      {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 81052ba:	4b2e      	ldr	r3, [pc, #184]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81052bc:	681b      	ldr	r3, [r3, #0]
 81052be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 81052c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 81052c6:	d107      	bne.n	81052d8 <HAL_RCCEx_GetPeriphCLKFreq+0x794>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 81052c8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 81052cc:	4618      	mov	r0, r3
 81052ce:	f000 fbc9 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 81052d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 81052d4:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81052d6:	e0fa      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81052d8:	2300      	movs	r3, #0
 81052da:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81052dc:	e0f7      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
        {
          if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81052de:	4b25      	ldr	r3, [pc, #148]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 81052e0:	681b      	ldr	r3, [r3, #0]
 81052e2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81052e6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81052ea:	d107      	bne.n	81052fc <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81052ec:	f107 0318 	add.w	r3, r7, #24
 81052f0:	4618      	mov	r0, r3
 81052f2:	f000 f90f 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 81052f6:	6a3b      	ldr	r3, [r7, #32]
 81052f8:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81052fa:	e0e8      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81052fc:	2300      	movs	r3, #0
 81052fe:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105300:	e0e5      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }

      default :
        {
          frequency = 0;
 8105302:	2300      	movs	r3, #0
 8105304:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105306:	e0e2      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8105308:	687b      	ldr	r3, [r7, #4]
 810530a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 810530e:	f040 808f 	bne.w	8105430 <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
    {
      /* Get SPI6 clock source */
      srcclk= __HAL_RCC_GET_SPI6_SOURCE();
 8105312:	4b18      	ldr	r3, [pc, #96]	; (8105374 <HAL_RCCEx_GetPeriphCLKFreq+0x830>)
 8105314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8105316:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 810531a:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 810531c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810531e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8105322:	d075      	beq.n	8105410 <HAL_RCCEx_GetPeriphCLKFreq+0x8cc>
 8105324:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105326:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 810532a:	d87e      	bhi.n	810542a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810532c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810532e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8105332:	d060      	beq.n	81053f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8b2>
 8105334:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105336:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810533a:	d876      	bhi.n	810542a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810533c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810533e:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8105342:	d045      	beq.n	81053d0 <HAL_RCCEx_GetPeriphCLKFreq+0x88c>
 8105344:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105346:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 810534a:	d86e      	bhi.n	810542a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810534c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810534e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105352:	d02b      	beq.n	81053ac <HAL_RCCEx_GetPeriphCLKFreq+0x868>
 8105354:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105356:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 810535a:	d866      	bhi.n	810542a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
 810535c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810535e:	2b00      	cmp	r3, #0
 8105360:	d004      	beq.n	810536c <HAL_RCCEx_GetPeriphCLKFreq+0x828>
 8105362:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105364:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8105368:	d00e      	beq.n	8105388 <HAL_RCCEx_GetPeriphCLKFreq+0x844>
 810536a:	e05e      	b.n	810542a <HAL_RCCEx_GetPeriphCLKFreq+0x8e6>
      {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
        {
          frequency = HAL_RCCEx_GetD3PCLK1Freq();
 810536c:	f000 f8bc 	bl	81054e8 <HAL_RCCEx_GetD3PCLK1Freq>
 8105370:	63f8      	str	r0, [r7, #60]	; 0x3c
          break;
 8105372:	e0ac      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
 8105374:	58024400 	.word	0x58024400
 8105378:	03d09000 	.word	0x03d09000
 810537c:	003d0900 	.word	0x003d0900
 8105380:	007a1200 	.word	0x007a1200
 8105384:	00bb8000 	.word	0x00bb8000
        }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8105388:	4b53      	ldr	r3, [pc, #332]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810538a:	681b      	ldr	r3, [r3, #0]
 810538c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105390:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8105394:	d107      	bne.n	81053a6 <HAL_RCCEx_GetPeriphCLKFreq+0x862>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8105396:	f107 0318 	add.w	r3, r7, #24
 810539a:	4618      	mov	r0, r3
 810539c:	f000 f8ba 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81053a0:	69fb      	ldr	r3, [r7, #28]
 81053a2:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81053a4:	e093      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81053a6:	2300      	movs	r3, #0
 81053a8:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81053aa:	e090      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 81053ac:	4b4a      	ldr	r3, [pc, #296]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81053ae:	681b      	ldr	r3, [r3, #0]
 81053b0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 81053b4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 81053b8:	d107      	bne.n	81053ca <HAL_RCCEx_GetPeriphCLKFreq+0x886>
         {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 81053ba:	f107 030c 	add.w	r3, r7, #12
 81053be:	4618      	mov	r0, r3
 81053c0:	f000 f9fc 	bl	81057bc <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 81053c4:	693b      	ldr	r3, [r7, #16]
 81053c6:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81053c8:	e081      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81053ca:	2300      	movs	r3, #0
 81053cc:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81053ce:	e07e      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 81053d0:	4b41      	ldr	r3, [pc, #260]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81053d2:	681b      	ldr	r3, [r3, #0]
 81053d4:	f003 0304 	and.w	r3, r3, #4
 81053d8:	2b04      	cmp	r3, #4
 81053da:	d109      	bne.n	81053f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8ac>
         {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 81053dc:	4b3e      	ldr	r3, [pc, #248]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81053de:	681b      	ldr	r3, [r3, #0]
 81053e0:	08db      	lsrs	r3, r3, #3
 81053e2:	f003 0303 	and.w	r3, r3, #3
 81053e6:	4a3d      	ldr	r2, [pc, #244]	; (81054dc <HAL_RCCEx_GetPeriphCLKFreq+0x998>)
 81053e8:	fa22 f303 	lsr.w	r3, r2, r3
 81053ec:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81053ee:	e06e      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81053f0:	2300      	movs	r3, #0
 81053f2:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81053f4:	e06b      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 81053f6:	4b38      	ldr	r3, [pc, #224]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81053f8:	681b      	ldr	r3, [r3, #0]
 81053fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81053fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8105402:	d102      	bne.n	810540a <HAL_RCCEx_GetPeriphCLKFreq+0x8c6>
         {
          frequency = CSI_VALUE;
 8105404:	4b36      	ldr	r3, [pc, #216]	; (81054e0 <HAL_RCCEx_GetPeriphCLKFreq+0x99c>)
 8105406:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
           frequency = 0;
         }
          break;
 8105408:	e061      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
           frequency = 0;
 810540a:	2300      	movs	r3, #0
 810540c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810540e:	e05e      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105410:	4b31      	ldr	r3, [pc, #196]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105412:	681b      	ldr	r3, [r3, #0]
 8105414:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8105418:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810541c:	d102      	bne.n	8105424 <HAL_RCCEx_GetPeriphCLKFreq+0x8e0>
         {
          frequency = HSE_VALUE;
 810541e:	4b31      	ldr	r3, [pc, #196]	; (81054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8105420:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105422:	e054      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8105424:	2300      	movs	r3, #0
 8105426:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 8105428:	e051      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          break;
        }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
        {
          frequency = 0;
 810542a:	2300      	movs	r3, #0
 810542c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810542e:	e04e      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8105430:	687b      	ldr	r3, [r7, #4]
 8105432:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8105436:	d148      	bne.n	81054ca <HAL_RCCEx_GetPeriphCLKFreq+0x986>
    {
      /* Get FDCAN clock source */
      srcclk= __HAL_RCC_GET_FDCAN_SOURCE();
 8105438:	4b27      	ldr	r3, [pc, #156]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810543a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 810543c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8105440:	63bb      	str	r3, [r7, #56]	; 0x38

      switch (srcclk)
 8105442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105444:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105448:	d02a      	beq.n	81054a0 <HAL_RCCEx_GetPeriphCLKFreq+0x95c>
 810544a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810544c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8105450:	d838      	bhi.n	81054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
 8105452:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8105454:	2b00      	cmp	r3, #0
 8105456:	d004      	beq.n	8105462 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
 8105458:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 810545a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 810545e:	d00d      	beq.n	810547c <HAL_RCCEx_GetPeriphCLKFreq+0x938>
 8105460:	e030      	b.n	81054c4 <HAL_RCCEx_GetPeriphCLKFreq+0x980>
      {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8105462:	4b1d      	ldr	r3, [pc, #116]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 8105464:	681b      	ldr	r3, [r3, #0]
 8105466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 810546a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 810546e:	d102      	bne.n	8105476 <HAL_RCCEx_GetPeriphCLKFreq+0x932>
         {
          frequency = HSE_VALUE;
 8105470:	4b1c      	ldr	r3, [pc, #112]	; (81054e4 <HAL_RCCEx_GetPeriphCLKFreq+0x9a0>)
 8105472:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105474:	e02b      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 8105476:	2300      	movs	r3, #0
 8105478:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810547a:	e028      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 810547c:	4b16      	ldr	r3, [pc, #88]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 810547e:	681b      	ldr	r3, [r3, #0]
 8105480:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8105484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8105488:	d107      	bne.n	810549a <HAL_RCCEx_GetPeriphCLKFreq+0x956>
         {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 810548a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 810548e:	4618      	mov	r0, r3
 8105490:	f000 fae8 	bl	8105a64 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8105494:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8105496:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 8105498:	e019      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 810549a:	2300      	movs	r3, #0
 810549c:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 810549e:	e016      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
        {
         if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 81054a0:	4b0d      	ldr	r3, [pc, #52]	; (81054d8 <HAL_RCCEx_GetPeriphCLKFreq+0x994>)
 81054a2:	681b      	ldr	r3, [r3, #0]
 81054a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 81054a8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 81054ac:	d107      	bne.n	81054be <HAL_RCCEx_GetPeriphCLKFreq+0x97a>
         {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 81054ae:	f107 0318 	add.w	r3, r7, #24
 81054b2:	4618      	mov	r0, r3
 81054b4:	f000 f82e 	bl	8105514 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 81054b8:	69fb      	ldr	r3, [r7, #28]
 81054ba:	63fb      	str	r3, [r7, #60]	; 0x3c
         }
         else
         {
          frequency = 0;
         }
          break;
 81054bc:	e007      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
          frequency = 0;
 81054be:	2300      	movs	r3, #0
 81054c0:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81054c2:	e004      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      default :
        {
          frequency = 0;
 81054c4:	2300      	movs	r3, #0
 81054c6:	63fb      	str	r3, [r7, #60]	; 0x3c
          break;
 81054c8:	e001      	b.n	81054ce <HAL_RCCEx_GetPeriphCLKFreq+0x98a>
        }
      }
    }
  else
    {
      frequency = 0;
 81054ca:	2300      	movs	r3, #0
 81054cc:	63fb      	str	r3, [r7, #60]	; 0x3c
    }

  return frequency;
 81054ce:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 81054d0:	4618      	mov	r0, r3
 81054d2:	3740      	adds	r7, #64	; 0x40
 81054d4:	46bd      	mov	sp, r7
 81054d6:	bd80      	pop	{r7, pc}
 81054d8:	58024400 	.word	0x58024400
 81054dc:	03d09000 	.word	0x03d09000
 81054e0:	003d0900 	.word	0x003d0900
 81054e4:	007a1200 	.word	0x007a1200

081054e8 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 81054e8:	b580      	push	{r7, lr}
 81054ea:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 81054ec:	f7fe fbb8 	bl	8103c60 <HAL_RCC_GetHCLKFreq>
 81054f0:	4602      	mov	r2, r0
 81054f2:	4b06      	ldr	r3, [pc, #24]	; (810550c <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 81054f4:	6a1b      	ldr	r3, [r3, #32]
 81054f6:	091b      	lsrs	r3, r3, #4
 81054f8:	f003 0307 	and.w	r3, r3, #7
 81054fc:	4904      	ldr	r1, [pc, #16]	; (8105510 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 81054fe:	5ccb      	ldrb	r3, [r1, r3]
 8105500:	f003 031f 	and.w	r3, r3, #31
 8105504:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8105508:	4618      	mov	r0, r3
 810550a:	bd80      	pop	{r7, pc}
 810550c:	58024400 	.word	0x58024400
 8105510:	081076a8 	.word	0x081076a8

08105514 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8105514:	b480      	push	{r7}
 8105516:	b089      	sub	sp, #36	; 0x24
 8105518:	af00      	add	r7, sp, #0
 810551a:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 810551c:	4ba1      	ldr	r3, [pc, #644]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810551e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105520:	f003 0303 	and.w	r3, r3, #3
 8105524:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8105526:	4b9f      	ldr	r3, [pc, #636]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105528:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 810552a:	0b1b      	lsrs	r3, r3, #12
 810552c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105530:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8105532:	4b9c      	ldr	r3, [pc, #624]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105534:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105536:	091b      	lsrs	r3, r3, #4
 8105538:	f003 0301 	and.w	r3, r3, #1
 810553c:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 810553e:	4b99      	ldr	r3, [pc, #612]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105540:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105542:	08db      	lsrs	r3, r3, #3
 8105544:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105548:	693a      	ldr	r2, [r7, #16]
 810554a:	fb02 f303 	mul.w	r3, r2, r3
 810554e:	ee07 3a90 	vmov	s15, r3
 8105552:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105556:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 810555a:	697b      	ldr	r3, [r7, #20]
 810555c:	2b00      	cmp	r3, #0
 810555e:	f000 8111 	beq.w	8105784 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8105562:	69bb      	ldr	r3, [r7, #24]
 8105564:	2b02      	cmp	r3, #2
 8105566:	f000 8083 	beq.w	8105670 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 810556a:	69bb      	ldr	r3, [r7, #24]
 810556c:	2b02      	cmp	r3, #2
 810556e:	f200 80a1 	bhi.w	81056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8105572:	69bb      	ldr	r3, [r7, #24]
 8105574:	2b00      	cmp	r3, #0
 8105576:	d003      	beq.n	8105580 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8105578:	69bb      	ldr	r3, [r7, #24]
 810557a:	2b01      	cmp	r3, #1
 810557c:	d056      	beq.n	810562c <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 810557e:	e099      	b.n	81056b4 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105580:	4b88      	ldr	r3, [pc, #544]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105582:	681b      	ldr	r3, [r3, #0]
 8105584:	f003 0320 	and.w	r3, r3, #32
 8105588:	2b00      	cmp	r3, #0
 810558a:	d02d      	beq.n	81055e8 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 810558c:	4b85      	ldr	r3, [pc, #532]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 810558e:	681b      	ldr	r3, [r3, #0]
 8105590:	08db      	lsrs	r3, r3, #3
 8105592:	f003 0303 	and.w	r3, r3, #3
 8105596:	4a84      	ldr	r2, [pc, #528]	; (81057a8 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8105598:	fa22 f303 	lsr.w	r3, r2, r3
 810559c:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810559e:	68bb      	ldr	r3, [r7, #8]
 81055a0:	ee07 3a90 	vmov	s15, r3
 81055a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055a8:	697b      	ldr	r3, [r7, #20]
 81055aa:	ee07 3a90 	vmov	s15, r3
 81055ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055b6:	4b7b      	ldr	r3, [pc, #492]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81055ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81055be:	ee07 3a90 	vmov	s15, r3
 81055c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81055c6:	ed97 6a03 	vldr	s12, [r7, #12]
 81055ca:	eddf 5a78 	vldr	s11, [pc, #480]	; 81057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81055ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81055d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81055d6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81055da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81055de:	ee67 7a27 	vmul.f32	s15, s14, s15
 81055e2:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 81055e6:	e087      	b.n	81056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81055e8:	697b      	ldr	r3, [r7, #20]
 81055ea:	ee07 3a90 	vmov	s15, r3
 81055ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81055f2:	eddf 6a6f 	vldr	s13, [pc, #444]	; 81057b0 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 81055f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81055fa:	4b6a      	ldr	r3, [pc, #424]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81055fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81055fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105602:	ee07 3a90 	vmov	s15, r3
 8105606:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810560a:	ed97 6a03 	vldr	s12, [r7, #12]
 810560e:	eddf 5a67 	vldr	s11, [pc, #412]	; 81057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105612:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105616:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810561a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810561e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105622:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105626:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810562a:	e065      	b.n	81056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 810562c:	697b      	ldr	r3, [r7, #20]
 810562e:	ee07 3a90 	vmov	s15, r3
 8105632:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105636:	eddf 6a5f 	vldr	s13, [pc, #380]	; 81057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 810563a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810563e:	4b59      	ldr	r3, [pc, #356]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105640:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105642:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105646:	ee07 3a90 	vmov	s15, r3
 810564a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810564e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105652:	eddf 5a56 	vldr	s11, [pc, #344]	; 81057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8105656:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810565a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810565e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105662:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105666:	ee67 7a27 	vmul.f32	s15, s14, s15
 810566a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810566e:	e043      	b.n	81056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8105670:	697b      	ldr	r3, [r7, #20]
 8105672:	ee07 3a90 	vmov	s15, r3
 8105676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810567a:	eddf 6a4f 	vldr	s13, [pc, #316]	; 81057b8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 810567e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105682:	4b48      	ldr	r3, [pc, #288]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105684:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 810568a:	ee07 3a90 	vmov	s15, r3
 810568e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105692:	ed97 6a03 	vldr	s12, [r7, #12]
 8105696:	eddf 5a45 	vldr	s11, [pc, #276]	; 81057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 810569a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810569e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056a2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056ae:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81056b2:	e021      	b.n	81056f8 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 81056b4:	697b      	ldr	r3, [r7, #20]
 81056b6:	ee07 3a90 	vmov	s15, r3
 81056ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81056be:	eddf 6a3d 	vldr	s13, [pc, #244]	; 81057b4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 81056c2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81056c6:	4b37      	ldr	r3, [pc, #220]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81056c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81056ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81056ce:	ee07 3a90 	vmov	s15, r3
 81056d2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81056d6:	ed97 6a03 	vldr	s12, [r7, #12]
 81056da:	eddf 5a34 	vldr	s11, [pc, #208]	; 81057ac <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 81056de:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81056e2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81056e6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81056ea:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81056ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 81056f2:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81056f6:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 81056f8:	4b2a      	ldr	r3, [pc, #168]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 81056fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 81056fc:	0a5b      	lsrs	r3, r3, #9
 81056fe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105702:	ee07 3a90 	vmov	s15, r3
 8105706:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810570a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810570e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105712:	edd7 6a07 	vldr	s13, [r7, #28]
 8105716:	eec6 7a87 	vdiv.f32	s15, s13, s14
 810571a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810571e:	ee17 2a90 	vmov	r2, s15
 8105722:	687b      	ldr	r3, [r7, #4]
 8105724:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8105726:	4b1f      	ldr	r3, [pc, #124]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105728:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 810572a:	0c1b      	lsrs	r3, r3, #16
 810572c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105730:	ee07 3a90 	vmov	s15, r3
 8105734:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105738:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810573c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105740:	edd7 6a07 	vldr	s13, [r7, #28]
 8105744:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810574c:	ee17 2a90 	vmov	r2, s15
 8105750:	687b      	ldr	r3, [r7, #4]
 8105752:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8105754:	4b13      	ldr	r3, [pc, #76]	; (81057a4 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8105756:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8105758:	0e1b      	lsrs	r3, r3, #24
 810575a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 810575e:	ee07 3a90 	vmov	s15, r3
 8105762:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105766:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 810576a:	ee37 7a87 	vadd.f32	s14, s15, s14
 810576e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105772:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105776:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 810577a:	ee17 2a90 	vmov	r2, s15
 810577e:	687b      	ldr	r3, [r7, #4]
 8105780:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8105782:	e008      	b.n	8105796 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8105784:	687b      	ldr	r3, [r7, #4]
 8105786:	2200      	movs	r2, #0
 8105788:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 810578a:	687b      	ldr	r3, [r7, #4]
 810578c:	2200      	movs	r2, #0
 810578e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8105790:	687b      	ldr	r3, [r7, #4]
 8105792:	2200      	movs	r2, #0
 8105794:	609a      	str	r2, [r3, #8]
}
 8105796:	bf00      	nop
 8105798:	3724      	adds	r7, #36	; 0x24
 810579a:	46bd      	mov	sp, r7
 810579c:	f85d 7b04 	ldr.w	r7, [sp], #4
 81057a0:	4770      	bx	lr
 81057a2:	bf00      	nop
 81057a4:	58024400 	.word	0x58024400
 81057a8:	03d09000 	.word	0x03d09000
 81057ac:	46000000 	.word	0x46000000
 81057b0:	4c742400 	.word	0x4c742400
 81057b4:	4a742400 	.word	0x4a742400
 81057b8:	4af42400 	.word	0x4af42400

081057bc <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 81057bc:	b480      	push	{r7}
 81057be:	b089      	sub	sp, #36	; 0x24
 81057c0:	af00      	add	r7, sp, #0
 81057c2:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 81057c4:	4ba1      	ldr	r3, [pc, #644]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057c8:	f003 0303 	and.w	r3, r3, #3
 81057cc:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 81057ce:	4b9f      	ldr	r3, [pc, #636]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 81057d2:	0d1b      	lsrs	r3, r3, #20
 81057d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 81057d8:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 81057da:	4b9c      	ldr	r3, [pc, #624]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 81057de:	0a1b      	lsrs	r3, r3, #8
 81057e0:	f003 0301 	and.w	r3, r3, #1
 81057e4:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 81057e6:	4b99      	ldr	r3, [pc, #612]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81057e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 81057ea:	08db      	lsrs	r3, r3, #3
 81057ec:	f3c3 030c 	ubfx	r3, r3, #0, #13
 81057f0:	693a      	ldr	r2, [r7, #16]
 81057f2:	fb02 f303 	mul.w	r3, r2, r3
 81057f6:	ee07 3a90 	vmov	s15, r3
 81057fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81057fe:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8105802:	697b      	ldr	r3, [r7, #20]
 8105804:	2b00      	cmp	r3, #0
 8105806:	f000 8111 	beq.w	8105a2c <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 810580a:	69bb      	ldr	r3, [r7, #24]
 810580c:	2b02      	cmp	r3, #2
 810580e:	f000 8083 	beq.w	8105918 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8105812:	69bb      	ldr	r3, [r7, #24]
 8105814:	2b02      	cmp	r3, #2
 8105816:	f200 80a1 	bhi.w	810595c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 810581a:	69bb      	ldr	r3, [r7, #24]
 810581c:	2b00      	cmp	r3, #0
 810581e:	d003      	beq.n	8105828 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8105820:	69bb      	ldr	r3, [r7, #24]
 8105822:	2b01      	cmp	r3, #1
 8105824:	d056      	beq.n	81058d4 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8105826:	e099      	b.n	810595c <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105828:	4b88      	ldr	r3, [pc, #544]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810582a:	681b      	ldr	r3, [r3, #0]
 810582c:	f003 0320 	and.w	r3, r3, #32
 8105830:	2b00      	cmp	r3, #0
 8105832:	d02d      	beq.n	8105890 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105834:	4b85      	ldr	r3, [pc, #532]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105836:	681b      	ldr	r3, [r3, #0]
 8105838:	08db      	lsrs	r3, r3, #3
 810583a:	f003 0303 	and.w	r3, r3, #3
 810583e:	4a84      	ldr	r2, [pc, #528]	; (8105a50 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8105840:	fa22 f303 	lsr.w	r3, r2, r3
 8105844:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105846:	68bb      	ldr	r3, [r7, #8]
 8105848:	ee07 3a90 	vmov	s15, r3
 810584c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105850:	697b      	ldr	r3, [r7, #20]
 8105852:	ee07 3a90 	vmov	s15, r3
 8105856:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810585a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810585e:	4b7b      	ldr	r3, [pc, #492]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105860:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105862:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105866:	ee07 3a90 	vmov	s15, r3
 810586a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810586e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105872:	eddf 5a78 	vldr	s11, [pc, #480]	; 8105a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105876:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810587a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810587e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105882:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105886:	ee67 7a27 	vmul.f32	s15, s14, s15
 810588a:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 810588e:	e087      	b.n	81059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105890:	697b      	ldr	r3, [r7, #20]
 8105892:	ee07 3a90 	vmov	s15, r3
 8105896:	eef8 7a67 	vcvt.f32.u32	s15, s15
 810589a:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8105a58 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 810589e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058a2:	4b6a      	ldr	r3, [pc, #424]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058aa:	ee07 3a90 	vmov	s15, r3
 81058ae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058b2:	ed97 6a03 	vldr	s12, [r7, #12]
 81058b6:	eddf 5a67 	vldr	s11, [pc, #412]	; 8105a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81058ba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 81058be:	ee76 7aa7 	vadd.f32	s15, s13, s15
 81058c2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 81058c6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 81058ca:	ee67 7a27 	vmul.f32	s15, s14, s15
 81058ce:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 81058d2:	e065      	b.n	81059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 81058d4:	697b      	ldr	r3, [r7, #20]
 81058d6:	ee07 3a90 	vmov	s15, r3
 81058da:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81058de:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8105a5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 81058e2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 81058e6:	4b59      	ldr	r3, [pc, #356]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81058e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81058ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 81058ee:	ee07 3a90 	vmov	s15, r3
 81058f2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 81058f6:	ed97 6a03 	vldr	s12, [r7, #12]
 81058fa:	eddf 5a56 	vldr	s11, [pc, #344]	; 8105a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 81058fe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105902:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105906:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810590a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 810590e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105912:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105916:	e043      	b.n	81059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8105918:	697b      	ldr	r3, [r7, #20]
 810591a:	ee07 3a90 	vmov	s15, r3
 810591e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105922:	eddf 6a4f 	vldr	s13, [pc, #316]	; 8105a60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8105926:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810592a:	4b48      	ldr	r3, [pc, #288]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 810592c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 810592e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105932:	ee07 3a90 	vmov	s15, r3
 8105936:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810593a:	ed97 6a03 	vldr	s12, [r7, #12]
 810593e:	eddf 5a45 	vldr	s11, [pc, #276]	; 8105a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105942:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105946:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810594a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 810594e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105952:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105956:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810595a:	e021      	b.n	81059a0 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 810595c:	697b      	ldr	r3, [r7, #20]
 810595e:	ee07 3a90 	vmov	s15, r3
 8105962:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105966:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8105a5c <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 810596a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 810596e:	4b37      	ldr	r3, [pc, #220]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8105970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105972:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105976:	ee07 3a90 	vmov	s15, r3
 810597a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 810597e:	ed97 6a03 	vldr	s12, [r7, #12]
 8105982:	eddf 5a34 	vldr	s11, [pc, #208]	; 8105a54 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8105986:	eec6 7a25 	vdiv.f32	s15, s12, s11
 810598a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 810598e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105992:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105996:	ee67 7a27 	vmul.f32	s15, s14, s15
 810599a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 810599e:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 81059a0:	4b2a      	ldr	r3, [pc, #168]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81059a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81059a4:	0a5b      	lsrs	r3, r3, #9
 81059a6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81059aa:	ee07 3a90 	vmov	s15, r3
 81059ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059b2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81059b6:	ee37 7a87 	vadd.f32	s14, s15, s14
 81059ba:	edd7 6a07 	vldr	s13, [r7, #28]
 81059be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059c2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059c6:	ee17 2a90 	vmov	r2, s15
 81059ca:	687b      	ldr	r3, [r7, #4]
 81059cc:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 81059ce:	4b1f      	ldr	r3, [pc, #124]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81059d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 81059d2:	0c1b      	lsrs	r3, r3, #16
 81059d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 81059d8:	ee07 3a90 	vmov	s15, r3
 81059dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 81059e0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 81059e4:	ee37 7a87 	vadd.f32	s14, s15, s14
 81059e8:	edd7 6a07 	vldr	s13, [r7, #28]
 81059ec:	eec6 7a87 	vdiv.f32	s15, s13, s14
 81059f0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 81059f4:	ee17 2a90 	vmov	r2, s15
 81059f8:	687b      	ldr	r3, [r7, #4]
 81059fa:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 81059fc:	4b13      	ldr	r3, [pc, #76]	; (8105a4c <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 81059fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8105a00:	0e1b      	lsrs	r3, r3, #24
 8105a02:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105a06:	ee07 3a90 	vmov	s15, r3
 8105a0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105a0e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105a12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105a16:	edd7 6a07 	vldr	s13, [r7, #28]
 8105a1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105a1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105a22:	ee17 2a90 	vmov	r2, s15
 8105a26:	687b      	ldr	r3, [r7, #4]
 8105a28:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8105a2a:	e008      	b.n	8105a3e <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8105a2c:	687b      	ldr	r3, [r7, #4]
 8105a2e:	2200      	movs	r2, #0
 8105a30:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8105a32:	687b      	ldr	r3, [r7, #4]
 8105a34:	2200      	movs	r2, #0
 8105a36:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8105a38:	687b      	ldr	r3, [r7, #4]
 8105a3a:	2200      	movs	r2, #0
 8105a3c:	609a      	str	r2, [r3, #8]
}
 8105a3e:	bf00      	nop
 8105a40:	3724      	adds	r7, #36	; 0x24
 8105a42:	46bd      	mov	sp, r7
 8105a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105a48:	4770      	bx	lr
 8105a4a:	bf00      	nop
 8105a4c:	58024400 	.word	0x58024400
 8105a50:	03d09000 	.word	0x03d09000
 8105a54:	46000000 	.word	0x46000000
 8105a58:	4c742400 	.word	0x4c742400
 8105a5c:	4a742400 	.word	0x4a742400
 8105a60:	4af42400 	.word	0x4af42400

08105a64 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef* PLL1_Clocks)
{
 8105a64:	b480      	push	{r7}
 8105a66:	b089      	sub	sp, #36	; 0x24
 8105a68:	af00      	add	r7, sp, #0
 8105a6a:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8105a6c:	4ba0      	ldr	r3, [pc, #640]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105a6e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a70:	f003 0303 	and.w	r3, r3, #3
 8105a74:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4);
 8105a76:	4b9e      	ldr	r3, [pc, #632]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105a78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105a7a:	091b      	lsrs	r3, r3, #4
 8105a7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8105a80:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8105a82:	4b9b      	ldr	r3, [pc, #620]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105a84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105a86:	f003 0301 	and.w	r3, r3, #1
 8105a8a:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8105a8c:	4b98      	ldr	r3, [pc, #608]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105a8e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8105a90:	08db      	lsrs	r3, r3, #3
 8105a92:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8105a96:	693a      	ldr	r2, [r7, #16]
 8105a98:	fb02 f303 	mul.w	r3, r2, r3
 8105a9c:	ee07 3a90 	vmov	s15, r3
 8105aa0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105aa4:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8105aa8:	697b      	ldr	r3, [r7, #20]
 8105aaa:	2b00      	cmp	r3, #0
 8105aac:	f000 8111 	beq.w	8105cd2 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8105ab0:	69bb      	ldr	r3, [r7, #24]
 8105ab2:	2b02      	cmp	r3, #2
 8105ab4:	f000 8083 	beq.w	8105bbe <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8105ab8:	69bb      	ldr	r3, [r7, #24]
 8105aba:	2b02      	cmp	r3, #2
 8105abc:	f200 80a1 	bhi.w	8105c02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8105ac0:	69bb      	ldr	r3, [r7, #24]
 8105ac2:	2b00      	cmp	r3, #0
 8105ac4:	d003      	beq.n	8105ace <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8105ac6:	69bb      	ldr	r3, [r7, #24]
 8105ac8:	2b01      	cmp	r3, #1
 8105aca:	d056      	beq.n	8105b7a <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8105acc:	e099      	b.n	8105c02 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8105ace:	4b88      	ldr	r3, [pc, #544]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105ad0:	681b      	ldr	r3, [r3, #0]
 8105ad2:	f003 0320 	and.w	r3, r3, #32
 8105ad6:	2b00      	cmp	r3, #0
 8105ad8:	d02d      	beq.n	8105b36 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8105ada:	4b85      	ldr	r3, [pc, #532]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105adc:	681b      	ldr	r3, [r3, #0]
 8105ade:	08db      	lsrs	r3, r3, #3
 8105ae0:	f003 0303 	and.w	r3, r3, #3
 8105ae4:	4a83      	ldr	r2, [pc, #524]	; (8105cf4 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8105ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8105aea:	60bb      	str	r3, [r7, #8]
        pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105aec:	68bb      	ldr	r3, [r7, #8]
 8105aee:	ee07 3a90 	vmov	s15, r3
 8105af2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105af6:	697b      	ldr	r3, [r7, #20]
 8105af8:	ee07 3a90 	vmov	s15, r3
 8105afc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b00:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b04:	4b7a      	ldr	r3, [pc, #488]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105b08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b0c:	ee07 3a90 	vmov	s15, r3
 8105b10:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b14:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b18:	eddf 5a77 	vldr	s11, [pc, #476]	; 8105cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105b1c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b24:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b28:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b30:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8105b34:	e087      	b.n	8105c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105b36:	697b      	ldr	r3, [r7, #20]
 8105b38:	ee07 3a90 	vmov	s15, r3
 8105b3c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b40:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8105cfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105b44:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b48:	4b69      	ldr	r3, [pc, #420]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b4a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105b4c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b50:	ee07 3a90 	vmov	s15, r3
 8105b54:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b58:	ed97 6a03 	vldr	s12, [r7, #12]
 8105b5c:	eddf 5a66 	vldr	s11, [pc, #408]	; 8105cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105b60:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105b64:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105b68:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105b6c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105b70:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105b74:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105b78:	e065      	b.n	8105c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105b7a:	697b      	ldr	r3, [r7, #20]
 8105b7c:	ee07 3a90 	vmov	s15, r3
 8105b80:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105b84:	eddf 6a5e 	vldr	s13, [pc, #376]	; 8105d00 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8105b88:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105b8c:	4b58      	ldr	r3, [pc, #352]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105b90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105b94:	ee07 3a90 	vmov	s15, r3
 8105b98:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105b9c:	ed97 6a03 	vldr	s12, [r7, #12]
 8105ba0:	eddf 5a55 	vldr	s11, [pc, #340]	; 8105cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105ba4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105ba8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bac:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bb0:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bb8:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105bbc:	e043      	b.n	8105c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105bbe:	697b      	ldr	r3, [r7, #20]
 8105bc0:	ee07 3a90 	vmov	s15, r3
 8105bc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105bc8:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8105d04 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8105bcc:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105bd0:	4b47      	ldr	r3, [pc, #284]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105bd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105bd4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105bd8:	ee07 3a90 	vmov	s15, r3
 8105bdc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105be0:	ed97 6a03 	vldr	s12, [r7, #12]
 8105be4:	eddf 5a44 	vldr	s11, [pc, #272]	; 8105cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105be8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105bec:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105bf0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105bf4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105bf8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105bfc:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c00:	e021      	b.n	8105c46 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

    default:
      pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8105c02:	697b      	ldr	r3, [r7, #20]
 8105c04:	ee07 3a90 	vmov	s15, r3
 8105c08:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c0c:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8105cfc <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8105c10:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8105c14:	4b36      	ldr	r3, [pc, #216]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105c18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8105c1c:	ee07 3a90 	vmov	s15, r3
 8105c20:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8105c24:	ed97 6a03 	vldr	s12, [r7, #12]
 8105c28:	eddf 5a33 	vldr	s11, [pc, #204]	; 8105cf8 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8105c2c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8105c30:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8105c34:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8105c38:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8105c3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8105c40:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8105c44:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9)  + (float_t)1 )) ;
 8105c46:	4b2a      	ldr	r3, [pc, #168]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105c4a:	0a5b      	lsrs	r3, r3, #9
 8105c4c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c50:	ee07 3a90 	vmov	s15, r3
 8105c54:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c58:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c5c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c60:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c64:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c68:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c6c:	ee17 2a90 	vmov	r2, s15
 8105c70:	687b      	ldr	r3, [r7, #4]
 8105c72:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >>16) + (float_t)1 )) ;
 8105c74:	4b1e      	ldr	r3, [pc, #120]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105c76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105c78:	0c1b      	lsrs	r3, r3, #16
 8105c7a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105c7e:	ee07 3a90 	vmov	s15, r3
 8105c82:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105c86:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105c8a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105c8e:	edd7 6a07 	vldr	s13, [r7, #28]
 8105c92:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105c96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105c9a:	ee17 2a90 	vmov	r2, s15
 8105c9e:	687b      	ldr	r3, [r7, #4]
 8105ca0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco/((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >>24) + (float_t)1 )) ;
 8105ca2:	4b13      	ldr	r3, [pc, #76]	; (8105cf0 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8105ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8105ca6:	0e1b      	lsrs	r3, r3, #24
 8105ca8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8105cac:	ee07 3a90 	vmov	s15, r3
 8105cb0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8105cb4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8105cb8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8105cbc:	edd7 6a07 	vldr	s13, [r7, #28]
 8105cc0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8105cc4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8105cc8:	ee17 2a90 	vmov	r2, s15
 8105ccc:	687b      	ldr	r3, [r7, #4]
 8105cce:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 8105cd0:	e008      	b.n	8105ce4 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 8105cd2:	687b      	ldr	r3, [r7, #4]
 8105cd4:	2200      	movs	r2, #0
 8105cd6:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 8105cd8:	687b      	ldr	r3, [r7, #4]
 8105cda:	2200      	movs	r2, #0
 8105cdc:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 8105cde:	687b      	ldr	r3, [r7, #4]
 8105ce0:	2200      	movs	r2, #0
 8105ce2:	609a      	str	r2, [r3, #8]
}
 8105ce4:	bf00      	nop
 8105ce6:	3724      	adds	r7, #36	; 0x24
 8105ce8:	46bd      	mov	sp, r7
 8105cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8105cee:	4770      	bx	lr
 8105cf0:	58024400 	.word	0x58024400
 8105cf4:	03d09000 	.word	0x03d09000
 8105cf8:	46000000 	.word	0x46000000
 8105cfc:	4c742400 	.word	0x4c742400
 8105d00:	4a742400 	.word	0x4a742400
 8105d04:	4af42400 	.word	0x4af42400

08105d08 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8105d08:	b580      	push	{r7, lr}
 8105d0a:	b084      	sub	sp, #16
 8105d0c:	af00      	add	r7, sp, #0
 8105d0e:	6078      	str	r0, [r7, #4]
 8105d10:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105d12:	2300      	movs	r3, #0
 8105d14:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105d16:	4b54      	ldr	r3, [pc, #336]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d1a:	f003 0303 	and.w	r3, r3, #3
 8105d1e:	2b03      	cmp	r3, #3
 8105d20:	d101      	bne.n	8105d26 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8105d22:	2301      	movs	r3, #1
 8105d24:	e09b      	b.n	8105e5e <RCCEx_PLL2_Config+0x156>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8105d26:	4b50      	ldr	r3, [pc, #320]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d28:	681b      	ldr	r3, [r3, #0]
 8105d2a:	4a4f      	ldr	r2, [pc, #316]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d2c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8105d30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105d32:	f7fb fd2b 	bl	810178c <HAL_GetTick>
 8105d36:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105d38:	e008      	b.n	8105d4c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105d3a:	f7fb fd27 	bl	810178c <HAL_GetTick>
 8105d3e:	4602      	mov	r2, r0
 8105d40:	68bb      	ldr	r3, [r7, #8]
 8105d42:	1ad3      	subs	r3, r2, r3
 8105d44:	2b02      	cmp	r3, #2
 8105d46:	d901      	bls.n	8105d4c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105d48:	2303      	movs	r3, #3
 8105d4a:	e088      	b.n	8105e5e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8105d4c:	4b46      	ldr	r3, [pc, #280]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d4e:	681b      	ldr	r3, [r3, #0]
 8105d50:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105d54:	2b00      	cmp	r3, #0
 8105d56:	d1f0      	bne.n	8105d3a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8105d58:	4b43      	ldr	r3, [pc, #268]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105d5c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8105d60:	687b      	ldr	r3, [r7, #4]
 8105d62:	681b      	ldr	r3, [r3, #0]
 8105d64:	031b      	lsls	r3, r3, #12
 8105d66:	4940      	ldr	r1, [pc, #256]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d68:	4313      	orrs	r3, r2
 8105d6a:	628b      	str	r3, [r1, #40]	; 0x28
 8105d6c:	687b      	ldr	r3, [r7, #4]
 8105d6e:	685b      	ldr	r3, [r3, #4]
 8105d70:	3b01      	subs	r3, #1
 8105d72:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105d76:	687b      	ldr	r3, [r7, #4]
 8105d78:	689b      	ldr	r3, [r3, #8]
 8105d7a:	3b01      	subs	r3, #1
 8105d7c:	025b      	lsls	r3, r3, #9
 8105d7e:	b29b      	uxth	r3, r3
 8105d80:	431a      	orrs	r2, r3
 8105d82:	687b      	ldr	r3, [r7, #4]
 8105d84:	68db      	ldr	r3, [r3, #12]
 8105d86:	3b01      	subs	r3, #1
 8105d88:	041b      	lsls	r3, r3, #16
 8105d8a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105d8e:	431a      	orrs	r2, r3
 8105d90:	687b      	ldr	r3, [r7, #4]
 8105d92:	691b      	ldr	r3, [r3, #16]
 8105d94:	3b01      	subs	r3, #1
 8105d96:	061b      	lsls	r3, r3, #24
 8105d98:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105d9c:	4932      	ldr	r1, [pc, #200]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105d9e:	4313      	orrs	r3, r2
 8105da0:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8105da2:	4b31      	ldr	r3, [pc, #196]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105da4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105da6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8105daa:	687b      	ldr	r3, [r7, #4]
 8105dac:	695b      	ldr	r3, [r3, #20]
 8105dae:	492e      	ldr	r1, [pc, #184]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105db0:	4313      	orrs	r3, r2
 8105db2:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8105db4:	4b2c      	ldr	r3, [pc, #176]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105db6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105db8:	f023 0220 	bic.w	r2, r3, #32
 8105dbc:	687b      	ldr	r3, [r7, #4]
 8105dbe:	699b      	ldr	r3, [r3, #24]
 8105dc0:	4929      	ldr	r1, [pc, #164]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105dc2:	4313      	orrs	r3, r2
 8105dc4:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8105dc6:	4b28      	ldr	r3, [pc, #160]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105dc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dca:	4a27      	ldr	r2, [pc, #156]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105dcc:	f023 0310 	bic.w	r3, r3, #16
 8105dd0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8105dd2:	4b25      	ldr	r3, [pc, #148]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105dd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8105dd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105dda:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105dde:	687a      	ldr	r2, [r7, #4]
 8105de0:	69d2      	ldr	r2, [r2, #28]
 8105de2:	00d2      	lsls	r2, r2, #3
 8105de4:	4920      	ldr	r1, [pc, #128]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105de6:	4313      	orrs	r3, r2
 8105de8:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 8105dea:	4b1f      	ldr	r3, [pc, #124]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105dec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105dee:	4a1e      	ldr	r2, [pc, #120]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105df0:	f043 0310 	orr.w	r3, r3, #16
 8105df4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105df6:	683b      	ldr	r3, [r7, #0]
 8105df8:	2b00      	cmp	r3, #0
 8105dfa:	d106      	bne.n	8105e0a <RCCEx_PLL2_Config+0x102>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8105dfc:	4b1a      	ldr	r3, [pc, #104]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105dfe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e00:	4a19      	ldr	r2, [pc, #100]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e02:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8105e06:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105e08:	e00f      	b.n	8105e2a <RCCEx_PLL2_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105e0a:	683b      	ldr	r3, [r7, #0]
 8105e0c:	2b01      	cmp	r3, #1
 8105e0e:	d106      	bne.n	8105e1e <RCCEx_PLL2_Config+0x116>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8105e10:	4b15      	ldr	r3, [pc, #84]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e14:	4a14      	ldr	r2, [pc, #80]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e16:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8105e1a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105e1c:	e005      	b.n	8105e2a <RCCEx_PLL2_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8105e1e:	4b12      	ldr	r3, [pc, #72]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105e22:	4a11      	ldr	r2, [pc, #68]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e24:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8105e28:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8105e2a:	4b0f      	ldr	r3, [pc, #60]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e2c:	681b      	ldr	r3, [r3, #0]
 8105e2e:	4a0e      	ldr	r2, [pc, #56]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e30:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8105e34:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105e36:	f7fb fca9 	bl	810178c <HAL_GetTick>
 8105e3a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105e3c:	e008      	b.n	8105e50 <RCCEx_PLL2_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 8105e3e:	f7fb fca5 	bl	810178c <HAL_GetTick>
 8105e42:	4602      	mov	r2, r0
 8105e44:	68bb      	ldr	r3, [r7, #8]
 8105e46:	1ad3      	subs	r3, r2, r3
 8105e48:	2b02      	cmp	r3, #2
 8105e4a:	d901      	bls.n	8105e50 <RCCEx_PLL2_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105e4c:	2303      	movs	r3, #3
 8105e4e:	e006      	b.n	8105e5e <RCCEx_PLL2_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8105e50:	4b05      	ldr	r3, [pc, #20]	; (8105e68 <RCCEx_PLL2_Config+0x160>)
 8105e52:	681b      	ldr	r3, [r3, #0]
 8105e54:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8105e58:	2b00      	cmp	r3, #0
 8105e5a:	d0f0      	beq.n	8105e3e <RCCEx_PLL2_Config+0x136>
    }

  }


  return status;
 8105e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8105e5e:	4618      	mov	r0, r3
 8105e60:	3710      	adds	r7, #16
 8105e62:	46bd      	mov	sp, r7
 8105e64:	bd80      	pop	{r7, pc}
 8105e66:	bf00      	nop
 8105e68:	58024400 	.word	0x58024400

08105e6c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8105e6c:	b580      	push	{r7, lr}
 8105e6e:	b084      	sub	sp, #16
 8105e70:	af00      	add	r7, sp, #0
 8105e72:	6078      	str	r0, [r7, #4]
 8105e74:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8105e76:	2300      	movs	r3, #0
 8105e78:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8105e7a:	4b54      	ldr	r3, [pc, #336]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105e7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105e7e:	f003 0303 	and.w	r3, r3, #3
 8105e82:	2b03      	cmp	r3, #3
 8105e84:	d101      	bne.n	8105e8a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8105e86:	2301      	movs	r3, #1
 8105e88:	e09b      	b.n	8105fc2 <RCCEx_PLL3_Config+0x156>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8105e8a:	4b50      	ldr	r3, [pc, #320]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105e8c:	681b      	ldr	r3, [r3, #0]
 8105e8e:	4a4f      	ldr	r2, [pc, #316]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105e90:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8105e94:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105e96:	f7fb fc79 	bl	810178c <HAL_GetTick>
 8105e9a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105e9c:	e008      	b.n	8105eb0 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105e9e:	f7fb fc75 	bl	810178c <HAL_GetTick>
 8105ea2:	4602      	mov	r2, r0
 8105ea4:	68bb      	ldr	r3, [r7, #8]
 8105ea6:	1ad3      	subs	r3, r2, r3
 8105ea8:	2b02      	cmp	r3, #2
 8105eaa:	d901      	bls.n	8105eb0 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8105eac:	2303      	movs	r3, #3
 8105eae:	e088      	b.n	8105fc2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8105eb0:	4b46      	ldr	r3, [pc, #280]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105eb2:	681b      	ldr	r3, [r3, #0]
 8105eb4:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105eb8:	2b00      	cmp	r3, #0
 8105eba:	d1f0      	bne.n	8105e9e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8105ebc:	4b43      	ldr	r3, [pc, #268]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105ebe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8105ec0:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8105ec4:	687b      	ldr	r3, [r7, #4]
 8105ec6:	681b      	ldr	r3, [r3, #0]
 8105ec8:	051b      	lsls	r3, r3, #20
 8105eca:	4940      	ldr	r1, [pc, #256]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105ecc:	4313      	orrs	r3, r2
 8105ece:	628b      	str	r3, [r1, #40]	; 0x28
 8105ed0:	687b      	ldr	r3, [r7, #4]
 8105ed2:	685b      	ldr	r3, [r3, #4]
 8105ed4:	3b01      	subs	r3, #1
 8105ed6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8105eda:	687b      	ldr	r3, [r7, #4]
 8105edc:	689b      	ldr	r3, [r3, #8]
 8105ede:	3b01      	subs	r3, #1
 8105ee0:	025b      	lsls	r3, r3, #9
 8105ee2:	b29b      	uxth	r3, r3
 8105ee4:	431a      	orrs	r2, r3
 8105ee6:	687b      	ldr	r3, [r7, #4]
 8105ee8:	68db      	ldr	r3, [r3, #12]
 8105eea:	3b01      	subs	r3, #1
 8105eec:	041b      	lsls	r3, r3, #16
 8105eee:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8105ef2:	431a      	orrs	r2, r3
 8105ef4:	687b      	ldr	r3, [r7, #4]
 8105ef6:	691b      	ldr	r3, [r3, #16]
 8105ef8:	3b01      	subs	r3, #1
 8105efa:	061b      	lsls	r3, r3, #24
 8105efc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8105f00:	4932      	ldr	r1, [pc, #200]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f02:	4313      	orrs	r3, r2
 8105f04:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8105f06:	4b31      	ldr	r3, [pc, #196]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f0a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8105f0e:	687b      	ldr	r3, [r7, #4]
 8105f10:	695b      	ldr	r3, [r3, #20]
 8105f12:	492e      	ldr	r1, [pc, #184]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f14:	4313      	orrs	r3, r2
 8105f16:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8105f18:	4b2c      	ldr	r3, [pc, #176]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f1c:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8105f20:	687b      	ldr	r3, [r7, #4]
 8105f22:	699b      	ldr	r3, [r3, #24]
 8105f24:	4929      	ldr	r1, [pc, #164]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f26:	4313      	orrs	r3, r2
 8105f28:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8105f2a:	4b28      	ldr	r3, [pc, #160]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f2e:	4a27      	ldr	r2, [pc, #156]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f30:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8105f34:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8105f36:	4b25      	ldr	r3, [pc, #148]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8105f3a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8105f3e:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8105f42:	687a      	ldr	r2, [r7, #4]
 8105f44:	69d2      	ldr	r2, [r2, #28]
 8105f46:	00d2      	lsls	r2, r2, #3
 8105f48:	4920      	ldr	r1, [pc, #128]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f4a:	4313      	orrs	r3, r2
 8105f4c:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8105f4e:	4b1f      	ldr	r3, [pc, #124]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f52:	4a1e      	ldr	r2, [pc, #120]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8105f58:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8105f5a:	683b      	ldr	r3, [r7, #0]
 8105f5c:	2b00      	cmp	r3, #0
 8105f5e:	d106      	bne.n	8105f6e <RCCEx_PLL3_Config+0x102>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8105f60:	4b1a      	ldr	r3, [pc, #104]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f64:	4a19      	ldr	r2, [pc, #100]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f66:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8105f6a:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105f6c:	e00f      	b.n	8105f8e <RCCEx_PLL3_Config+0x122>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 8105f6e:	683b      	ldr	r3, [r7, #0]
 8105f70:	2b01      	cmp	r3, #1
 8105f72:	d106      	bne.n	8105f82 <RCCEx_PLL3_Config+0x116>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8105f74:	4b15      	ldr	r3, [pc, #84]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f76:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f78:	4a14      	ldr	r2, [pc, #80]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f7a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8105f7e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8105f80:	e005      	b.n	8105f8e <RCCEx_PLL3_Config+0x122>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8105f82:	4b12      	ldr	r3, [pc, #72]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f84:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8105f86:	4a11      	ldr	r2, [pc, #68]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f88:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8105f8c:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8105f8e:	4b0f      	ldr	r3, [pc, #60]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f90:	681b      	ldr	r3, [r3, #0]
 8105f92:	4a0e      	ldr	r2, [pc, #56]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105f94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8105f98:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8105f9a:	f7fb fbf7 	bl	810178c <HAL_GetTick>
 8105f9e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105fa0:	e008      	b.n	8105fb4 <RCCEx_PLL3_Config+0x148>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 8105fa2:	f7fb fbf3 	bl	810178c <HAL_GetTick>
 8105fa6:	4602      	mov	r2, r0
 8105fa8:	68bb      	ldr	r3, [r7, #8]
 8105faa:	1ad3      	subs	r3, r2, r3
 8105fac:	2b02      	cmp	r3, #2
 8105fae:	d901      	bls.n	8105fb4 <RCCEx_PLL3_Config+0x148>
      {
        return HAL_TIMEOUT;
 8105fb0:	2303      	movs	r3, #3
 8105fb2:	e006      	b.n	8105fc2 <RCCEx_PLL3_Config+0x156>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8105fb4:	4b05      	ldr	r3, [pc, #20]	; (8105fcc <RCCEx_PLL3_Config+0x160>)
 8105fb6:	681b      	ldr	r3, [r3, #0]
 8105fb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8105fbc:	2b00      	cmp	r3, #0
 8105fbe:	d0f0      	beq.n	8105fa2 <RCCEx_PLL3_Config+0x136>
    }

  }


  return status;
 8105fc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8105fc2:	4618      	mov	r0, r3
 8105fc4:	3710      	adds	r7, #16
 8105fc6:	46bd      	mov	sp, r7
 8105fc8:	bd80      	pop	{r7, pc}
 8105fca:	bf00      	nop
 8105fcc:	58024400 	.word	0x58024400

08105fd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8105fd0:	b580      	push	{r7, lr}
 8105fd2:	b082      	sub	sp, #8
 8105fd4:	af00      	add	r7, sp, #0
 8105fd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8105fd8:	687b      	ldr	r3, [r7, #4]
 8105fda:	2b00      	cmp	r3, #0
 8105fdc:	d101      	bne.n	8105fe2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8105fde:	2301      	movs	r3, #1
 8105fe0:	e049      	b.n	8106076 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8105fe2:	687b      	ldr	r3, [r7, #4]
 8105fe4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8105fe8:	b2db      	uxtb	r3, r3
 8105fea:	2b00      	cmp	r3, #0
 8105fec:	d106      	bne.n	8105ffc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8105fee:	687b      	ldr	r3, [r7, #4]
 8105ff0:	2200      	movs	r2, #0
 8105ff2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8105ff6:	6878      	ldr	r0, [r7, #4]
 8105ff8:	f7fb fa66 	bl	81014c8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8105ffc:	687b      	ldr	r3, [r7, #4]
 8105ffe:	2202      	movs	r2, #2
 8106000:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106004:	687b      	ldr	r3, [r7, #4]
 8106006:	681a      	ldr	r2, [r3, #0]
 8106008:	687b      	ldr	r3, [r7, #4]
 810600a:	3304      	adds	r3, #4
 810600c:	4619      	mov	r1, r3
 810600e:	4610      	mov	r0, r2
 8106010:	f000 fdc4 	bl	8106b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106014:	687b      	ldr	r3, [r7, #4]
 8106016:	2201      	movs	r2, #1
 8106018:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810601c:	687b      	ldr	r3, [r7, #4]
 810601e:	2201      	movs	r2, #1
 8106020:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106024:	687b      	ldr	r3, [r7, #4]
 8106026:	2201      	movs	r2, #1
 8106028:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810602c:	687b      	ldr	r3, [r7, #4]
 810602e:	2201      	movs	r2, #1
 8106030:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106034:	687b      	ldr	r3, [r7, #4]
 8106036:	2201      	movs	r2, #1
 8106038:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810603c:	687b      	ldr	r3, [r7, #4]
 810603e:	2201      	movs	r2, #1
 8106040:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8106044:	687b      	ldr	r3, [r7, #4]
 8106046:	2201      	movs	r2, #1
 8106048:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810604c:	687b      	ldr	r3, [r7, #4]
 810604e:	2201      	movs	r2, #1
 8106050:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8106054:	687b      	ldr	r3, [r7, #4]
 8106056:	2201      	movs	r2, #1
 8106058:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 810605c:	687b      	ldr	r3, [r7, #4]
 810605e:	2201      	movs	r2, #1
 8106060:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8106064:	687b      	ldr	r3, [r7, #4]
 8106066:	2201      	movs	r2, #1
 8106068:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 810606c:	687b      	ldr	r3, [r7, #4]
 810606e:	2201      	movs	r2, #1
 8106070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8106074:	2300      	movs	r3, #0
}
 8106076:	4618      	mov	r0, r3
 8106078:	3708      	adds	r7, #8
 810607a:	46bd      	mov	sp, r7
 810607c:	bd80      	pop	{r7, pc}
	...

08106080 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8106080:	b480      	push	{r7}
 8106082:	b085      	sub	sp, #20
 8106084:	af00      	add	r7, sp, #0
 8106086:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106088:	687b      	ldr	r3, [r7, #4]
 810608a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810608e:	b2db      	uxtb	r3, r3
 8106090:	2b01      	cmp	r3, #1
 8106092:	d001      	beq.n	8106098 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8106094:	2301      	movs	r3, #1
 8106096:	e047      	b.n	8106128 <HAL_TIM_Base_Start+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106098:	687b      	ldr	r3, [r7, #4]
 810609a:	2202      	movs	r2, #2
 810609c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 81060a0:	687b      	ldr	r3, [r7, #4]
 81060a2:	681b      	ldr	r3, [r3, #0]
 81060a4:	4a23      	ldr	r2, [pc, #140]	; (8106134 <HAL_TIM_Base_Start+0xb4>)
 81060a6:	4293      	cmp	r3, r2
 81060a8:	d01d      	beq.n	81060e6 <HAL_TIM_Base_Start+0x66>
 81060aa:	687b      	ldr	r3, [r7, #4]
 81060ac:	681b      	ldr	r3, [r3, #0]
 81060ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 81060b2:	d018      	beq.n	81060e6 <HAL_TIM_Base_Start+0x66>
 81060b4:	687b      	ldr	r3, [r7, #4]
 81060b6:	681b      	ldr	r3, [r3, #0]
 81060b8:	4a1f      	ldr	r2, [pc, #124]	; (8106138 <HAL_TIM_Base_Start+0xb8>)
 81060ba:	4293      	cmp	r3, r2
 81060bc:	d013      	beq.n	81060e6 <HAL_TIM_Base_Start+0x66>
 81060be:	687b      	ldr	r3, [r7, #4]
 81060c0:	681b      	ldr	r3, [r3, #0]
 81060c2:	4a1e      	ldr	r2, [pc, #120]	; (810613c <HAL_TIM_Base_Start+0xbc>)
 81060c4:	4293      	cmp	r3, r2
 81060c6:	d00e      	beq.n	81060e6 <HAL_TIM_Base_Start+0x66>
 81060c8:	687b      	ldr	r3, [r7, #4]
 81060ca:	681b      	ldr	r3, [r3, #0]
 81060cc:	4a1c      	ldr	r2, [pc, #112]	; (8106140 <HAL_TIM_Base_Start+0xc0>)
 81060ce:	4293      	cmp	r3, r2
 81060d0:	d009      	beq.n	81060e6 <HAL_TIM_Base_Start+0x66>
 81060d2:	687b      	ldr	r3, [r7, #4]
 81060d4:	681b      	ldr	r3, [r3, #0]
 81060d6:	4a1b      	ldr	r2, [pc, #108]	; (8106144 <HAL_TIM_Base_Start+0xc4>)
 81060d8:	4293      	cmp	r3, r2
 81060da:	d004      	beq.n	81060e6 <HAL_TIM_Base_Start+0x66>
 81060dc:	687b      	ldr	r3, [r7, #4]
 81060de:	681b      	ldr	r3, [r3, #0]
 81060e0:	4a19      	ldr	r2, [pc, #100]	; (8106148 <HAL_TIM_Base_Start+0xc8>)
 81060e2:	4293      	cmp	r3, r2
 81060e4:	d115      	bne.n	8106112 <HAL_TIM_Base_Start+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81060e6:	687b      	ldr	r3, [r7, #4]
 81060e8:	681b      	ldr	r3, [r3, #0]
 81060ea:	689a      	ldr	r2, [r3, #8]
 81060ec:	4b17      	ldr	r3, [pc, #92]	; (810614c <HAL_TIM_Base_Start+0xcc>)
 81060ee:	4013      	ands	r3, r2
 81060f0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81060f2:	68fb      	ldr	r3, [r7, #12]
 81060f4:	2b06      	cmp	r3, #6
 81060f6:	d015      	beq.n	8106124 <HAL_TIM_Base_Start+0xa4>
 81060f8:	68fb      	ldr	r3, [r7, #12]
 81060fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81060fe:	d011      	beq.n	8106124 <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8106100:	687b      	ldr	r3, [r7, #4]
 8106102:	681b      	ldr	r3, [r3, #0]
 8106104:	681a      	ldr	r2, [r3, #0]
 8106106:	687b      	ldr	r3, [r7, #4]
 8106108:	681b      	ldr	r3, [r3, #0]
 810610a:	f042 0201 	orr.w	r2, r2, #1
 810610e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106110:	e008      	b.n	8106124 <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8106112:	687b      	ldr	r3, [r7, #4]
 8106114:	681b      	ldr	r3, [r3, #0]
 8106116:	681a      	ldr	r2, [r3, #0]
 8106118:	687b      	ldr	r3, [r7, #4]
 810611a:	681b      	ldr	r3, [r3, #0]
 810611c:	f042 0201 	orr.w	r2, r2, #1
 8106120:	601a      	str	r2, [r3, #0]
 8106122:	e000      	b.n	8106126 <HAL_TIM_Base_Start+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106124:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106126:	2300      	movs	r3, #0
}
 8106128:	4618      	mov	r0, r3
 810612a:	3714      	adds	r7, #20
 810612c:	46bd      	mov	sp, r7
 810612e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106132:	4770      	bx	lr
 8106134:	40010000 	.word	0x40010000
 8106138:	40000400 	.word	0x40000400
 810613c:	40000800 	.word	0x40000800
 8106140:	40000c00 	.word	0x40000c00
 8106144:	40010400 	.word	0x40010400
 8106148:	40001800 	.word	0x40001800
 810614c:	00010007 	.word	0x00010007

08106150 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8106150:	b480      	push	{r7}
 8106152:	b085      	sub	sp, #20
 8106154:	af00      	add	r7, sp, #0
 8106156:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8106158:	687b      	ldr	r3, [r7, #4]
 810615a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 810615e:	b2db      	uxtb	r3, r3
 8106160:	2b01      	cmp	r3, #1
 8106162:	d001      	beq.n	8106168 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8106164:	2301      	movs	r3, #1
 8106166:	e04f      	b.n	8106208 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8106168:	687b      	ldr	r3, [r7, #4]
 810616a:	2202      	movs	r2, #2
 810616c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8106170:	687b      	ldr	r3, [r7, #4]
 8106172:	681b      	ldr	r3, [r3, #0]
 8106174:	68da      	ldr	r2, [r3, #12]
 8106176:	687b      	ldr	r3, [r7, #4]
 8106178:	681b      	ldr	r3, [r3, #0]
 810617a:	f042 0201 	orr.w	r2, r2, #1
 810617e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8106180:	687b      	ldr	r3, [r7, #4]
 8106182:	681b      	ldr	r3, [r3, #0]
 8106184:	4a23      	ldr	r2, [pc, #140]	; (8106214 <HAL_TIM_Base_Start_IT+0xc4>)
 8106186:	4293      	cmp	r3, r2
 8106188:	d01d      	beq.n	81061c6 <HAL_TIM_Base_Start_IT+0x76>
 810618a:	687b      	ldr	r3, [r7, #4]
 810618c:	681b      	ldr	r3, [r3, #0]
 810618e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106192:	d018      	beq.n	81061c6 <HAL_TIM_Base_Start_IT+0x76>
 8106194:	687b      	ldr	r3, [r7, #4]
 8106196:	681b      	ldr	r3, [r3, #0]
 8106198:	4a1f      	ldr	r2, [pc, #124]	; (8106218 <HAL_TIM_Base_Start_IT+0xc8>)
 810619a:	4293      	cmp	r3, r2
 810619c:	d013      	beq.n	81061c6 <HAL_TIM_Base_Start_IT+0x76>
 810619e:	687b      	ldr	r3, [r7, #4]
 81061a0:	681b      	ldr	r3, [r3, #0]
 81061a2:	4a1e      	ldr	r2, [pc, #120]	; (810621c <HAL_TIM_Base_Start_IT+0xcc>)
 81061a4:	4293      	cmp	r3, r2
 81061a6:	d00e      	beq.n	81061c6 <HAL_TIM_Base_Start_IT+0x76>
 81061a8:	687b      	ldr	r3, [r7, #4]
 81061aa:	681b      	ldr	r3, [r3, #0]
 81061ac:	4a1c      	ldr	r2, [pc, #112]	; (8106220 <HAL_TIM_Base_Start_IT+0xd0>)
 81061ae:	4293      	cmp	r3, r2
 81061b0:	d009      	beq.n	81061c6 <HAL_TIM_Base_Start_IT+0x76>
 81061b2:	687b      	ldr	r3, [r7, #4]
 81061b4:	681b      	ldr	r3, [r3, #0]
 81061b6:	4a1b      	ldr	r2, [pc, #108]	; (8106224 <HAL_TIM_Base_Start_IT+0xd4>)
 81061b8:	4293      	cmp	r3, r2
 81061ba:	d004      	beq.n	81061c6 <HAL_TIM_Base_Start_IT+0x76>
 81061bc:	687b      	ldr	r3, [r7, #4]
 81061be:	681b      	ldr	r3, [r3, #0]
 81061c0:	4a19      	ldr	r2, [pc, #100]	; (8106228 <HAL_TIM_Base_Start_IT+0xd8>)
 81061c2:	4293      	cmp	r3, r2
 81061c4:	d115      	bne.n	81061f2 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 81061c6:	687b      	ldr	r3, [r7, #4]
 81061c8:	681b      	ldr	r3, [r3, #0]
 81061ca:	689a      	ldr	r2, [r3, #8]
 81061cc:	4b17      	ldr	r3, [pc, #92]	; (810622c <HAL_TIM_Base_Start_IT+0xdc>)
 81061ce:	4013      	ands	r3, r2
 81061d0:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81061d2:	68fb      	ldr	r3, [r7, #12]
 81061d4:	2b06      	cmp	r3, #6
 81061d6:	d015      	beq.n	8106204 <HAL_TIM_Base_Start_IT+0xb4>
 81061d8:	68fb      	ldr	r3, [r7, #12]
 81061da:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81061de:	d011      	beq.n	8106204 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 81061e0:	687b      	ldr	r3, [r7, #4]
 81061e2:	681b      	ldr	r3, [r3, #0]
 81061e4:	681a      	ldr	r2, [r3, #0]
 81061e6:	687b      	ldr	r3, [r7, #4]
 81061e8:	681b      	ldr	r3, [r3, #0]
 81061ea:	f042 0201 	orr.w	r2, r2, #1
 81061ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81061f0:	e008      	b.n	8106204 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81061f2:	687b      	ldr	r3, [r7, #4]
 81061f4:	681b      	ldr	r3, [r3, #0]
 81061f6:	681a      	ldr	r2, [r3, #0]
 81061f8:	687b      	ldr	r3, [r7, #4]
 81061fa:	681b      	ldr	r3, [r3, #0]
 81061fc:	f042 0201 	orr.w	r2, r2, #1
 8106200:	601a      	str	r2, [r3, #0]
 8106202:	e000      	b.n	8106206 <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8106204:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8106206:	2300      	movs	r3, #0
}
 8106208:	4618      	mov	r0, r3
 810620a:	3714      	adds	r7, #20
 810620c:	46bd      	mov	sp, r7
 810620e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106212:	4770      	bx	lr
 8106214:	40010000 	.word	0x40010000
 8106218:	40000400 	.word	0x40000400
 810621c:	40000800 	.word	0x40000800
 8106220:	40000c00 	.word	0x40000c00
 8106224:	40010400 	.word	0x40010400
 8106228:	40001800 	.word	0x40001800
 810622c:	00010007 	.word	0x00010007

08106230 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8106230:	b580      	push	{r7, lr}
 8106232:	b082      	sub	sp, #8
 8106234:	af00      	add	r7, sp, #0
 8106236:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8106238:	687b      	ldr	r3, [r7, #4]
 810623a:	2b00      	cmp	r3, #0
 810623c:	d101      	bne.n	8106242 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 810623e:	2301      	movs	r3, #1
 8106240:	e049      	b.n	81062d6 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8106242:	687b      	ldr	r3, [r7, #4]
 8106244:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8106248:	b2db      	uxtb	r3, r3
 810624a:	2b00      	cmp	r3, #0
 810624c:	d106      	bne.n	810625c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 810624e:	687b      	ldr	r3, [r7, #4]
 8106250:	2200      	movs	r2, #0
 8106252:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8106256:	6878      	ldr	r0, [r7, #4]
 8106258:	f000 f841 	bl	81062de <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 810625c:	687b      	ldr	r3, [r7, #4]
 810625e:	2202      	movs	r2, #2
 8106260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8106264:	687b      	ldr	r3, [r7, #4]
 8106266:	681a      	ldr	r2, [r3, #0]
 8106268:	687b      	ldr	r3, [r7, #4]
 810626a:	3304      	adds	r3, #4
 810626c:	4619      	mov	r1, r3
 810626e:	4610      	mov	r0, r2
 8106270:	f000 fc94 	bl	8106b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8106274:	687b      	ldr	r3, [r7, #4]
 8106276:	2201      	movs	r2, #1
 8106278:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 810627c:	687b      	ldr	r3, [r7, #4]
 810627e:	2201      	movs	r2, #1
 8106280:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8106284:	687b      	ldr	r3, [r7, #4]
 8106286:	2201      	movs	r2, #1
 8106288:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 810628c:	687b      	ldr	r3, [r7, #4]
 810628e:	2201      	movs	r2, #1
 8106290:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8106294:	687b      	ldr	r3, [r7, #4]
 8106296:	2201      	movs	r2, #1
 8106298:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 810629c:	687b      	ldr	r3, [r7, #4]
 810629e:	2201      	movs	r2, #1
 81062a0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81062a4:	687b      	ldr	r3, [r7, #4]
 81062a6:	2201      	movs	r2, #1
 81062a8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 81062ac:	687b      	ldr	r3, [r7, #4]
 81062ae:	2201      	movs	r2, #1
 81062b0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 81062b4:	687b      	ldr	r3, [r7, #4]
 81062b6:	2201      	movs	r2, #1
 81062b8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 81062bc:	687b      	ldr	r3, [r7, #4]
 81062be:	2201      	movs	r2, #1
 81062c0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 81062c4:	687b      	ldr	r3, [r7, #4]
 81062c6:	2201      	movs	r2, #1
 81062c8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 81062cc:	687b      	ldr	r3, [r7, #4]
 81062ce:	2201      	movs	r2, #1
 81062d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 81062d4:	2300      	movs	r3, #0
}
 81062d6:	4618      	mov	r0, r3
 81062d8:	3708      	adds	r7, #8
 81062da:	46bd      	mov	sp, r7
 81062dc:	bd80      	pop	{r7, pc}

081062de <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 81062de:	b480      	push	{r7}
 81062e0:	b083      	sub	sp, #12
 81062e2:	af00      	add	r7, sp, #0
 81062e4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 81062e6:	bf00      	nop
 81062e8:	370c      	adds	r7, #12
 81062ea:	46bd      	mov	sp, r7
 81062ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 81062f0:	4770      	bx	lr
	...

081062f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 81062f4:	b580      	push	{r7, lr}
 81062f6:	b084      	sub	sp, #16
 81062f8:	af00      	add	r7, sp, #0
 81062fa:	6078      	str	r0, [r7, #4]
 81062fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 81062fe:	683b      	ldr	r3, [r7, #0]
 8106300:	2b00      	cmp	r3, #0
 8106302:	d109      	bne.n	8106318 <HAL_TIM_PWM_Start+0x24>
 8106304:	687b      	ldr	r3, [r7, #4]
 8106306:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 810630a:	b2db      	uxtb	r3, r3
 810630c:	2b01      	cmp	r3, #1
 810630e:	bf14      	ite	ne
 8106310:	2301      	movne	r3, #1
 8106312:	2300      	moveq	r3, #0
 8106314:	b2db      	uxtb	r3, r3
 8106316:	e03c      	b.n	8106392 <HAL_TIM_PWM_Start+0x9e>
 8106318:	683b      	ldr	r3, [r7, #0]
 810631a:	2b04      	cmp	r3, #4
 810631c:	d109      	bne.n	8106332 <HAL_TIM_PWM_Start+0x3e>
 810631e:	687b      	ldr	r3, [r7, #4]
 8106320:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8106324:	b2db      	uxtb	r3, r3
 8106326:	2b01      	cmp	r3, #1
 8106328:	bf14      	ite	ne
 810632a:	2301      	movne	r3, #1
 810632c:	2300      	moveq	r3, #0
 810632e:	b2db      	uxtb	r3, r3
 8106330:	e02f      	b.n	8106392 <HAL_TIM_PWM_Start+0x9e>
 8106332:	683b      	ldr	r3, [r7, #0]
 8106334:	2b08      	cmp	r3, #8
 8106336:	d109      	bne.n	810634c <HAL_TIM_PWM_Start+0x58>
 8106338:	687b      	ldr	r3, [r7, #4]
 810633a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 810633e:	b2db      	uxtb	r3, r3
 8106340:	2b01      	cmp	r3, #1
 8106342:	bf14      	ite	ne
 8106344:	2301      	movne	r3, #1
 8106346:	2300      	moveq	r3, #0
 8106348:	b2db      	uxtb	r3, r3
 810634a:	e022      	b.n	8106392 <HAL_TIM_PWM_Start+0x9e>
 810634c:	683b      	ldr	r3, [r7, #0]
 810634e:	2b0c      	cmp	r3, #12
 8106350:	d109      	bne.n	8106366 <HAL_TIM_PWM_Start+0x72>
 8106352:	687b      	ldr	r3, [r7, #4]
 8106354:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8106358:	b2db      	uxtb	r3, r3
 810635a:	2b01      	cmp	r3, #1
 810635c:	bf14      	ite	ne
 810635e:	2301      	movne	r3, #1
 8106360:	2300      	moveq	r3, #0
 8106362:	b2db      	uxtb	r3, r3
 8106364:	e015      	b.n	8106392 <HAL_TIM_PWM_Start+0x9e>
 8106366:	683b      	ldr	r3, [r7, #0]
 8106368:	2b10      	cmp	r3, #16
 810636a:	d109      	bne.n	8106380 <HAL_TIM_PWM_Start+0x8c>
 810636c:	687b      	ldr	r3, [r7, #4]
 810636e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8106372:	b2db      	uxtb	r3, r3
 8106374:	2b01      	cmp	r3, #1
 8106376:	bf14      	ite	ne
 8106378:	2301      	movne	r3, #1
 810637a:	2300      	moveq	r3, #0
 810637c:	b2db      	uxtb	r3, r3
 810637e:	e008      	b.n	8106392 <HAL_TIM_PWM_Start+0x9e>
 8106380:	687b      	ldr	r3, [r7, #4]
 8106382:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8106386:	b2db      	uxtb	r3, r3
 8106388:	2b01      	cmp	r3, #1
 810638a:	bf14      	ite	ne
 810638c:	2301      	movne	r3, #1
 810638e:	2300      	moveq	r3, #0
 8106390:	b2db      	uxtb	r3, r3
 8106392:	2b00      	cmp	r3, #0
 8106394:	d001      	beq.n	810639a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8106396:	2301      	movs	r3, #1
 8106398:	e09c      	b.n	81064d4 <HAL_TIM_PWM_Start+0x1e0>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 810639a:	683b      	ldr	r3, [r7, #0]
 810639c:	2b00      	cmp	r3, #0
 810639e:	d104      	bne.n	81063aa <HAL_TIM_PWM_Start+0xb6>
 81063a0:	687b      	ldr	r3, [r7, #4]
 81063a2:	2202      	movs	r2, #2
 81063a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 81063a8:	e023      	b.n	81063f2 <HAL_TIM_PWM_Start+0xfe>
 81063aa:	683b      	ldr	r3, [r7, #0]
 81063ac:	2b04      	cmp	r3, #4
 81063ae:	d104      	bne.n	81063ba <HAL_TIM_PWM_Start+0xc6>
 81063b0:	687b      	ldr	r3, [r7, #4]
 81063b2:	2202      	movs	r2, #2
 81063b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 81063b8:	e01b      	b.n	81063f2 <HAL_TIM_PWM_Start+0xfe>
 81063ba:	683b      	ldr	r3, [r7, #0]
 81063bc:	2b08      	cmp	r3, #8
 81063be:	d104      	bne.n	81063ca <HAL_TIM_PWM_Start+0xd6>
 81063c0:	687b      	ldr	r3, [r7, #4]
 81063c2:	2202      	movs	r2, #2
 81063c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 81063c8:	e013      	b.n	81063f2 <HAL_TIM_PWM_Start+0xfe>
 81063ca:	683b      	ldr	r3, [r7, #0]
 81063cc:	2b0c      	cmp	r3, #12
 81063ce:	d104      	bne.n	81063da <HAL_TIM_PWM_Start+0xe6>
 81063d0:	687b      	ldr	r3, [r7, #4]
 81063d2:	2202      	movs	r2, #2
 81063d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 81063d8:	e00b      	b.n	81063f2 <HAL_TIM_PWM_Start+0xfe>
 81063da:	683b      	ldr	r3, [r7, #0]
 81063dc:	2b10      	cmp	r3, #16
 81063de:	d104      	bne.n	81063ea <HAL_TIM_PWM_Start+0xf6>
 81063e0:	687b      	ldr	r3, [r7, #4]
 81063e2:	2202      	movs	r2, #2
 81063e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 81063e8:	e003      	b.n	81063f2 <HAL_TIM_PWM_Start+0xfe>
 81063ea:	687b      	ldr	r3, [r7, #4]
 81063ec:	2202      	movs	r2, #2
 81063ee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 81063f2:	687b      	ldr	r3, [r7, #4]
 81063f4:	681b      	ldr	r3, [r3, #0]
 81063f6:	2201      	movs	r2, #1
 81063f8:	6839      	ldr	r1, [r7, #0]
 81063fa:	4618      	mov	r0, r3
 81063fc:	f000 ffd2 	bl	81073a4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8106400:	687b      	ldr	r3, [r7, #4]
 8106402:	681b      	ldr	r3, [r3, #0]
 8106404:	4a35      	ldr	r2, [pc, #212]	; (81064dc <HAL_TIM_PWM_Start+0x1e8>)
 8106406:	4293      	cmp	r3, r2
 8106408:	d013      	beq.n	8106432 <HAL_TIM_PWM_Start+0x13e>
 810640a:	687b      	ldr	r3, [r7, #4]
 810640c:	681b      	ldr	r3, [r3, #0]
 810640e:	4a34      	ldr	r2, [pc, #208]	; (81064e0 <HAL_TIM_PWM_Start+0x1ec>)
 8106410:	4293      	cmp	r3, r2
 8106412:	d00e      	beq.n	8106432 <HAL_TIM_PWM_Start+0x13e>
 8106414:	687b      	ldr	r3, [r7, #4]
 8106416:	681b      	ldr	r3, [r3, #0]
 8106418:	4a32      	ldr	r2, [pc, #200]	; (81064e4 <HAL_TIM_PWM_Start+0x1f0>)
 810641a:	4293      	cmp	r3, r2
 810641c:	d009      	beq.n	8106432 <HAL_TIM_PWM_Start+0x13e>
 810641e:	687b      	ldr	r3, [r7, #4]
 8106420:	681b      	ldr	r3, [r3, #0]
 8106422:	4a31      	ldr	r2, [pc, #196]	; (81064e8 <HAL_TIM_PWM_Start+0x1f4>)
 8106424:	4293      	cmp	r3, r2
 8106426:	d004      	beq.n	8106432 <HAL_TIM_PWM_Start+0x13e>
 8106428:	687b      	ldr	r3, [r7, #4]
 810642a:	681b      	ldr	r3, [r3, #0]
 810642c:	4a2f      	ldr	r2, [pc, #188]	; (81064ec <HAL_TIM_PWM_Start+0x1f8>)
 810642e:	4293      	cmp	r3, r2
 8106430:	d101      	bne.n	8106436 <HAL_TIM_PWM_Start+0x142>
 8106432:	2301      	movs	r3, #1
 8106434:	e000      	b.n	8106438 <HAL_TIM_PWM_Start+0x144>
 8106436:	2300      	movs	r3, #0
 8106438:	2b00      	cmp	r3, #0
 810643a:	d007      	beq.n	810644c <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 810643c:	687b      	ldr	r3, [r7, #4]
 810643e:	681b      	ldr	r3, [r3, #0]
 8106440:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8106442:	687b      	ldr	r3, [r7, #4]
 8106444:	681b      	ldr	r3, [r3, #0]
 8106446:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 810644a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 810644c:	687b      	ldr	r3, [r7, #4]
 810644e:	681b      	ldr	r3, [r3, #0]
 8106450:	4a22      	ldr	r2, [pc, #136]	; (81064dc <HAL_TIM_PWM_Start+0x1e8>)
 8106452:	4293      	cmp	r3, r2
 8106454:	d01d      	beq.n	8106492 <HAL_TIM_PWM_Start+0x19e>
 8106456:	687b      	ldr	r3, [r7, #4]
 8106458:	681b      	ldr	r3, [r3, #0]
 810645a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810645e:	d018      	beq.n	8106492 <HAL_TIM_PWM_Start+0x19e>
 8106460:	687b      	ldr	r3, [r7, #4]
 8106462:	681b      	ldr	r3, [r3, #0]
 8106464:	4a22      	ldr	r2, [pc, #136]	; (81064f0 <HAL_TIM_PWM_Start+0x1fc>)
 8106466:	4293      	cmp	r3, r2
 8106468:	d013      	beq.n	8106492 <HAL_TIM_PWM_Start+0x19e>
 810646a:	687b      	ldr	r3, [r7, #4]
 810646c:	681b      	ldr	r3, [r3, #0]
 810646e:	4a21      	ldr	r2, [pc, #132]	; (81064f4 <HAL_TIM_PWM_Start+0x200>)
 8106470:	4293      	cmp	r3, r2
 8106472:	d00e      	beq.n	8106492 <HAL_TIM_PWM_Start+0x19e>
 8106474:	687b      	ldr	r3, [r7, #4]
 8106476:	681b      	ldr	r3, [r3, #0]
 8106478:	4a1f      	ldr	r2, [pc, #124]	; (81064f8 <HAL_TIM_PWM_Start+0x204>)
 810647a:	4293      	cmp	r3, r2
 810647c:	d009      	beq.n	8106492 <HAL_TIM_PWM_Start+0x19e>
 810647e:	687b      	ldr	r3, [r7, #4]
 8106480:	681b      	ldr	r3, [r3, #0]
 8106482:	4a17      	ldr	r2, [pc, #92]	; (81064e0 <HAL_TIM_PWM_Start+0x1ec>)
 8106484:	4293      	cmp	r3, r2
 8106486:	d004      	beq.n	8106492 <HAL_TIM_PWM_Start+0x19e>
 8106488:	687b      	ldr	r3, [r7, #4]
 810648a:	681b      	ldr	r3, [r3, #0]
 810648c:	4a1b      	ldr	r2, [pc, #108]	; (81064fc <HAL_TIM_PWM_Start+0x208>)
 810648e:	4293      	cmp	r3, r2
 8106490:	d115      	bne.n	81064be <HAL_TIM_PWM_Start+0x1ca>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8106492:	687b      	ldr	r3, [r7, #4]
 8106494:	681b      	ldr	r3, [r3, #0]
 8106496:	689a      	ldr	r2, [r3, #8]
 8106498:	4b19      	ldr	r3, [pc, #100]	; (8106500 <HAL_TIM_PWM_Start+0x20c>)
 810649a:	4013      	ands	r3, r2
 810649c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 810649e:	68fb      	ldr	r3, [r7, #12]
 81064a0:	2b06      	cmp	r3, #6
 81064a2:	d015      	beq.n	81064d0 <HAL_TIM_PWM_Start+0x1dc>
 81064a4:	68fb      	ldr	r3, [r7, #12]
 81064a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 81064aa:	d011      	beq.n	81064d0 <HAL_TIM_PWM_Start+0x1dc>
    {
      __HAL_TIM_ENABLE(htim);
 81064ac:	687b      	ldr	r3, [r7, #4]
 81064ae:	681b      	ldr	r3, [r3, #0]
 81064b0:	681a      	ldr	r2, [r3, #0]
 81064b2:	687b      	ldr	r3, [r7, #4]
 81064b4:	681b      	ldr	r3, [r3, #0]
 81064b6:	f042 0201 	orr.w	r2, r2, #1
 81064ba:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81064bc:	e008      	b.n	81064d0 <HAL_TIM_PWM_Start+0x1dc>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 81064be:	687b      	ldr	r3, [r7, #4]
 81064c0:	681b      	ldr	r3, [r3, #0]
 81064c2:	681a      	ldr	r2, [r3, #0]
 81064c4:	687b      	ldr	r3, [r7, #4]
 81064c6:	681b      	ldr	r3, [r3, #0]
 81064c8:	f042 0201 	orr.w	r2, r2, #1
 81064cc:	601a      	str	r2, [r3, #0]
 81064ce:	e000      	b.n	81064d2 <HAL_TIM_PWM_Start+0x1de>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 81064d0:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 81064d2:	2300      	movs	r3, #0
}
 81064d4:	4618      	mov	r0, r3
 81064d6:	3710      	adds	r7, #16
 81064d8:	46bd      	mov	sp, r7
 81064da:	bd80      	pop	{r7, pc}
 81064dc:	40010000 	.word	0x40010000
 81064e0:	40010400 	.word	0x40010400
 81064e4:	40014000 	.word	0x40014000
 81064e8:	40014400 	.word	0x40014400
 81064ec:	40014800 	.word	0x40014800
 81064f0:	40000400 	.word	0x40000400
 81064f4:	40000800 	.word	0x40000800
 81064f8:	40000c00 	.word	0x40000c00
 81064fc:	40001800 	.word	0x40001800
 8106500:	00010007 	.word	0x00010007

08106504 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8106504:	b580      	push	{r7, lr}
 8106506:	b082      	sub	sp, #8
 8106508:	af00      	add	r7, sp, #0
 810650a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 810650c:	687b      	ldr	r3, [r7, #4]
 810650e:	681b      	ldr	r3, [r3, #0]
 8106510:	691b      	ldr	r3, [r3, #16]
 8106512:	f003 0302 	and.w	r3, r3, #2
 8106516:	2b02      	cmp	r3, #2
 8106518:	d122      	bne.n	8106560 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 810651a:	687b      	ldr	r3, [r7, #4]
 810651c:	681b      	ldr	r3, [r3, #0]
 810651e:	68db      	ldr	r3, [r3, #12]
 8106520:	f003 0302 	and.w	r3, r3, #2
 8106524:	2b02      	cmp	r3, #2
 8106526:	d11b      	bne.n	8106560 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8106528:	687b      	ldr	r3, [r7, #4]
 810652a:	681b      	ldr	r3, [r3, #0]
 810652c:	f06f 0202 	mvn.w	r2, #2
 8106530:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8106532:	687b      	ldr	r3, [r7, #4]
 8106534:	2201      	movs	r2, #1
 8106536:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8106538:	687b      	ldr	r3, [r7, #4]
 810653a:	681b      	ldr	r3, [r3, #0]
 810653c:	699b      	ldr	r3, [r3, #24]
 810653e:	f003 0303 	and.w	r3, r3, #3
 8106542:	2b00      	cmp	r3, #0
 8106544:	d003      	beq.n	810654e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8106546:	6878      	ldr	r0, [r7, #4]
 8106548:	f000 fb0a 	bl	8106b60 <HAL_TIM_IC_CaptureCallback>
 810654c:	e005      	b.n	810655a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 810654e:	6878      	ldr	r0, [r7, #4]
 8106550:	f000 fafc 	bl	8106b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106554:	6878      	ldr	r0, [r7, #4]
 8106556:	f000 fb0d 	bl	8106b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 810655a:	687b      	ldr	r3, [r7, #4]
 810655c:	2200      	movs	r2, #0
 810655e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8106560:	687b      	ldr	r3, [r7, #4]
 8106562:	681b      	ldr	r3, [r3, #0]
 8106564:	691b      	ldr	r3, [r3, #16]
 8106566:	f003 0304 	and.w	r3, r3, #4
 810656a:	2b04      	cmp	r3, #4
 810656c:	d122      	bne.n	81065b4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 810656e:	687b      	ldr	r3, [r7, #4]
 8106570:	681b      	ldr	r3, [r3, #0]
 8106572:	68db      	ldr	r3, [r3, #12]
 8106574:	f003 0304 	and.w	r3, r3, #4
 8106578:	2b04      	cmp	r3, #4
 810657a:	d11b      	bne.n	81065b4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 810657c:	687b      	ldr	r3, [r7, #4]
 810657e:	681b      	ldr	r3, [r3, #0]
 8106580:	f06f 0204 	mvn.w	r2, #4
 8106584:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8106586:	687b      	ldr	r3, [r7, #4]
 8106588:	2202      	movs	r2, #2
 810658a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 810658c:	687b      	ldr	r3, [r7, #4]
 810658e:	681b      	ldr	r3, [r3, #0]
 8106590:	699b      	ldr	r3, [r3, #24]
 8106592:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8106596:	2b00      	cmp	r3, #0
 8106598:	d003      	beq.n	81065a2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 810659a:	6878      	ldr	r0, [r7, #4]
 810659c:	f000 fae0 	bl	8106b60 <HAL_TIM_IC_CaptureCallback>
 81065a0:	e005      	b.n	81065ae <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81065a2:	6878      	ldr	r0, [r7, #4]
 81065a4:	f000 fad2 	bl	8106b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81065a8:	6878      	ldr	r0, [r7, #4]
 81065aa:	f000 fae3 	bl	8106b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 81065ae:	687b      	ldr	r3, [r7, #4]
 81065b0:	2200      	movs	r2, #0
 81065b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 81065b4:	687b      	ldr	r3, [r7, #4]
 81065b6:	681b      	ldr	r3, [r3, #0]
 81065b8:	691b      	ldr	r3, [r3, #16]
 81065ba:	f003 0308 	and.w	r3, r3, #8
 81065be:	2b08      	cmp	r3, #8
 81065c0:	d122      	bne.n	8106608 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 81065c2:	687b      	ldr	r3, [r7, #4]
 81065c4:	681b      	ldr	r3, [r3, #0]
 81065c6:	68db      	ldr	r3, [r3, #12]
 81065c8:	f003 0308 	and.w	r3, r3, #8
 81065cc:	2b08      	cmp	r3, #8
 81065ce:	d11b      	bne.n	8106608 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 81065d0:	687b      	ldr	r3, [r7, #4]
 81065d2:	681b      	ldr	r3, [r3, #0]
 81065d4:	f06f 0208 	mvn.w	r2, #8
 81065d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 81065da:	687b      	ldr	r3, [r7, #4]
 81065dc:	2204      	movs	r2, #4
 81065de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 81065e0:	687b      	ldr	r3, [r7, #4]
 81065e2:	681b      	ldr	r3, [r3, #0]
 81065e4:	69db      	ldr	r3, [r3, #28]
 81065e6:	f003 0303 	and.w	r3, r3, #3
 81065ea:	2b00      	cmp	r3, #0
 81065ec:	d003      	beq.n	81065f6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 81065ee:	6878      	ldr	r0, [r7, #4]
 81065f0:	f000 fab6 	bl	8106b60 <HAL_TIM_IC_CaptureCallback>
 81065f4:	e005      	b.n	8106602 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 81065f6:	6878      	ldr	r0, [r7, #4]
 81065f8:	f000 faa8 	bl	8106b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 81065fc:	6878      	ldr	r0, [r7, #4]
 81065fe:	f000 fab9 	bl	8106b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106602:	687b      	ldr	r3, [r7, #4]
 8106604:	2200      	movs	r2, #0
 8106606:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8106608:	687b      	ldr	r3, [r7, #4]
 810660a:	681b      	ldr	r3, [r3, #0]
 810660c:	691b      	ldr	r3, [r3, #16]
 810660e:	f003 0310 	and.w	r3, r3, #16
 8106612:	2b10      	cmp	r3, #16
 8106614:	d122      	bne.n	810665c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8106616:	687b      	ldr	r3, [r7, #4]
 8106618:	681b      	ldr	r3, [r3, #0]
 810661a:	68db      	ldr	r3, [r3, #12]
 810661c:	f003 0310 	and.w	r3, r3, #16
 8106620:	2b10      	cmp	r3, #16
 8106622:	d11b      	bne.n	810665c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8106624:	687b      	ldr	r3, [r7, #4]
 8106626:	681b      	ldr	r3, [r3, #0]
 8106628:	f06f 0210 	mvn.w	r2, #16
 810662c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 810662e:	687b      	ldr	r3, [r7, #4]
 8106630:	2208      	movs	r2, #8
 8106632:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8106634:	687b      	ldr	r3, [r7, #4]
 8106636:	681b      	ldr	r3, [r3, #0]
 8106638:	69db      	ldr	r3, [r3, #28]
 810663a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 810663e:	2b00      	cmp	r3, #0
 8106640:	d003      	beq.n	810664a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8106642:	6878      	ldr	r0, [r7, #4]
 8106644:	f000 fa8c 	bl	8106b60 <HAL_TIM_IC_CaptureCallback>
 8106648:	e005      	b.n	8106656 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 810664a:	6878      	ldr	r0, [r7, #4]
 810664c:	f000 fa7e 	bl	8106b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8106650:	6878      	ldr	r0, [r7, #4]
 8106652:	f000 fa8f 	bl	8106b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8106656:	687b      	ldr	r3, [r7, #4]
 8106658:	2200      	movs	r2, #0
 810665a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 810665c:	687b      	ldr	r3, [r7, #4]
 810665e:	681b      	ldr	r3, [r3, #0]
 8106660:	691b      	ldr	r3, [r3, #16]
 8106662:	f003 0301 	and.w	r3, r3, #1
 8106666:	2b01      	cmp	r3, #1
 8106668:	d10e      	bne.n	8106688 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 810666a:	687b      	ldr	r3, [r7, #4]
 810666c:	681b      	ldr	r3, [r3, #0]
 810666e:	68db      	ldr	r3, [r3, #12]
 8106670:	f003 0301 	and.w	r3, r3, #1
 8106674:	2b01      	cmp	r3, #1
 8106676:	d107      	bne.n	8106688 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8106678:	687b      	ldr	r3, [r7, #4]
 810667a:	681b      	ldr	r3, [r3, #0]
 810667c:	f06f 0201 	mvn.w	r2, #1
 8106680:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8106682:	6878      	ldr	r0, [r7, #4]
 8106684:	f7fa fb6e 	bl	8100d64 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8106688:	687b      	ldr	r3, [r7, #4]
 810668a:	681b      	ldr	r3, [r3, #0]
 810668c:	691b      	ldr	r3, [r3, #16]
 810668e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8106692:	2b80      	cmp	r3, #128	; 0x80
 8106694:	d10e      	bne.n	81066b4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8106696:	687b      	ldr	r3, [r7, #4]
 8106698:	681b      	ldr	r3, [r3, #0]
 810669a:	68db      	ldr	r3, [r3, #12]
 810669c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066a0:	2b80      	cmp	r3, #128	; 0x80
 81066a2:	d107      	bne.n	81066b4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 81066a4:	687b      	ldr	r3, [r7, #4]
 81066a6:	681b      	ldr	r3, [r3, #0]
 81066a8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 81066ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 81066ae:	6878      	ldr	r0, [r7, #4]
 81066b0:	f000 ffae 	bl	8107610 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 81066b4:	687b      	ldr	r3, [r7, #4]
 81066b6:	681b      	ldr	r3, [r3, #0]
 81066b8:	691b      	ldr	r3, [r3, #16]
 81066ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 81066be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 81066c2:	d10e      	bne.n	81066e2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 81066c4:	687b      	ldr	r3, [r7, #4]
 81066c6:	681b      	ldr	r3, [r3, #0]
 81066c8:	68db      	ldr	r3, [r3, #12]
 81066ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 81066ce:	2b80      	cmp	r3, #128	; 0x80
 81066d0:	d107      	bne.n	81066e2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 81066d2:	687b      	ldr	r3, [r7, #4]
 81066d4:	681b      	ldr	r3, [r3, #0]
 81066d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 81066da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 81066dc:	6878      	ldr	r0, [r7, #4]
 81066de:	f000 ffa1 	bl	8107624 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 81066e2:	687b      	ldr	r3, [r7, #4]
 81066e4:	681b      	ldr	r3, [r3, #0]
 81066e6:	691b      	ldr	r3, [r3, #16]
 81066e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81066ec:	2b40      	cmp	r3, #64	; 0x40
 81066ee:	d10e      	bne.n	810670e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 81066f0:	687b      	ldr	r3, [r7, #4]
 81066f2:	681b      	ldr	r3, [r3, #0]
 81066f4:	68db      	ldr	r3, [r3, #12]
 81066f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 81066fa:	2b40      	cmp	r3, #64	; 0x40
 81066fc:	d107      	bne.n	810670e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 81066fe:	687b      	ldr	r3, [r7, #4]
 8106700:	681b      	ldr	r3, [r3, #0]
 8106702:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8106706:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8106708:	6878      	ldr	r0, [r7, #4]
 810670a:	f000 fa3d 	bl	8106b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 810670e:	687b      	ldr	r3, [r7, #4]
 8106710:	681b      	ldr	r3, [r3, #0]
 8106712:	691b      	ldr	r3, [r3, #16]
 8106714:	f003 0320 	and.w	r3, r3, #32
 8106718:	2b20      	cmp	r3, #32
 810671a:	d10e      	bne.n	810673a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 810671c:	687b      	ldr	r3, [r7, #4]
 810671e:	681b      	ldr	r3, [r3, #0]
 8106720:	68db      	ldr	r3, [r3, #12]
 8106722:	f003 0320 	and.w	r3, r3, #32
 8106726:	2b20      	cmp	r3, #32
 8106728:	d107      	bne.n	810673a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 810672a:	687b      	ldr	r3, [r7, #4]
 810672c:	681b      	ldr	r3, [r3, #0]
 810672e:	f06f 0220 	mvn.w	r2, #32
 8106732:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8106734:	6878      	ldr	r0, [r7, #4]
 8106736:	f000 ff61 	bl	81075fc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 810673a:	bf00      	nop
 810673c:	3708      	adds	r7, #8
 810673e:	46bd      	mov	sp, r7
 8106740:	bd80      	pop	{r7, pc}
	...

08106744 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8106744:	b580      	push	{r7, lr}
 8106746:	b084      	sub	sp, #16
 8106748:	af00      	add	r7, sp, #0
 810674a:	60f8      	str	r0, [r7, #12]
 810674c:	60b9      	str	r1, [r7, #8]
 810674e:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8106750:	68fb      	ldr	r3, [r7, #12]
 8106752:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106756:	2b01      	cmp	r3, #1
 8106758:	d101      	bne.n	810675e <HAL_TIM_PWM_ConfigChannel+0x1a>
 810675a:	2302      	movs	r3, #2
 810675c:	e0fd      	b.n	810695a <HAL_TIM_PWM_ConfigChannel+0x216>
 810675e:	68fb      	ldr	r3, [r7, #12]
 8106760:	2201      	movs	r2, #1
 8106762:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8106766:	687b      	ldr	r3, [r7, #4]
 8106768:	2b14      	cmp	r3, #20
 810676a:	f200 80f0 	bhi.w	810694e <HAL_TIM_PWM_ConfigChannel+0x20a>
 810676e:	a201      	add	r2, pc, #4	; (adr r2, 8106774 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8106770:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8106774:	081067c9 	.word	0x081067c9
 8106778:	0810694f 	.word	0x0810694f
 810677c:	0810694f 	.word	0x0810694f
 8106780:	0810694f 	.word	0x0810694f
 8106784:	08106809 	.word	0x08106809
 8106788:	0810694f 	.word	0x0810694f
 810678c:	0810694f 	.word	0x0810694f
 8106790:	0810694f 	.word	0x0810694f
 8106794:	0810684b 	.word	0x0810684b
 8106798:	0810694f 	.word	0x0810694f
 810679c:	0810694f 	.word	0x0810694f
 81067a0:	0810694f 	.word	0x0810694f
 81067a4:	0810688b 	.word	0x0810688b
 81067a8:	0810694f 	.word	0x0810694f
 81067ac:	0810694f 	.word	0x0810694f
 81067b0:	0810694f 	.word	0x0810694f
 81067b4:	081068cd 	.word	0x081068cd
 81067b8:	0810694f 	.word	0x0810694f
 81067bc:	0810694f 	.word	0x0810694f
 81067c0:	0810694f 	.word	0x0810694f
 81067c4:	0810690d 	.word	0x0810690d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 81067c8:	68fb      	ldr	r3, [r7, #12]
 81067ca:	681b      	ldr	r3, [r3, #0]
 81067cc:	68b9      	ldr	r1, [r7, #8]
 81067ce:	4618      	mov	r0, r3
 81067d0:	f000 fa7e 	bl	8106cd0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 81067d4:	68fb      	ldr	r3, [r7, #12]
 81067d6:	681b      	ldr	r3, [r3, #0]
 81067d8:	699a      	ldr	r2, [r3, #24]
 81067da:	68fb      	ldr	r3, [r7, #12]
 81067dc:	681b      	ldr	r3, [r3, #0]
 81067de:	f042 0208 	orr.w	r2, r2, #8
 81067e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 81067e4:	68fb      	ldr	r3, [r7, #12]
 81067e6:	681b      	ldr	r3, [r3, #0]
 81067e8:	699a      	ldr	r2, [r3, #24]
 81067ea:	68fb      	ldr	r3, [r7, #12]
 81067ec:	681b      	ldr	r3, [r3, #0]
 81067ee:	f022 0204 	bic.w	r2, r2, #4
 81067f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 81067f4:	68fb      	ldr	r3, [r7, #12]
 81067f6:	681b      	ldr	r3, [r3, #0]
 81067f8:	6999      	ldr	r1, [r3, #24]
 81067fa:	68bb      	ldr	r3, [r7, #8]
 81067fc:	691a      	ldr	r2, [r3, #16]
 81067fe:	68fb      	ldr	r3, [r7, #12]
 8106800:	681b      	ldr	r3, [r3, #0]
 8106802:	430a      	orrs	r2, r1
 8106804:	619a      	str	r2, [r3, #24]
      break;
 8106806:	e0a3      	b.n	8106950 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8106808:	68fb      	ldr	r3, [r7, #12]
 810680a:	681b      	ldr	r3, [r3, #0]
 810680c:	68b9      	ldr	r1, [r7, #8]
 810680e:	4618      	mov	r0, r3
 8106810:	f000 faee 	bl	8106df0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8106814:	68fb      	ldr	r3, [r7, #12]
 8106816:	681b      	ldr	r3, [r3, #0]
 8106818:	699a      	ldr	r2, [r3, #24]
 810681a:	68fb      	ldr	r3, [r7, #12]
 810681c:	681b      	ldr	r3, [r3, #0]
 810681e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106822:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8106824:	68fb      	ldr	r3, [r7, #12]
 8106826:	681b      	ldr	r3, [r3, #0]
 8106828:	699a      	ldr	r2, [r3, #24]
 810682a:	68fb      	ldr	r3, [r7, #12]
 810682c:	681b      	ldr	r3, [r3, #0]
 810682e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106832:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8106834:	68fb      	ldr	r3, [r7, #12]
 8106836:	681b      	ldr	r3, [r3, #0]
 8106838:	6999      	ldr	r1, [r3, #24]
 810683a:	68bb      	ldr	r3, [r7, #8]
 810683c:	691b      	ldr	r3, [r3, #16]
 810683e:	021a      	lsls	r2, r3, #8
 8106840:	68fb      	ldr	r3, [r7, #12]
 8106842:	681b      	ldr	r3, [r3, #0]
 8106844:	430a      	orrs	r2, r1
 8106846:	619a      	str	r2, [r3, #24]
      break;
 8106848:	e082      	b.n	8106950 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 810684a:	68fb      	ldr	r3, [r7, #12]
 810684c:	681b      	ldr	r3, [r3, #0]
 810684e:	68b9      	ldr	r1, [r7, #8]
 8106850:	4618      	mov	r0, r3
 8106852:	f000 fb57 	bl	8106f04 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8106856:	68fb      	ldr	r3, [r7, #12]
 8106858:	681b      	ldr	r3, [r3, #0]
 810685a:	69da      	ldr	r2, [r3, #28]
 810685c:	68fb      	ldr	r3, [r7, #12]
 810685e:	681b      	ldr	r3, [r3, #0]
 8106860:	f042 0208 	orr.w	r2, r2, #8
 8106864:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8106866:	68fb      	ldr	r3, [r7, #12]
 8106868:	681b      	ldr	r3, [r3, #0]
 810686a:	69da      	ldr	r2, [r3, #28]
 810686c:	68fb      	ldr	r3, [r7, #12]
 810686e:	681b      	ldr	r3, [r3, #0]
 8106870:	f022 0204 	bic.w	r2, r2, #4
 8106874:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8106876:	68fb      	ldr	r3, [r7, #12]
 8106878:	681b      	ldr	r3, [r3, #0]
 810687a:	69d9      	ldr	r1, [r3, #28]
 810687c:	68bb      	ldr	r3, [r7, #8]
 810687e:	691a      	ldr	r2, [r3, #16]
 8106880:	68fb      	ldr	r3, [r7, #12]
 8106882:	681b      	ldr	r3, [r3, #0]
 8106884:	430a      	orrs	r2, r1
 8106886:	61da      	str	r2, [r3, #28]
      break;
 8106888:	e062      	b.n	8106950 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 810688a:	68fb      	ldr	r3, [r7, #12]
 810688c:	681b      	ldr	r3, [r3, #0]
 810688e:	68b9      	ldr	r1, [r7, #8]
 8106890:	4618      	mov	r0, r3
 8106892:	f000 fbbd 	bl	8107010 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8106896:	68fb      	ldr	r3, [r7, #12]
 8106898:	681b      	ldr	r3, [r3, #0]
 810689a:	69da      	ldr	r2, [r3, #28]
 810689c:	68fb      	ldr	r3, [r7, #12]
 810689e:	681b      	ldr	r3, [r3, #0]
 81068a0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 81068a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 81068a6:	68fb      	ldr	r3, [r7, #12]
 81068a8:	681b      	ldr	r3, [r3, #0]
 81068aa:	69da      	ldr	r2, [r3, #28]
 81068ac:	68fb      	ldr	r3, [r7, #12]
 81068ae:	681b      	ldr	r3, [r3, #0]
 81068b0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 81068b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 81068b6:	68fb      	ldr	r3, [r7, #12]
 81068b8:	681b      	ldr	r3, [r3, #0]
 81068ba:	69d9      	ldr	r1, [r3, #28]
 81068bc:	68bb      	ldr	r3, [r7, #8]
 81068be:	691b      	ldr	r3, [r3, #16]
 81068c0:	021a      	lsls	r2, r3, #8
 81068c2:	68fb      	ldr	r3, [r7, #12]
 81068c4:	681b      	ldr	r3, [r3, #0]
 81068c6:	430a      	orrs	r2, r1
 81068c8:	61da      	str	r2, [r3, #28]
      break;
 81068ca:	e041      	b.n	8106950 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 81068cc:	68fb      	ldr	r3, [r7, #12]
 81068ce:	681b      	ldr	r3, [r3, #0]
 81068d0:	68b9      	ldr	r1, [r7, #8]
 81068d2:	4618      	mov	r0, r3
 81068d4:	f000 fc04 	bl	81070e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 81068d8:	68fb      	ldr	r3, [r7, #12]
 81068da:	681b      	ldr	r3, [r3, #0]
 81068dc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81068de:	68fb      	ldr	r3, [r7, #12]
 81068e0:	681b      	ldr	r3, [r3, #0]
 81068e2:	f042 0208 	orr.w	r2, r2, #8
 81068e6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 81068e8:	68fb      	ldr	r3, [r7, #12]
 81068ea:	681b      	ldr	r3, [r3, #0]
 81068ec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 81068ee:	68fb      	ldr	r3, [r7, #12]
 81068f0:	681b      	ldr	r3, [r3, #0]
 81068f2:	f022 0204 	bic.w	r2, r2, #4
 81068f6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 81068f8:	68fb      	ldr	r3, [r7, #12]
 81068fa:	681b      	ldr	r3, [r3, #0]
 81068fc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 81068fe:	68bb      	ldr	r3, [r7, #8]
 8106900:	691a      	ldr	r2, [r3, #16]
 8106902:	68fb      	ldr	r3, [r7, #12]
 8106904:	681b      	ldr	r3, [r3, #0]
 8106906:	430a      	orrs	r2, r1
 8106908:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810690a:	e021      	b.n	8106950 <HAL_TIM_PWM_ConfigChannel+0x20c>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 810690c:	68fb      	ldr	r3, [r7, #12]
 810690e:	681b      	ldr	r3, [r3, #0]
 8106910:	68b9      	ldr	r1, [r7, #8]
 8106912:	4618      	mov	r0, r3
 8106914:	f000 fc46 	bl	81071a4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8106918:	68fb      	ldr	r3, [r7, #12]
 810691a:	681b      	ldr	r3, [r3, #0]
 810691c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810691e:	68fb      	ldr	r3, [r7, #12]
 8106920:	681b      	ldr	r3, [r3, #0]
 8106922:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8106926:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8106928:	68fb      	ldr	r3, [r7, #12]
 810692a:	681b      	ldr	r3, [r3, #0]
 810692c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 810692e:	68fb      	ldr	r3, [r7, #12]
 8106930:	681b      	ldr	r3, [r3, #0]
 8106932:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8106936:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8106938:	68fb      	ldr	r3, [r7, #12]
 810693a:	681b      	ldr	r3, [r3, #0]
 810693c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 810693e:	68bb      	ldr	r3, [r7, #8]
 8106940:	691b      	ldr	r3, [r3, #16]
 8106942:	021a      	lsls	r2, r3, #8
 8106944:	68fb      	ldr	r3, [r7, #12]
 8106946:	681b      	ldr	r3, [r3, #0]
 8106948:	430a      	orrs	r2, r1
 810694a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 810694c:	e000      	b.n	8106950 <HAL_TIM_PWM_ConfigChannel+0x20c>
    }

    default:
      break;
 810694e:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8106950:	68fb      	ldr	r3, [r7, #12]
 8106952:	2200      	movs	r2, #0
 8106954:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106958:	2300      	movs	r3, #0
}
 810695a:	4618      	mov	r0, r3
 810695c:	3710      	adds	r7, #16
 810695e:	46bd      	mov	sp, r7
 8106960:	bd80      	pop	{r7, pc}
 8106962:	bf00      	nop

08106964 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8106964:	b580      	push	{r7, lr}
 8106966:	b084      	sub	sp, #16
 8106968:	af00      	add	r7, sp, #0
 810696a:	6078      	str	r0, [r7, #4]
 810696c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 810696e:	687b      	ldr	r3, [r7, #4]
 8106970:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8106974:	2b01      	cmp	r3, #1
 8106976:	d101      	bne.n	810697c <HAL_TIM_ConfigClockSource+0x18>
 8106978:	2302      	movs	r3, #2
 810697a:	e0dd      	b.n	8106b38 <HAL_TIM_ConfigClockSource+0x1d4>
 810697c:	687b      	ldr	r3, [r7, #4]
 810697e:	2201      	movs	r2, #1
 8106980:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8106984:	687b      	ldr	r3, [r7, #4]
 8106986:	2202      	movs	r2, #2
 8106988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 810698c:	687b      	ldr	r3, [r7, #4]
 810698e:	681b      	ldr	r3, [r3, #0]
 8106990:	689b      	ldr	r3, [r3, #8]
 8106992:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8106994:	68fb      	ldr	r3, [r7, #12]
 8106996:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 810699a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 810699e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 81069a0:	68fb      	ldr	r3, [r7, #12]
 81069a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 81069a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 81069a8:	687b      	ldr	r3, [r7, #4]
 81069aa:	681b      	ldr	r3, [r3, #0]
 81069ac:	68fa      	ldr	r2, [r7, #12]
 81069ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 81069b0:	683b      	ldr	r3, [r7, #0]
 81069b2:	681b      	ldr	r3, [r3, #0]
 81069b4:	4a62      	ldr	r2, [pc, #392]	; (8106b40 <HAL_TIM_ConfigClockSource+0x1dc>)
 81069b6:	4293      	cmp	r3, r2
 81069b8:	f000 80a9 	beq.w	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 81069bc:	4a60      	ldr	r2, [pc, #384]	; (8106b40 <HAL_TIM_ConfigClockSource+0x1dc>)
 81069be:	4293      	cmp	r3, r2
 81069c0:	f200 80ae 	bhi.w	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 81069c4:	4a5f      	ldr	r2, [pc, #380]	; (8106b44 <HAL_TIM_ConfigClockSource+0x1e0>)
 81069c6:	4293      	cmp	r3, r2
 81069c8:	f000 80a1 	beq.w	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 81069cc:	4a5d      	ldr	r2, [pc, #372]	; (8106b44 <HAL_TIM_ConfigClockSource+0x1e0>)
 81069ce:	4293      	cmp	r3, r2
 81069d0:	f200 80a6 	bhi.w	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 81069d4:	4a5c      	ldr	r2, [pc, #368]	; (8106b48 <HAL_TIM_ConfigClockSource+0x1e4>)
 81069d6:	4293      	cmp	r3, r2
 81069d8:	f000 8099 	beq.w	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 81069dc:	4a5a      	ldr	r2, [pc, #360]	; (8106b48 <HAL_TIM_ConfigClockSource+0x1e4>)
 81069de:	4293      	cmp	r3, r2
 81069e0:	f200 809e 	bhi.w	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 81069e4:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81069e8:	f000 8091 	beq.w	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 81069ec:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 81069f0:	f200 8096 	bhi.w	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 81069f4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 81069f8:	f000 8089 	beq.w	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 81069fc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8106a00:	f200 808e 	bhi.w	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106a08:	d03e      	beq.n	8106a88 <HAL_TIM_ConfigClockSource+0x124>
 8106a0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8106a0e:	f200 8087 	bhi.w	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106a16:	f000 8085 	beq.w	8106b24 <HAL_TIM_ConfigClockSource+0x1c0>
 8106a1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8106a1e:	d87f      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a20:	2b70      	cmp	r3, #112	; 0x70
 8106a22:	d01a      	beq.n	8106a5a <HAL_TIM_ConfigClockSource+0xf6>
 8106a24:	2b70      	cmp	r3, #112	; 0x70
 8106a26:	d87b      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a28:	2b60      	cmp	r3, #96	; 0x60
 8106a2a:	d050      	beq.n	8106ace <HAL_TIM_ConfigClockSource+0x16a>
 8106a2c:	2b60      	cmp	r3, #96	; 0x60
 8106a2e:	d877      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a30:	2b50      	cmp	r3, #80	; 0x50
 8106a32:	d03c      	beq.n	8106aae <HAL_TIM_ConfigClockSource+0x14a>
 8106a34:	2b50      	cmp	r3, #80	; 0x50
 8106a36:	d873      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a38:	2b40      	cmp	r3, #64	; 0x40
 8106a3a:	d058      	beq.n	8106aee <HAL_TIM_ConfigClockSource+0x18a>
 8106a3c:	2b40      	cmp	r3, #64	; 0x40
 8106a3e:	d86f      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a40:	2b30      	cmp	r3, #48	; 0x30
 8106a42:	d064      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8106a44:	2b30      	cmp	r3, #48	; 0x30
 8106a46:	d86b      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a48:	2b20      	cmp	r3, #32
 8106a4a:	d060      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8106a4c:	2b20      	cmp	r3, #32
 8106a4e:	d867      	bhi.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
 8106a50:	2b00      	cmp	r3, #0
 8106a52:	d05c      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
 8106a54:	2b10      	cmp	r3, #16
 8106a56:	d05a      	beq.n	8106b0e <HAL_TIM_ConfigClockSource+0x1aa>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8106a58:	e062      	b.n	8106b20 <HAL_TIM_ConfigClockSource+0x1bc>
      TIM_ETR_SetConfig(htim->Instance,
 8106a5a:	687b      	ldr	r3, [r7, #4]
 8106a5c:	6818      	ldr	r0, [r3, #0]
 8106a5e:	683b      	ldr	r3, [r7, #0]
 8106a60:	6899      	ldr	r1, [r3, #8]
 8106a62:	683b      	ldr	r3, [r7, #0]
 8106a64:	685a      	ldr	r2, [r3, #4]
 8106a66:	683b      	ldr	r3, [r7, #0]
 8106a68:	68db      	ldr	r3, [r3, #12]
 8106a6a:	f000 fc7b 	bl	8107364 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8106a6e:	687b      	ldr	r3, [r7, #4]
 8106a70:	681b      	ldr	r3, [r3, #0]
 8106a72:	689b      	ldr	r3, [r3, #8]
 8106a74:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8106a76:	68fb      	ldr	r3, [r7, #12]
 8106a78:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8106a7c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8106a7e:	687b      	ldr	r3, [r7, #4]
 8106a80:	681b      	ldr	r3, [r3, #0]
 8106a82:	68fa      	ldr	r2, [r7, #12]
 8106a84:	609a      	str	r2, [r3, #8]
      break;
 8106a86:	e04e      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_ETR_SetConfig(htim->Instance,
 8106a88:	687b      	ldr	r3, [r7, #4]
 8106a8a:	6818      	ldr	r0, [r3, #0]
 8106a8c:	683b      	ldr	r3, [r7, #0]
 8106a8e:	6899      	ldr	r1, [r3, #8]
 8106a90:	683b      	ldr	r3, [r7, #0]
 8106a92:	685a      	ldr	r2, [r3, #4]
 8106a94:	683b      	ldr	r3, [r7, #0]
 8106a96:	68db      	ldr	r3, [r3, #12]
 8106a98:	f000 fc64 	bl	8107364 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8106a9c:	687b      	ldr	r3, [r7, #4]
 8106a9e:	681b      	ldr	r3, [r3, #0]
 8106aa0:	689a      	ldr	r2, [r3, #8]
 8106aa2:	687b      	ldr	r3, [r7, #4]
 8106aa4:	681b      	ldr	r3, [r3, #0]
 8106aa6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8106aaa:	609a      	str	r2, [r3, #8]
      break;
 8106aac:	e03b      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8106aae:	687b      	ldr	r3, [r7, #4]
 8106ab0:	6818      	ldr	r0, [r3, #0]
 8106ab2:	683b      	ldr	r3, [r7, #0]
 8106ab4:	6859      	ldr	r1, [r3, #4]
 8106ab6:	683b      	ldr	r3, [r7, #0]
 8106ab8:	68db      	ldr	r3, [r3, #12]
 8106aba:	461a      	mov	r2, r3
 8106abc:	f000 fbd6 	bl	810726c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8106ac0:	687b      	ldr	r3, [r7, #4]
 8106ac2:	681b      	ldr	r3, [r3, #0]
 8106ac4:	2150      	movs	r1, #80	; 0x50
 8106ac6:	4618      	mov	r0, r3
 8106ac8:	f000 fc2f 	bl	810732a <TIM_ITRx_SetConfig>
      break;
 8106acc:	e02b      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8106ace:	687b      	ldr	r3, [r7, #4]
 8106ad0:	6818      	ldr	r0, [r3, #0]
 8106ad2:	683b      	ldr	r3, [r7, #0]
 8106ad4:	6859      	ldr	r1, [r3, #4]
 8106ad6:	683b      	ldr	r3, [r7, #0]
 8106ad8:	68db      	ldr	r3, [r3, #12]
 8106ada:	461a      	mov	r2, r3
 8106adc:	f000 fbf5 	bl	81072ca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8106ae0:	687b      	ldr	r3, [r7, #4]
 8106ae2:	681b      	ldr	r3, [r3, #0]
 8106ae4:	2160      	movs	r1, #96	; 0x60
 8106ae6:	4618      	mov	r0, r3
 8106ae8:	f000 fc1f 	bl	810732a <TIM_ITRx_SetConfig>
      break;
 8106aec:	e01b      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8106aee:	687b      	ldr	r3, [r7, #4]
 8106af0:	6818      	ldr	r0, [r3, #0]
 8106af2:	683b      	ldr	r3, [r7, #0]
 8106af4:	6859      	ldr	r1, [r3, #4]
 8106af6:	683b      	ldr	r3, [r7, #0]
 8106af8:	68db      	ldr	r3, [r3, #12]
 8106afa:	461a      	mov	r2, r3
 8106afc:	f000 fbb6 	bl	810726c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8106b00:	687b      	ldr	r3, [r7, #4]
 8106b02:	681b      	ldr	r3, [r3, #0]
 8106b04:	2140      	movs	r1, #64	; 0x40
 8106b06:	4618      	mov	r0, r3
 8106b08:	f000 fc0f 	bl	810732a <TIM_ITRx_SetConfig>
      break;
 8106b0c:	e00b      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8106b0e:	687b      	ldr	r3, [r7, #4]
 8106b10:	681a      	ldr	r2, [r3, #0]
 8106b12:	683b      	ldr	r3, [r7, #0]
 8106b14:	681b      	ldr	r3, [r3, #0]
 8106b16:	4619      	mov	r1, r3
 8106b18:	4610      	mov	r0, r2
 8106b1a:	f000 fc06 	bl	810732a <TIM_ITRx_SetConfig>
        break;
 8106b1e:	e002      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8106b20:	bf00      	nop
 8106b22:	e000      	b.n	8106b26 <HAL_TIM_ConfigClockSource+0x1c2>
      break;
 8106b24:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8106b26:	687b      	ldr	r3, [r7, #4]
 8106b28:	2201      	movs	r2, #1
 8106b2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8106b2e:	687b      	ldr	r3, [r7, #4]
 8106b30:	2200      	movs	r2, #0
 8106b32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8106b36:	2300      	movs	r3, #0
}
 8106b38:	4618      	mov	r0, r3
 8106b3a:	3710      	adds	r7, #16
 8106b3c:	46bd      	mov	sp, r7
 8106b3e:	bd80      	pop	{r7, pc}
 8106b40:	00100040 	.word	0x00100040
 8106b44:	00100030 	.word	0x00100030
 8106b48:	00100020 	.word	0x00100020

08106b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8106b4c:	b480      	push	{r7}
 8106b4e:	b083      	sub	sp, #12
 8106b50:	af00      	add	r7, sp, #0
 8106b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8106b54:	bf00      	nop
 8106b56:	370c      	adds	r7, #12
 8106b58:	46bd      	mov	sp, r7
 8106b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b5e:	4770      	bx	lr

08106b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8106b60:	b480      	push	{r7}
 8106b62:	b083      	sub	sp, #12
 8106b64:	af00      	add	r7, sp, #0
 8106b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8106b68:	bf00      	nop
 8106b6a:	370c      	adds	r7, #12
 8106b6c:	46bd      	mov	sp, r7
 8106b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b72:	4770      	bx	lr

08106b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8106b74:	b480      	push	{r7}
 8106b76:	b083      	sub	sp, #12
 8106b78:	af00      	add	r7, sp, #0
 8106b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8106b7c:	bf00      	nop
 8106b7e:	370c      	adds	r7, #12
 8106b80:	46bd      	mov	sp, r7
 8106b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b86:	4770      	bx	lr

08106b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8106b88:	b480      	push	{r7}
 8106b8a:	b083      	sub	sp, #12
 8106b8c:	af00      	add	r7, sp, #0
 8106b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8106b90:	bf00      	nop
 8106b92:	370c      	adds	r7, #12
 8106b94:	46bd      	mov	sp, r7
 8106b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106b9a:	4770      	bx	lr

08106b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8106b9c:	b480      	push	{r7}
 8106b9e:	b085      	sub	sp, #20
 8106ba0:	af00      	add	r7, sp, #0
 8106ba2:	6078      	str	r0, [r7, #4]
 8106ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8106ba6:	687b      	ldr	r3, [r7, #4]
 8106ba8:	681b      	ldr	r3, [r3, #0]
 8106baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8106bac:	687b      	ldr	r3, [r7, #4]
 8106bae:	4a40      	ldr	r2, [pc, #256]	; (8106cb0 <TIM_Base_SetConfig+0x114>)
 8106bb0:	4293      	cmp	r3, r2
 8106bb2:	d013      	beq.n	8106bdc <TIM_Base_SetConfig+0x40>
 8106bb4:	687b      	ldr	r3, [r7, #4]
 8106bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106bba:	d00f      	beq.n	8106bdc <TIM_Base_SetConfig+0x40>
 8106bbc:	687b      	ldr	r3, [r7, #4]
 8106bbe:	4a3d      	ldr	r2, [pc, #244]	; (8106cb4 <TIM_Base_SetConfig+0x118>)
 8106bc0:	4293      	cmp	r3, r2
 8106bc2:	d00b      	beq.n	8106bdc <TIM_Base_SetConfig+0x40>
 8106bc4:	687b      	ldr	r3, [r7, #4]
 8106bc6:	4a3c      	ldr	r2, [pc, #240]	; (8106cb8 <TIM_Base_SetConfig+0x11c>)
 8106bc8:	4293      	cmp	r3, r2
 8106bca:	d007      	beq.n	8106bdc <TIM_Base_SetConfig+0x40>
 8106bcc:	687b      	ldr	r3, [r7, #4]
 8106bce:	4a3b      	ldr	r2, [pc, #236]	; (8106cbc <TIM_Base_SetConfig+0x120>)
 8106bd0:	4293      	cmp	r3, r2
 8106bd2:	d003      	beq.n	8106bdc <TIM_Base_SetConfig+0x40>
 8106bd4:	687b      	ldr	r3, [r7, #4]
 8106bd6:	4a3a      	ldr	r2, [pc, #232]	; (8106cc0 <TIM_Base_SetConfig+0x124>)
 8106bd8:	4293      	cmp	r3, r2
 8106bda:	d108      	bne.n	8106bee <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8106bdc:	68fb      	ldr	r3, [r7, #12]
 8106bde:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106be2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8106be4:	683b      	ldr	r3, [r7, #0]
 8106be6:	685b      	ldr	r3, [r3, #4]
 8106be8:	68fa      	ldr	r2, [r7, #12]
 8106bea:	4313      	orrs	r3, r2
 8106bec:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8106bee:	687b      	ldr	r3, [r7, #4]
 8106bf0:	4a2f      	ldr	r2, [pc, #188]	; (8106cb0 <TIM_Base_SetConfig+0x114>)
 8106bf2:	4293      	cmp	r3, r2
 8106bf4:	d01f      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106bf6:	687b      	ldr	r3, [r7, #4]
 8106bf8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8106bfc:	d01b      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106bfe:	687b      	ldr	r3, [r7, #4]
 8106c00:	4a2c      	ldr	r2, [pc, #176]	; (8106cb4 <TIM_Base_SetConfig+0x118>)
 8106c02:	4293      	cmp	r3, r2
 8106c04:	d017      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106c06:	687b      	ldr	r3, [r7, #4]
 8106c08:	4a2b      	ldr	r2, [pc, #172]	; (8106cb8 <TIM_Base_SetConfig+0x11c>)
 8106c0a:	4293      	cmp	r3, r2
 8106c0c:	d013      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106c0e:	687b      	ldr	r3, [r7, #4]
 8106c10:	4a2a      	ldr	r2, [pc, #168]	; (8106cbc <TIM_Base_SetConfig+0x120>)
 8106c12:	4293      	cmp	r3, r2
 8106c14:	d00f      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106c16:	687b      	ldr	r3, [r7, #4]
 8106c18:	4a29      	ldr	r2, [pc, #164]	; (8106cc0 <TIM_Base_SetConfig+0x124>)
 8106c1a:	4293      	cmp	r3, r2
 8106c1c:	d00b      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106c1e:	687b      	ldr	r3, [r7, #4]
 8106c20:	4a28      	ldr	r2, [pc, #160]	; (8106cc4 <TIM_Base_SetConfig+0x128>)
 8106c22:	4293      	cmp	r3, r2
 8106c24:	d007      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106c26:	687b      	ldr	r3, [r7, #4]
 8106c28:	4a27      	ldr	r2, [pc, #156]	; (8106cc8 <TIM_Base_SetConfig+0x12c>)
 8106c2a:	4293      	cmp	r3, r2
 8106c2c:	d003      	beq.n	8106c36 <TIM_Base_SetConfig+0x9a>
 8106c2e:	687b      	ldr	r3, [r7, #4]
 8106c30:	4a26      	ldr	r2, [pc, #152]	; (8106ccc <TIM_Base_SetConfig+0x130>)
 8106c32:	4293      	cmp	r3, r2
 8106c34:	d108      	bne.n	8106c48 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8106c36:	68fb      	ldr	r3, [r7, #12]
 8106c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106c3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8106c3e:	683b      	ldr	r3, [r7, #0]
 8106c40:	68db      	ldr	r3, [r3, #12]
 8106c42:	68fa      	ldr	r2, [r7, #12]
 8106c44:	4313      	orrs	r3, r2
 8106c46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8106c48:	68fb      	ldr	r3, [r7, #12]
 8106c4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8106c4e:	683b      	ldr	r3, [r7, #0]
 8106c50:	695b      	ldr	r3, [r3, #20]
 8106c52:	4313      	orrs	r3, r2
 8106c54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8106c56:	687b      	ldr	r3, [r7, #4]
 8106c58:	68fa      	ldr	r2, [r7, #12]
 8106c5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8106c5c:	683b      	ldr	r3, [r7, #0]
 8106c5e:	689a      	ldr	r2, [r3, #8]
 8106c60:	687b      	ldr	r3, [r7, #4]
 8106c62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8106c64:	683b      	ldr	r3, [r7, #0]
 8106c66:	681a      	ldr	r2, [r3, #0]
 8106c68:	687b      	ldr	r3, [r7, #4]
 8106c6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8106c6c:	687b      	ldr	r3, [r7, #4]
 8106c6e:	4a10      	ldr	r2, [pc, #64]	; (8106cb0 <TIM_Base_SetConfig+0x114>)
 8106c70:	4293      	cmp	r3, r2
 8106c72:	d00f      	beq.n	8106c94 <TIM_Base_SetConfig+0xf8>
 8106c74:	687b      	ldr	r3, [r7, #4]
 8106c76:	4a12      	ldr	r2, [pc, #72]	; (8106cc0 <TIM_Base_SetConfig+0x124>)
 8106c78:	4293      	cmp	r3, r2
 8106c7a:	d00b      	beq.n	8106c94 <TIM_Base_SetConfig+0xf8>
 8106c7c:	687b      	ldr	r3, [r7, #4]
 8106c7e:	4a11      	ldr	r2, [pc, #68]	; (8106cc4 <TIM_Base_SetConfig+0x128>)
 8106c80:	4293      	cmp	r3, r2
 8106c82:	d007      	beq.n	8106c94 <TIM_Base_SetConfig+0xf8>
 8106c84:	687b      	ldr	r3, [r7, #4]
 8106c86:	4a10      	ldr	r2, [pc, #64]	; (8106cc8 <TIM_Base_SetConfig+0x12c>)
 8106c88:	4293      	cmp	r3, r2
 8106c8a:	d003      	beq.n	8106c94 <TIM_Base_SetConfig+0xf8>
 8106c8c:	687b      	ldr	r3, [r7, #4]
 8106c8e:	4a0f      	ldr	r2, [pc, #60]	; (8106ccc <TIM_Base_SetConfig+0x130>)
 8106c90:	4293      	cmp	r3, r2
 8106c92:	d103      	bne.n	8106c9c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8106c94:	683b      	ldr	r3, [r7, #0]
 8106c96:	691a      	ldr	r2, [r3, #16]
 8106c98:	687b      	ldr	r3, [r7, #4]
 8106c9a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8106c9c:	687b      	ldr	r3, [r7, #4]
 8106c9e:	2201      	movs	r2, #1
 8106ca0:	615a      	str	r2, [r3, #20]
}
 8106ca2:	bf00      	nop
 8106ca4:	3714      	adds	r7, #20
 8106ca6:	46bd      	mov	sp, r7
 8106ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106cac:	4770      	bx	lr
 8106cae:	bf00      	nop
 8106cb0:	40010000 	.word	0x40010000
 8106cb4:	40000400 	.word	0x40000400
 8106cb8:	40000800 	.word	0x40000800
 8106cbc:	40000c00 	.word	0x40000c00
 8106cc0:	40010400 	.word	0x40010400
 8106cc4:	40014000 	.word	0x40014000
 8106cc8:	40014400 	.word	0x40014400
 8106ccc:	40014800 	.word	0x40014800

08106cd0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106cd0:	b480      	push	{r7}
 8106cd2:	b087      	sub	sp, #28
 8106cd4:	af00      	add	r7, sp, #0
 8106cd6:	6078      	str	r0, [r7, #4]
 8106cd8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8106cda:	687b      	ldr	r3, [r7, #4]
 8106cdc:	6a1b      	ldr	r3, [r3, #32]
 8106cde:	f023 0201 	bic.w	r2, r3, #1
 8106ce2:	687b      	ldr	r3, [r7, #4]
 8106ce4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106ce6:	687b      	ldr	r3, [r7, #4]
 8106ce8:	6a1b      	ldr	r3, [r3, #32]
 8106cea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106cec:	687b      	ldr	r3, [r7, #4]
 8106cee:	685b      	ldr	r3, [r3, #4]
 8106cf0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106cf2:	687b      	ldr	r3, [r7, #4]
 8106cf4:	699b      	ldr	r3, [r3, #24]
 8106cf6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8106cf8:	68fb      	ldr	r3, [r7, #12]
 8106cfa:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8106cfe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106d02:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8106d04:	68fb      	ldr	r3, [r7, #12]
 8106d06:	f023 0303 	bic.w	r3, r3, #3
 8106d0a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106d0c:	683b      	ldr	r3, [r7, #0]
 8106d0e:	681b      	ldr	r3, [r3, #0]
 8106d10:	68fa      	ldr	r2, [r7, #12]
 8106d12:	4313      	orrs	r3, r2
 8106d14:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8106d16:	697b      	ldr	r3, [r7, #20]
 8106d18:	f023 0302 	bic.w	r3, r3, #2
 8106d1c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8106d1e:	683b      	ldr	r3, [r7, #0]
 8106d20:	689b      	ldr	r3, [r3, #8]
 8106d22:	697a      	ldr	r2, [r7, #20]
 8106d24:	4313      	orrs	r3, r2
 8106d26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8106d28:	687b      	ldr	r3, [r7, #4]
 8106d2a:	4a2c      	ldr	r2, [pc, #176]	; (8106ddc <TIM_OC1_SetConfig+0x10c>)
 8106d2c:	4293      	cmp	r3, r2
 8106d2e:	d00f      	beq.n	8106d50 <TIM_OC1_SetConfig+0x80>
 8106d30:	687b      	ldr	r3, [r7, #4]
 8106d32:	4a2b      	ldr	r2, [pc, #172]	; (8106de0 <TIM_OC1_SetConfig+0x110>)
 8106d34:	4293      	cmp	r3, r2
 8106d36:	d00b      	beq.n	8106d50 <TIM_OC1_SetConfig+0x80>
 8106d38:	687b      	ldr	r3, [r7, #4]
 8106d3a:	4a2a      	ldr	r2, [pc, #168]	; (8106de4 <TIM_OC1_SetConfig+0x114>)
 8106d3c:	4293      	cmp	r3, r2
 8106d3e:	d007      	beq.n	8106d50 <TIM_OC1_SetConfig+0x80>
 8106d40:	687b      	ldr	r3, [r7, #4]
 8106d42:	4a29      	ldr	r2, [pc, #164]	; (8106de8 <TIM_OC1_SetConfig+0x118>)
 8106d44:	4293      	cmp	r3, r2
 8106d46:	d003      	beq.n	8106d50 <TIM_OC1_SetConfig+0x80>
 8106d48:	687b      	ldr	r3, [r7, #4]
 8106d4a:	4a28      	ldr	r2, [pc, #160]	; (8106dec <TIM_OC1_SetConfig+0x11c>)
 8106d4c:	4293      	cmp	r3, r2
 8106d4e:	d10c      	bne.n	8106d6a <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8106d50:	697b      	ldr	r3, [r7, #20]
 8106d52:	f023 0308 	bic.w	r3, r3, #8
 8106d56:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8106d58:	683b      	ldr	r3, [r7, #0]
 8106d5a:	68db      	ldr	r3, [r3, #12]
 8106d5c:	697a      	ldr	r2, [r7, #20]
 8106d5e:	4313      	orrs	r3, r2
 8106d60:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8106d62:	697b      	ldr	r3, [r7, #20]
 8106d64:	f023 0304 	bic.w	r3, r3, #4
 8106d68:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106d6a:	687b      	ldr	r3, [r7, #4]
 8106d6c:	4a1b      	ldr	r2, [pc, #108]	; (8106ddc <TIM_OC1_SetConfig+0x10c>)
 8106d6e:	4293      	cmp	r3, r2
 8106d70:	d00f      	beq.n	8106d92 <TIM_OC1_SetConfig+0xc2>
 8106d72:	687b      	ldr	r3, [r7, #4]
 8106d74:	4a1a      	ldr	r2, [pc, #104]	; (8106de0 <TIM_OC1_SetConfig+0x110>)
 8106d76:	4293      	cmp	r3, r2
 8106d78:	d00b      	beq.n	8106d92 <TIM_OC1_SetConfig+0xc2>
 8106d7a:	687b      	ldr	r3, [r7, #4]
 8106d7c:	4a19      	ldr	r2, [pc, #100]	; (8106de4 <TIM_OC1_SetConfig+0x114>)
 8106d7e:	4293      	cmp	r3, r2
 8106d80:	d007      	beq.n	8106d92 <TIM_OC1_SetConfig+0xc2>
 8106d82:	687b      	ldr	r3, [r7, #4]
 8106d84:	4a18      	ldr	r2, [pc, #96]	; (8106de8 <TIM_OC1_SetConfig+0x118>)
 8106d86:	4293      	cmp	r3, r2
 8106d88:	d003      	beq.n	8106d92 <TIM_OC1_SetConfig+0xc2>
 8106d8a:	687b      	ldr	r3, [r7, #4]
 8106d8c:	4a17      	ldr	r2, [pc, #92]	; (8106dec <TIM_OC1_SetConfig+0x11c>)
 8106d8e:	4293      	cmp	r3, r2
 8106d90:	d111      	bne.n	8106db6 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8106d92:	693b      	ldr	r3, [r7, #16]
 8106d94:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8106d98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8106d9a:	693b      	ldr	r3, [r7, #16]
 8106d9c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106da0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8106da2:	683b      	ldr	r3, [r7, #0]
 8106da4:	695b      	ldr	r3, [r3, #20]
 8106da6:	693a      	ldr	r2, [r7, #16]
 8106da8:	4313      	orrs	r3, r2
 8106daa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8106dac:	683b      	ldr	r3, [r7, #0]
 8106dae:	699b      	ldr	r3, [r3, #24]
 8106db0:	693a      	ldr	r2, [r7, #16]
 8106db2:	4313      	orrs	r3, r2
 8106db4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106db6:	687b      	ldr	r3, [r7, #4]
 8106db8:	693a      	ldr	r2, [r7, #16]
 8106dba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106dbc:	687b      	ldr	r3, [r7, #4]
 8106dbe:	68fa      	ldr	r2, [r7, #12]
 8106dc0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8106dc2:	683b      	ldr	r3, [r7, #0]
 8106dc4:	685a      	ldr	r2, [r3, #4]
 8106dc6:	687b      	ldr	r3, [r7, #4]
 8106dc8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106dca:	687b      	ldr	r3, [r7, #4]
 8106dcc:	697a      	ldr	r2, [r7, #20]
 8106dce:	621a      	str	r2, [r3, #32]
}
 8106dd0:	bf00      	nop
 8106dd2:	371c      	adds	r7, #28
 8106dd4:	46bd      	mov	sp, r7
 8106dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106dda:	4770      	bx	lr
 8106ddc:	40010000 	.word	0x40010000
 8106de0:	40010400 	.word	0x40010400
 8106de4:	40014000 	.word	0x40014000
 8106de8:	40014400 	.word	0x40014400
 8106dec:	40014800 	.word	0x40014800

08106df0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106df0:	b480      	push	{r7}
 8106df2:	b087      	sub	sp, #28
 8106df4:	af00      	add	r7, sp, #0
 8106df6:	6078      	str	r0, [r7, #4]
 8106df8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8106dfa:	687b      	ldr	r3, [r7, #4]
 8106dfc:	6a1b      	ldr	r3, [r3, #32]
 8106dfe:	f023 0210 	bic.w	r2, r3, #16
 8106e02:	687b      	ldr	r3, [r7, #4]
 8106e04:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106e06:	687b      	ldr	r3, [r7, #4]
 8106e08:	6a1b      	ldr	r3, [r3, #32]
 8106e0a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106e0c:	687b      	ldr	r3, [r7, #4]
 8106e0e:	685b      	ldr	r3, [r3, #4]
 8106e10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8106e12:	687b      	ldr	r3, [r7, #4]
 8106e14:	699b      	ldr	r3, [r3, #24]
 8106e16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8106e18:	68fb      	ldr	r3, [r7, #12]
 8106e1a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8106e1e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8106e22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8106e24:	68fb      	ldr	r3, [r7, #12]
 8106e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8106e2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8106e2c:	683b      	ldr	r3, [r7, #0]
 8106e2e:	681b      	ldr	r3, [r3, #0]
 8106e30:	021b      	lsls	r3, r3, #8
 8106e32:	68fa      	ldr	r2, [r7, #12]
 8106e34:	4313      	orrs	r3, r2
 8106e36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8106e38:	697b      	ldr	r3, [r7, #20]
 8106e3a:	f023 0320 	bic.w	r3, r3, #32
 8106e3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8106e40:	683b      	ldr	r3, [r7, #0]
 8106e42:	689b      	ldr	r3, [r3, #8]
 8106e44:	011b      	lsls	r3, r3, #4
 8106e46:	697a      	ldr	r2, [r7, #20]
 8106e48:	4313      	orrs	r3, r2
 8106e4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8106e4c:	687b      	ldr	r3, [r7, #4]
 8106e4e:	4a28      	ldr	r2, [pc, #160]	; (8106ef0 <TIM_OC2_SetConfig+0x100>)
 8106e50:	4293      	cmp	r3, r2
 8106e52:	d003      	beq.n	8106e5c <TIM_OC2_SetConfig+0x6c>
 8106e54:	687b      	ldr	r3, [r7, #4]
 8106e56:	4a27      	ldr	r2, [pc, #156]	; (8106ef4 <TIM_OC2_SetConfig+0x104>)
 8106e58:	4293      	cmp	r3, r2
 8106e5a:	d10d      	bne.n	8106e78 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8106e5c:	697b      	ldr	r3, [r7, #20]
 8106e5e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8106e62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8106e64:	683b      	ldr	r3, [r7, #0]
 8106e66:	68db      	ldr	r3, [r3, #12]
 8106e68:	011b      	lsls	r3, r3, #4
 8106e6a:	697a      	ldr	r2, [r7, #20]
 8106e6c:	4313      	orrs	r3, r2
 8106e6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8106e70:	697b      	ldr	r3, [r7, #20]
 8106e72:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8106e76:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106e78:	687b      	ldr	r3, [r7, #4]
 8106e7a:	4a1d      	ldr	r2, [pc, #116]	; (8106ef0 <TIM_OC2_SetConfig+0x100>)
 8106e7c:	4293      	cmp	r3, r2
 8106e7e:	d00f      	beq.n	8106ea0 <TIM_OC2_SetConfig+0xb0>
 8106e80:	687b      	ldr	r3, [r7, #4]
 8106e82:	4a1c      	ldr	r2, [pc, #112]	; (8106ef4 <TIM_OC2_SetConfig+0x104>)
 8106e84:	4293      	cmp	r3, r2
 8106e86:	d00b      	beq.n	8106ea0 <TIM_OC2_SetConfig+0xb0>
 8106e88:	687b      	ldr	r3, [r7, #4]
 8106e8a:	4a1b      	ldr	r2, [pc, #108]	; (8106ef8 <TIM_OC2_SetConfig+0x108>)
 8106e8c:	4293      	cmp	r3, r2
 8106e8e:	d007      	beq.n	8106ea0 <TIM_OC2_SetConfig+0xb0>
 8106e90:	687b      	ldr	r3, [r7, #4]
 8106e92:	4a1a      	ldr	r2, [pc, #104]	; (8106efc <TIM_OC2_SetConfig+0x10c>)
 8106e94:	4293      	cmp	r3, r2
 8106e96:	d003      	beq.n	8106ea0 <TIM_OC2_SetConfig+0xb0>
 8106e98:	687b      	ldr	r3, [r7, #4]
 8106e9a:	4a19      	ldr	r2, [pc, #100]	; (8106f00 <TIM_OC2_SetConfig+0x110>)
 8106e9c:	4293      	cmp	r3, r2
 8106e9e:	d113      	bne.n	8106ec8 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8106ea0:	693b      	ldr	r3, [r7, #16]
 8106ea2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106ea6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8106ea8:	693b      	ldr	r3, [r7, #16]
 8106eaa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106eae:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8106eb0:	683b      	ldr	r3, [r7, #0]
 8106eb2:	695b      	ldr	r3, [r3, #20]
 8106eb4:	009b      	lsls	r3, r3, #2
 8106eb6:	693a      	ldr	r2, [r7, #16]
 8106eb8:	4313      	orrs	r3, r2
 8106eba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8106ebc:	683b      	ldr	r3, [r7, #0]
 8106ebe:	699b      	ldr	r3, [r3, #24]
 8106ec0:	009b      	lsls	r3, r3, #2
 8106ec2:	693a      	ldr	r2, [r7, #16]
 8106ec4:	4313      	orrs	r3, r2
 8106ec6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106ec8:	687b      	ldr	r3, [r7, #4]
 8106eca:	693a      	ldr	r2, [r7, #16]
 8106ecc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8106ece:	687b      	ldr	r3, [r7, #4]
 8106ed0:	68fa      	ldr	r2, [r7, #12]
 8106ed2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8106ed4:	683b      	ldr	r3, [r7, #0]
 8106ed6:	685a      	ldr	r2, [r3, #4]
 8106ed8:	687b      	ldr	r3, [r7, #4]
 8106eda:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106edc:	687b      	ldr	r3, [r7, #4]
 8106ede:	697a      	ldr	r2, [r7, #20]
 8106ee0:	621a      	str	r2, [r3, #32]
}
 8106ee2:	bf00      	nop
 8106ee4:	371c      	adds	r7, #28
 8106ee6:	46bd      	mov	sp, r7
 8106ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106eec:	4770      	bx	lr
 8106eee:	bf00      	nop
 8106ef0:	40010000 	.word	0x40010000
 8106ef4:	40010400 	.word	0x40010400
 8106ef8:	40014000 	.word	0x40014000
 8106efc:	40014400 	.word	0x40014400
 8106f00:	40014800 	.word	0x40014800

08106f04 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8106f04:	b480      	push	{r7}
 8106f06:	b087      	sub	sp, #28
 8106f08:	af00      	add	r7, sp, #0
 8106f0a:	6078      	str	r0, [r7, #4]
 8106f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8106f0e:	687b      	ldr	r3, [r7, #4]
 8106f10:	6a1b      	ldr	r3, [r3, #32]
 8106f12:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8106f16:	687b      	ldr	r3, [r7, #4]
 8106f18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8106f1a:	687b      	ldr	r3, [r7, #4]
 8106f1c:	6a1b      	ldr	r3, [r3, #32]
 8106f1e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8106f20:	687b      	ldr	r3, [r7, #4]
 8106f22:	685b      	ldr	r3, [r3, #4]
 8106f24:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8106f26:	687b      	ldr	r3, [r7, #4]
 8106f28:	69db      	ldr	r3, [r3, #28]
 8106f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8106f2c:	68fb      	ldr	r3, [r7, #12]
 8106f2e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8106f32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8106f34:	68fb      	ldr	r3, [r7, #12]
 8106f36:	f023 0303 	bic.w	r3, r3, #3
 8106f3a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8106f3c:	683b      	ldr	r3, [r7, #0]
 8106f3e:	681b      	ldr	r3, [r3, #0]
 8106f40:	68fa      	ldr	r2, [r7, #12]
 8106f42:	4313      	orrs	r3, r2
 8106f44:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8106f46:	697b      	ldr	r3, [r7, #20]
 8106f48:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8106f4c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8106f4e:	683b      	ldr	r3, [r7, #0]
 8106f50:	689b      	ldr	r3, [r3, #8]
 8106f52:	021b      	lsls	r3, r3, #8
 8106f54:	697a      	ldr	r2, [r7, #20]
 8106f56:	4313      	orrs	r3, r2
 8106f58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8106f5a:	687b      	ldr	r3, [r7, #4]
 8106f5c:	4a27      	ldr	r2, [pc, #156]	; (8106ffc <TIM_OC3_SetConfig+0xf8>)
 8106f5e:	4293      	cmp	r3, r2
 8106f60:	d003      	beq.n	8106f6a <TIM_OC3_SetConfig+0x66>
 8106f62:	687b      	ldr	r3, [r7, #4]
 8106f64:	4a26      	ldr	r2, [pc, #152]	; (8107000 <TIM_OC3_SetConfig+0xfc>)
 8106f66:	4293      	cmp	r3, r2
 8106f68:	d10d      	bne.n	8106f86 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8106f6a:	697b      	ldr	r3, [r7, #20]
 8106f6c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8106f70:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8106f72:	683b      	ldr	r3, [r7, #0]
 8106f74:	68db      	ldr	r3, [r3, #12]
 8106f76:	021b      	lsls	r3, r3, #8
 8106f78:	697a      	ldr	r2, [r7, #20]
 8106f7a:	4313      	orrs	r3, r2
 8106f7c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8106f7e:	697b      	ldr	r3, [r7, #20]
 8106f80:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8106f84:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8106f86:	687b      	ldr	r3, [r7, #4]
 8106f88:	4a1c      	ldr	r2, [pc, #112]	; (8106ffc <TIM_OC3_SetConfig+0xf8>)
 8106f8a:	4293      	cmp	r3, r2
 8106f8c:	d00f      	beq.n	8106fae <TIM_OC3_SetConfig+0xaa>
 8106f8e:	687b      	ldr	r3, [r7, #4]
 8106f90:	4a1b      	ldr	r2, [pc, #108]	; (8107000 <TIM_OC3_SetConfig+0xfc>)
 8106f92:	4293      	cmp	r3, r2
 8106f94:	d00b      	beq.n	8106fae <TIM_OC3_SetConfig+0xaa>
 8106f96:	687b      	ldr	r3, [r7, #4]
 8106f98:	4a1a      	ldr	r2, [pc, #104]	; (8107004 <TIM_OC3_SetConfig+0x100>)
 8106f9a:	4293      	cmp	r3, r2
 8106f9c:	d007      	beq.n	8106fae <TIM_OC3_SetConfig+0xaa>
 8106f9e:	687b      	ldr	r3, [r7, #4]
 8106fa0:	4a19      	ldr	r2, [pc, #100]	; (8107008 <TIM_OC3_SetConfig+0x104>)
 8106fa2:	4293      	cmp	r3, r2
 8106fa4:	d003      	beq.n	8106fae <TIM_OC3_SetConfig+0xaa>
 8106fa6:	687b      	ldr	r3, [r7, #4]
 8106fa8:	4a18      	ldr	r2, [pc, #96]	; (810700c <TIM_OC3_SetConfig+0x108>)
 8106faa:	4293      	cmp	r3, r2
 8106fac:	d113      	bne.n	8106fd6 <TIM_OC3_SetConfig+0xd2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8106fae:	693b      	ldr	r3, [r7, #16]
 8106fb0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8106fb4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8106fb6:	693b      	ldr	r3, [r7, #16]
 8106fb8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8106fbc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8106fbe:	683b      	ldr	r3, [r7, #0]
 8106fc0:	695b      	ldr	r3, [r3, #20]
 8106fc2:	011b      	lsls	r3, r3, #4
 8106fc4:	693a      	ldr	r2, [r7, #16]
 8106fc6:	4313      	orrs	r3, r2
 8106fc8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8106fca:	683b      	ldr	r3, [r7, #0]
 8106fcc:	699b      	ldr	r3, [r3, #24]
 8106fce:	011b      	lsls	r3, r3, #4
 8106fd0:	693a      	ldr	r2, [r7, #16]
 8106fd2:	4313      	orrs	r3, r2
 8106fd4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8106fd6:	687b      	ldr	r3, [r7, #4]
 8106fd8:	693a      	ldr	r2, [r7, #16]
 8106fda:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8106fdc:	687b      	ldr	r3, [r7, #4]
 8106fde:	68fa      	ldr	r2, [r7, #12]
 8106fe0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8106fe2:	683b      	ldr	r3, [r7, #0]
 8106fe4:	685a      	ldr	r2, [r3, #4]
 8106fe6:	687b      	ldr	r3, [r7, #4]
 8106fe8:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8106fea:	687b      	ldr	r3, [r7, #4]
 8106fec:	697a      	ldr	r2, [r7, #20]
 8106fee:	621a      	str	r2, [r3, #32]
}
 8106ff0:	bf00      	nop
 8106ff2:	371c      	adds	r7, #28
 8106ff4:	46bd      	mov	sp, r7
 8106ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8106ffa:	4770      	bx	lr
 8106ffc:	40010000 	.word	0x40010000
 8107000:	40010400 	.word	0x40010400
 8107004:	40014000 	.word	0x40014000
 8107008:	40014400 	.word	0x40014400
 810700c:	40014800 	.word	0x40014800

08107010 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8107010:	b480      	push	{r7}
 8107012:	b087      	sub	sp, #28
 8107014:	af00      	add	r7, sp, #0
 8107016:	6078      	str	r0, [r7, #4]
 8107018:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 810701a:	687b      	ldr	r3, [r7, #4]
 810701c:	6a1b      	ldr	r3, [r3, #32]
 810701e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107022:	687b      	ldr	r3, [r7, #4]
 8107024:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8107026:	687b      	ldr	r3, [r7, #4]
 8107028:	6a1b      	ldr	r3, [r3, #32]
 810702a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 810702c:	687b      	ldr	r3, [r7, #4]
 810702e:	685b      	ldr	r3, [r3, #4]
 8107030:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8107032:	687b      	ldr	r3, [r7, #4]
 8107034:	69db      	ldr	r3, [r3, #28]
 8107036:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8107038:	68fb      	ldr	r3, [r7, #12]
 810703a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 810703e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8107040:	68fb      	ldr	r3, [r7, #12]
 8107042:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8107046:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8107048:	683b      	ldr	r3, [r7, #0]
 810704a:	681b      	ldr	r3, [r3, #0]
 810704c:	021b      	lsls	r3, r3, #8
 810704e:	68fa      	ldr	r2, [r7, #12]
 8107050:	4313      	orrs	r3, r2
 8107052:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8107054:	693b      	ldr	r3, [r7, #16]
 8107056:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 810705a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 810705c:	683b      	ldr	r3, [r7, #0]
 810705e:	689b      	ldr	r3, [r3, #8]
 8107060:	031b      	lsls	r3, r3, #12
 8107062:	693a      	ldr	r2, [r7, #16]
 8107064:	4313      	orrs	r3, r2
 8107066:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8107068:	687b      	ldr	r3, [r7, #4]
 810706a:	4a18      	ldr	r2, [pc, #96]	; (81070cc <TIM_OC4_SetConfig+0xbc>)
 810706c:	4293      	cmp	r3, r2
 810706e:	d00f      	beq.n	8107090 <TIM_OC4_SetConfig+0x80>
 8107070:	687b      	ldr	r3, [r7, #4]
 8107072:	4a17      	ldr	r2, [pc, #92]	; (81070d0 <TIM_OC4_SetConfig+0xc0>)
 8107074:	4293      	cmp	r3, r2
 8107076:	d00b      	beq.n	8107090 <TIM_OC4_SetConfig+0x80>
 8107078:	687b      	ldr	r3, [r7, #4]
 810707a:	4a16      	ldr	r2, [pc, #88]	; (81070d4 <TIM_OC4_SetConfig+0xc4>)
 810707c:	4293      	cmp	r3, r2
 810707e:	d007      	beq.n	8107090 <TIM_OC4_SetConfig+0x80>
 8107080:	687b      	ldr	r3, [r7, #4]
 8107082:	4a15      	ldr	r2, [pc, #84]	; (81070d8 <TIM_OC4_SetConfig+0xc8>)
 8107084:	4293      	cmp	r3, r2
 8107086:	d003      	beq.n	8107090 <TIM_OC4_SetConfig+0x80>
 8107088:	687b      	ldr	r3, [r7, #4]
 810708a:	4a14      	ldr	r2, [pc, #80]	; (81070dc <TIM_OC4_SetConfig+0xcc>)
 810708c:	4293      	cmp	r3, r2
 810708e:	d109      	bne.n	81070a4 <TIM_OC4_SetConfig+0x94>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8107090:	697b      	ldr	r3, [r7, #20]
 8107092:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8107096:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8107098:	683b      	ldr	r3, [r7, #0]
 810709a:	695b      	ldr	r3, [r3, #20]
 810709c:	019b      	lsls	r3, r3, #6
 810709e:	697a      	ldr	r2, [r7, #20]
 81070a0:	4313      	orrs	r3, r2
 81070a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 81070a4:	687b      	ldr	r3, [r7, #4]
 81070a6:	697a      	ldr	r2, [r7, #20]
 81070a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 81070aa:	687b      	ldr	r3, [r7, #4]
 81070ac:	68fa      	ldr	r2, [r7, #12]
 81070ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 81070b0:	683b      	ldr	r3, [r7, #0]
 81070b2:	685a      	ldr	r2, [r3, #4]
 81070b4:	687b      	ldr	r3, [r7, #4]
 81070b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 81070b8:	687b      	ldr	r3, [r7, #4]
 81070ba:	693a      	ldr	r2, [r7, #16]
 81070bc:	621a      	str	r2, [r3, #32]
}
 81070be:	bf00      	nop
 81070c0:	371c      	adds	r7, #28
 81070c2:	46bd      	mov	sp, r7
 81070c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81070c8:	4770      	bx	lr
 81070ca:	bf00      	nop
 81070cc:	40010000 	.word	0x40010000
 81070d0:	40010400 	.word	0x40010400
 81070d4:	40014000 	.word	0x40014000
 81070d8:	40014400 	.word	0x40014400
 81070dc:	40014800 	.word	0x40014800

081070e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81070e0:	b480      	push	{r7}
 81070e2:	b087      	sub	sp, #28
 81070e4:	af00      	add	r7, sp, #0
 81070e6:	6078      	str	r0, [r7, #4]
 81070e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 81070ea:	687b      	ldr	r3, [r7, #4]
 81070ec:	6a1b      	ldr	r3, [r3, #32]
 81070ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 81070f2:	687b      	ldr	r3, [r7, #4]
 81070f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81070f6:	687b      	ldr	r3, [r7, #4]
 81070f8:	6a1b      	ldr	r3, [r3, #32]
 81070fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81070fc:	687b      	ldr	r3, [r7, #4]
 81070fe:	685b      	ldr	r3, [r3, #4]
 8107100:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8107102:	687b      	ldr	r3, [r7, #4]
 8107104:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8107106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8107108:	68fb      	ldr	r3, [r7, #12]
 810710a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 810710e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8107110:	683b      	ldr	r3, [r7, #0]
 8107112:	681b      	ldr	r3, [r3, #0]
 8107114:	68fa      	ldr	r2, [r7, #12]
 8107116:	4313      	orrs	r3, r2
 8107118:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 810711a:	693b      	ldr	r3, [r7, #16]
 810711c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107120:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8107122:	683b      	ldr	r3, [r7, #0]
 8107124:	689b      	ldr	r3, [r3, #8]
 8107126:	041b      	lsls	r3, r3, #16
 8107128:	693a      	ldr	r2, [r7, #16]
 810712a:	4313      	orrs	r3, r2
 810712c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 810712e:	687b      	ldr	r3, [r7, #4]
 8107130:	4a17      	ldr	r2, [pc, #92]	; (8107190 <TIM_OC5_SetConfig+0xb0>)
 8107132:	4293      	cmp	r3, r2
 8107134:	d00f      	beq.n	8107156 <TIM_OC5_SetConfig+0x76>
 8107136:	687b      	ldr	r3, [r7, #4]
 8107138:	4a16      	ldr	r2, [pc, #88]	; (8107194 <TIM_OC5_SetConfig+0xb4>)
 810713a:	4293      	cmp	r3, r2
 810713c:	d00b      	beq.n	8107156 <TIM_OC5_SetConfig+0x76>
 810713e:	687b      	ldr	r3, [r7, #4]
 8107140:	4a15      	ldr	r2, [pc, #84]	; (8107198 <TIM_OC5_SetConfig+0xb8>)
 8107142:	4293      	cmp	r3, r2
 8107144:	d007      	beq.n	8107156 <TIM_OC5_SetConfig+0x76>
 8107146:	687b      	ldr	r3, [r7, #4]
 8107148:	4a14      	ldr	r2, [pc, #80]	; (810719c <TIM_OC5_SetConfig+0xbc>)
 810714a:	4293      	cmp	r3, r2
 810714c:	d003      	beq.n	8107156 <TIM_OC5_SetConfig+0x76>
 810714e:	687b      	ldr	r3, [r7, #4]
 8107150:	4a13      	ldr	r2, [pc, #76]	; (81071a0 <TIM_OC5_SetConfig+0xc0>)
 8107152:	4293      	cmp	r3, r2
 8107154:	d109      	bne.n	810716a <TIM_OC5_SetConfig+0x8a>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8107156:	697b      	ldr	r3, [r7, #20]
 8107158:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 810715c:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 810715e:	683b      	ldr	r3, [r7, #0]
 8107160:	695b      	ldr	r3, [r3, #20]
 8107162:	021b      	lsls	r3, r3, #8
 8107164:	697a      	ldr	r2, [r7, #20]
 8107166:	4313      	orrs	r3, r2
 8107168:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 810716a:	687b      	ldr	r3, [r7, #4]
 810716c:	697a      	ldr	r2, [r7, #20]
 810716e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107170:	687b      	ldr	r3, [r7, #4]
 8107172:	68fa      	ldr	r2, [r7, #12]
 8107174:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8107176:	683b      	ldr	r3, [r7, #0]
 8107178:	685a      	ldr	r2, [r3, #4]
 810717a:	687b      	ldr	r3, [r7, #4]
 810717c:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 810717e:	687b      	ldr	r3, [r7, #4]
 8107180:	693a      	ldr	r2, [r7, #16]
 8107182:	621a      	str	r2, [r3, #32]
}
 8107184:	bf00      	nop
 8107186:	371c      	adds	r7, #28
 8107188:	46bd      	mov	sp, r7
 810718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810718e:	4770      	bx	lr
 8107190:	40010000 	.word	0x40010000
 8107194:	40010400 	.word	0x40010400
 8107198:	40014000 	.word	0x40014000
 810719c:	40014400 	.word	0x40014400
 81071a0:	40014800 	.word	0x40014800

081071a4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 81071a4:	b480      	push	{r7}
 81071a6:	b087      	sub	sp, #28
 81071a8:	af00      	add	r7, sp, #0
 81071aa:	6078      	str	r0, [r7, #4]
 81071ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 81071ae:	687b      	ldr	r3, [r7, #4]
 81071b0:	6a1b      	ldr	r3, [r3, #32]
 81071b2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 81071b6:	687b      	ldr	r3, [r7, #4]
 81071b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 81071ba:	687b      	ldr	r3, [r7, #4]
 81071bc:	6a1b      	ldr	r3, [r3, #32]
 81071be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 81071c0:	687b      	ldr	r3, [r7, #4]
 81071c2:	685b      	ldr	r3, [r3, #4]
 81071c4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 81071c6:	687b      	ldr	r3, [r7, #4]
 81071c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 81071ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 81071cc:	68fb      	ldr	r3, [r7, #12]
 81071ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 81071d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 81071d4:	683b      	ldr	r3, [r7, #0]
 81071d6:	681b      	ldr	r3, [r3, #0]
 81071d8:	021b      	lsls	r3, r3, #8
 81071da:	68fa      	ldr	r2, [r7, #12]
 81071dc:	4313      	orrs	r3, r2
 81071de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 81071e0:	693b      	ldr	r3, [r7, #16]
 81071e2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 81071e6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 81071e8:	683b      	ldr	r3, [r7, #0]
 81071ea:	689b      	ldr	r3, [r3, #8]
 81071ec:	051b      	lsls	r3, r3, #20
 81071ee:	693a      	ldr	r2, [r7, #16]
 81071f0:	4313      	orrs	r3, r2
 81071f2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 81071f4:	687b      	ldr	r3, [r7, #4]
 81071f6:	4a18      	ldr	r2, [pc, #96]	; (8107258 <TIM_OC6_SetConfig+0xb4>)
 81071f8:	4293      	cmp	r3, r2
 81071fa:	d00f      	beq.n	810721c <TIM_OC6_SetConfig+0x78>
 81071fc:	687b      	ldr	r3, [r7, #4]
 81071fe:	4a17      	ldr	r2, [pc, #92]	; (810725c <TIM_OC6_SetConfig+0xb8>)
 8107200:	4293      	cmp	r3, r2
 8107202:	d00b      	beq.n	810721c <TIM_OC6_SetConfig+0x78>
 8107204:	687b      	ldr	r3, [r7, #4]
 8107206:	4a16      	ldr	r2, [pc, #88]	; (8107260 <TIM_OC6_SetConfig+0xbc>)
 8107208:	4293      	cmp	r3, r2
 810720a:	d007      	beq.n	810721c <TIM_OC6_SetConfig+0x78>
 810720c:	687b      	ldr	r3, [r7, #4]
 810720e:	4a15      	ldr	r2, [pc, #84]	; (8107264 <TIM_OC6_SetConfig+0xc0>)
 8107210:	4293      	cmp	r3, r2
 8107212:	d003      	beq.n	810721c <TIM_OC6_SetConfig+0x78>
 8107214:	687b      	ldr	r3, [r7, #4]
 8107216:	4a14      	ldr	r2, [pc, #80]	; (8107268 <TIM_OC6_SetConfig+0xc4>)
 8107218:	4293      	cmp	r3, r2
 810721a:	d109      	bne.n	8107230 <TIM_OC6_SetConfig+0x8c>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 810721c:	697b      	ldr	r3, [r7, #20]
 810721e:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8107222:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8107224:	683b      	ldr	r3, [r7, #0]
 8107226:	695b      	ldr	r3, [r3, #20]
 8107228:	029b      	lsls	r3, r3, #10
 810722a:	697a      	ldr	r2, [r7, #20]
 810722c:	4313      	orrs	r3, r2
 810722e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8107230:	687b      	ldr	r3, [r7, #4]
 8107232:	697a      	ldr	r2, [r7, #20]
 8107234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8107236:	687b      	ldr	r3, [r7, #4]
 8107238:	68fa      	ldr	r2, [r7, #12]
 810723a:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 810723c:	683b      	ldr	r3, [r7, #0]
 810723e:	685a      	ldr	r2, [r3, #4]
 8107240:	687b      	ldr	r3, [r7, #4]
 8107242:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8107244:	687b      	ldr	r3, [r7, #4]
 8107246:	693a      	ldr	r2, [r7, #16]
 8107248:	621a      	str	r2, [r3, #32]
}
 810724a:	bf00      	nop
 810724c:	371c      	adds	r7, #28
 810724e:	46bd      	mov	sp, r7
 8107250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107254:	4770      	bx	lr
 8107256:	bf00      	nop
 8107258:	40010000 	.word	0x40010000
 810725c:	40010400 	.word	0x40010400
 8107260:	40014000 	.word	0x40014000
 8107264:	40014400 	.word	0x40014400
 8107268:	40014800 	.word	0x40014800

0810726c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 810726c:	b480      	push	{r7}
 810726e:	b087      	sub	sp, #28
 8107270:	af00      	add	r7, sp, #0
 8107272:	60f8      	str	r0, [r7, #12]
 8107274:	60b9      	str	r1, [r7, #8]
 8107276:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8107278:	68fb      	ldr	r3, [r7, #12]
 810727a:	6a1b      	ldr	r3, [r3, #32]
 810727c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 810727e:	68fb      	ldr	r3, [r7, #12]
 8107280:	6a1b      	ldr	r3, [r3, #32]
 8107282:	f023 0201 	bic.w	r2, r3, #1
 8107286:	68fb      	ldr	r3, [r7, #12]
 8107288:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 810728a:	68fb      	ldr	r3, [r7, #12]
 810728c:	699b      	ldr	r3, [r3, #24]
 810728e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8107290:	693b      	ldr	r3, [r7, #16]
 8107292:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8107296:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8107298:	687b      	ldr	r3, [r7, #4]
 810729a:	011b      	lsls	r3, r3, #4
 810729c:	693a      	ldr	r2, [r7, #16]
 810729e:	4313      	orrs	r3, r2
 81072a0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 81072a2:	697b      	ldr	r3, [r7, #20]
 81072a4:	f023 030a 	bic.w	r3, r3, #10
 81072a8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 81072aa:	697a      	ldr	r2, [r7, #20]
 81072ac:	68bb      	ldr	r3, [r7, #8]
 81072ae:	4313      	orrs	r3, r2
 81072b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 81072b2:	68fb      	ldr	r3, [r7, #12]
 81072b4:	693a      	ldr	r2, [r7, #16]
 81072b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 81072b8:	68fb      	ldr	r3, [r7, #12]
 81072ba:	697a      	ldr	r2, [r7, #20]
 81072bc:	621a      	str	r2, [r3, #32]
}
 81072be:	bf00      	nop
 81072c0:	371c      	adds	r7, #28
 81072c2:	46bd      	mov	sp, r7
 81072c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 81072c8:	4770      	bx	lr

081072ca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 81072ca:	b480      	push	{r7}
 81072cc:	b087      	sub	sp, #28
 81072ce:	af00      	add	r7, sp, #0
 81072d0:	60f8      	str	r0, [r7, #12]
 81072d2:	60b9      	str	r1, [r7, #8]
 81072d4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 81072d6:	68fb      	ldr	r3, [r7, #12]
 81072d8:	6a1b      	ldr	r3, [r3, #32]
 81072da:	f023 0210 	bic.w	r2, r3, #16
 81072de:	68fb      	ldr	r3, [r7, #12]
 81072e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 81072e2:	68fb      	ldr	r3, [r7, #12]
 81072e4:	699b      	ldr	r3, [r3, #24]
 81072e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 81072e8:	68fb      	ldr	r3, [r7, #12]
 81072ea:	6a1b      	ldr	r3, [r3, #32]
 81072ec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 81072ee:	697b      	ldr	r3, [r7, #20]
 81072f0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 81072f4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 81072f6:	687b      	ldr	r3, [r7, #4]
 81072f8:	031b      	lsls	r3, r3, #12
 81072fa:	697a      	ldr	r2, [r7, #20]
 81072fc:	4313      	orrs	r3, r2
 81072fe:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8107300:	693b      	ldr	r3, [r7, #16]
 8107302:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8107306:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8107308:	68bb      	ldr	r3, [r7, #8]
 810730a:	011b      	lsls	r3, r3, #4
 810730c:	693a      	ldr	r2, [r7, #16]
 810730e:	4313      	orrs	r3, r2
 8107310:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8107312:	68fb      	ldr	r3, [r7, #12]
 8107314:	697a      	ldr	r2, [r7, #20]
 8107316:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8107318:	68fb      	ldr	r3, [r7, #12]
 810731a:	693a      	ldr	r2, [r7, #16]
 810731c:	621a      	str	r2, [r3, #32]
}
 810731e:	bf00      	nop
 8107320:	371c      	adds	r7, #28
 8107322:	46bd      	mov	sp, r7
 8107324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107328:	4770      	bx	lr

0810732a <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 810732a:	b480      	push	{r7}
 810732c:	b085      	sub	sp, #20
 810732e:	af00      	add	r7, sp, #0
 8107330:	6078      	str	r0, [r7, #4]
 8107332:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8107334:	687b      	ldr	r3, [r7, #4]
 8107336:	689b      	ldr	r3, [r3, #8]
 8107338:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 810733a:	68fb      	ldr	r3, [r7, #12]
 810733c:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8107340:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107344:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8107346:	683a      	ldr	r2, [r7, #0]
 8107348:	68fb      	ldr	r3, [r7, #12]
 810734a:	4313      	orrs	r3, r2
 810734c:	f043 0307 	orr.w	r3, r3, #7
 8107350:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107352:	687b      	ldr	r3, [r7, #4]
 8107354:	68fa      	ldr	r2, [r7, #12]
 8107356:	609a      	str	r2, [r3, #8]
}
 8107358:	bf00      	nop
 810735a:	3714      	adds	r7, #20
 810735c:	46bd      	mov	sp, r7
 810735e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107362:	4770      	bx	lr

08107364 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8107364:	b480      	push	{r7}
 8107366:	b087      	sub	sp, #28
 8107368:	af00      	add	r7, sp, #0
 810736a:	60f8      	str	r0, [r7, #12]
 810736c:	60b9      	str	r1, [r7, #8]
 810736e:	607a      	str	r2, [r7, #4]
 8107370:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8107372:	68fb      	ldr	r3, [r7, #12]
 8107374:	689b      	ldr	r3, [r3, #8]
 8107376:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8107378:	697b      	ldr	r3, [r7, #20]
 810737a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 810737e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8107380:	683b      	ldr	r3, [r7, #0]
 8107382:	021a      	lsls	r2, r3, #8
 8107384:	687b      	ldr	r3, [r7, #4]
 8107386:	431a      	orrs	r2, r3
 8107388:	68bb      	ldr	r3, [r7, #8]
 810738a:	4313      	orrs	r3, r2
 810738c:	697a      	ldr	r2, [r7, #20]
 810738e:	4313      	orrs	r3, r2
 8107390:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8107392:	68fb      	ldr	r3, [r7, #12]
 8107394:	697a      	ldr	r2, [r7, #20]
 8107396:	609a      	str	r2, [r3, #8]
}
 8107398:	bf00      	nop
 810739a:	371c      	adds	r7, #28
 810739c:	46bd      	mov	sp, r7
 810739e:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073a2:	4770      	bx	lr

081073a4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 81073a4:	b480      	push	{r7}
 81073a6:	b087      	sub	sp, #28
 81073a8:	af00      	add	r7, sp, #0
 81073aa:	60f8      	str	r0, [r7, #12]
 81073ac:	60b9      	str	r1, [r7, #8]
 81073ae:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 81073b0:	68bb      	ldr	r3, [r7, #8]
 81073b2:	f003 031f 	and.w	r3, r3, #31
 81073b6:	2201      	movs	r2, #1
 81073b8:	fa02 f303 	lsl.w	r3, r2, r3
 81073bc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 81073be:	68fb      	ldr	r3, [r7, #12]
 81073c0:	6a1a      	ldr	r2, [r3, #32]
 81073c2:	697b      	ldr	r3, [r7, #20]
 81073c4:	43db      	mvns	r3, r3
 81073c6:	401a      	ands	r2, r3
 81073c8:	68fb      	ldr	r3, [r7, #12]
 81073ca:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 81073cc:	68fb      	ldr	r3, [r7, #12]
 81073ce:	6a1a      	ldr	r2, [r3, #32]
 81073d0:	68bb      	ldr	r3, [r7, #8]
 81073d2:	f003 031f 	and.w	r3, r3, #31
 81073d6:	6879      	ldr	r1, [r7, #4]
 81073d8:	fa01 f303 	lsl.w	r3, r1, r3
 81073dc:	431a      	orrs	r2, r3
 81073de:	68fb      	ldr	r3, [r7, #12]
 81073e0:	621a      	str	r2, [r3, #32]
}
 81073e2:	bf00      	nop
 81073e4:	371c      	adds	r7, #28
 81073e6:	46bd      	mov	sp, r7
 81073e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 81073ec:	4770      	bx	lr
	...

081073f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 81073f0:	b480      	push	{r7}
 81073f2:	b085      	sub	sp, #20
 81073f4:	af00      	add	r7, sp, #0
 81073f6:	6078      	str	r0, [r7, #4]
 81073f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 81073fa:	687b      	ldr	r3, [r7, #4]
 81073fc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107400:	2b01      	cmp	r3, #1
 8107402:	d101      	bne.n	8107408 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8107404:	2302      	movs	r3, #2
 8107406:	e068      	b.n	81074da <HAL_TIMEx_MasterConfigSynchronization+0xea>
 8107408:	687b      	ldr	r3, [r7, #4]
 810740a:	2201      	movs	r2, #1
 810740c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8107410:	687b      	ldr	r3, [r7, #4]
 8107412:	2202      	movs	r2, #2
 8107414:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8107418:	687b      	ldr	r3, [r7, #4]
 810741a:	681b      	ldr	r3, [r3, #0]
 810741c:	685b      	ldr	r3, [r3, #4]
 810741e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8107420:	687b      	ldr	r3, [r7, #4]
 8107422:	681b      	ldr	r3, [r3, #0]
 8107424:	689b      	ldr	r3, [r3, #8]
 8107426:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8107428:	687b      	ldr	r3, [r7, #4]
 810742a:	681b      	ldr	r3, [r3, #0]
 810742c:	4a2e      	ldr	r2, [pc, #184]	; (81074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810742e:	4293      	cmp	r3, r2
 8107430:	d004      	beq.n	810743c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8107432:	687b      	ldr	r3, [r7, #4]
 8107434:	681b      	ldr	r3, [r3, #0]
 8107436:	4a2d      	ldr	r2, [pc, #180]	; (81074ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 8107438:	4293      	cmp	r3, r2
 810743a:	d108      	bne.n	810744e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 810743c:	68fb      	ldr	r3, [r7, #12]
 810743e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8107442:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8107444:	683b      	ldr	r3, [r7, #0]
 8107446:	685b      	ldr	r3, [r3, #4]
 8107448:	68fa      	ldr	r2, [r7, #12]
 810744a:	4313      	orrs	r3, r2
 810744c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 810744e:	68fb      	ldr	r3, [r7, #12]
 8107450:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8107454:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8107456:	683b      	ldr	r3, [r7, #0]
 8107458:	681b      	ldr	r3, [r3, #0]
 810745a:	68fa      	ldr	r2, [r7, #12]
 810745c:	4313      	orrs	r3, r2
 810745e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8107460:	687b      	ldr	r3, [r7, #4]
 8107462:	681b      	ldr	r3, [r3, #0]
 8107464:	68fa      	ldr	r2, [r7, #12]
 8107466:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8107468:	687b      	ldr	r3, [r7, #4]
 810746a:	681b      	ldr	r3, [r3, #0]
 810746c:	4a1e      	ldr	r2, [pc, #120]	; (81074e8 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 810746e:	4293      	cmp	r3, r2
 8107470:	d01d      	beq.n	81074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107472:	687b      	ldr	r3, [r7, #4]
 8107474:	681b      	ldr	r3, [r3, #0]
 8107476:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 810747a:	d018      	beq.n	81074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810747c:	687b      	ldr	r3, [r7, #4]
 810747e:	681b      	ldr	r3, [r3, #0]
 8107480:	4a1b      	ldr	r2, [pc, #108]	; (81074f0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8107482:	4293      	cmp	r3, r2
 8107484:	d013      	beq.n	81074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107486:	687b      	ldr	r3, [r7, #4]
 8107488:	681b      	ldr	r3, [r3, #0]
 810748a:	4a1a      	ldr	r2, [pc, #104]	; (81074f4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 810748c:	4293      	cmp	r3, r2
 810748e:	d00e      	beq.n	81074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 8107490:	687b      	ldr	r3, [r7, #4]
 8107492:	681b      	ldr	r3, [r3, #0]
 8107494:	4a18      	ldr	r2, [pc, #96]	; (81074f8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8107496:	4293      	cmp	r3, r2
 8107498:	d009      	beq.n	81074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 810749a:	687b      	ldr	r3, [r7, #4]
 810749c:	681b      	ldr	r3, [r3, #0]
 810749e:	4a13      	ldr	r2, [pc, #76]	; (81074ec <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 81074a0:	4293      	cmp	r3, r2
 81074a2:	d004      	beq.n	81074ae <HAL_TIMEx_MasterConfigSynchronization+0xbe>
 81074a4:	687b      	ldr	r3, [r7, #4]
 81074a6:	681b      	ldr	r3, [r3, #0]
 81074a8:	4a14      	ldr	r2, [pc, #80]	; (81074fc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 81074aa:	4293      	cmp	r3, r2
 81074ac:	d10c      	bne.n	81074c8 <HAL_TIMEx_MasterConfigSynchronization+0xd8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 81074ae:	68bb      	ldr	r3, [r7, #8]
 81074b0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 81074b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 81074b6:	683b      	ldr	r3, [r7, #0]
 81074b8:	689b      	ldr	r3, [r3, #8]
 81074ba:	68ba      	ldr	r2, [r7, #8]
 81074bc:	4313      	orrs	r3, r2
 81074be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 81074c0:	687b      	ldr	r3, [r7, #4]
 81074c2:	681b      	ldr	r3, [r3, #0]
 81074c4:	68ba      	ldr	r2, [r7, #8]
 81074c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 81074c8:	687b      	ldr	r3, [r7, #4]
 81074ca:	2201      	movs	r2, #1
 81074cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 81074d0:	687b      	ldr	r3, [r7, #4]
 81074d2:	2200      	movs	r2, #0
 81074d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81074d8:	2300      	movs	r3, #0
}
 81074da:	4618      	mov	r0, r3
 81074dc:	3714      	adds	r7, #20
 81074de:	46bd      	mov	sp, r7
 81074e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 81074e4:	4770      	bx	lr
 81074e6:	bf00      	nop
 81074e8:	40010000 	.word	0x40010000
 81074ec:	40010400 	.word	0x40010400
 81074f0:	40000400 	.word	0x40000400
 81074f4:	40000800 	.word	0x40000800
 81074f8:	40000c00 	.word	0x40000c00
 81074fc:	40001800 	.word	0x40001800

08107500 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8107500:	b480      	push	{r7}
 8107502:	b085      	sub	sp, #20
 8107504:	af00      	add	r7, sp, #0
 8107506:	6078      	str	r0, [r7, #4]
 8107508:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 810750a:	2300      	movs	r3, #0
 810750c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 810750e:	687b      	ldr	r3, [r7, #4]
 8107510:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8107514:	2b01      	cmp	r3, #1
 8107516:	d101      	bne.n	810751c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8107518:	2302      	movs	r3, #2
 810751a:	e065      	b.n	81075e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe8>
 810751c:	687b      	ldr	r3, [r7, #4]
 810751e:	2201      	movs	r2, #1
 8107520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8107524:	68fb      	ldr	r3, [r7, #12]
 8107526:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 810752a:	683b      	ldr	r3, [r7, #0]
 810752c:	68db      	ldr	r3, [r3, #12]
 810752e:	4313      	orrs	r3, r2
 8107530:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8107532:	68fb      	ldr	r3, [r7, #12]
 8107534:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8107538:	683b      	ldr	r3, [r7, #0]
 810753a:	689b      	ldr	r3, [r3, #8]
 810753c:	4313      	orrs	r3, r2
 810753e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8107540:	68fb      	ldr	r3, [r7, #12]
 8107542:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8107546:	683b      	ldr	r3, [r7, #0]
 8107548:	685b      	ldr	r3, [r3, #4]
 810754a:	4313      	orrs	r3, r2
 810754c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 810754e:	68fb      	ldr	r3, [r7, #12]
 8107550:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8107554:	683b      	ldr	r3, [r7, #0]
 8107556:	681b      	ldr	r3, [r3, #0]
 8107558:	4313      	orrs	r3, r2
 810755a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 810755c:	68fb      	ldr	r3, [r7, #12]
 810755e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8107562:	683b      	ldr	r3, [r7, #0]
 8107564:	691b      	ldr	r3, [r3, #16]
 8107566:	4313      	orrs	r3, r2
 8107568:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 810756a:	68fb      	ldr	r3, [r7, #12]
 810756c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8107570:	683b      	ldr	r3, [r7, #0]
 8107572:	695b      	ldr	r3, [r3, #20]
 8107574:	4313      	orrs	r3, r2
 8107576:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8107578:	68fb      	ldr	r3, [r7, #12]
 810757a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 810757e:	683b      	ldr	r3, [r7, #0]
 8107580:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8107582:	4313      	orrs	r3, r2
 8107584:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8107586:	68fb      	ldr	r3, [r7, #12]
 8107588:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 810758c:	683b      	ldr	r3, [r7, #0]
 810758e:	699b      	ldr	r3, [r3, #24]
 8107590:	041b      	lsls	r3, r3, #16
 8107592:	4313      	orrs	r3, r2
 8107594:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8107596:	687b      	ldr	r3, [r7, #4]
 8107598:	681b      	ldr	r3, [r3, #0]
 810759a:	4a16      	ldr	r2, [pc, #88]	; (81075f4 <HAL_TIMEx_ConfigBreakDeadTime+0xf4>)
 810759c:	4293      	cmp	r3, r2
 810759e:	d004      	beq.n	81075aa <HAL_TIMEx_ConfigBreakDeadTime+0xaa>
 81075a0:	687b      	ldr	r3, [r7, #4]
 81075a2:	681b      	ldr	r3, [r3, #0]
 81075a4:	4a14      	ldr	r2, [pc, #80]	; (81075f8 <HAL_TIMEx_ConfigBreakDeadTime+0xf8>)
 81075a6:	4293      	cmp	r3, r2
 81075a8:	d115      	bne.n	81075d6 <HAL_TIMEx_ConfigBreakDeadTime+0xd6>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 81075aa:	68fb      	ldr	r3, [r7, #12]
 81075ac:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 81075b0:	683b      	ldr	r3, [r7, #0]
 81075b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 81075b4:	051b      	lsls	r3, r3, #20
 81075b6:	4313      	orrs	r3, r2
 81075b8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 81075ba:	68fb      	ldr	r3, [r7, #12]
 81075bc:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 81075c0:	683b      	ldr	r3, [r7, #0]
 81075c2:	69db      	ldr	r3, [r3, #28]
 81075c4:	4313      	orrs	r3, r2
 81075c6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 81075c8:	68fb      	ldr	r3, [r7, #12]
 81075ca:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 81075ce:	683b      	ldr	r3, [r7, #0]
 81075d0:	6a1b      	ldr	r3, [r3, #32]
 81075d2:	4313      	orrs	r3, r2
 81075d4:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 81075d6:	687b      	ldr	r3, [r7, #4]
 81075d8:	681b      	ldr	r3, [r3, #0]
 81075da:	68fa      	ldr	r2, [r7, #12]
 81075dc:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 81075de:	687b      	ldr	r3, [r7, #4]
 81075e0:	2200      	movs	r2, #0
 81075e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 81075e6:	2300      	movs	r3, #0
}
 81075e8:	4618      	mov	r0, r3
 81075ea:	3714      	adds	r7, #20
 81075ec:	46bd      	mov	sp, r7
 81075ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 81075f2:	4770      	bx	lr
 81075f4:	40010000 	.word	0x40010000
 81075f8:	40010400 	.word	0x40010400

081075fc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 81075fc:	b480      	push	{r7}
 81075fe:	b083      	sub	sp, #12
 8107600:	af00      	add	r7, sp, #0
 8107602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8107604:	bf00      	nop
 8107606:	370c      	adds	r7, #12
 8107608:	46bd      	mov	sp, r7
 810760a:	f85d 7b04 	ldr.w	r7, [sp], #4
 810760e:	4770      	bx	lr

08107610 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8107610:	b480      	push	{r7}
 8107612:	b083      	sub	sp, #12
 8107614:	af00      	add	r7, sp, #0
 8107616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8107618:	bf00      	nop
 810761a:	370c      	adds	r7, #12
 810761c:	46bd      	mov	sp, r7
 810761e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107622:	4770      	bx	lr

08107624 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8107624:	b480      	push	{r7}
 8107626:	b083      	sub	sp, #12
 8107628:	af00      	add	r7, sp, #0
 810762a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 810762c:	bf00      	nop
 810762e:	370c      	adds	r7, #12
 8107630:	46bd      	mov	sp, r7
 8107632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8107636:	4770      	bx	lr

08107638 <__libc_init_array>:
 8107638:	b570      	push	{r4, r5, r6, lr}
 810763a:	4d0d      	ldr	r5, [pc, #52]	; (8107670 <__libc_init_array+0x38>)
 810763c:	4c0d      	ldr	r4, [pc, #52]	; (8107674 <__libc_init_array+0x3c>)
 810763e:	1b64      	subs	r4, r4, r5
 8107640:	10a4      	asrs	r4, r4, #2
 8107642:	2600      	movs	r6, #0
 8107644:	42a6      	cmp	r6, r4
 8107646:	d109      	bne.n	810765c <__libc_init_array+0x24>
 8107648:	4d0b      	ldr	r5, [pc, #44]	; (8107678 <__libc_init_array+0x40>)
 810764a:	4c0c      	ldr	r4, [pc, #48]	; (810767c <__libc_init_array+0x44>)
 810764c:	f000 f820 	bl	8107690 <_init>
 8107650:	1b64      	subs	r4, r4, r5
 8107652:	10a4      	asrs	r4, r4, #2
 8107654:	2600      	movs	r6, #0
 8107656:	42a6      	cmp	r6, r4
 8107658:	d105      	bne.n	8107666 <__libc_init_array+0x2e>
 810765a:	bd70      	pop	{r4, r5, r6, pc}
 810765c:	f855 3b04 	ldr.w	r3, [r5], #4
 8107660:	4798      	blx	r3
 8107662:	3601      	adds	r6, #1
 8107664:	e7ee      	b.n	8107644 <__libc_init_array+0xc>
 8107666:	f855 3b04 	ldr.w	r3, [r5], #4
 810766a:	4798      	blx	r3
 810766c:	3601      	adds	r6, #1
 810766e:	e7f2      	b.n	8107656 <__libc_init_array+0x1e>
 8107670:	081076b8 	.word	0x081076b8
 8107674:	081076b8 	.word	0x081076b8
 8107678:	081076b8 	.word	0x081076b8
 810767c:	081076bc 	.word	0x081076bc

08107680 <memset>:
 8107680:	4402      	add	r2, r0
 8107682:	4603      	mov	r3, r0
 8107684:	4293      	cmp	r3, r2
 8107686:	d100      	bne.n	810768a <memset+0xa>
 8107688:	4770      	bx	lr
 810768a:	f803 1b01 	strb.w	r1, [r3], #1
 810768e:	e7f9      	b.n	8107684 <memset+0x4>

08107690 <_init>:
 8107690:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8107692:	bf00      	nop
 8107694:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8107696:	bc08      	pop	{r3}
 8107698:	469e      	mov	lr, r3
 810769a:	4770      	bx	lr

0810769c <_fini>:
 810769c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 810769e:	bf00      	nop
 81076a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 81076a2:	bc08      	pop	{r3}
 81076a4:	469e      	mov	lr, r3
 81076a6:	4770      	bx	lr
