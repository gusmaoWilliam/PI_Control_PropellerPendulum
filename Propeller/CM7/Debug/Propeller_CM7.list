
Propeller_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000824c  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000188  080084ec  080084ec  000184ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008674  08008674  00020134  2**0
                  CONTENTS
  4 .ARM          00000008  08008674  08008674  00018674  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800867c  0800867c  00020134  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800867c  0800867c  0001867c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008680  08008680  00018680  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  24000000  08008684  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 00000060  24000074  080086f8  00020074  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 00000060  240000d4  08008758  000200d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00000794  24000134  080087b8  00020134  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  240008c8  080087b8  000208c8  2**0
                  ALLOC
 13 .ARM.attributes 0000002e  00000000  00000000  00020134  2**0
                  CONTENTS, READONLY
 14 .debug_info   00027473  00000000  00000000  00020162  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 0000404d  00000000  00000000  000475d5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001120  00000000  00000000  0004b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00000fd8  00000000  00000000  0004c748  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003bc0d  00000000  00000000  0004d720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00017bfc  00000000  00000000  0008932d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0018294e  00000000  00000000  000a0f29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      00000053  00000000  00000000  00223877  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00004b44  00000000  00000000  002238cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000134 	.word	0x24000134
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080084d4 	.word	0x080084d4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000138 	.word	0x24000138
 80002dc:	080084d4 	.word	0x080084d4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b96e 	b.w	8000684 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9d08      	ldr	r5, [sp, #32]
 80003c6:	4604      	mov	r4, r0
 80003c8:	468c      	mov	ip, r1
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8083 	bne.w	80004d6 <__udivmoddi4+0x116>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4617      	mov	r7, r2
 80003d4:	d947      	bls.n	8000466 <__udivmoddi4+0xa6>
 80003d6:	fab2 f282 	clz	r2, r2
 80003da:	b142      	cbz	r2, 80003ee <__udivmoddi4+0x2e>
 80003dc:	f1c2 0020 	rsb	r0, r2, #32
 80003e0:	fa24 f000 	lsr.w	r0, r4, r0
 80003e4:	4091      	lsls	r1, r2
 80003e6:	4097      	lsls	r7, r2
 80003e8:	ea40 0c01 	orr.w	ip, r0, r1
 80003ec:	4094      	lsls	r4, r2
 80003ee:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80003f2:	0c23      	lsrs	r3, r4, #16
 80003f4:	fbbc f6f8 	udiv	r6, ip, r8
 80003f8:	fa1f fe87 	uxth.w	lr, r7
 80003fc:	fb08 c116 	mls	r1, r8, r6, ip
 8000400:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000404:	fb06 f10e 	mul.w	r1, r6, lr
 8000408:	4299      	cmp	r1, r3
 800040a:	d909      	bls.n	8000420 <__udivmoddi4+0x60>
 800040c:	18fb      	adds	r3, r7, r3
 800040e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000412:	f080 8119 	bcs.w	8000648 <__udivmoddi4+0x288>
 8000416:	4299      	cmp	r1, r3
 8000418:	f240 8116 	bls.w	8000648 <__udivmoddi4+0x288>
 800041c:	3e02      	subs	r6, #2
 800041e:	443b      	add	r3, r7
 8000420:	1a5b      	subs	r3, r3, r1
 8000422:	b2a4      	uxth	r4, r4
 8000424:	fbb3 f0f8 	udiv	r0, r3, r8
 8000428:	fb08 3310 	mls	r3, r8, r0, r3
 800042c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000430:	fb00 fe0e 	mul.w	lr, r0, lr
 8000434:	45a6      	cmp	lr, r4
 8000436:	d909      	bls.n	800044c <__udivmoddi4+0x8c>
 8000438:	193c      	adds	r4, r7, r4
 800043a:	f100 33ff 	add.w	r3, r0, #4294967295
 800043e:	f080 8105 	bcs.w	800064c <__udivmoddi4+0x28c>
 8000442:	45a6      	cmp	lr, r4
 8000444:	f240 8102 	bls.w	800064c <__udivmoddi4+0x28c>
 8000448:	3802      	subs	r0, #2
 800044a:	443c      	add	r4, r7
 800044c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000450:	eba4 040e 	sub.w	r4, r4, lr
 8000454:	2600      	movs	r6, #0
 8000456:	b11d      	cbz	r5, 8000460 <__udivmoddi4+0xa0>
 8000458:	40d4      	lsrs	r4, r2
 800045a:	2300      	movs	r3, #0
 800045c:	e9c5 4300 	strd	r4, r3, [r5]
 8000460:	4631      	mov	r1, r6
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	b902      	cbnz	r2, 800046a <__udivmoddi4+0xaa>
 8000468:	deff      	udf	#255	; 0xff
 800046a:	fab2 f282 	clz	r2, r2
 800046e:	2a00      	cmp	r2, #0
 8000470:	d150      	bne.n	8000514 <__udivmoddi4+0x154>
 8000472:	1bcb      	subs	r3, r1, r7
 8000474:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000478:	fa1f f887 	uxth.w	r8, r7
 800047c:	2601      	movs	r6, #1
 800047e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000482:	0c21      	lsrs	r1, r4, #16
 8000484:	fb0e 331c 	mls	r3, lr, ip, r3
 8000488:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800048c:	fb08 f30c 	mul.w	r3, r8, ip
 8000490:	428b      	cmp	r3, r1
 8000492:	d907      	bls.n	80004a4 <__udivmoddi4+0xe4>
 8000494:	1879      	adds	r1, r7, r1
 8000496:	f10c 30ff 	add.w	r0, ip, #4294967295
 800049a:	d202      	bcs.n	80004a2 <__udivmoddi4+0xe2>
 800049c:	428b      	cmp	r3, r1
 800049e:	f200 80e9 	bhi.w	8000674 <__udivmoddi4+0x2b4>
 80004a2:	4684      	mov	ip, r0
 80004a4:	1ac9      	subs	r1, r1, r3
 80004a6:	b2a3      	uxth	r3, r4
 80004a8:	fbb1 f0fe 	udiv	r0, r1, lr
 80004ac:	fb0e 1110 	mls	r1, lr, r0, r1
 80004b0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80004b4:	fb08 f800 	mul.w	r8, r8, r0
 80004b8:	45a0      	cmp	r8, r4
 80004ba:	d907      	bls.n	80004cc <__udivmoddi4+0x10c>
 80004bc:	193c      	adds	r4, r7, r4
 80004be:	f100 33ff 	add.w	r3, r0, #4294967295
 80004c2:	d202      	bcs.n	80004ca <__udivmoddi4+0x10a>
 80004c4:	45a0      	cmp	r8, r4
 80004c6:	f200 80d9 	bhi.w	800067c <__udivmoddi4+0x2bc>
 80004ca:	4618      	mov	r0, r3
 80004cc:	eba4 0408 	sub.w	r4, r4, r8
 80004d0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80004d4:	e7bf      	b.n	8000456 <__udivmoddi4+0x96>
 80004d6:	428b      	cmp	r3, r1
 80004d8:	d909      	bls.n	80004ee <__udivmoddi4+0x12e>
 80004da:	2d00      	cmp	r5, #0
 80004dc:	f000 80b1 	beq.w	8000642 <__udivmoddi4+0x282>
 80004e0:	2600      	movs	r6, #0
 80004e2:	e9c5 0100 	strd	r0, r1, [r5]
 80004e6:	4630      	mov	r0, r6
 80004e8:	4631      	mov	r1, r6
 80004ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ee:	fab3 f683 	clz	r6, r3
 80004f2:	2e00      	cmp	r6, #0
 80004f4:	d14a      	bne.n	800058c <__udivmoddi4+0x1cc>
 80004f6:	428b      	cmp	r3, r1
 80004f8:	d302      	bcc.n	8000500 <__udivmoddi4+0x140>
 80004fa:	4282      	cmp	r2, r0
 80004fc:	f200 80b8 	bhi.w	8000670 <__udivmoddi4+0x2b0>
 8000500:	1a84      	subs	r4, r0, r2
 8000502:	eb61 0103 	sbc.w	r1, r1, r3
 8000506:	2001      	movs	r0, #1
 8000508:	468c      	mov	ip, r1
 800050a:	2d00      	cmp	r5, #0
 800050c:	d0a8      	beq.n	8000460 <__udivmoddi4+0xa0>
 800050e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000512:	e7a5      	b.n	8000460 <__udivmoddi4+0xa0>
 8000514:	f1c2 0320 	rsb	r3, r2, #32
 8000518:	fa20 f603 	lsr.w	r6, r0, r3
 800051c:	4097      	lsls	r7, r2
 800051e:	fa01 f002 	lsl.w	r0, r1, r2
 8000522:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000526:	40d9      	lsrs	r1, r3
 8000528:	4330      	orrs	r0, r6
 800052a:	0c03      	lsrs	r3, r0, #16
 800052c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000530:	fa1f f887 	uxth.w	r8, r7
 8000534:	fb0e 1116 	mls	r1, lr, r6, r1
 8000538:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800053c:	fb06 f108 	mul.w	r1, r6, r8
 8000540:	4299      	cmp	r1, r3
 8000542:	fa04 f402 	lsl.w	r4, r4, r2
 8000546:	d909      	bls.n	800055c <__udivmoddi4+0x19c>
 8000548:	18fb      	adds	r3, r7, r3
 800054a:	f106 3cff 	add.w	ip, r6, #4294967295
 800054e:	f080 808d 	bcs.w	800066c <__udivmoddi4+0x2ac>
 8000552:	4299      	cmp	r1, r3
 8000554:	f240 808a 	bls.w	800066c <__udivmoddi4+0x2ac>
 8000558:	3e02      	subs	r6, #2
 800055a:	443b      	add	r3, r7
 800055c:	1a5b      	subs	r3, r3, r1
 800055e:	b281      	uxth	r1, r0
 8000560:	fbb3 f0fe 	udiv	r0, r3, lr
 8000564:	fb0e 3310 	mls	r3, lr, r0, r3
 8000568:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800056c:	fb00 f308 	mul.w	r3, r0, r8
 8000570:	428b      	cmp	r3, r1
 8000572:	d907      	bls.n	8000584 <__udivmoddi4+0x1c4>
 8000574:	1879      	adds	r1, r7, r1
 8000576:	f100 3cff 	add.w	ip, r0, #4294967295
 800057a:	d273      	bcs.n	8000664 <__udivmoddi4+0x2a4>
 800057c:	428b      	cmp	r3, r1
 800057e:	d971      	bls.n	8000664 <__udivmoddi4+0x2a4>
 8000580:	3802      	subs	r0, #2
 8000582:	4439      	add	r1, r7
 8000584:	1acb      	subs	r3, r1, r3
 8000586:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800058a:	e778      	b.n	800047e <__udivmoddi4+0xbe>
 800058c:	f1c6 0c20 	rsb	ip, r6, #32
 8000590:	fa03 f406 	lsl.w	r4, r3, r6
 8000594:	fa22 f30c 	lsr.w	r3, r2, ip
 8000598:	431c      	orrs	r4, r3
 800059a:	fa20 f70c 	lsr.w	r7, r0, ip
 800059e:	fa01 f306 	lsl.w	r3, r1, r6
 80005a2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80005a6:	fa21 f10c 	lsr.w	r1, r1, ip
 80005aa:	431f      	orrs	r7, r3
 80005ac:	0c3b      	lsrs	r3, r7, #16
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fa1f f884 	uxth.w	r8, r4
 80005b6:	fb0e 1119 	mls	r1, lr, r9, r1
 80005ba:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80005be:	fb09 fa08 	mul.w	sl, r9, r8
 80005c2:	458a      	cmp	sl, r1
 80005c4:	fa02 f206 	lsl.w	r2, r2, r6
 80005c8:	fa00 f306 	lsl.w	r3, r0, r6
 80005cc:	d908      	bls.n	80005e0 <__udivmoddi4+0x220>
 80005ce:	1861      	adds	r1, r4, r1
 80005d0:	f109 30ff 	add.w	r0, r9, #4294967295
 80005d4:	d248      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 80005d6:	458a      	cmp	sl, r1
 80005d8:	d946      	bls.n	8000668 <__udivmoddi4+0x2a8>
 80005da:	f1a9 0902 	sub.w	r9, r9, #2
 80005de:	4421      	add	r1, r4
 80005e0:	eba1 010a 	sub.w	r1, r1, sl
 80005e4:	b2bf      	uxth	r7, r7
 80005e6:	fbb1 f0fe 	udiv	r0, r1, lr
 80005ea:	fb0e 1110 	mls	r1, lr, r0, r1
 80005ee:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80005f2:	fb00 f808 	mul.w	r8, r0, r8
 80005f6:	45b8      	cmp	r8, r7
 80005f8:	d907      	bls.n	800060a <__udivmoddi4+0x24a>
 80005fa:	19e7      	adds	r7, r4, r7
 80005fc:	f100 31ff 	add.w	r1, r0, #4294967295
 8000600:	d22e      	bcs.n	8000660 <__udivmoddi4+0x2a0>
 8000602:	45b8      	cmp	r8, r7
 8000604:	d92c      	bls.n	8000660 <__udivmoddi4+0x2a0>
 8000606:	3802      	subs	r0, #2
 8000608:	4427      	add	r7, r4
 800060a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800060e:	eba7 0708 	sub.w	r7, r7, r8
 8000612:	fba0 8902 	umull	r8, r9, r0, r2
 8000616:	454f      	cmp	r7, r9
 8000618:	46c6      	mov	lr, r8
 800061a:	4649      	mov	r1, r9
 800061c:	d31a      	bcc.n	8000654 <__udivmoddi4+0x294>
 800061e:	d017      	beq.n	8000650 <__udivmoddi4+0x290>
 8000620:	b15d      	cbz	r5, 800063a <__udivmoddi4+0x27a>
 8000622:	ebb3 020e 	subs.w	r2, r3, lr
 8000626:	eb67 0701 	sbc.w	r7, r7, r1
 800062a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800062e:	40f2      	lsrs	r2, r6
 8000630:	ea4c 0202 	orr.w	r2, ip, r2
 8000634:	40f7      	lsrs	r7, r6
 8000636:	e9c5 2700 	strd	r2, r7, [r5]
 800063a:	2600      	movs	r6, #0
 800063c:	4631      	mov	r1, r6
 800063e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000642:	462e      	mov	r6, r5
 8000644:	4628      	mov	r0, r5
 8000646:	e70b      	b.n	8000460 <__udivmoddi4+0xa0>
 8000648:	4606      	mov	r6, r0
 800064a:	e6e9      	b.n	8000420 <__udivmoddi4+0x60>
 800064c:	4618      	mov	r0, r3
 800064e:	e6fd      	b.n	800044c <__udivmoddi4+0x8c>
 8000650:	4543      	cmp	r3, r8
 8000652:	d2e5      	bcs.n	8000620 <__udivmoddi4+0x260>
 8000654:	ebb8 0e02 	subs.w	lr, r8, r2
 8000658:	eb69 0104 	sbc.w	r1, r9, r4
 800065c:	3801      	subs	r0, #1
 800065e:	e7df      	b.n	8000620 <__udivmoddi4+0x260>
 8000660:	4608      	mov	r0, r1
 8000662:	e7d2      	b.n	800060a <__udivmoddi4+0x24a>
 8000664:	4660      	mov	r0, ip
 8000666:	e78d      	b.n	8000584 <__udivmoddi4+0x1c4>
 8000668:	4681      	mov	r9, r0
 800066a:	e7b9      	b.n	80005e0 <__udivmoddi4+0x220>
 800066c:	4666      	mov	r6, ip
 800066e:	e775      	b.n	800055c <__udivmoddi4+0x19c>
 8000670:	4630      	mov	r0, r6
 8000672:	e74a      	b.n	800050a <__udivmoddi4+0x14a>
 8000674:	f1ac 0c02 	sub.w	ip, ip, #2
 8000678:	4439      	add	r1, r7
 800067a:	e713      	b.n	80004a4 <__udivmoddi4+0xe4>
 800067c:	3802      	subs	r0, #2
 800067e:	443c      	add	r4, r7
 8000680:	e724      	b.n	80004cc <__udivmoddi4+0x10c>
 8000682:	bf00      	nop

08000684 <__aeabi_idiv0>:
 8000684:	4770      	bx	lr
 8000686:	bf00      	nop

08000688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 800068c:	4b3f      	ldr	r3, [pc, #252]	; (800078c <SystemInit+0x104>)
 800068e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000692:	4a3e      	ldr	r2, [pc, #248]	; (800078c <SystemInit+0x104>)
 8000694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800069c:	4b3b      	ldr	r3, [pc, #236]	; (800078c <SystemInit+0x104>)
 800069e:	691b      	ldr	r3, [r3, #16]
 80006a0:	4a3a      	ldr	r2, [pc, #232]	; (800078c <SystemInit+0x104>)
 80006a2:	f043 0310 	orr.w	r3, r3, #16
 80006a6:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006a8:	4b39      	ldr	r3, [pc, #228]	; (8000790 <SystemInit+0x108>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f003 030f 	and.w	r3, r3, #15
 80006b0:	2b06      	cmp	r3, #6
 80006b2:	d807      	bhi.n	80006c4 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b4:	4b36      	ldr	r3, [pc, #216]	; (8000790 <SystemInit+0x108>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f023 030f 	bic.w	r3, r3, #15
 80006bc:	4a34      	ldr	r2, [pc, #208]	; (8000790 <SystemInit+0x108>)
 80006be:	f043 0307 	orr.w	r3, r3, #7
 80006c2:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c4:	4b33      	ldr	r3, [pc, #204]	; (8000794 <SystemInit+0x10c>)
 80006c6:	681b      	ldr	r3, [r3, #0]
 80006c8:	4a32      	ldr	r2, [pc, #200]	; (8000794 <SystemInit+0x10c>)
 80006ca:	f043 0301 	orr.w	r3, r3, #1
 80006ce:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d0:	4b30      	ldr	r3, [pc, #192]	; (8000794 <SystemInit+0x10c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006d6:	4b2f      	ldr	r3, [pc, #188]	; (8000794 <SystemInit+0x10c>)
 80006d8:	681a      	ldr	r2, [r3, #0]
 80006da:	492e      	ldr	r1, [pc, #184]	; (8000794 <SystemInit+0x10c>)
 80006dc:	4b2e      	ldr	r3, [pc, #184]	; (8000798 <SystemInit+0x110>)
 80006de:	4013      	ands	r3, r2
 80006e0:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e2:	4b2b      	ldr	r3, [pc, #172]	; (8000790 <SystemInit+0x108>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	f003 0308 	and.w	r3, r3, #8
 80006ea:	2b00      	cmp	r3, #0
 80006ec:	d007      	beq.n	80006fe <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006ee:	4b28      	ldr	r3, [pc, #160]	; (8000790 <SystemInit+0x108>)
 80006f0:	681b      	ldr	r3, [r3, #0]
 80006f2:	f023 030f 	bic.w	r3, r3, #15
 80006f6:	4a26      	ldr	r2, [pc, #152]	; (8000790 <SystemInit+0x108>)
 80006f8:	f043 0307 	orr.w	r3, r3, #7
 80006fc:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80006fe:	4b25      	ldr	r3, [pc, #148]	; (8000794 <SystemInit+0x10c>)
 8000700:	2200      	movs	r2, #0
 8000702:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000704:	4b23      	ldr	r3, [pc, #140]	; (8000794 <SystemInit+0x10c>)
 8000706:	2200      	movs	r2, #0
 8000708:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070a:	4b22      	ldr	r3, [pc, #136]	; (8000794 <SystemInit+0x10c>)
 800070c:	2200      	movs	r2, #0
 800070e:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000710:	4b20      	ldr	r3, [pc, #128]	; (8000794 <SystemInit+0x10c>)
 8000712:	4a22      	ldr	r2, [pc, #136]	; (800079c <SystemInit+0x114>)
 8000714:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8000716:	4b1f      	ldr	r3, [pc, #124]	; (8000794 <SystemInit+0x10c>)
 8000718:	4a21      	ldr	r2, [pc, #132]	; (80007a0 <SystemInit+0x118>)
 800071a:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800071c:	4b1d      	ldr	r3, [pc, #116]	; (8000794 <SystemInit+0x10c>)
 800071e:	4a21      	ldr	r2, [pc, #132]	; (80007a4 <SystemInit+0x11c>)
 8000720:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000722:	4b1c      	ldr	r3, [pc, #112]	; (8000794 <SystemInit+0x10c>)
 8000724:	2200      	movs	r2, #0
 8000726:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8000728:	4b1a      	ldr	r3, [pc, #104]	; (8000794 <SystemInit+0x10c>)
 800072a:	4a1e      	ldr	r2, [pc, #120]	; (80007a4 <SystemInit+0x11c>)
 800072c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 800072e:	4b19      	ldr	r3, [pc, #100]	; (8000794 <SystemInit+0x10c>)
 8000730:	2200      	movs	r2, #0
 8000732:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000734:	4b17      	ldr	r3, [pc, #92]	; (8000794 <SystemInit+0x10c>)
 8000736:	4a1b      	ldr	r2, [pc, #108]	; (80007a4 <SystemInit+0x11c>)
 8000738:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073a:	4b16      	ldr	r3, [pc, #88]	; (8000794 <SystemInit+0x10c>)
 800073c:	2200      	movs	r2, #0
 800073e:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000740:	4b14      	ldr	r3, [pc, #80]	; (8000794 <SystemInit+0x10c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	4a13      	ldr	r2, [pc, #76]	; (8000794 <SystemInit+0x10c>)
 8000746:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800074c:	4b11      	ldr	r3, [pc, #68]	; (8000794 <SystemInit+0x10c>)
 800074e:	2200      	movs	r2, #0
 8000750:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000752:	4b15      	ldr	r3, [pc, #84]	; (80007a8 <SystemInit+0x120>)
 8000754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000756:	4a14      	ldr	r2, [pc, #80]	; (80007a8 <SystemInit+0x120>)
 8000758:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800075c:	6253      	str	r3, [r2, #36]	; 0x24


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800075e:	4b13      	ldr	r3, [pc, #76]	; (80007ac <SystemInit+0x124>)
 8000760:	681a      	ldr	r2, [r3, #0]
 8000762:	4b13      	ldr	r3, [pc, #76]	; (80007b0 <SystemInit+0x128>)
 8000764:	4013      	ands	r3, r2
 8000766:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076a:	d202      	bcs.n	8000772 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800076c:	4b11      	ldr	r3, [pc, #68]	; (80007b4 <SystemInit+0x12c>)
 800076e:	2201      	movs	r2, #1
 8000770:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000772:	4b11      	ldr	r3, [pc, #68]	; (80007b8 <SystemInit+0x130>)
 8000774:	f243 02d2 	movw	r2, #12498	; 0x30d2
 8000778:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800077a:	4b04      	ldr	r3, [pc, #16]	; (800078c <SystemInit+0x104>)
 800077c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000780:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8000782:	bf00      	nop
 8000784:	46bd      	mov	sp, r7
 8000786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800078a:	4770      	bx	lr
 800078c:	e000ed00 	.word	0xe000ed00
 8000790:	52002000 	.word	0x52002000
 8000794:	58024400 	.word	0x58024400
 8000798:	eaf6ed7f 	.word	0xeaf6ed7f
 800079c:	02020200 	.word	0x02020200
 80007a0:	01ff0000 	.word	0x01ff0000
 80007a4:	01010280 	.word	0x01010280
 80007a8:	580000c0 	.word	0x580000c0
 80007ac:	5c001000 	.word	0x5c001000
 80007b0:	ffff0000 	.word	0xffff0000
 80007b4:	51008108 	.word	0x51008108
 80007b8:	52004000 	.word	0x52004000

080007bc <MX_ETH_Init>:

ETH_HandleTypeDef heth;

/* ETH init function */
void MX_ETH_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE END ETH_Init 0 */

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 80007c0:	4b22      	ldr	r3, [pc, #136]	; (800084c <MX_ETH_Init+0x90>)
 80007c2:	4a23      	ldr	r2, [pc, #140]	; (8000850 <MX_ETH_Init+0x94>)
 80007c4:	601a      	str	r2, [r3, #0]
  heth.Init.MACAddr[0] =   0x00;
 80007c6:	4b21      	ldr	r3, [pc, #132]	; (800084c <MX_ETH_Init+0x90>)
 80007c8:	685b      	ldr	r3, [r3, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[1] =   0x80;
 80007ce:	4b1f      	ldr	r3, [pc, #124]	; (800084c <MX_ETH_Init+0x90>)
 80007d0:	685b      	ldr	r3, [r3, #4]
 80007d2:	3301      	adds	r3, #1
 80007d4:	2280      	movs	r2, #128	; 0x80
 80007d6:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[2] =   0xE1;
 80007d8:	4b1c      	ldr	r3, [pc, #112]	; (800084c <MX_ETH_Init+0x90>)
 80007da:	685b      	ldr	r3, [r3, #4]
 80007dc:	3302      	adds	r3, #2
 80007de:	22e1      	movs	r2, #225	; 0xe1
 80007e0:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[3] =   0x00;
 80007e2:	4b1a      	ldr	r3, [pc, #104]	; (800084c <MX_ETH_Init+0x90>)
 80007e4:	685b      	ldr	r3, [r3, #4]
 80007e6:	3303      	adds	r3, #3
 80007e8:	2200      	movs	r2, #0
 80007ea:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[4] =   0x00;
 80007ec:	4b17      	ldr	r3, [pc, #92]	; (800084c <MX_ETH_Init+0x90>)
 80007ee:	685b      	ldr	r3, [r3, #4]
 80007f0:	3304      	adds	r3, #4
 80007f2:	2200      	movs	r2, #0
 80007f4:	701a      	strb	r2, [r3, #0]
  heth.Init.MACAddr[5] =   0x00;
 80007f6:	4b15      	ldr	r3, [pc, #84]	; (800084c <MX_ETH_Init+0x90>)
 80007f8:	685b      	ldr	r3, [r3, #4]
 80007fa:	3305      	adds	r3, #5
 80007fc:	2200      	movs	r2, #0
 80007fe:	701a      	strb	r2, [r3, #0]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000800:	4b12      	ldr	r3, [pc, #72]	; (800084c <MX_ETH_Init+0x90>)
 8000802:	2201      	movs	r2, #1
 8000804:	721a      	strb	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000806:	4b11      	ldr	r3, [pc, #68]	; (800084c <MX_ETH_Init+0x90>)
 8000808:	4a12      	ldr	r2, [pc, #72]	; (8000854 <MX_ETH_Init+0x98>)
 800080a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800080c:	4b0f      	ldr	r3, [pc, #60]	; (800084c <MX_ETH_Init+0x90>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_ETH_Init+0x9c>)
 8000810:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000812:	4b0e      	ldr	r3, [pc, #56]	; (800084c <MX_ETH_Init+0x90>)
 8000814:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000818:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 800081a:	480c      	ldr	r0, [pc, #48]	; (800084c <MX_ETH_Init+0x90>)
 800081c:	f001 fc14 	bl	8002048 <HAL_ETH_Init>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_ETH_Init+0x6e>
  {
    Error_Handler();
 8000826:	f000 faad 	bl	8000d84 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800082a:	2234      	movs	r2, #52	; 0x34
 800082c:	2100      	movs	r1, #0
 800082e:	480b      	ldr	r0, [pc, #44]	; (800085c <MX_ETH_Init+0xa0>)
 8000830:	f007 f98c 	bl	8007b4c <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000834:	4b09      	ldr	r3, [pc, #36]	; (800085c <MX_ETH_Init+0xa0>)
 8000836:	2221      	movs	r2, #33	; 0x21
 8000838:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800083a:	4b08      	ldr	r3, [pc, #32]	; (800085c <MX_ETH_Init+0xa0>)
 800083c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000840:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000842:	4b06      	ldr	r3, [pc, #24]	; (800085c <MX_ETH_Init+0xa0>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000848:	bf00      	nop
 800084a:	bd80      	pop	{r7, pc}
 800084c:	24000160 	.word	0x24000160
 8000850:	40028000 	.word	0x40028000
 8000854:	240000d4 	.word	0x240000d4
 8000858:	24000074 	.word	0x24000074
 800085c:	240001e8 	.word	0x240001e8

08000860 <HAL_ETH_MspInit>:

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	b08e      	sub	sp, #56	; 0x38
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000868:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800086c:	2200      	movs	r2, #0
 800086e:	601a      	str	r2, [r3, #0]
 8000870:	605a      	str	r2, [r3, #4]
 8000872:	609a      	str	r2, [r3, #8]
 8000874:	60da      	str	r2, [r3, #12]
 8000876:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	681b      	ldr	r3, [r3, #0]
 800087c:	4a59      	ldr	r2, [pc, #356]	; (80009e4 <HAL_ETH_MspInit+0x184>)
 800087e:	4293      	cmp	r3, r2
 8000880:	f040 80ab 	bne.w	80009da <HAL_ETH_MspInit+0x17a>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* ETH clock enable */
    __HAL_RCC_ETH1MAC_CLK_ENABLE();
 8000884:	4b58      	ldr	r3, [pc, #352]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 8000886:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800088a:	4a57      	ldr	r2, [pc, #348]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 800088c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000890:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000894:	4b54      	ldr	r3, [pc, #336]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 8000896:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 800089a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800089e:	623b      	str	r3, [r7, #32]
 80008a0:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_ETH1TX_CLK_ENABLE();
 80008a2:	4b51      	ldr	r3, [pc, #324]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008a4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008a8:	4a4f      	ldr	r2, [pc, #316]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008aa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80008ae:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008b2:	4b4d      	ldr	r3, [pc, #308]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008b4:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80008bc:	61fb      	str	r3, [r7, #28]
 80008be:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_ETH1RX_CLK_ENABLE();
 80008c0:	4b49      	ldr	r3, [pc, #292]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008c2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008c6:	4a48      	ldr	r2, [pc, #288]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80008cc:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 80008d0:	4b45      	ldr	r3, [pc, #276]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008d2:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 80008d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80008da:	61bb      	str	r3, [r7, #24]
 80008dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008de:	4b42      	ldr	r3, [pc, #264]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008e4:	4a40      	ldr	r2, [pc, #256]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008e6:	f043 0304 	orr.w	r3, r3, #4
 80008ea:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80008ee:	4b3e      	ldr	r3, [pc, #248]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008f0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80008f4:	f003 0304 	and.w	r3, r3, #4
 80008f8:	617b      	str	r3, [r7, #20]
 80008fa:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80008fc:	4b3a      	ldr	r3, [pc, #232]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 80008fe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000902:	4a39      	ldr	r2, [pc, #228]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 8000904:	f043 0301 	orr.w	r3, r3, #1
 8000908:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800090c:	4b36      	ldr	r3, [pc, #216]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 800090e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	613b      	str	r3, [r7, #16]
 8000918:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800091a:	4b33      	ldr	r3, [pc, #204]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 800091c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000920:	4a31      	ldr	r2, [pc, #196]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 8000922:	f043 0302 	orr.w	r3, r3, #2
 8000926:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800092a:	4b2f      	ldr	r3, [pc, #188]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 800092c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000930:	f003 0302 	and.w	r3, r3, #2
 8000934:	60fb      	str	r3, [r7, #12]
 8000936:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000938:	4b2b      	ldr	r3, [pc, #172]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 800093a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800093e:	4a2a      	ldr	r2, [pc, #168]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 8000940:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000944:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000948:	4b27      	ldr	r3, [pc, #156]	; (80009e8 <HAL_ETH_MspInit+0x188>)
 800094a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 800094e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000952:	60bb      	str	r3, [r7, #8]
 8000954:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 8000956:	2332      	movs	r3, #50	; 0x32
 8000958:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800095a:	2302      	movs	r3, #2
 800095c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800095e:	2300      	movs	r3, #0
 8000960:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000962:	2300      	movs	r3, #0
 8000964:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000966:	230b      	movs	r3, #11
 8000968:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800096a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800096e:	4619      	mov	r1, r3
 8000970:	481e      	ldr	r0, [pc, #120]	; (80009ec <HAL_ETH_MspInit+0x18c>)
 8000972:	f001 ff7f 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 8000976:	2386      	movs	r3, #134	; 0x86
 8000978:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000982:	2300      	movs	r3, #0
 8000984:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000986:	230b      	movs	r3, #11
 8000988:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800098a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800098e:	4619      	mov	r1, r3
 8000990:	4817      	ldr	r0, [pc, #92]	; (80009f0 <HAL_ETH_MspInit+0x190>)
 8000992:	f001 ff6f 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800099a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099c:	2302      	movs	r3, #2
 800099e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a0:	2300      	movs	r3, #0
 80009a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009a4:	2300      	movs	r3, #0
 80009a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a8:	230b      	movs	r3, #11
 80009aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009b0:	4619      	mov	r1, r3
 80009b2:	4810      	ldr	r0, [pc, #64]	; (80009f4 <HAL_ETH_MspInit+0x194>)
 80009b4:	f001 ff5e 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 80009b8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80009bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009be:	2302      	movs	r3, #2
 80009c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c2:	2300      	movs	r3, #0
 80009c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c6:	2300      	movs	r3, #0
 80009c8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009ca:	230b      	movs	r3, #11
 80009cc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009ce:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80009d2:	4619      	mov	r1, r3
 80009d4:	4808      	ldr	r0, [pc, #32]	; (80009f8 <HAL_ETH_MspInit+0x198>)
 80009d6:	f001 ff4d 	bl	8002874 <HAL_GPIO_Init>

  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 80009da:	bf00      	nop
 80009dc:	3738      	adds	r7, #56	; 0x38
 80009de:	46bd      	mov	sp, r7
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	40028000 	.word	0x40028000
 80009e8:	58024400 	.word	0x58024400
 80009ec:	58020800 	.word	0x58020800
 80009f0:	58020000 	.word	0x58020000
 80009f4:	58020400 	.word	0x58020400
 80009f8:	58021800 	.word	0x58021800

080009fc <MX_GPIO_Init>:
     PC15-OSC32_OUT (OSC32_OUT)   ------> RCC_OSC32_OUT
     PH0-OSC_IN (PH0)   ------> RCC_OSC_IN
     PH1-OSC_OUT (PH1)   ------> RCC_OSC_OUT
*/
void MX_GPIO_Init(void)
{
 80009fc:	b480      	push	{r7}
 80009fe:	b087      	sub	sp, #28
 8000a00:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a02:	4b30      	ldr	r3, [pc, #192]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a04:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a08:	4a2e      	ldr	r2, [pc, #184]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a0a:	f043 0304 	orr.w	r3, r3, #4
 8000a0e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a12:	4b2c      	ldr	r3, [pc, #176]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a18:	f003 0304 	and.w	r3, r3, #4
 8000a1c:	617b      	str	r3, [r7, #20]
 8000a1e:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a20:	4b28      	ldr	r3, [pc, #160]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a26:	4a27      	ldr	r2, [pc, #156]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a2c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a30:	4b24      	ldr	r3, [pc, #144]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a3a:	613b      	str	r3, [r7, #16]
 8000a3c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b21      	ldr	r3, [pc, #132]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a44:	4a1f      	ldr	r2, [pc, #124]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a46:	f043 0301 	orr.w	r3, r3, #1
 8000a4a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a4e:	4b1d      	ldr	r3, [pc, #116]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a54:	f003 0301 	and.w	r3, r3, #1
 8000a58:	60fb      	str	r3, [r7, #12]
 8000a5a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a5c:	4b19      	ldr	r3, [pc, #100]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a62:	4a18      	ldr	r2, [pc, #96]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a64:	f043 0302 	orr.w	r3, r3, #2
 8000a68:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a6c:	4b15      	ldr	r3, [pc, #84]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a72:	f003 0302 	and.w	r3, r3, #2
 8000a76:	60bb      	str	r3, [r7, #8]
 8000a78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a7a:	4b12      	ldr	r3, [pc, #72]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a80:	4a10      	ldr	r2, [pc, #64]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a82:	f043 0308 	orr.w	r3, r3, #8
 8000a86:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a90:	f003 0308 	and.w	r3, r3, #8
 8000a94:	607b      	str	r3, [r7, #4]
 8000a96:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000a9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000a9e:	4a09      	ldr	r2, [pc, #36]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000aa0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000aa4:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000aa8:	4b06      	ldr	r3, [pc, #24]	; (8000ac4 <MX_GPIO_Init+0xc8>)
 8000aaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000aae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000ab2:	603b      	str	r3, [r7, #0]
 8000ab4:	683b      	ldr	r3, [r7, #0]

}
 8000ab6:	bf00      	nop
 8000ab8:	371c      	adds	r7, #28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
 8000ac2:	bf00      	nop
 8000ac4:	58024400 	.word	0x58024400

08000ac8 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  rx=1;
 8000ad0:	4b05      	ldr	r3, [pc, #20]	; (8000ae8 <HAL_UART_RxCpltCallback+0x20>)
 8000ad2:	2201      	movs	r2, #1
 8000ad4:	701a      	strb	r2, [r3, #0]
  HAL_UART_Receive_IT(&huart3, usart_rxbuffer, 4);
 8000ad6:	2204      	movs	r2, #4
 8000ad8:	4904      	ldr	r1, [pc, #16]	; (8000aec <HAL_UART_RxCpltCallback+0x24>)
 8000ada:	4805      	ldr	r0, [pc, #20]	; (8000af0 <HAL_UART_RxCpltCallback+0x28>)
 8000adc:	f004 fe3e 	bl	800575c <HAL_UART_Receive_IT>
}
 8000ae0:	bf00      	nop
 8000ae2:	3708      	adds	r7, #8
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}
 8000ae8:	24000150 	.word	0x24000150
 8000aec:	2400031c 	.word	0x2400031c
 8000af0:	2400041c 	.word	0x2400041c

08000af4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b084      	sub	sp, #16
 8000af8:	af02      	add	r7, sp, #8
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 8000afa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000afe:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000b00:	bf00      	nop
 8000b02:	4b55      	ldr	r3, [pc, #340]	; (8000c58 <main+0x164>)
 8000b04:	681b      	ldr	r3, [r3, #0]
 8000b06:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b0a:	2b00      	cmp	r3, #0
 8000b0c:	d004      	beq.n	8000b18 <main+0x24>
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	1e5a      	subs	r2, r3, #1
 8000b12:	607a      	str	r2, [r7, #4]
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	dcf4      	bgt.n	8000b02 <main+0xe>
  if ( timeout < 0 )
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	da01      	bge.n	8000b22 <main+0x2e>
  {
  Error_Handler();
 8000b1e:	f000 f931 	bl	8000d84 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b22:	f000 fb49 	bl	80011b8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b26:	f000 f8a7 	bl	8000c78 <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000b2a:	4b4b      	ldr	r3, [pc, #300]	; (8000c58 <main+0x164>)
 8000b2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b30:	4a49      	ldr	r2, [pc, #292]	; (8000c58 <main+0x164>)
 8000b32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000b36:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b3a:	4b47      	ldr	r3, [pc, #284]	; (8000c58 <main+0x164>)
 8000b3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b40:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000b44:	603b      	str	r3, [r7, #0]
 8000b46:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f002 f843 	bl	8002bd4 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000b4e:	2100      	movs	r1, #0
 8000b50:	2000      	movs	r0, #0
 8000b52:	f002 f859 	bl	8002c08 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000b56:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b5a:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000b5c:	bf00      	nop
 8000b5e:	4b3e      	ldr	r3, [pc, #248]	; (8000c58 <main+0x164>)
 8000b60:	681b      	ldr	r3, [r3, #0]
 8000b62:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8000b66:	2b00      	cmp	r3, #0
 8000b68:	d104      	bne.n	8000b74 <main+0x80>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	1e5a      	subs	r2, r3, #1
 8000b6e:	607a      	str	r2, [r7, #4]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	dcf4      	bgt.n	8000b5e <main+0x6a>
if ( timeout < 0 )
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	2b00      	cmp	r3, #0
 8000b78:	da01      	bge.n	8000b7e <main+0x8a>
{
Error_Handler();
 8000b7a:	f000 f903 	bl	8000d84 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b7e:	f7ff ff3d 	bl	80009fc <MX_GPIO_Init>
  MX_ETH_Init();
 8000b82:	f7ff fe1b 	bl	80007bc <MX_ETH_Init>
  MX_USART3_UART_Init();
 8000b86:	f000 f987 	bl	8000e98 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000b8a:	f000 fa3f 	bl	800100c <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart3, usart_rxbuffer, 4);
 8000b8e:	2204      	movs	r2, #4
 8000b90:	4932      	ldr	r1, [pc, #200]	; (8000c5c <main+0x168>)
 8000b92:	4833      	ldr	r0, [pc, #204]	; (8000c60 <main+0x16c>)
 8000b94:	f004 fde2 	bl	800575c <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  HAL_UART_Transmit(&huart3, (uint8_t*)"Iniciando...\r\n", 16, 10);
 8000b98:	230a      	movs	r3, #10
 8000b9a:	2210      	movs	r2, #16
 8000b9c:	4931      	ldr	r1, [pc, #196]	; (8000c64 <main+0x170>)
 8000b9e:	4830      	ldr	r0, [pc, #192]	; (8000c60 <main+0x16c>)
 8000ba0:	f004 fd46 	bl	8005630 <HAL_UART_Transmit>

  shared_data_ptr->Ts_time_elapsed_from4to7=0;
 8000ba4:	4b30      	ldr	r3, [pc, #192]	; (8000c68 <main+0x174>)
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	801a      	strh	r2, [r3, #0]
  shared_data_ptr->adc_average_from4to7=0;
 8000baa:	4b2f      	ldr	r3, [pc, #188]	; (8000c68 <main+0x174>)
 8000bac:	2200      	movs	r2, #0
 8000bae:	805a      	strh	r2, [r3, #2]
  shared_data_ptr->pwm_from4to7=0;
 8000bb0:	4b2d      	ldr	r3, [pc, #180]	; (8000c68 <main+0x174>)
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	711a      	strb	r2, [r3, #4]
  shared_data_ptr->setpoint_from7to4=0;
 8000bb6:	4b2c      	ldr	r3, [pc, #176]	; (8000c68 <main+0x174>)
 8000bb8:	2200      	movs	r2, #0
 8000bba:	715a      	strb	r2, [r3, #5]

  while (1)
  {
    if(shared_data_ptr->Ts_time_elapsed_from4to7)
 8000bbc:	4b2a      	ldr	r3, [pc, #168]	; (8000c68 <main+0x174>)
 8000bbe:	881b      	ldrh	r3, [r3, #0]
 8000bc0:	b29b      	uxth	r3, r3
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d01d      	beq.n	8000c02 <main+0x10e>
    {
      shared_data_ptr->Ts_time_elapsed_from4to7 = 0;
 8000bc6:	4b28      	ldr	r3, [pc, #160]	; (8000c68 <main+0x174>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	801a      	strh	r2, [r3, #0]
      sprintf(usart_txbuffer, "%u,%u,%u\n", shared_data_ptr->adc_average_from4to7, shared_data_ptr->setpoint_from7to4,shared_data_ptr->pwm_from4to7);
 8000bcc:	4b26      	ldr	r3, [pc, #152]	; (8000c68 <main+0x174>)
 8000bce:	885b      	ldrh	r3, [r3, #2]
 8000bd0:	b29b      	uxth	r3, r3
 8000bd2:	461a      	mov	r2, r3
 8000bd4:	4b24      	ldr	r3, [pc, #144]	; (8000c68 <main+0x174>)
 8000bd6:	795b      	ldrb	r3, [r3, #5]
 8000bd8:	b2db      	uxtb	r3, r3
 8000bda:	4619      	mov	r1, r3
 8000bdc:	4b22      	ldr	r3, [pc, #136]	; (8000c68 <main+0x174>)
 8000bde:	791b      	ldrb	r3, [r3, #4]
 8000be0:	b2db      	uxtb	r3, r3
 8000be2:	9300      	str	r3, [sp, #0]
 8000be4:	460b      	mov	r3, r1
 8000be6:	4921      	ldr	r1, [pc, #132]	; (8000c6c <main+0x178>)
 8000be8:	4821      	ldr	r0, [pc, #132]	; (8000c70 <main+0x17c>)
 8000bea:	f006 ffb7 	bl	8007b5c <siprintf>
      HAL_UART_Transmit(&huart3, (uint8_t*)usart_txbuffer, strlen(usart_txbuffer), 10);
 8000bee:	4820      	ldr	r0, [pc, #128]	; (8000c70 <main+0x17c>)
 8000bf0:	f7ff fb76 	bl	80002e0 <strlen>
 8000bf4:	4603      	mov	r3, r0
 8000bf6:	b29a      	uxth	r2, r3
 8000bf8:	230a      	movs	r3, #10
 8000bfa:	491d      	ldr	r1, [pc, #116]	; (8000c70 <main+0x17c>)
 8000bfc:	4818      	ldr	r0, [pc, #96]	; (8000c60 <main+0x16c>)
 8000bfe:	f004 fd17 	bl	8005630 <HAL_UART_Transmit>
    }
    if(rx)
 8000c02:	4b1c      	ldr	r3, [pc, #112]	; (8000c74 <main+0x180>)
 8000c04:	781b      	ldrb	r3, [r3, #0]
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d021      	beq.n	8000c4e <main+0x15a>
    {
      rx=0;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <main+0x180>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	701a      	strb	r2, [r3, #0]
      switch(usart_rxbuffer[0])
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <main+0x168>)
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	2b52      	cmp	r3, #82	; 0x52
 8000c16:	d00c      	beq.n	8000c32 <main+0x13e>
 8000c18:	2b53      	cmp	r3, #83	; 0x53
 8000c1a:	d11a      	bne.n	8000c52 <main+0x15e>
      {
        case 'S':
          usart_rxbuffer[0] = '0';
 8000c1c:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <main+0x168>)
 8000c1e:	2230      	movs	r2, #48	; 0x30
 8000c20:	701a      	strb	r2, [r3, #0]
          shared_data_ptr->setpoint_from7to4 = atoi((uint8_t*)usart_rxbuffer);
 8000c22:	480e      	ldr	r0, [pc, #56]	; (8000c5c <main+0x168>)
 8000c24:	f006 ff64 	bl	8007af0 <atoi>
 8000c28:	4602      	mov	r2, r0
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <main+0x174>)
 8000c2c:	b2d2      	uxtb	r2, r2
 8000c2e:	715a      	strb	r2, [r3, #5]
          break;
 8000c30:	e010      	b.n	8000c54 <main+0x160>
        case 'R':
          usart_rxbuffer[0] = '0';
 8000c32:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <main+0x168>)
 8000c34:	2230      	movs	r2, #48	; 0x30
 8000c36:	701a      	strb	r2, [r3, #0]
          shared_data_ptr->setpoint_from7to4 = atoi((uint8_t*)usart_rxbuffer);
 8000c38:	4808      	ldr	r0, [pc, #32]	; (8000c5c <main+0x168>)
 8000c3a:	f006 ff59 	bl	8007af0 <atoi>
 8000c3e:	4602      	mov	r2, r0
 8000c40:	4b09      	ldr	r3, [pc, #36]	; (8000c68 <main+0x174>)
 8000c42:	b2d2      	uxtb	r2, r2
 8000c44:	715a      	strb	r2, [r3, #5]
          shared_data_ptr->flagR_from7to4 = 1;
 8000c46:	4b08      	ldr	r3, [pc, #32]	; (8000c68 <main+0x174>)
 8000c48:	2201      	movs	r2, #1
 8000c4a:	719a      	strb	r2, [r3, #6]
        break;
 8000c4c:	e002      	b.n	8000c54 <main+0x160>
        default:
        break;
      }
    }
 8000c4e:	bf00      	nop
 8000c50:	e7b4      	b.n	8000bbc <main+0xc8>
        break;
 8000c52:	bf00      	nop
    if(shared_data_ptr->Ts_time_elapsed_from4to7)
 8000c54:	e7b2      	b.n	8000bbc <main+0xc8>
 8000c56:	bf00      	nop
 8000c58:	58024400 	.word	0x58024400
 8000c5c:	2400031c 	.word	0x2400031c
 8000c60:	2400041c 	.word	0x2400041c
 8000c64:	080084ec 	.word	0x080084ec
 8000c68:	38001000 	.word	0x38001000
 8000c6c:	080084fc 	.word	0x080084fc
 8000c70:	2400021c 	.word	0x2400021c
 8000c74:	24000150 	.word	0x24000150

08000c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b09c      	sub	sp, #112	; 0x70
 8000c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	224c      	movs	r2, #76	; 0x4c
 8000c84:	2100      	movs	r1, #0
 8000c86:	4618      	mov	r0, r3
 8000c88:	f006 ff60 	bl	8007b4c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c8c:	1d3b      	adds	r3, r7, #4
 8000c8e:	2220      	movs	r2, #32
 8000c90:	2100      	movs	r1, #0
 8000c92:	4618      	mov	r0, r3
 8000c94:	f006 ff5a 	bl	8007b4c <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000c98:	2004      	movs	r0, #4
 8000c9a:	f002 f911 	bl	8002ec0 <HAL_PWREx_ConfigSupply>
  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	603b      	str	r3, [r7, #0]
 8000ca2:	4b35      	ldr	r3, [pc, #212]	; (8000d78 <SystemClock_Config+0x100>)
 8000ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000ca6:	4a34      	ldr	r2, [pc, #208]	; (8000d78 <SystemClock_Config+0x100>)
 8000ca8:	f023 0301 	bic.w	r3, r3, #1
 8000cac:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000cae:	4b32      	ldr	r3, [pc, #200]	; (8000d78 <SystemClock_Config+0x100>)
 8000cb0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	603b      	str	r3, [r7, #0]
 8000cb8:	4b30      	ldr	r3, [pc, #192]	; (8000d7c <SystemClock_Config+0x104>)
 8000cba:	699b      	ldr	r3, [r3, #24]
 8000cbc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000cc0:	4a2e      	ldr	r2, [pc, #184]	; (8000d7c <SystemClock_Config+0x104>)
 8000cc2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000cc6:	6193      	str	r3, [r2, #24]
 8000cc8:	4b2c      	ldr	r3, [pc, #176]	; (8000d7c <SystemClock_Config+0x104>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000cd0:	603b      	str	r3, [r7, #0]
 8000cd2:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000cd4:	bf00      	nop
 8000cd6:	4b29      	ldr	r3, [pc, #164]	; (8000d7c <SystemClock_Config+0x104>)
 8000cd8:	699b      	ldr	r3, [r3, #24]
 8000cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000cde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000ce2:	d1f8      	bne.n	8000cd6 <SystemClock_Config+0x5e>
  /** Macro to configure the PLL clock source
  */
  __HAL_RCC_PLL_PLLSOURCE_CONFIG(RCC_PLLSOURCE_HSE);
 8000ce4:	4b26      	ldr	r3, [pc, #152]	; (8000d80 <SystemClock_Config+0x108>)
 8000ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000ce8:	f023 0303 	bic.w	r3, r3, #3
 8000cec:	4a24      	ldr	r2, [pc, #144]	; (8000d80 <SystemClock_Config+0x108>)
 8000cee:	f043 0302 	orr.w	r3, r3, #2
 8000cf2:	6293      	str	r3, [r2, #40]	; 0x28
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000cf8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000cfc:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000cfe:	2302      	movs	r3, #2
 8000d00:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d02:	2302      	movs	r3, #2
 8000d04:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000d06:	2301      	movs	r3, #1
 8000d08:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 30;
 8000d0a:	231e      	movs	r3, #30
 8000d0c:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000d0e:	2302      	movs	r3, #2
 8000d10:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000d12:	2304      	movs	r3, #4
 8000d14:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000d16:	2302      	movs	r3, #2
 8000d18:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 8000d1a:	230c      	movs	r3, #12
 8000d1c:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000d1e:	2300      	movs	r3, #0
 8000d20:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000d22:	2300      	movs	r3, #0
 8000d24:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d26:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	f002 f932 	bl	8002f94 <HAL_RCC_OscConfig>
 8000d30:	4603      	mov	r3, r0
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	d001      	beq.n	8000d3a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000d36:	f000 f825 	bl	8000d84 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d3a:	233f      	movs	r3, #63	; 0x3f
 8000d3c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d3e:	2303      	movs	r3, #3
 8000d40:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000d42:	2300      	movs	r3, #0
 8000d44:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000d4e:	2340      	movs	r3, #64	; 0x40
 8000d50:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV1;
 8000d52:	2300      	movs	r3, #0
 8000d54:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 8000d56:	2300      	movs	r3, #0
 8000d58:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d5a:	1d3b      	adds	r3, r7, #4
 8000d5c:	2102      	movs	r1, #2
 8000d5e:	4618      	mov	r0, r3
 8000d60:	f002 fd28 	bl	80037b4 <HAL_RCC_ClockConfig>
 8000d64:	4603      	mov	r3, r0
 8000d66:	2b00      	cmp	r3, #0
 8000d68:	d001      	beq.n	8000d6e <SystemClock_Config+0xf6>
  {
    Error_Handler();
 8000d6a:	f000 f80b 	bl	8000d84 <Error_Handler>
  }
}
 8000d6e:	bf00      	nop
 8000d70:	3770      	adds	r7, #112	; 0x70
 8000d72:	46bd      	mov	sp, r7
 8000d74:	bd80      	pop	{r7, pc}
 8000d76:	bf00      	nop
 8000d78:	58000400 	.word	0x58000400
 8000d7c:	58024800 	.word	0x58024800
 8000d80:	58024400 	.word	0x58024400

08000d84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d88:	b672      	cpsid	i
}
 8000d8a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d8c:	e7fe      	b.n	8000d8c <Error_Handler+0x8>
	...

08000d90 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	b083      	sub	sp, #12
 8000d94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d96:	4b0a      	ldr	r3, [pc, #40]	; (8000dc0 <HAL_MspInit+0x30>)
 8000d98:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000d9c:	4a08      	ldr	r2, [pc, #32]	; (8000dc0 <HAL_MspInit+0x30>)
 8000d9e:	f043 0302 	orr.w	r3, r3, #2
 8000da2:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <HAL_MspInit+0x30>)
 8000da8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000dac:	f003 0302 	and.w	r3, r3, #2
 8000db0:	607b      	str	r3, [r7, #4]
 8000db2:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	58024400 	.word	0x58024400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000dc8:	e7fe      	b.n	8000dc8 <NMI_Handler+0x4>

08000dca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dce:	e7fe      	b.n	8000dce <HardFault_Handler+0x4>

08000dd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd4:	e7fe      	b.n	8000dd4 <MemManage_Handler+0x4>

08000dd6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000dd6:	b480      	push	{r7}
 8000dd8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000dda:	e7fe      	b.n	8000dda <BusFault_Handler+0x4>

08000ddc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de0:	e7fe      	b.n	8000de0 <UsageFault_Handler+0x4>

08000de2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000de2:	b480      	push	{r7}
 8000de4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000de6:	bf00      	nop
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000df0:	b480      	push	{r7}
 8000df2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000df4:	bf00      	nop
 8000df6:	46bd      	mov	sp, r7
 8000df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dfc:	4770      	bx	lr

08000dfe <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dfe:	b480      	push	{r7}
 8000e00:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e02:	bf00      	nop
 8000e04:	46bd      	mov	sp, r7
 8000e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0a:	4770      	bx	lr

08000e0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e10:	f000 fa44 	bl	800129c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e14:	bf00      	nop
 8000e16:	bd80      	pop	{r7, pc}

08000e18 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000e1c:	4802      	ldr	r0, [pc, #8]	; (8000e28 <USART3_IRQHandler+0x10>)
 8000e1e:	f004 fce3 	bl	80057e8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000e22:	bf00      	nop
 8000e24:	bd80      	pop	{r7, pc}
 8000e26:	bf00      	nop
 8000e28:	2400041c 	.word	0x2400041c

08000e2c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b086      	sub	sp, #24
 8000e30:	af00      	add	r7, sp, #0
 8000e32:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e34:	4a14      	ldr	r2, [pc, #80]	; (8000e88 <_sbrk+0x5c>)
 8000e36:	4b15      	ldr	r3, [pc, #84]	; (8000e8c <_sbrk+0x60>)
 8000e38:	1ad3      	subs	r3, r2, r3
 8000e3a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e3c:	697b      	ldr	r3, [r7, #20]
 8000e3e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e40:	4b13      	ldr	r3, [pc, #76]	; (8000e90 <_sbrk+0x64>)
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	2b00      	cmp	r3, #0
 8000e46:	d102      	bne.n	8000e4e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e48:	4b11      	ldr	r3, [pc, #68]	; (8000e90 <_sbrk+0x64>)
 8000e4a:	4a12      	ldr	r2, [pc, #72]	; (8000e94 <_sbrk+0x68>)
 8000e4c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e4e:	4b10      	ldr	r3, [pc, #64]	; (8000e90 <_sbrk+0x64>)
 8000e50:	681a      	ldr	r2, [r3, #0]
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	4413      	add	r3, r2
 8000e56:	693a      	ldr	r2, [r7, #16]
 8000e58:	429a      	cmp	r2, r3
 8000e5a:	d207      	bcs.n	8000e6c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e5c:	f006 fe4c 	bl	8007af8 <__errno>
 8000e60:	4603      	mov	r3, r0
 8000e62:	220c      	movs	r2, #12
 8000e64:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	e009      	b.n	8000e80 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e6c:	4b08      	ldr	r3, [pc, #32]	; (8000e90 <_sbrk+0x64>)
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e72:	4b07      	ldr	r3, [pc, #28]	; (8000e90 <_sbrk+0x64>)
 8000e74:	681a      	ldr	r2, [r3, #0]
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	4413      	add	r3, r2
 8000e7a:	4a05      	ldr	r2, [pc, #20]	; (8000e90 <_sbrk+0x64>)
 8000e7c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e7e:	68fb      	ldr	r3, [r7, #12]
}
 8000e80:	4618      	mov	r0, r3
 8000e82:	3718      	adds	r7, #24
 8000e84:	46bd      	mov	sp, r7
 8000e86:	bd80      	pop	{r7, pc}
 8000e88:	24040000 	.word	0x24040000
 8000e8c:	00000400 	.word	0x00000400
 8000e90:	24000154 	.word	0x24000154
 8000e94:	240008c8 	.word	0x240008c8

08000e98 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e9c:	4b22      	ldr	r3, [pc, #136]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000e9e:	4a23      	ldr	r2, [pc, #140]	; (8000f2c <MX_USART3_UART_Init+0x94>)
 8000ea0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 256000;
 8000ea2:	4b21      	ldr	r3, [pc, #132]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ea4:	f44f 327a 	mov.w	r2, #256000	; 0x3e800
 8000ea8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000eaa:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000eb0:	4b1d      	ldr	r3, [pc, #116]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000eb6:	4b1c      	ldr	r3, [pc, #112]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000ebc:	4b1a      	ldr	r3, [pc, #104]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ebe:	220c      	movs	r2, #12
 8000ec0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ec2:	4b19      	ldr	r3, [pc, #100]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ec8:	4b17      	ldr	r3, [pc, #92]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000eca:	2200      	movs	r2, #0
 8000ecc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ece:	4b16      	ldr	r3, [pc, #88]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000ed4:	4b14      	ldr	r3, [pc, #80]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ed6:	2200      	movs	r2, #0
 8000ed8:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000eda:	4b13      	ldr	r3, [pc, #76]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000edc:	2200      	movs	r2, #0
 8000ede:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000ee0:	4811      	ldr	r0, [pc, #68]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ee2:	f004 fb55 	bl	8005590 <HAL_UART_Init>
 8000ee6:	4603      	mov	r3, r0
 8000ee8:	2b00      	cmp	r3, #0
 8000eea:	d001      	beq.n	8000ef0 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8000eec:	f7ff ff4a 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000ef0:	2100      	movs	r1, #0
 8000ef2:	480d      	ldr	r0, [pc, #52]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000ef4:	f006 fa73 	bl	80073de <HAL_UARTEx_SetTxFifoThreshold>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8000efe:	f7ff ff41 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f02:	2100      	movs	r1, #0
 8000f04:	4808      	ldr	r0, [pc, #32]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000f06:	f006 faa8 	bl	800745a <HAL_UARTEx_SetRxFifoThreshold>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8000f10:	f7ff ff38 	bl	8000d84 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8000f14:	4804      	ldr	r0, [pc, #16]	; (8000f28 <MX_USART3_UART_Init+0x90>)
 8000f16:	f006 fa29 	bl	800736c <HAL_UARTEx_DisableFifoMode>
 8000f1a:	4603      	mov	r3, r0
 8000f1c:	2b00      	cmp	r3, #0
 8000f1e:	d001      	beq.n	8000f24 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8000f20:	f7ff ff30 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}
 8000f28:	2400041c 	.word	0x2400041c
 8000f2c:	40004800 	.word	0x40004800

08000f30 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b0b8      	sub	sp, #224	; 0xe0
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f38:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
 8000f42:	609a      	str	r2, [r3, #8]
 8000f44:	60da      	str	r2, [r3, #12]
 8000f46:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	22bc      	movs	r2, #188	; 0xbc
 8000f4e:	2100      	movs	r1, #0
 8000f50:	4618      	mov	r0, r3
 8000f52:	f006 fdfb 	bl	8007b4c <memset>
  if(uartHandle->Instance==USART3)
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	4a29      	ldr	r2, [pc, #164]	; (8001000 <HAL_UART_MspInit+0xd0>)
 8000f5c:	4293      	cmp	r3, r2
 8000f5e:	d14a      	bne.n	8000ff6 <HAL_UART_MspInit+0xc6>
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8000f60:	2302      	movs	r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart234578ClockSelection = RCC_USART234578CLKSOURCE_D2PCLK1;
 8000f64:	2300      	movs	r3, #0
 8000f66:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000f6a:	f107 0310 	add.w	r3, r7, #16
 8000f6e:	4618      	mov	r0, r3
 8000f70:	f002 ffac 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f7a:	f7ff ff03 	bl	8000d84 <Error_Handler>
    }

    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000f7e:	4b21      	ldr	r3, [pc, #132]	; (8001004 <HAL_UART_MspInit+0xd4>)
 8000f80:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f84:	4a1f      	ldr	r2, [pc, #124]	; (8001004 <HAL_UART_MspInit+0xd4>)
 8000f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000f8a:	f8c2 30e8 	str.w	r3, [r2, #232]	; 0xe8
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <HAL_UART_MspInit+0xd4>)
 8000f90:	f8d3 30e8 	ldr.w	r3, [r3, #232]	; 0xe8
 8000f94:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000f98:	60fb      	str	r3, [r7, #12]
 8000f9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f9c:	4b19      	ldr	r3, [pc, #100]	; (8001004 <HAL_UART_MspInit+0xd4>)
 8000f9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fa2:	4a18      	ldr	r2, [pc, #96]	; (8001004 <HAL_UART_MspInit+0xd4>)
 8000fa4:	f043 0308 	orr.w	r3, r3, #8
 8000fa8:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <HAL_UART_MspInit+0xd4>)
 8000fae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000fb2:	f003 0308 	and.w	r3, r3, #8
 8000fb6:	60bb      	str	r3, [r7, #8]
 8000fb8:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000fba:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000fbe:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fc2:	2302      	movs	r3, #2
 8000fc4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc8:	2300      	movs	r3, #0
 8000fca:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000fd4:	2307      	movs	r3, #7
 8000fd6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fda:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8000fde:	4619      	mov	r1, r3
 8000fe0:	4809      	ldr	r0, [pc, #36]	; (8001008 <HAL_UART_MspInit+0xd8>)
 8000fe2:	f001 fc47 	bl	8002874 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	2100      	movs	r1, #0
 8000fea:	2027      	movs	r0, #39	; 0x27
 8000fec:	f000 fa95 	bl	800151a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000ff0:	2027      	movs	r0, #39	; 0x27
 8000ff2:	f000 faac 	bl	800154e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000ff6:	bf00      	nop
 8000ff8:	37e0      	adds	r7, #224	; 0xe0
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	40004800 	.word	0x40004800
 8001004:	58024400 	.word	0x58024400
 8001008:	58020c00 	.word	0x58020c00

0800100c <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001010:	4b15      	ldr	r3, [pc, #84]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001012:	4a16      	ldr	r2, [pc, #88]	; (800106c <MX_USB_OTG_FS_PCD_Init+0x60>)
 8001014:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 9;
 8001016:	4b14      	ldr	r3, [pc, #80]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001018:	2209      	movs	r2, #9
 800101a:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800101c:	4b12      	ldr	r3, [pc, #72]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800101e:	2202      	movs	r2, #2
 8001020:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001022:	4b11      	ldr	r3, [pc, #68]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001024:	2200      	movs	r2, #0
 8001026:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001028:	4b0f      	ldr	r3, [pc, #60]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800102a:	2202      	movs	r2, #2
 800102c:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 800102e:	4b0e      	ldr	r3, [pc, #56]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800103a:	4b0b      	ldr	r3, [pc, #44]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800103c:	2200      	movs	r2, #0
 800103e:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001042:	2201      	movs	r2, #1
 8001044:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001046:	4b08      	ldr	r3, [pc, #32]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001048:	2201      	movs	r2, #1
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 800104c:	4b06      	ldr	r3, [pc, #24]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 800104e:	2200      	movs	r2, #0
 8001050:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_USB_OTG_FS_PCD_Init+0x5c>)
 8001054:	f001 fdec 	bl	8002c30 <HAL_PCD_Init>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <MX_USB_OTG_FS_PCD_Init+0x56>
  {
    Error_Handler();
 800105e:	f7ff fe91 	bl	8000d84 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001062:	bf00      	nop
 8001064:	bd80      	pop	{r7, pc}
 8001066:	bf00      	nop
 8001068:	240004ac 	.word	0x240004ac
 800106c:	40080000 	.word	0x40080000

08001070 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b0b8      	sub	sp, #224	; 0xe0
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001088:	f107 0310 	add.w	r3, r7, #16
 800108c:	22bc      	movs	r2, #188	; 0xbc
 800108e:	2100      	movs	r1, #0
 8001090:	4618      	mov	r0, r3
 8001092:	f006 fd5b 	bl	8007b4c <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001096:	687b      	ldr	r3, [r7, #4]
 8001098:	681b      	ldr	r3, [r3, #0]
 800109a:	4a2f      	ldr	r2, [pc, #188]	; (8001158 <HAL_PCD_MspInit+0xe8>)
 800109c:	4293      	cmp	r3, r2
 800109e:	d156      	bne.n	800114e <HAL_PCD_MspInit+0xde>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USB;
 80010a0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80010a4:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.UsbClockSelection = RCC_USBCLKSOURCE_PLL;
 80010a6:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80010aa:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010ae:	f107 0310 	add.w	r3, r7, #16
 80010b2:	4618      	mov	r0, r3
 80010b4:	f002 ff0a 	bl	8003ecc <HAL_RCCEx_PeriphCLKConfig>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <HAL_PCD_MspInit+0x52>
    {
      Error_Handler();
 80010be:	f7ff fe61 	bl	8000d84 <Error_Handler>
    }
  /** Enable USB Voltage detector
  */
    HAL_PWREx_EnableUSBVoltageDetector();
 80010c2:	f001 ff57 	bl	8002f74 <HAL_PWREx_EnableUSBVoltageDetector>

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010c6:	4b25      	ldr	r3, [pc, #148]	; (800115c <HAL_PCD_MspInit+0xec>)
 80010c8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010cc:	4a23      	ldr	r2, [pc, #140]	; (800115c <HAL_PCD_MspInit+0xec>)
 80010ce:	f043 0301 	orr.w	r3, r3, #1
 80010d2:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 80010d6:	4b21      	ldr	r3, [pc, #132]	; (800115c <HAL_PCD_MspInit+0xec>)
 80010d8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 80010dc:	f003 0301 	and.w	r3, r3, #1
 80010e0:	60fb      	str	r3, [r7, #12]
 80010e2:	68fb      	ldr	r3, [r7, #12]
    PA8     ------> USB_OTG_FS_SOF
    PA9     ------> USB_OTG_FS_VBUS
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_11|GPIO_PIN_12;
 80010e4:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80010e8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80010ec:	2302      	movs	r3, #2
 80010ee:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010f2:	2300      	movs	r3, #0
 80010f4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80010f8:	2300      	movs	r3, #0
 80010fa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG1_FS;
 80010fe:	230a      	movs	r3, #10
 8001100:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001104:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001108:	4619      	mov	r1, r3
 800110a:	4815      	ldr	r0, [pc, #84]	; (8001160 <HAL_PCD_MspInit+0xf0>)
 800110c:	f001 fbb2 	bl	8002874 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001110:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001114:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001118:	2300      	movs	r3, #0
 800111a:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001124:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 8001128:	4619      	mov	r1, r3
 800112a:	480d      	ldr	r0, [pc, #52]	; (8001160 <HAL_PCD_MspInit+0xf0>)
 800112c:	f001 fba2 	bl	8002874 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001130:	4b0a      	ldr	r3, [pc, #40]	; (800115c <HAL_PCD_MspInit+0xec>)
 8001132:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001136:	4a09      	ldr	r2, [pc, #36]	; (800115c <HAL_PCD_MspInit+0xec>)
 8001138:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800113c:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8001140:	4b06      	ldr	r3, [pc, #24]	; (800115c <HAL_PCD_MspInit+0xec>)
 8001142:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8001146:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800114a:	60bb      	str	r3, [r7, #8]
 800114c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800114e:	bf00      	nop
 8001150:	37e0      	adds	r7, #224	; 0xe0
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	40080000 	.word	0x40080000
 800115c:	58024400 	.word	0x58024400
 8001160:	58020000 	.word	0x58020000

08001164 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001164:	f8df d034 	ldr.w	sp, [pc, #52]	; 800119c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001168:	f7ff fa8e 	bl	8000688 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800116c:	480c      	ldr	r0, [pc, #48]	; (80011a0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800116e:	490d      	ldr	r1, [pc, #52]	; (80011a4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001170:	4a0d      	ldr	r2, [pc, #52]	; (80011a8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001172:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001174:	e002      	b.n	800117c <LoopCopyDataInit>

08001176 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001176:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001178:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800117a:	3304      	adds	r3, #4

0800117c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800117c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800117e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001180:	d3f9      	bcc.n	8001176 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001182:	4a0a      	ldr	r2, [pc, #40]	; (80011ac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001184:	4c0a      	ldr	r4, [pc, #40]	; (80011b0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001186:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001188:	e001      	b.n	800118e <LoopFillZerobss>

0800118a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800118a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800118c:	3204      	adds	r2, #4

0800118e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800118e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001190:	d3fb      	bcc.n	800118a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001192:	f006 fcb7 	bl	8007b04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001196:	f7ff fcad 	bl	8000af4 <main>
  bx  lr
 800119a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800119c:	24040000 	.word	0x24040000
  ldr r0, =_sdata
 80011a0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80011a4:	24000074 	.word	0x24000074
  ldr r2, =_sidata
 80011a8:	08008684 	.word	0x08008684
  ldr r2, =_sbss
 80011ac:	24000134 	.word	0x24000134
  ldr r4, =_ebss
 80011b0:	240008c8 	.word	0x240008c8

080011b4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011b4:	e7fe      	b.n	80011b4 <ADC3_IRQHandler>
	...

080011b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b082      	sub	sp, #8
 80011bc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80011be:	2003      	movs	r0, #3
 80011c0:	f000 f9a0 	bl	8001504 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80011c4:	f002 fcac 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 80011c8:	4602      	mov	r2, r0
 80011ca:	4b15      	ldr	r3, [pc, #84]	; (8001220 <HAL_Init+0x68>)
 80011cc:	699b      	ldr	r3, [r3, #24]
 80011ce:	0a1b      	lsrs	r3, r3, #8
 80011d0:	f003 030f 	and.w	r3, r3, #15
 80011d4:	4913      	ldr	r1, [pc, #76]	; (8001224 <HAL_Init+0x6c>)
 80011d6:	5ccb      	ldrb	r3, [r1, r3]
 80011d8:	f003 031f 	and.w	r3, r3, #31
 80011dc:	fa22 f303 	lsr.w	r3, r2, r3
 80011e0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80011e2:	4b0f      	ldr	r3, [pc, #60]	; (8001220 <HAL_Init+0x68>)
 80011e4:	699b      	ldr	r3, [r3, #24]
 80011e6:	f003 030f 	and.w	r3, r3, #15
 80011ea:	4a0e      	ldr	r2, [pc, #56]	; (8001224 <HAL_Init+0x6c>)
 80011ec:	5cd3      	ldrb	r3, [r2, r3]
 80011ee:	f003 031f 	and.w	r3, r3, #31
 80011f2:	687a      	ldr	r2, [r7, #4]
 80011f4:	fa22 f303 	lsr.w	r3, r2, r3
 80011f8:	4a0b      	ldr	r2, [pc, #44]	; (8001228 <HAL_Init+0x70>)
 80011fa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80011fc:	4a0b      	ldr	r2, [pc, #44]	; (800122c <HAL_Init+0x74>)
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001202:	2000      	movs	r0, #0
 8001204:	f000 f814 	bl	8001230 <HAL_InitTick>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800120e:	2301      	movs	r3, #1
 8001210:	e002      	b.n	8001218 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8001212:	f7ff fdbd 	bl	8000d90 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001216:	2300      	movs	r3, #0
}
 8001218:	4618      	mov	r0, r3
 800121a:	3708      	adds	r7, #8
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	58024400 	.word	0x58024400
 8001224:	08008508 	.word	0x08008508
 8001228:	24000004 	.word	0x24000004
 800122c:	24000000 	.word	0x24000000

08001230 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8001238:	4b15      	ldr	r3, [pc, #84]	; (8001290 <HAL_InitTick+0x60>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b00      	cmp	r3, #0
 800123e:	d101      	bne.n	8001244 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8001240:	2301      	movs	r3, #1
 8001242:	e021      	b.n	8001288 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8001244:	4b13      	ldr	r3, [pc, #76]	; (8001294 <HAL_InitTick+0x64>)
 8001246:	681a      	ldr	r2, [r3, #0]
 8001248:	4b11      	ldr	r3, [pc, #68]	; (8001290 <HAL_InitTick+0x60>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4619      	mov	r1, r3
 800124e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001252:	fbb3 f3f1 	udiv	r3, r3, r1
 8001256:	fbb2 f3f3 	udiv	r3, r2, r3
 800125a:	4618      	mov	r0, r3
 800125c:	f000 f985 	bl	800156a <HAL_SYSTICK_Config>
 8001260:	4603      	mov	r3, r0
 8001262:	2b00      	cmp	r3, #0
 8001264:	d001      	beq.n	800126a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
 8001268:	e00e      	b.n	8001288 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	2b0f      	cmp	r3, #15
 800126e:	d80a      	bhi.n	8001286 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001270:	2200      	movs	r2, #0
 8001272:	6879      	ldr	r1, [r7, #4]
 8001274:	f04f 30ff 	mov.w	r0, #4294967295
 8001278:	f000 f94f 	bl	800151a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800127c:	4a06      	ldr	r2, [pc, #24]	; (8001298 <HAL_InitTick+0x68>)
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001282:	2300      	movs	r3, #0
 8001284:	e000      	b.n	8001288 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8001286:	2301      	movs	r3, #1
}
 8001288:	4618      	mov	r0, r3
 800128a:	3708      	adds	r7, #8
 800128c:	46bd      	mov	sp, r7
 800128e:	bd80      	pop	{r7, pc}
 8001290:	2400000c 	.word	0x2400000c
 8001294:	24000000 	.word	0x24000000
 8001298:	24000008 	.word	0x24000008

0800129c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800129c:	b480      	push	{r7}
 800129e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80012a0:	4b06      	ldr	r3, [pc, #24]	; (80012bc <HAL_IncTick+0x20>)
 80012a2:	781b      	ldrb	r3, [r3, #0]
 80012a4:	461a      	mov	r2, r3
 80012a6:	4b06      	ldr	r3, [pc, #24]	; (80012c0 <HAL_IncTick+0x24>)
 80012a8:	681b      	ldr	r3, [r3, #0]
 80012aa:	4413      	add	r3, r2
 80012ac:	4a04      	ldr	r2, [pc, #16]	; (80012c0 <HAL_IncTick+0x24>)
 80012ae:	6013      	str	r3, [r2, #0]
}
 80012b0:	bf00      	nop
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
 80012ba:	bf00      	nop
 80012bc:	2400000c 	.word	0x2400000c
 80012c0:	240008b4 	.word	0x240008b4

080012c4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  return uwTick;
 80012c8:	4b03      	ldr	r3, [pc, #12]	; (80012d8 <HAL_GetTick+0x14>)
 80012ca:	681b      	ldr	r3, [r3, #0]
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	240008b4 	.word	0x240008b4

080012dc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012dc:	b580      	push	{r7, lr}
 80012de:	b084      	sub	sp, #16
 80012e0:	af00      	add	r7, sp, #0
 80012e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012e4:	f7ff ffee 	bl	80012c4 <HAL_GetTick>
 80012e8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ee:	68fb      	ldr	r3, [r7, #12]
 80012f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012f4:	d005      	beq.n	8001302 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012f6:	4b0a      	ldr	r3, [pc, #40]	; (8001320 <HAL_Delay+0x44>)
 80012f8:	781b      	ldrb	r3, [r3, #0]
 80012fa:	461a      	mov	r2, r3
 80012fc:	68fb      	ldr	r3, [r7, #12]
 80012fe:	4413      	add	r3, r2
 8001300:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001302:	bf00      	nop
 8001304:	f7ff ffde 	bl	80012c4 <HAL_GetTick>
 8001308:	4602      	mov	r2, r0
 800130a:	68bb      	ldr	r3, [r7, #8]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	68fa      	ldr	r2, [r7, #12]
 8001310:	429a      	cmp	r2, r3
 8001312:	d8f7      	bhi.n	8001304 <HAL_Delay+0x28>
  {
  }
}
 8001314:	bf00      	nop
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}
 800131e:	bf00      	nop
 8001320:	2400000c 	.word	0x2400000c

08001324 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001324:	b480      	push	{r7}
 8001326:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001328:	4b03      	ldr	r3, [pc, #12]	; (8001338 <HAL_GetREVID+0x14>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0c1b      	lsrs	r3, r3, #16
}
 800132e:	4618      	mov	r0, r3
 8001330:	46bd      	mov	sp, r7
 8001332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001336:	4770      	bx	lr
 8001338:	5c001000 	.word	0x5c001000

0800133c <HAL_SYSCFG_ETHInterfaceSelect>:
  *   @arg SYSCFG_ETH_MII : Select the Media Independent Interface
  *   @arg SYSCFG_ETH_RMII: Select the Reduced Media Independent Interface
  * @retval None
  */
void HAL_SYSCFG_ETHInterfaceSelect(uint32_t SYSCFG_ETHInterface)
{
 800133c:	b480      	push	{r7}
 800133e:	b083      	sub	sp, #12
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ETHERNET_CONFIG(SYSCFG_ETHInterface));

  MODIFY_REG(SYSCFG->PMCR, SYSCFG_PMCR_EPIS_SEL, (uint32_t)(SYSCFG_ETHInterface));
 8001344:	4b06      	ldr	r3, [pc, #24]	; (8001360 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 8001346:	685b      	ldr	r3, [r3, #4]
 8001348:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 800134c:	4904      	ldr	r1, [pc, #16]	; (8001360 <HAL_SYSCFG_ETHInterfaceSelect+0x24>)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	4313      	orrs	r3, r2
 8001352:	604b      	str	r3, [r1, #4]
}
 8001354:	bf00      	nop
 8001356:	370c      	adds	r7, #12
 8001358:	46bd      	mov	sp, r7
 800135a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800135e:	4770      	bx	lr
 8001360:	58000400 	.word	0x58000400

08001364 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001364:	b480      	push	{r7}
 8001366:	b085      	sub	sp, #20
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	f003 0307 	and.w	r3, r3, #7
 8001372:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001374:	4b0b      	ldr	r3, [pc, #44]	; (80013a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001376:	68db      	ldr	r3, [r3, #12]
 8001378:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800137a:	68ba      	ldr	r2, [r7, #8]
 800137c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001380:	4013      	ands	r3, r2
 8001382:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800138c:	4b06      	ldr	r3, [pc, #24]	; (80013a8 <__NVIC_SetPriorityGrouping+0x44>)
 800138e:	4313      	orrs	r3, r2
 8001390:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001392:	4a04      	ldr	r2, [pc, #16]	; (80013a4 <__NVIC_SetPriorityGrouping+0x40>)
 8001394:	68bb      	ldr	r3, [r7, #8]
 8001396:	60d3      	str	r3, [r2, #12]
}
 8001398:	bf00      	nop
 800139a:	3714      	adds	r7, #20
 800139c:	46bd      	mov	sp, r7
 800139e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a2:	4770      	bx	lr
 80013a4:	e000ed00 	.word	0xe000ed00
 80013a8:	05fa0000 	.word	0x05fa0000

080013ac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013b0:	4b04      	ldr	r3, [pc, #16]	; (80013c4 <__NVIC_GetPriorityGrouping+0x18>)
 80013b2:	68db      	ldr	r3, [r3, #12]
 80013b4:	0a1b      	lsrs	r3, r3, #8
 80013b6:	f003 0307 	and.w	r3, r3, #7
}
 80013ba:	4618      	mov	r0, r3
 80013bc:	46bd      	mov	sp, r7
 80013be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c2:	4770      	bx	lr
 80013c4:	e000ed00 	.word	0xe000ed00

080013c8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013c8:	b480      	push	{r7}
 80013ca:	b083      	sub	sp, #12
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	4603      	mov	r3, r0
 80013d0:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80013d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	db0b      	blt.n	80013f2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013da:	88fb      	ldrh	r3, [r7, #6]
 80013dc:	f003 021f 	and.w	r2, r3, #31
 80013e0:	4907      	ldr	r1, [pc, #28]	; (8001400 <__NVIC_EnableIRQ+0x38>)
 80013e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013e6:	095b      	lsrs	r3, r3, #5
 80013e8:	2001      	movs	r0, #1
 80013ea:	fa00 f202 	lsl.w	r2, r0, r2
 80013ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80013f2:	bf00      	nop
 80013f4:	370c      	adds	r7, #12
 80013f6:	46bd      	mov	sp, r7
 80013f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013fc:	4770      	bx	lr
 80013fe:	bf00      	nop
 8001400:	e000e100 	.word	0xe000e100

08001404 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001404:	b480      	push	{r7}
 8001406:	b083      	sub	sp, #12
 8001408:	af00      	add	r7, sp, #0
 800140a:	4603      	mov	r3, r0
 800140c:	6039      	str	r1, [r7, #0]
 800140e:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8001410:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001414:	2b00      	cmp	r3, #0
 8001416:	db0a      	blt.n	800142e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	b2da      	uxtb	r2, r3
 800141c:	490c      	ldr	r1, [pc, #48]	; (8001450 <__NVIC_SetPriority+0x4c>)
 800141e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001422:	0112      	lsls	r2, r2, #4
 8001424:	b2d2      	uxtb	r2, r2
 8001426:	440b      	add	r3, r1
 8001428:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800142c:	e00a      	b.n	8001444 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	b2da      	uxtb	r2, r3
 8001432:	4908      	ldr	r1, [pc, #32]	; (8001454 <__NVIC_SetPriority+0x50>)
 8001434:	88fb      	ldrh	r3, [r7, #6]
 8001436:	f003 030f 	and.w	r3, r3, #15
 800143a:	3b04      	subs	r3, #4
 800143c:	0112      	lsls	r2, r2, #4
 800143e:	b2d2      	uxtb	r2, r2
 8001440:	440b      	add	r3, r1
 8001442:	761a      	strb	r2, [r3, #24]
}
 8001444:	bf00      	nop
 8001446:	370c      	adds	r7, #12
 8001448:	46bd      	mov	sp, r7
 800144a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800144e:	4770      	bx	lr
 8001450:	e000e100 	.word	0xe000e100
 8001454:	e000ed00 	.word	0xe000ed00

08001458 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001458:	b480      	push	{r7}
 800145a:	b089      	sub	sp, #36	; 0x24
 800145c:	af00      	add	r7, sp, #0
 800145e:	60f8      	str	r0, [r7, #12]
 8001460:	60b9      	str	r1, [r7, #8]
 8001462:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001464:	68fb      	ldr	r3, [r7, #12]
 8001466:	f003 0307 	and.w	r3, r3, #7
 800146a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f1c3 0307 	rsb	r3, r3, #7
 8001472:	2b04      	cmp	r3, #4
 8001474:	bf28      	it	cs
 8001476:	2304      	movcs	r3, #4
 8001478:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800147a:	69fb      	ldr	r3, [r7, #28]
 800147c:	3304      	adds	r3, #4
 800147e:	2b06      	cmp	r3, #6
 8001480:	d902      	bls.n	8001488 <NVIC_EncodePriority+0x30>
 8001482:	69fb      	ldr	r3, [r7, #28]
 8001484:	3b03      	subs	r3, #3
 8001486:	e000      	b.n	800148a <NVIC_EncodePriority+0x32>
 8001488:	2300      	movs	r3, #0
 800148a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800148c:	f04f 32ff 	mov.w	r2, #4294967295
 8001490:	69bb      	ldr	r3, [r7, #24]
 8001492:	fa02 f303 	lsl.w	r3, r2, r3
 8001496:	43da      	mvns	r2, r3
 8001498:	68bb      	ldr	r3, [r7, #8]
 800149a:	401a      	ands	r2, r3
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80014a0:	f04f 31ff 	mov.w	r1, #4294967295
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	fa01 f303 	lsl.w	r3, r1, r3
 80014aa:	43d9      	mvns	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80014b0:	4313      	orrs	r3, r2
         );
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	3724      	adds	r7, #36	; 0x24
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr
	...

080014c0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014c0:	b580      	push	{r7, lr}
 80014c2:	b082      	sub	sp, #8
 80014c4:	af00      	add	r7, sp, #0
 80014c6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	3b01      	subs	r3, #1
 80014cc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80014d0:	d301      	bcc.n	80014d6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014d2:	2301      	movs	r3, #1
 80014d4:	e00f      	b.n	80014f6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014d6:	4a0a      	ldr	r2, [pc, #40]	; (8001500 <SysTick_Config+0x40>)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	3b01      	subs	r3, #1
 80014dc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014de:	210f      	movs	r1, #15
 80014e0:	f04f 30ff 	mov.w	r0, #4294967295
 80014e4:	f7ff ff8e 	bl	8001404 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014e8:	4b05      	ldr	r3, [pc, #20]	; (8001500 <SysTick_Config+0x40>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014ee:	4b04      	ldr	r3, [pc, #16]	; (8001500 <SysTick_Config+0x40>)
 80014f0:	2207      	movs	r2, #7
 80014f2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014f4:	2300      	movs	r3, #0
}
 80014f6:	4618      	mov	r0, r3
 80014f8:	3708      	adds	r7, #8
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	e000e010 	.word	0xe000e010

08001504 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800150c:	6878      	ldr	r0, [r7, #4]
 800150e:	f7ff ff29 	bl	8001364 <__NVIC_SetPriorityGrouping>
}
 8001512:	bf00      	nop
 8001514:	3708      	adds	r7, #8
 8001516:	46bd      	mov	sp, r7
 8001518:	bd80      	pop	{r7, pc}

0800151a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800151a:	b580      	push	{r7, lr}
 800151c:	b086      	sub	sp, #24
 800151e:	af00      	add	r7, sp, #0
 8001520:	4603      	mov	r3, r0
 8001522:	60b9      	str	r1, [r7, #8]
 8001524:	607a      	str	r2, [r7, #4]
 8001526:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001528:	f7ff ff40 	bl	80013ac <__NVIC_GetPriorityGrouping>
 800152c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800152e:	687a      	ldr	r2, [r7, #4]
 8001530:	68b9      	ldr	r1, [r7, #8]
 8001532:	6978      	ldr	r0, [r7, #20]
 8001534:	f7ff ff90 	bl	8001458 <NVIC_EncodePriority>
 8001538:	4602      	mov	r2, r0
 800153a:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800153e:	4611      	mov	r1, r2
 8001540:	4618      	mov	r0, r3
 8001542:	f7ff ff5f 	bl	8001404 <__NVIC_SetPriority>
}
 8001546:	bf00      	nop
 8001548:	3718      	adds	r7, #24
 800154a:	46bd      	mov	sp, r7
 800154c:	bd80      	pop	{r7, pc}

0800154e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	4603      	mov	r3, r0
 8001556:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001558:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800155c:	4618      	mov	r0, r3
 800155e:	f7ff ff33 	bl	80013c8 <__NVIC_EnableIRQ>
}
 8001562:	bf00      	nop
 8001564:	3708      	adds	r7, #8
 8001566:	46bd      	mov	sp, r7
 8001568:	bd80      	pop	{r7, pc}

0800156a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800156a:	b580      	push	{r7, lr}
 800156c:	b082      	sub	sp, #8
 800156e:	af00      	add	r7, sp, #0
 8001570:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001572:	6878      	ldr	r0, [r7, #4]
 8001574:	f7ff ffa4 	bl	80014c0 <SysTick_Config>
 8001578:	4603      	mov	r3, r0
}
 800157a:	4618      	mov	r0, r3
 800157c:	3708      	adds	r7, #8
 800157e:	46bd      	mov	sp, r7
 8001580:	bd80      	pop	{r7, pc}
	...

08001584 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b086      	sub	sp, #24
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800158c:	f7ff fe9a 	bl	80012c4 <HAL_GetTick>
 8001590:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001592:	687b      	ldr	r3, [r7, #4]
 8001594:	2b00      	cmp	r3, #0
 8001596:	d101      	bne.n	800159c <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8001598:	2301      	movs	r3, #1
 800159a:	e2dc      	b.n	8001b56 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80015a2:	b2db      	uxtb	r3, r3
 80015a4:	2b02      	cmp	r3, #2
 80015a6:	d008      	beq.n	80015ba <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2280      	movs	r2, #128	; 0x80
 80015ac:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	2200      	movs	r2, #0
 80015b2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e2cd      	b.n	8001b56 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a76      	ldr	r2, [pc, #472]	; (8001798 <HAL_DMA_Abort+0x214>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d04a      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a74      	ldr	r2, [pc, #464]	; (800179c <HAL_DMA_Abort+0x218>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d045      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	4a73      	ldr	r2, [pc, #460]	; (80017a0 <HAL_DMA_Abort+0x21c>)
 80015d4:	4293      	cmp	r3, r2
 80015d6:	d040      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a71      	ldr	r2, [pc, #452]	; (80017a4 <HAL_DMA_Abort+0x220>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d03b      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a70      	ldr	r2, [pc, #448]	; (80017a8 <HAL_DMA_Abort+0x224>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d036      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a6e      	ldr	r2, [pc, #440]	; (80017ac <HAL_DMA_Abort+0x228>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d031      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	4a6d      	ldr	r2, [pc, #436]	; (80017b0 <HAL_DMA_Abort+0x22c>)
 80015fc:	4293      	cmp	r3, r2
 80015fe:	d02c      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	4a6b      	ldr	r2, [pc, #428]	; (80017b4 <HAL_DMA_Abort+0x230>)
 8001606:	4293      	cmp	r3, r2
 8001608:	d027      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	4a6a      	ldr	r2, [pc, #424]	; (80017b8 <HAL_DMA_Abort+0x234>)
 8001610:	4293      	cmp	r3, r2
 8001612:	d022      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	4a68      	ldr	r2, [pc, #416]	; (80017bc <HAL_DMA_Abort+0x238>)
 800161a:	4293      	cmp	r3, r2
 800161c:	d01d      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	4a67      	ldr	r2, [pc, #412]	; (80017c0 <HAL_DMA_Abort+0x23c>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d018      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a65      	ldr	r2, [pc, #404]	; (80017c4 <HAL_DMA_Abort+0x240>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d013      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	4a64      	ldr	r2, [pc, #400]	; (80017c8 <HAL_DMA_Abort+0x244>)
 8001638:	4293      	cmp	r3, r2
 800163a:	d00e      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a62      	ldr	r2, [pc, #392]	; (80017cc <HAL_DMA_Abort+0x248>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d009      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	4a61      	ldr	r2, [pc, #388]	; (80017d0 <HAL_DMA_Abort+0x24c>)
 800164c:	4293      	cmp	r3, r2
 800164e:	d004      	beq.n	800165a <HAL_DMA_Abort+0xd6>
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a5f      	ldr	r2, [pc, #380]	; (80017d4 <HAL_DMA_Abort+0x250>)
 8001656:	4293      	cmp	r3, r2
 8001658:	d101      	bne.n	800165e <HAL_DMA_Abort+0xda>
 800165a:	2301      	movs	r3, #1
 800165c:	e000      	b.n	8001660 <HAL_DMA_Abort+0xdc>
 800165e:	2300      	movs	r3, #0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d013      	beq.n	800168c <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	681a      	ldr	r2, [r3, #0]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	f022 021e 	bic.w	r2, r2, #30
 8001672:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	695a      	ldr	r2, [r3, #20]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001682:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	617b      	str	r3, [r7, #20]
 800168a:	e00a      	b.n	80016a2 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f022 020e 	bic.w	r2, r2, #14
 800169a:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	4a3c      	ldr	r2, [pc, #240]	; (8001798 <HAL_DMA_Abort+0x214>)
 80016a8:	4293      	cmp	r3, r2
 80016aa:	d072      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a3a      	ldr	r2, [pc, #232]	; (800179c <HAL_DMA_Abort+0x218>)
 80016b2:	4293      	cmp	r3, r2
 80016b4:	d06d      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a39      	ldr	r2, [pc, #228]	; (80017a0 <HAL_DMA_Abort+0x21c>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d068      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	4a37      	ldr	r2, [pc, #220]	; (80017a4 <HAL_DMA_Abort+0x220>)
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d063      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	4a36      	ldr	r2, [pc, #216]	; (80017a8 <HAL_DMA_Abort+0x224>)
 80016d0:	4293      	cmp	r3, r2
 80016d2:	d05e      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	4a34      	ldr	r2, [pc, #208]	; (80017ac <HAL_DMA_Abort+0x228>)
 80016da:	4293      	cmp	r3, r2
 80016dc:	d059      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	4a33      	ldr	r2, [pc, #204]	; (80017b0 <HAL_DMA_Abort+0x22c>)
 80016e4:	4293      	cmp	r3, r2
 80016e6:	d054      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	4a31      	ldr	r2, [pc, #196]	; (80017b4 <HAL_DMA_Abort+0x230>)
 80016ee:	4293      	cmp	r3, r2
 80016f0:	d04f      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4a30      	ldr	r2, [pc, #192]	; (80017b8 <HAL_DMA_Abort+0x234>)
 80016f8:	4293      	cmp	r3, r2
 80016fa:	d04a      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a2e      	ldr	r2, [pc, #184]	; (80017bc <HAL_DMA_Abort+0x238>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d045      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	4a2d      	ldr	r2, [pc, #180]	; (80017c0 <HAL_DMA_Abort+0x23c>)
 800170c:	4293      	cmp	r3, r2
 800170e:	d040      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4a2b      	ldr	r2, [pc, #172]	; (80017c4 <HAL_DMA_Abort+0x240>)
 8001716:	4293      	cmp	r3, r2
 8001718:	d03b      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	4a2a      	ldr	r2, [pc, #168]	; (80017c8 <HAL_DMA_Abort+0x244>)
 8001720:	4293      	cmp	r3, r2
 8001722:	d036      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4a28      	ldr	r2, [pc, #160]	; (80017cc <HAL_DMA_Abort+0x248>)
 800172a:	4293      	cmp	r3, r2
 800172c:	d031      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	4a27      	ldr	r2, [pc, #156]	; (80017d0 <HAL_DMA_Abort+0x24c>)
 8001734:	4293      	cmp	r3, r2
 8001736:	d02c      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a25      	ldr	r2, [pc, #148]	; (80017d4 <HAL_DMA_Abort+0x250>)
 800173e:	4293      	cmp	r3, r2
 8001740:	d027      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a24      	ldr	r2, [pc, #144]	; (80017d8 <HAL_DMA_Abort+0x254>)
 8001748:	4293      	cmp	r3, r2
 800174a:	d022      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4a22      	ldr	r2, [pc, #136]	; (80017dc <HAL_DMA_Abort+0x258>)
 8001752:	4293      	cmp	r3, r2
 8001754:	d01d      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	4a21      	ldr	r2, [pc, #132]	; (80017e0 <HAL_DMA_Abort+0x25c>)
 800175c:	4293      	cmp	r3, r2
 800175e:	d018      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a1f      	ldr	r2, [pc, #124]	; (80017e4 <HAL_DMA_Abort+0x260>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d013      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <HAL_DMA_Abort+0x264>)
 8001770:	4293      	cmp	r3, r2
 8001772:	d00e      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4a1c      	ldr	r2, [pc, #112]	; (80017ec <HAL_DMA_Abort+0x268>)
 800177a:	4293      	cmp	r3, r2
 800177c:	d009      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4a1b      	ldr	r2, [pc, #108]	; (80017f0 <HAL_DMA_Abort+0x26c>)
 8001784:	4293      	cmp	r3, r2
 8001786:	d004      	beq.n	8001792 <HAL_DMA_Abort+0x20e>
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_DMA_Abort+0x270>)
 800178e:	4293      	cmp	r3, r2
 8001790:	d132      	bne.n	80017f8 <HAL_DMA_Abort+0x274>
 8001792:	2301      	movs	r3, #1
 8001794:	e031      	b.n	80017fa <HAL_DMA_Abort+0x276>
 8001796:	bf00      	nop
 8001798:	40020010 	.word	0x40020010
 800179c:	40020028 	.word	0x40020028
 80017a0:	40020040 	.word	0x40020040
 80017a4:	40020058 	.word	0x40020058
 80017a8:	40020070 	.word	0x40020070
 80017ac:	40020088 	.word	0x40020088
 80017b0:	400200a0 	.word	0x400200a0
 80017b4:	400200b8 	.word	0x400200b8
 80017b8:	40020410 	.word	0x40020410
 80017bc:	40020428 	.word	0x40020428
 80017c0:	40020440 	.word	0x40020440
 80017c4:	40020458 	.word	0x40020458
 80017c8:	40020470 	.word	0x40020470
 80017cc:	40020488 	.word	0x40020488
 80017d0:	400204a0 	.word	0x400204a0
 80017d4:	400204b8 	.word	0x400204b8
 80017d8:	58025408 	.word	0x58025408
 80017dc:	5802541c 	.word	0x5802541c
 80017e0:	58025430 	.word	0x58025430
 80017e4:	58025444 	.word	0x58025444
 80017e8:	58025458 	.word	0x58025458
 80017ec:	5802546c 	.word	0x5802546c
 80017f0:	58025480 	.word	0x58025480
 80017f4:	58025494 	.word	0x58025494
 80017f8:	2300      	movs	r3, #0
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d007      	beq.n	800180e <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001808:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800180c:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4a6d      	ldr	r2, [pc, #436]	; (80019c8 <HAL_DMA_Abort+0x444>)
 8001814:	4293      	cmp	r3, r2
 8001816:	d04a      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a6b      	ldr	r2, [pc, #428]	; (80019cc <HAL_DMA_Abort+0x448>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d045      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	681b      	ldr	r3, [r3, #0]
 8001826:	4a6a      	ldr	r2, [pc, #424]	; (80019d0 <HAL_DMA_Abort+0x44c>)
 8001828:	4293      	cmp	r3, r2
 800182a:	d040      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	4a68      	ldr	r2, [pc, #416]	; (80019d4 <HAL_DMA_Abort+0x450>)
 8001832:	4293      	cmp	r3, r2
 8001834:	d03b      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	4a67      	ldr	r2, [pc, #412]	; (80019d8 <HAL_DMA_Abort+0x454>)
 800183c:	4293      	cmp	r3, r2
 800183e:	d036      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001840:	687b      	ldr	r3, [r7, #4]
 8001842:	681b      	ldr	r3, [r3, #0]
 8001844:	4a65      	ldr	r2, [pc, #404]	; (80019dc <HAL_DMA_Abort+0x458>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d031      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	4a64      	ldr	r2, [pc, #400]	; (80019e0 <HAL_DMA_Abort+0x45c>)
 8001850:	4293      	cmp	r3, r2
 8001852:	d02c      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	4a62      	ldr	r2, [pc, #392]	; (80019e4 <HAL_DMA_Abort+0x460>)
 800185a:	4293      	cmp	r3, r2
 800185c:	d027      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	4a61      	ldr	r2, [pc, #388]	; (80019e8 <HAL_DMA_Abort+0x464>)
 8001864:	4293      	cmp	r3, r2
 8001866:	d022      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	4a5f      	ldr	r2, [pc, #380]	; (80019ec <HAL_DMA_Abort+0x468>)
 800186e:	4293      	cmp	r3, r2
 8001870:	d01d      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4a5e      	ldr	r2, [pc, #376]	; (80019f0 <HAL_DMA_Abort+0x46c>)
 8001878:	4293      	cmp	r3, r2
 800187a:	d018      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a5c      	ldr	r2, [pc, #368]	; (80019f4 <HAL_DMA_Abort+0x470>)
 8001882:	4293      	cmp	r3, r2
 8001884:	d013      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a5b      	ldr	r2, [pc, #364]	; (80019f8 <HAL_DMA_Abort+0x474>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d00e      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	4a59      	ldr	r2, [pc, #356]	; (80019fc <HAL_DMA_Abort+0x478>)
 8001896:	4293      	cmp	r3, r2
 8001898:	d009      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a58      	ldr	r2, [pc, #352]	; (8001a00 <HAL_DMA_Abort+0x47c>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d004      	beq.n	80018ae <HAL_DMA_Abort+0x32a>
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	4a56      	ldr	r2, [pc, #344]	; (8001a04 <HAL_DMA_Abort+0x480>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d108      	bne.n	80018c0 <HAL_DMA_Abort+0x33c>
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	681a      	ldr	r2, [r3, #0]
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f022 0201 	bic.w	r2, r2, #1
 80018bc:	601a      	str	r2, [r3, #0]
 80018be:	e007      	b.n	80018d0 <HAL_DMA_Abort+0x34c>
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	681a      	ldr	r2, [r3, #0]
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	f022 0201 	bic.w	r2, r2, #1
 80018ce:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018d0:	e013      	b.n	80018fa <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80018d2:	f7ff fcf7 	bl	80012c4 <HAL_GetTick>
 80018d6:	4602      	mov	r2, r0
 80018d8:	693b      	ldr	r3, [r7, #16]
 80018da:	1ad3      	subs	r3, r2, r3
 80018dc:	2b05      	cmp	r3, #5
 80018de:	d90c      	bls.n	80018fa <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2220      	movs	r2, #32
 80018e4:	655a      	str	r2, [r3, #84]	; 0x54

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	2200      	movs	r2, #0
 80018ea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	2203      	movs	r2, #3
 80018f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        return HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	e12d      	b.n	8001b56 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80018fa:	697b      	ldr	r3, [r7, #20]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f003 0301 	and.w	r3, r3, #1
 8001902:	2b00      	cmp	r3, #0
 8001904:	d1e5      	bne.n	80018d2 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	4a2f      	ldr	r2, [pc, #188]	; (80019c8 <HAL_DMA_Abort+0x444>)
 800190c:	4293      	cmp	r3, r2
 800190e:	d04a      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	4a2d      	ldr	r2, [pc, #180]	; (80019cc <HAL_DMA_Abort+0x448>)
 8001916:	4293      	cmp	r3, r2
 8001918:	d045      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4a2c      	ldr	r2, [pc, #176]	; (80019d0 <HAL_DMA_Abort+0x44c>)
 8001920:	4293      	cmp	r3, r2
 8001922:	d040      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a2a      	ldr	r2, [pc, #168]	; (80019d4 <HAL_DMA_Abort+0x450>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d03b      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	4a29      	ldr	r2, [pc, #164]	; (80019d8 <HAL_DMA_Abort+0x454>)
 8001934:	4293      	cmp	r3, r2
 8001936:	d036      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001938:	687b      	ldr	r3, [r7, #4]
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	4a27      	ldr	r2, [pc, #156]	; (80019dc <HAL_DMA_Abort+0x458>)
 800193e:	4293      	cmp	r3, r2
 8001940:	d031      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	4a26      	ldr	r2, [pc, #152]	; (80019e0 <HAL_DMA_Abort+0x45c>)
 8001948:	4293      	cmp	r3, r2
 800194a:	d02c      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a24      	ldr	r2, [pc, #144]	; (80019e4 <HAL_DMA_Abort+0x460>)
 8001952:	4293      	cmp	r3, r2
 8001954:	d027      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	4a23      	ldr	r2, [pc, #140]	; (80019e8 <HAL_DMA_Abort+0x464>)
 800195c:	4293      	cmp	r3, r2
 800195e:	d022      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	681b      	ldr	r3, [r3, #0]
 8001964:	4a21      	ldr	r2, [pc, #132]	; (80019ec <HAL_DMA_Abort+0x468>)
 8001966:	4293      	cmp	r3, r2
 8001968:	d01d      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a20      	ldr	r2, [pc, #128]	; (80019f0 <HAL_DMA_Abort+0x46c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d018      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a1e      	ldr	r2, [pc, #120]	; (80019f4 <HAL_DMA_Abort+0x470>)
 800197a:	4293      	cmp	r3, r2
 800197c:	d013      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	4a1d      	ldr	r2, [pc, #116]	; (80019f8 <HAL_DMA_Abort+0x474>)
 8001984:	4293      	cmp	r3, r2
 8001986:	d00e      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001988:	687b      	ldr	r3, [r7, #4]
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a1b      	ldr	r2, [pc, #108]	; (80019fc <HAL_DMA_Abort+0x478>)
 800198e:	4293      	cmp	r3, r2
 8001990:	d009      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	4a1a      	ldr	r2, [pc, #104]	; (8001a00 <HAL_DMA_Abort+0x47c>)
 8001998:	4293      	cmp	r3, r2
 800199a:	d004      	beq.n	80019a6 <HAL_DMA_Abort+0x422>
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	681b      	ldr	r3, [r3, #0]
 80019a0:	4a18      	ldr	r2, [pc, #96]	; (8001a04 <HAL_DMA_Abort+0x480>)
 80019a2:	4293      	cmp	r3, r2
 80019a4:	d101      	bne.n	80019aa <HAL_DMA_Abort+0x426>
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <HAL_DMA_Abort+0x428>
 80019aa:	2300      	movs	r3, #0
 80019ac:	2b00      	cmp	r3, #0
 80019ae:	d02b      	beq.n	8001a08 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019b4:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ba:	f003 031f 	and.w	r3, r3, #31
 80019be:	223f      	movs	r2, #63	; 0x3f
 80019c0:	409a      	lsls	r2, r3
 80019c2:	68bb      	ldr	r3, [r7, #8]
 80019c4:	609a      	str	r2, [r3, #8]
 80019c6:	e02a      	b.n	8001a1e <HAL_DMA_Abort+0x49a>
 80019c8:	40020010 	.word	0x40020010
 80019cc:	40020028 	.word	0x40020028
 80019d0:	40020040 	.word	0x40020040
 80019d4:	40020058 	.word	0x40020058
 80019d8:	40020070 	.word	0x40020070
 80019dc:	40020088 	.word	0x40020088
 80019e0:	400200a0 	.word	0x400200a0
 80019e4:	400200b8 	.word	0x400200b8
 80019e8:	40020410 	.word	0x40020410
 80019ec:	40020428 	.word	0x40020428
 80019f0:	40020440 	.word	0x40020440
 80019f4:	40020458 	.word	0x40020458
 80019f8:	40020470 	.word	0x40020470
 80019fc:	40020488 	.word	0x40020488
 8001a00:	400204a0 	.word	0x400204a0
 8001a04:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a0c:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a12:	f003 031f 	and.w	r3, r3, #31
 8001a16:	2201      	movs	r2, #1
 8001a18:	409a      	lsls	r2, r3
 8001a1a:	68fb      	ldr	r3, [r7, #12]
 8001a1c:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	4a4f      	ldr	r2, [pc, #316]	; (8001b60 <HAL_DMA_Abort+0x5dc>)
 8001a24:	4293      	cmp	r3, r2
 8001a26:	d072      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	4a4d      	ldr	r2, [pc, #308]	; (8001b64 <HAL_DMA_Abort+0x5e0>)
 8001a2e:	4293      	cmp	r3, r2
 8001a30:	d06d      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	4a4c      	ldr	r2, [pc, #304]	; (8001b68 <HAL_DMA_Abort+0x5e4>)
 8001a38:	4293      	cmp	r3, r2
 8001a3a:	d068      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	4a4a      	ldr	r2, [pc, #296]	; (8001b6c <HAL_DMA_Abort+0x5e8>)
 8001a42:	4293      	cmp	r3, r2
 8001a44:	d063      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	4a49      	ldr	r2, [pc, #292]	; (8001b70 <HAL_DMA_Abort+0x5ec>)
 8001a4c:	4293      	cmp	r3, r2
 8001a4e:	d05e      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	4a47      	ldr	r2, [pc, #284]	; (8001b74 <HAL_DMA_Abort+0x5f0>)
 8001a56:	4293      	cmp	r3, r2
 8001a58:	d059      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	4a46      	ldr	r2, [pc, #280]	; (8001b78 <HAL_DMA_Abort+0x5f4>)
 8001a60:	4293      	cmp	r3, r2
 8001a62:	d054      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	4a44      	ldr	r2, [pc, #272]	; (8001b7c <HAL_DMA_Abort+0x5f8>)
 8001a6a:	4293      	cmp	r3, r2
 8001a6c:	d04f      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a43      	ldr	r2, [pc, #268]	; (8001b80 <HAL_DMA_Abort+0x5fc>)
 8001a74:	4293      	cmp	r3, r2
 8001a76:	d04a      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	4a41      	ldr	r2, [pc, #260]	; (8001b84 <HAL_DMA_Abort+0x600>)
 8001a7e:	4293      	cmp	r3, r2
 8001a80:	d045      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a40      	ldr	r2, [pc, #256]	; (8001b88 <HAL_DMA_Abort+0x604>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d040      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a3e      	ldr	r2, [pc, #248]	; (8001b8c <HAL_DMA_Abort+0x608>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d03b      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4a3d      	ldr	r2, [pc, #244]	; (8001b90 <HAL_DMA_Abort+0x60c>)
 8001a9c:	4293      	cmp	r3, r2
 8001a9e:	d036      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	4a3b      	ldr	r2, [pc, #236]	; (8001b94 <HAL_DMA_Abort+0x610>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d031      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a3a      	ldr	r2, [pc, #232]	; (8001b98 <HAL_DMA_Abort+0x614>)
 8001ab0:	4293      	cmp	r3, r2
 8001ab2:	d02c      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a38      	ldr	r2, [pc, #224]	; (8001b9c <HAL_DMA_Abort+0x618>)
 8001aba:	4293      	cmp	r3, r2
 8001abc:	d027      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4a37      	ldr	r2, [pc, #220]	; (8001ba0 <HAL_DMA_Abort+0x61c>)
 8001ac4:	4293      	cmp	r3, r2
 8001ac6:	d022      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a35      	ldr	r2, [pc, #212]	; (8001ba4 <HAL_DMA_Abort+0x620>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d01d      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4a34      	ldr	r2, [pc, #208]	; (8001ba8 <HAL_DMA_Abort+0x624>)
 8001ad8:	4293      	cmp	r3, r2
 8001ada:	d018      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a32      	ldr	r2, [pc, #200]	; (8001bac <HAL_DMA_Abort+0x628>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d013      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	4a31      	ldr	r2, [pc, #196]	; (8001bb0 <HAL_DMA_Abort+0x62c>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d00e      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	4a2f      	ldr	r2, [pc, #188]	; (8001bb4 <HAL_DMA_Abort+0x630>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d009      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a2e      	ldr	r2, [pc, #184]	; (8001bb8 <HAL_DMA_Abort+0x634>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d004      	beq.n	8001b0e <HAL_DMA_Abort+0x58a>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a2c      	ldr	r2, [pc, #176]	; (8001bbc <HAL_DMA_Abort+0x638>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d101      	bne.n	8001b12 <HAL_DMA_Abort+0x58e>
 8001b0e:	2301      	movs	r3, #1
 8001b10:	e000      	b.n	8001b14 <HAL_DMA_Abort+0x590>
 8001b12:	2300      	movs	r3, #0
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d015      	beq.n	8001b44 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001b1c:	687a      	ldr	r2, [r7, #4]
 8001b1e:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001b20:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d00c      	beq.n	8001b44 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b2e:	681a      	ldr	r2, [r3, #0]
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001b34:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001b38:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001b3e:	687a      	ldr	r2, [r7, #4]
 8001b40:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001b42:	605a      	str	r2, [r3, #4]
      }
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2200      	movs	r2, #0
 8001b48:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }

  return HAL_OK;
 8001b54:	2300      	movs	r3, #0
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	3718      	adds	r7, #24
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	40020010 	.word	0x40020010
 8001b64:	40020028 	.word	0x40020028
 8001b68:	40020040 	.word	0x40020040
 8001b6c:	40020058 	.word	0x40020058
 8001b70:	40020070 	.word	0x40020070
 8001b74:	40020088 	.word	0x40020088
 8001b78:	400200a0 	.word	0x400200a0
 8001b7c:	400200b8 	.word	0x400200b8
 8001b80:	40020410 	.word	0x40020410
 8001b84:	40020428 	.word	0x40020428
 8001b88:	40020440 	.word	0x40020440
 8001b8c:	40020458 	.word	0x40020458
 8001b90:	40020470 	.word	0x40020470
 8001b94:	40020488 	.word	0x40020488
 8001b98:	400204a0 	.word	0x400204a0
 8001b9c:	400204b8 	.word	0x400204b8
 8001ba0:	58025408 	.word	0x58025408
 8001ba4:	5802541c 	.word	0x5802541c
 8001ba8:	58025430 	.word	0x58025430
 8001bac:	58025444 	.word	0x58025444
 8001bb0:	58025458 	.word	0x58025458
 8001bb4:	5802546c 	.word	0x5802546c
 8001bb8:	58025480 	.word	0x58025480
 8001bbc:	58025494 	.word	0x58025494

08001bc0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b084      	sub	sp, #16
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d101      	bne.n	8001bd2 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 8001bce:	2301      	movs	r3, #1
 8001bd0:	e205      	b.n	8001fde <HAL_DMA_Abort_IT+0x41e>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bd8:	b2db      	uxtb	r3, r3
 8001bda:	2b02      	cmp	r3, #2
 8001bdc:	d004      	beq.n	8001be8 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001be4:	2301      	movs	r3, #1
 8001be6:	e1fa      	b.n	8001fde <HAL_DMA_Abort_IT+0x41e>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	4a8c      	ldr	r2, [pc, #560]	; (8001e20 <HAL_DMA_Abort_IT+0x260>)
 8001bee:	4293      	cmp	r3, r2
 8001bf0:	d04a      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4a8b      	ldr	r2, [pc, #556]	; (8001e24 <HAL_DMA_Abort_IT+0x264>)
 8001bf8:	4293      	cmp	r3, r2
 8001bfa:	d045      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a89      	ldr	r2, [pc, #548]	; (8001e28 <HAL_DMA_Abort_IT+0x268>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d040      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	4a88      	ldr	r2, [pc, #544]	; (8001e2c <HAL_DMA_Abort_IT+0x26c>)
 8001c0c:	4293      	cmp	r3, r2
 8001c0e:	d03b      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a86      	ldr	r2, [pc, #536]	; (8001e30 <HAL_DMA_Abort_IT+0x270>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d036      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	681b      	ldr	r3, [r3, #0]
 8001c1e:	4a85      	ldr	r2, [pc, #532]	; (8001e34 <HAL_DMA_Abort_IT+0x274>)
 8001c20:	4293      	cmp	r3, r2
 8001c22:	d031      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a83      	ldr	r2, [pc, #524]	; (8001e38 <HAL_DMA_Abort_IT+0x278>)
 8001c2a:	4293      	cmp	r3, r2
 8001c2c:	d02c      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a82      	ldr	r2, [pc, #520]	; (8001e3c <HAL_DMA_Abort_IT+0x27c>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d027      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	4a80      	ldr	r2, [pc, #512]	; (8001e40 <HAL_DMA_Abort_IT+0x280>)
 8001c3e:	4293      	cmp	r3, r2
 8001c40:	d022      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	4a7f      	ldr	r2, [pc, #508]	; (8001e44 <HAL_DMA_Abort_IT+0x284>)
 8001c48:	4293      	cmp	r3, r2
 8001c4a:	d01d      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	4a7d      	ldr	r2, [pc, #500]	; (8001e48 <HAL_DMA_Abort_IT+0x288>)
 8001c52:	4293      	cmp	r3, r2
 8001c54:	d018      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	4a7c      	ldr	r2, [pc, #496]	; (8001e4c <HAL_DMA_Abort_IT+0x28c>)
 8001c5c:	4293      	cmp	r3, r2
 8001c5e:	d013      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a7a      	ldr	r2, [pc, #488]	; (8001e50 <HAL_DMA_Abort_IT+0x290>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00e      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	4a79      	ldr	r2, [pc, #484]	; (8001e54 <HAL_DMA_Abort_IT+0x294>)
 8001c70:	4293      	cmp	r3, r2
 8001c72:	d009      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	681b      	ldr	r3, [r3, #0]
 8001c78:	4a77      	ldr	r2, [pc, #476]	; (8001e58 <HAL_DMA_Abort_IT+0x298>)
 8001c7a:	4293      	cmp	r3, r2
 8001c7c:	d004      	beq.n	8001c88 <HAL_DMA_Abort_IT+0xc8>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4a76      	ldr	r2, [pc, #472]	; (8001e5c <HAL_DMA_Abort_IT+0x29c>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d101      	bne.n	8001c8c <HAL_DMA_Abort_IT+0xcc>
 8001c88:	2301      	movs	r3, #1
 8001c8a:	e000      	b.n	8001c8e <HAL_DMA_Abort_IT+0xce>
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d065      	beq.n	8001d5e <HAL_DMA_Abort_IT+0x19e>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	2204      	movs	r2, #4
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	4a60      	ldr	r2, [pc, #384]	; (8001e20 <HAL_DMA_Abort_IT+0x260>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d04a      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a5e      	ldr	r2, [pc, #376]	; (8001e24 <HAL_DMA_Abort_IT+0x264>)
 8001caa:	4293      	cmp	r3, r2
 8001cac:	d045      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	4a5d      	ldr	r2, [pc, #372]	; (8001e28 <HAL_DMA_Abort_IT+0x268>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d040      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	4a5b      	ldr	r2, [pc, #364]	; (8001e2c <HAL_DMA_Abort_IT+0x26c>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d03b      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4a5a      	ldr	r2, [pc, #360]	; (8001e30 <HAL_DMA_Abort_IT+0x270>)
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	d036      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	4a58      	ldr	r2, [pc, #352]	; (8001e34 <HAL_DMA_Abort_IT+0x274>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d031      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	4a57      	ldr	r2, [pc, #348]	; (8001e38 <HAL_DMA_Abort_IT+0x278>)
 8001cdc:	4293      	cmp	r3, r2
 8001cde:	d02c      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a55      	ldr	r2, [pc, #340]	; (8001e3c <HAL_DMA_Abort_IT+0x27c>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d027      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	4a54      	ldr	r2, [pc, #336]	; (8001e40 <HAL_DMA_Abort_IT+0x280>)
 8001cf0:	4293      	cmp	r3, r2
 8001cf2:	d022      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	4a52      	ldr	r2, [pc, #328]	; (8001e44 <HAL_DMA_Abort_IT+0x284>)
 8001cfa:	4293      	cmp	r3, r2
 8001cfc:	d01d      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4a51      	ldr	r2, [pc, #324]	; (8001e48 <HAL_DMA_Abort_IT+0x288>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d018      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a4f      	ldr	r2, [pc, #316]	; (8001e4c <HAL_DMA_Abort_IT+0x28c>)
 8001d0e:	4293      	cmp	r3, r2
 8001d10:	d013      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	4a4e      	ldr	r2, [pc, #312]	; (8001e50 <HAL_DMA_Abort_IT+0x290>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d00e      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a4c      	ldr	r2, [pc, #304]	; (8001e54 <HAL_DMA_Abort_IT+0x294>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d009      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	4a4b      	ldr	r2, [pc, #300]	; (8001e58 <HAL_DMA_Abort_IT+0x298>)
 8001d2c:	4293      	cmp	r3, r2
 8001d2e:	d004      	beq.n	8001d3a <HAL_DMA_Abort_IT+0x17a>
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	4a49      	ldr	r2, [pc, #292]	; (8001e5c <HAL_DMA_Abort_IT+0x29c>)
 8001d36:	4293      	cmp	r3, r2
 8001d38:	d108      	bne.n	8001d4c <HAL_DMA_Abort_IT+0x18c>
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0201 	bic.w	r2, r2, #1
 8001d48:	601a      	str	r2, [r3, #0]
 8001d4a:	e147      	b.n	8001fdc <HAL_DMA_Abort_IT+0x41c>
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0201 	bic.w	r2, r2, #1
 8001d5a:	601a      	str	r2, [r3, #0]
 8001d5c:	e13e      	b.n	8001fdc <HAL_DMA_Abort_IT+0x41c>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	681a      	ldr	r2, [r3, #0]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	f022 020e 	bic.w	r2, r2, #14
 8001d6c:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	4a2b      	ldr	r2, [pc, #172]	; (8001e20 <HAL_DMA_Abort_IT+0x260>)
 8001d74:	4293      	cmp	r3, r2
 8001d76:	d04a      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a29      	ldr	r2, [pc, #164]	; (8001e24 <HAL_DMA_Abort_IT+0x264>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d045      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a28      	ldr	r2, [pc, #160]	; (8001e28 <HAL_DMA_Abort_IT+0x268>)
 8001d88:	4293      	cmp	r3, r2
 8001d8a:	d040      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	4a26      	ldr	r2, [pc, #152]	; (8001e2c <HAL_DMA_Abort_IT+0x26c>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d03b      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a25      	ldr	r2, [pc, #148]	; (8001e30 <HAL_DMA_Abort_IT+0x270>)
 8001d9c:	4293      	cmp	r3, r2
 8001d9e:	d036      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a23      	ldr	r2, [pc, #140]	; (8001e34 <HAL_DMA_Abort_IT+0x274>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d031      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	4a22      	ldr	r2, [pc, #136]	; (8001e38 <HAL_DMA_Abort_IT+0x278>)
 8001db0:	4293      	cmp	r3, r2
 8001db2:	d02c      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a20      	ldr	r2, [pc, #128]	; (8001e3c <HAL_DMA_Abort_IT+0x27c>)
 8001dba:	4293      	cmp	r3, r2
 8001dbc:	d027      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	4a1f      	ldr	r2, [pc, #124]	; (8001e40 <HAL_DMA_Abort_IT+0x280>)
 8001dc4:	4293      	cmp	r3, r2
 8001dc6:	d022      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <HAL_DMA_Abort_IT+0x284>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d01d      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a1c      	ldr	r2, [pc, #112]	; (8001e48 <HAL_DMA_Abort_IT+0x288>)
 8001dd8:	4293      	cmp	r3, r2
 8001dda:	d018      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_DMA_Abort_IT+0x28c>)
 8001de2:	4293      	cmp	r3, r2
 8001de4:	d013      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a19      	ldr	r2, [pc, #100]	; (8001e50 <HAL_DMA_Abort_IT+0x290>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d00e      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	4a17      	ldr	r2, [pc, #92]	; (8001e54 <HAL_DMA_Abort_IT+0x294>)
 8001df6:	4293      	cmp	r3, r2
 8001df8:	d009      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a16      	ldr	r2, [pc, #88]	; (8001e58 <HAL_DMA_Abort_IT+0x298>)
 8001e00:	4293      	cmp	r3, r2
 8001e02:	d004      	beq.n	8001e0e <HAL_DMA_Abort_IT+0x24e>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	4a14      	ldr	r2, [pc, #80]	; (8001e5c <HAL_DMA_Abort_IT+0x29c>)
 8001e0a:	4293      	cmp	r3, r2
 8001e0c:	d128      	bne.n	8001e60 <HAL_DMA_Abort_IT+0x2a0>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	681a      	ldr	r2, [r3, #0]
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	f022 0201 	bic.w	r2, r2, #1
 8001e1c:	601a      	str	r2, [r3, #0]
 8001e1e:	e027      	b.n	8001e70 <HAL_DMA_Abort_IT+0x2b0>
 8001e20:	40020010 	.word	0x40020010
 8001e24:	40020028 	.word	0x40020028
 8001e28:	40020040 	.word	0x40020040
 8001e2c:	40020058 	.word	0x40020058
 8001e30:	40020070 	.word	0x40020070
 8001e34:	40020088 	.word	0x40020088
 8001e38:	400200a0 	.word	0x400200a0
 8001e3c:	400200b8 	.word	0x400200b8
 8001e40:	40020410 	.word	0x40020410
 8001e44:	40020428 	.word	0x40020428
 8001e48:	40020440 	.word	0x40020440
 8001e4c:	40020458 	.word	0x40020458
 8001e50:	40020470 	.word	0x40020470
 8001e54:	40020488 	.word	0x40020488
 8001e58:	400204a0 	.word	0x400204a0
 8001e5c:	400204b8 	.word	0x400204b8
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	681a      	ldr	r2, [r3, #0]
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f022 0201 	bic.w	r2, r2, #1
 8001e6e:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4a5c      	ldr	r2, [pc, #368]	; (8001fe8 <HAL_DMA_Abort_IT+0x428>)
 8001e76:	4293      	cmp	r3, r2
 8001e78:	d072      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	4a5b      	ldr	r2, [pc, #364]	; (8001fec <HAL_DMA_Abort_IT+0x42c>)
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d06d      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a59      	ldr	r2, [pc, #356]	; (8001ff0 <HAL_DMA_Abort_IT+0x430>)
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d068      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4a58      	ldr	r2, [pc, #352]	; (8001ff4 <HAL_DMA_Abort_IT+0x434>)
 8001e94:	4293      	cmp	r3, r2
 8001e96:	d063      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	4a56      	ldr	r2, [pc, #344]	; (8001ff8 <HAL_DMA_Abort_IT+0x438>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d05e      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	4a55      	ldr	r2, [pc, #340]	; (8001ffc <HAL_DMA_Abort_IT+0x43c>)
 8001ea8:	4293      	cmp	r3, r2
 8001eaa:	d059      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	4a53      	ldr	r2, [pc, #332]	; (8002000 <HAL_DMA_Abort_IT+0x440>)
 8001eb2:	4293      	cmp	r3, r2
 8001eb4:	d054      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4a52      	ldr	r2, [pc, #328]	; (8002004 <HAL_DMA_Abort_IT+0x444>)
 8001ebc:	4293      	cmp	r3, r2
 8001ebe:	d04f      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a50      	ldr	r2, [pc, #320]	; (8002008 <HAL_DMA_Abort_IT+0x448>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d04a      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a4f      	ldr	r2, [pc, #316]	; (800200c <HAL_DMA_Abort_IT+0x44c>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d045      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a4d      	ldr	r2, [pc, #308]	; (8002010 <HAL_DMA_Abort_IT+0x450>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d040      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4a4c      	ldr	r2, [pc, #304]	; (8002014 <HAL_DMA_Abort_IT+0x454>)
 8001ee4:	4293      	cmp	r3, r2
 8001ee6:	d03b      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	4a4a      	ldr	r2, [pc, #296]	; (8002018 <HAL_DMA_Abort_IT+0x458>)
 8001eee:	4293      	cmp	r3, r2
 8001ef0:	d036      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4a49      	ldr	r2, [pc, #292]	; (800201c <HAL_DMA_Abort_IT+0x45c>)
 8001ef8:	4293      	cmp	r3, r2
 8001efa:	d031      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a47      	ldr	r2, [pc, #284]	; (8002020 <HAL_DMA_Abort_IT+0x460>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d02c      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a46      	ldr	r2, [pc, #280]	; (8002024 <HAL_DMA_Abort_IT+0x464>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d027      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	4a44      	ldr	r2, [pc, #272]	; (8002028 <HAL_DMA_Abort_IT+0x468>)
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d022      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4a43      	ldr	r2, [pc, #268]	; (800202c <HAL_DMA_Abort_IT+0x46c>)
 8001f20:	4293      	cmp	r3, r2
 8001f22:	d01d      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	4a41      	ldr	r2, [pc, #260]	; (8002030 <HAL_DMA_Abort_IT+0x470>)
 8001f2a:	4293      	cmp	r3, r2
 8001f2c:	d018      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a40      	ldr	r2, [pc, #256]	; (8002034 <HAL_DMA_Abort_IT+0x474>)
 8001f34:	4293      	cmp	r3, r2
 8001f36:	d013      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	4a3e      	ldr	r2, [pc, #248]	; (8002038 <HAL_DMA_Abort_IT+0x478>)
 8001f3e:	4293      	cmp	r3, r2
 8001f40:	d00e      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	4a3d      	ldr	r2, [pc, #244]	; (800203c <HAL_DMA_Abort_IT+0x47c>)
 8001f48:	4293      	cmp	r3, r2
 8001f4a:	d009      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	4a3b      	ldr	r2, [pc, #236]	; (8002040 <HAL_DMA_Abort_IT+0x480>)
 8001f52:	4293      	cmp	r3, r2
 8001f54:	d004      	beq.n	8001f60 <HAL_DMA_Abort_IT+0x3a0>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4a3a      	ldr	r2, [pc, #232]	; (8002044 <HAL_DMA_Abort_IT+0x484>)
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d101      	bne.n	8001f64 <HAL_DMA_Abort_IT+0x3a4>
 8001f60:	2301      	movs	r3, #1
 8001f62:	e000      	b.n	8001f66 <HAL_DMA_Abort_IT+0x3a6>
 8001f64:	2300      	movs	r3, #0
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	d028      	beq.n	8001fbc <HAL_DMA_Abort_IT+0x3fc>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f6e:	681a      	ldr	r2, [r3, #0]
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f74:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001f78:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f7e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f84:	f003 031f 	and.w	r3, r3, #31
 8001f88:	2201      	movs	r2, #1
 8001f8a:	409a      	lsls	r2, r3
 8001f8c:	68fb      	ldr	r3, [r7, #12]
 8001f8e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001f94:	687a      	ldr	r2, [r7, #4]
 8001f96:	6e92      	ldr	r2, [r2, #104]	; 0x68
 8001f98:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d00c      	beq.n	8001fbc <HAL_DMA_Abort_IT+0x3fc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fa6:	681a      	ldr	r2, [r3, #0]
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001fac:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001fb0:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001fb6:	687a      	ldr	r2, [r7, #4]
 8001fb8:	6f52      	ldr	r2, [r2, #116]	; 0x74
 8001fba:	605a      	str	r2, [r3, #4]
        }
      }

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	2201      	movs	r2, #1
 8001fc8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <HAL_DMA_Abort_IT+0x41c>
      {
        hdma->XferAbortCallback(hdma);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001fd8:	6878      	ldr	r0, [r7, #4]
 8001fda:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 8001fdc:	2300      	movs	r3, #0
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3710      	adds	r7, #16
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	40020010 	.word	0x40020010
 8001fec:	40020028 	.word	0x40020028
 8001ff0:	40020040 	.word	0x40020040
 8001ff4:	40020058 	.word	0x40020058
 8001ff8:	40020070 	.word	0x40020070
 8001ffc:	40020088 	.word	0x40020088
 8002000:	400200a0 	.word	0x400200a0
 8002004:	400200b8 	.word	0x400200b8
 8002008:	40020410 	.word	0x40020410
 800200c:	40020428 	.word	0x40020428
 8002010:	40020440 	.word	0x40020440
 8002014:	40020458 	.word	0x40020458
 8002018:	40020470 	.word	0x40020470
 800201c:	40020488 	.word	0x40020488
 8002020:	400204a0 	.word	0x400204a0
 8002024:	400204b8 	.word	0x400204b8
 8002028:	58025408 	.word	0x58025408
 800202c:	5802541c 	.word	0x5802541c
 8002030:	58025430 	.word	0x58025430
 8002034:	58025444 	.word	0x58025444
 8002038:	58025458 	.word	0x58025458
 800203c:	5802546c 	.word	0x5802546c
 8002040:	58025480 	.word	0x58025480
 8002044:	58025494 	.word	0x58025494

08002048 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if(heth == NULL)
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2b00      	cmp	r3, #0
 8002054:	d101      	bne.n	800205a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8002056:	2301      	movs	r3, #1
 8002058:	e0c6      	b.n	80021e8 <HAL_ETH_Init+0x1a0>
  }

#else

  /* Check the ETH peripheral state */
  if(heth->gState == HAL_ETH_STATE_RESET)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800205e:	2b00      	cmp	r3, #0
 8002060:	d102      	bne.n	8002068 <HAL_ETH_Init+0x20>
  {
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8002062:	6878      	ldr	r0, [r7, #4]
 8002064:	f7fe fbfc 	bl	8000860 <HAL_ETH_MspInit>
  }
#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */

  heth->gState = HAL_ETH_STATE_BUSY;
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	2223      	movs	r2, #35	; 0x23
 800206c:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800206e:	4b60      	ldr	r3, [pc, #384]	; (80021f0 <HAL_ETH_Init+0x1a8>)
 8002070:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002074:	4a5e      	ldr	r2, [pc, #376]	; (80021f0 <HAL_ETH_Init+0x1a8>)
 8002076:	f043 0302 	orr.w	r3, r3, #2
 800207a:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 800207e:	4b5c      	ldr	r3, [pc, #368]	; (80021f0 <HAL_ETH_Init+0x1a8>)
 8002080:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002084:	f003 0302 	and.w	r3, r3, #2
 8002088:	60bb      	str	r3, [r7, #8]
 800208a:	68bb      	ldr	r3, [r7, #8]

  if(heth->Init.MediaInterface == HAL_ETH_MII_MODE)
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	7a1b      	ldrb	r3, [r3, #8]
 8002090:	2b00      	cmp	r3, #0
 8002092:	d103      	bne.n	800209c <HAL_ETH_Init+0x54>
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_MII);
 8002094:	2000      	movs	r0, #0
 8002096:	f7ff f951 	bl	800133c <HAL_SYSCFG_ETHInterfaceSelect>
 800209a:	e003      	b.n	80020a4 <HAL_ETH_Init+0x5c>
  }
  else
  {
    HAL_SYSCFG_ETHInterfaceSelect(SYSCFG_ETH_RMII);
 800209c:	f44f 0000 	mov.w	r0, #8388608	; 0x800000
 80020a0:	f7ff f94c 	bl	800133c <HAL_SYSCFG_ETHInterfaceSelect>
  }

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ac:	681a      	ldr	r2, [r3, #0]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f042 0201 	orr.w	r2, r2, #1
 80020b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ba:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80020bc:	f7ff f902 	bl	80012c4 <HAL_GetTick>
 80020c0:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020c2:	e00f      	b.n	80020e4 <HAL_ETH_Init+0x9c>
  {
    if(((HAL_GetTick() - tickstart ) > ETH_SWRESET_TIMEOUT))
 80020c4:	f7ff f8fe 	bl	80012c4 <HAL_GetTick>
 80020c8:	4602      	mov	r2, r0
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80020d2:	d907      	bls.n	80020e4 <HAL_ETH_Init+0x9c>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	2204      	movs	r2, #4
 80020d8:	675a      	str	r2, [r3, #116]	; 0x74
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	22e0      	movs	r2, #224	; 0xe0
 80020de:	66da      	str	r2, [r3, #108]	; 0x6c
      /* Return Error */
      return HAL_ERROR;
 80020e0:	2301      	movs	r3, #1
 80020e2:	e081      	b.n	80021e8 <HAL_ETH_Init+0x1a0>
  while (READ_BIT(heth->Instance->DMAMR, ETH_DMAMR_SWR) > 0U)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1e6      	bne.n	80020c4 <HAL_ETH_Init+0x7c>
    }
  }

  /*------------------ MDIO CSR Clock Range Configuration --------------------*/
  ETH_MAC_MDIO_ClkConfig(heth);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fac0 	bl	800267c <ETH_MAC_MDIO_ClkConfig>

  /*------------------ MAC LPI 1US Tic Counter Configuration --------------------*/
  WRITE_REG(heth->Instance->MAC1USTCR, (((uint32_t)HAL_RCC_GetHCLKFreq() / ETH_MAC_US_TICK) - 1U));
 80020fc:	f001 fe8a 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8002100:	4603      	mov	r3, r0
 8002102:	4a3c      	ldr	r2, [pc, #240]	; (80021f4 <HAL_ETH_Init+0x1ac>)
 8002104:	fba2 2303 	umull	r2, r3, r2, r3
 8002108:	0c9a      	lsrs	r2, r3, #18
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	3a01      	subs	r2, #1
 8002110:	f8c3 20dc 	str.w	r2, [r3, #220]	; 0xdc

  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8002114:	6878      	ldr	r0, [r7, #4]
 8002116:	f000 fa13 	bl	8002540 <ETH_MACDMAConfig>

  /* SET DSL to 64 bit */
  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_DSL, ETH_DMACCR_DSL_64BIT);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f423 12e0 	bic.w	r2, r3, #1835008	; 0x1c0000
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
 8002130:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 8002134:	601a      	str	r2, [r3, #0]

  /* Set Receive Buffers Length (must be a multiple of 4) */
  if ((heth->Init.RxBuffLen % 0x4U) != 0x0U)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0303 	and.w	r3, r3, #3
 800213e:	2b00      	cmp	r3, #0
 8002140:	d007      	beq.n	8002152 <HAL_ETH_Init+0x10a>
  {
    /* Set Error Code */
    heth->ErrorCode = HAL_ETH_ERROR_PARAM;
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	2201      	movs	r2, #1
 8002146:	675a      	str	r2, [r3, #116]	; 0x74
    /* Set State as Error */
    heth->gState = HAL_ETH_STATE_ERROR;
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	22e0      	movs	r2, #224	; 0xe0
 800214c:	66da      	str	r2, [r3, #108]	; 0x6c
    /* Return Error */
    return HAL_ERROR;
 800214e:	2301      	movs	r3, #1
 8002150:	e04a      	b.n	80021e8 <HAL_ETH_Init+0x1a0>
  }
  else
  {
    MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_RBSZ, ((heth->Init.RxBuffLen) << 1));
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	f241 1308 	movw	r3, #4360	; 0x1108
 800215a:	4413      	add	r3, r2
 800215c:	681a      	ldr	r2, [r3, #0]
 800215e:	4b26      	ldr	r3, [pc, #152]	; (80021f8 <HAL_ETH_Init+0x1b0>)
 8002160:	4013      	ands	r3, r2
 8002162:	687a      	ldr	r2, [r7, #4]
 8002164:	6952      	ldr	r2, [r2, #20]
 8002166:	0052      	lsls	r2, r2, #1
 8002168:	6879      	ldr	r1, [r7, #4]
 800216a:	6809      	ldr	r1, [r1, #0]
 800216c:	431a      	orrs	r2, r3
 800216e:	f241 1308 	movw	r3, #4360	; 0x1108
 8002172:	440b      	add	r3, r1
 8002174:	601a      	str	r2, [r3, #0]
  }

  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8002176:	6878      	ldr	r0, [r7, #4]
 8002178:	f000 fad8 	bl	800272c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800217c:	6878      	ldr	r0, [r7, #4]
 800217e:	f000 fb1c 	bl	80027ba <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  /* Set MAC addr bits 32 to 47 */
  heth->Instance->MACA0HR = (((uint32_t)(heth->Init.MACAddr[5]) << 8) | (uint32_t)heth->Init.MACAddr[4]);
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	685b      	ldr	r3, [r3, #4]
 8002186:	3305      	adds	r3, #5
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	021a      	lsls	r2, r3, #8
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	3304      	adds	r3, #4
 8002192:	781b      	ldrb	r3, [r3, #0]
 8002194:	4619      	mov	r1, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	430a      	orrs	r2, r1
 800219c:	f8c3 2300 	str.w	r2, [r3, #768]	; 0x300
  /* Set MAC addr bits 0 to 31 */
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	3303      	adds	r3, #3
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	061a      	lsls	r2, r3, #24
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	685b      	ldr	r3, [r3, #4]
 80021ae:	3302      	adds	r3, #2
 80021b0:	781b      	ldrb	r3, [r3, #0]
 80021b2:	041b      	lsls	r3, r3, #16
 80021b4:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	685b      	ldr	r3, [r3, #4]
 80021ba:	3301      	adds	r3, #1
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	021b      	lsls	r3, r3, #8
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021c0:	431a      	orrs	r2, r3
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	781b      	ldrb	r3, [r3, #0]
 80021c8:	4619      	mov	r1, r3
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)(heth->Init.MACAddr[1]) << 8) | (uint32_t)heth->Init.MACAddr[0]);
 80021ce:	430a      	orrs	r2, r1
  heth->Instance->MACA0LR = (((uint32_t)(heth->Init.MACAddr[3]) << 24) | ((uint32_t)(heth->Init.MACAddr[2]) << 16) |
 80021d0:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	2200      	movs	r2, #0
 80021d8:	675a      	str	r2, [r3, #116]	; 0x74
  heth->gState = HAL_ETH_STATE_READY;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2210      	movs	r2, #16
 80021de:	66da      	str	r2, [r3, #108]	; 0x6c
  heth->RxState = HAL_ETH_STATE_READY;
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	2210      	movs	r2, #16
 80021e4:	671a      	str	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}
 80021f0:	58024400 	.word	0x58024400
 80021f4:	431bde83 	.word	0x431bde83
 80021f8:	ffff8001 	.word	0xffff8001

080021fc <ETH_SetMACConfig>:
/** @addtogroup ETH_Private_Functions   ETH Private Functions
  * @{
  */

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80021fc:	b480      	push	{r7}
 80021fe:	b085      	sub	sp, #20
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
 8002204:	6039      	str	r1, [r7, #0]
  uint32_t macregval;

  /*------------------------ MACCR Configuration --------------------*/
  macregval =(macconf->InterPacketGapVal |
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	689a      	ldr	r2, [r3, #8]
              macconf->SourceAddrControl |
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	681b      	ldr	r3, [r3, #0]
  macregval =(macconf->InterPacketGapVal |
 800220e:	431a      	orrs	r2, r3
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 8002210:	683b      	ldr	r3, [r7, #0]
 8002212:	791b      	ldrb	r3, [r3, #4]
 8002214:	06db      	lsls	r3, r3, #27
              macconf->SourceAddrControl |
 8002216:	431a      	orrs	r2, r3
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	7b1b      	ldrb	r3, [r3, #12]
 800221c:	05db      	lsls	r3, r3, #23
                ((uint32_t)macconf->ChecksumOffload<< 27) |
 800221e:	431a      	orrs	r2, r3
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	7b5b      	ldrb	r3, [r3, #13]
 8002224:	059b      	lsls	r3, r3, #22
                  ((uint32_t)macconf->GiantPacketSizeLimitControl << 23) |
 8002226:	431a      	orrs	r2, r3
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002228:	683b      	ldr	r3, [r7, #0]
 800222a:	7b9b      	ldrb	r3, [r3, #14]
 800222c:	055b      	lsls	r3, r3, #21
                    ((uint32_t)macconf->Support2KPacket  << 22) |
 800222e:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002230:	683b      	ldr	r3, [r7, #0]
 8002232:	7bdb      	ldrb	r3, [r3, #15]
 8002234:	051b      	lsls	r3, r3, #20
                      ((uint32_t)macconf->CRCStripTypePacket << 21) |
 8002236:	4313      	orrs	r3, r2
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 8002238:	683a      	ldr	r2, [r7, #0]
 800223a:	7c12      	ldrb	r2, [r2, #16]
 800223c:	2a00      	cmp	r2, #0
 800223e:	d102      	bne.n	8002246 <ETH_SetMACConfig+0x4a>
 8002240:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002244:	e000      	b.n	8002248 <ETH_SetMACConfig+0x4c>
 8002246:	2200      	movs	r2, #0
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 20) |
 8002248:	4313      	orrs	r3, r2
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 800224a:	683a      	ldr	r2, [r7, #0]
 800224c:	7c52      	ldrb	r2, [r2, #17]
 800224e:	2a00      	cmp	r2, #0
 8002250:	d102      	bne.n	8002258 <ETH_SetMACConfig+0x5c>
 8002252:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8002256:	e000      	b.n	800225a <ETH_SetMACConfig+0x5e>
 8002258:	2200      	movs	r2, #0
                          ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 19) |
 800225a:	431a      	orrs	r2, r3
                              ((uint32_t)macconf->JumboPacket << 16) |
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	7c9b      	ldrb	r3, [r3, #18]
 8002260:	041b      	lsls	r3, r3, #16
                            ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 17) |
 8002262:	431a      	orrs	r2, r3
                                macconf->Speed |
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	695b      	ldr	r3, [r3, #20]
                              ((uint32_t)macconf->JumboPacket << 16) |
 8002268:	431a      	orrs	r2, r3
                                  macconf->DuplexMode |
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	699b      	ldr	r3, [r3, #24]
                                macconf->Speed |
 800226e:	431a      	orrs	r2, r3
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	7f1b      	ldrb	r3, [r3, #28]
 8002274:	031b      	lsls	r3, r3, #12
                                  macconf->DuplexMode |
 8002276:	431a      	orrs	r2, r3
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	7f5b      	ldrb	r3, [r3, #29]
 800227c:	02db      	lsls	r3, r3, #11
                                    ((uint32_t)macconf->LoopbackMode << 12) |
 800227e:	4313      	orrs	r3, r2
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002280:	683a      	ldr	r2, [r7, #0]
 8002282:	7f92      	ldrb	r2, [r2, #30]
 8002284:	2a00      	cmp	r2, #0
 8002286:	d102      	bne.n	800228e <ETH_SetMACConfig+0x92>
 8002288:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800228c:	e000      	b.n	8002290 <ETH_SetMACConfig+0x94>
 800228e:	2200      	movs	r2, #0
                                      ((uint32_t)macconf->CarrierSenseBeforeTransmit << 11)|
 8002290:	431a      	orrs	r2, r3
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 8002292:	683b      	ldr	r3, [r7, #0]
 8002294:	7fdb      	ldrb	r3, [r3, #31]
 8002296:	025b      	lsls	r3, r3, #9
                                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 10)|
 8002298:	4313      	orrs	r3, r2
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	f892 2020 	ldrb.w	r2, [r2, #32]
 80022a0:	2a00      	cmp	r2, #0
 80022a2:	d102      	bne.n	80022aa <ETH_SetMACConfig+0xae>
 80022a4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80022a8:	e000      	b.n	80022ac <ETH_SetMACConfig+0xb0>
 80022aa:	2200      	movs	r2, #0
                                          ((uint32_t)macconf->CarrierSenseDuringTransmit << 9)|
 80022ac:	431a      	orrs	r2, r3
                                              macconf->BackOffLimit |
 80022ae:	683b      	ldr	r3, [r7, #0]
 80022b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                                            ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 8)|
 80022b2:	431a      	orrs	r2, r3
                                                ((uint32_t)macconf->DeferralCheck << 4)|
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80022ba:	011b      	lsls	r3, r3, #4
                                              macconf->BackOffLimit |
 80022bc:	431a      	orrs	r2, r3
                                                  macconf->PreambleLength);
 80022be:	683b      	ldr	r3, [r7, #0]
 80022c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
  macregval =(macconf->InterPacketGapVal |
 80022c2:	4313      	orrs	r3, r2
 80022c4:	60fb      	str	r3, [r7, #12]

  /* Write to MACCR */
  MODIFY_REG(heth->Instance->MACCR, ETH_MACCR_MASK, macregval);
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4b56      	ldr	r3, [pc, #344]	; (8002428 <ETH_SetMACConfig+0x22c>)
 80022ce:	4013      	ands	r3, r2
 80022d0:	687a      	ldr	r2, [r7, #4]
 80022d2:	6812      	ldr	r2, [r2, #0]
 80022d4:	68f9      	ldr	r1, [r7, #12]
 80022d6:	430b      	orrs	r3, r1
 80022d8:	6013      	str	r3, [r2, #0]

  /*------------------------ MACECR Configuration --------------------*/
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022da:	683b      	ldr	r3, [r7, #0]
 80022dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022de:	065a      	lsls	r2, r3, #25
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80022e6:	061b      	lsls	r3, r3, #24
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 80022e8:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80022f0:	049b      	lsls	r3, r3, #18
               ((uint32_t)macconf->ExtendedInterPacketGap << 24)|
 80022f2:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 80022f4:	683b      	ldr	r3, [r7, #0]
 80022f6:	f893 3031 	ldrb.w	r3, [r3, #49]	; 0x31
 80022fa:	045b      	lsls	r3, r3, #17
                 ((uint32_t)macconf->UnicastSlowProtocolPacketDetect << 18)|
 80022fc:	4313      	orrs	r3, r2
                     ((uint32_t)((macconf->CRCCheckingRxPackets == DISABLE) ? 1U : 0U)<< 16) |
 80022fe:	683a      	ldr	r2, [r7, #0]
 8002300:	f892 2032 	ldrb.w	r2, [r2, #50]	; 0x32
 8002304:	2a00      	cmp	r2, #0
 8002306:	d102      	bne.n	800230e <ETH_SetMACConfig+0x112>
 8002308:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800230c:	e000      	b.n	8002310 <ETH_SetMACConfig+0x114>
 800230e:	2200      	movs	r2, #0
                   ((uint32_t)macconf->SlowProtocolDetect << 17)|
 8002310:	431a      	orrs	r2, r3
                       macconf->GiantPacketSizeLimit);
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  macregval = ((macconf->ExtendedInterPacketGapVal << 25)|
 8002316:	4313      	orrs	r3, r2
 8002318:	60fb      	str	r3, [r7, #12]

  /* Write to MACECR */
  MODIFY_REG(heth->Instance->MACECR, ETH_MACECR_MASK, macregval);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	685a      	ldr	r2, [r3, #4]
 8002320:	4b42      	ldr	r3, [pc, #264]	; (800242c <ETH_SetMACConfig+0x230>)
 8002322:	4013      	ands	r3, r2
 8002324:	687a      	ldr	r2, [r7, #4]
 8002326:	6812      	ldr	r2, [r2, #0]
 8002328:	68f9      	ldr	r1, [r7, #12]
 800232a:	430b      	orrs	r3, r1
 800232c:	6053      	str	r3, [r2, #4]

  /*------------------------ MACWTR Configuration --------------------*/
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002334:	021a      	lsls	r2, r3, #8
               macconf->WatchdogTimeout);
 8002336:	683b      	ldr	r3, [r7, #0]
 8002338:	6c5b      	ldr	r3, [r3, #68]	; 0x44
  macregval = (((uint32_t)macconf->ProgrammableWatchdog << 8) |
 800233a:	4313      	orrs	r3, r2
 800233c:	60fb      	str	r3, [r7, #12]

  /* Write to MACWTR */
  MODIFY_REG(heth->Instance->MACWTR, ETH_MACWTR_MASK, macregval);
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	681b      	ldr	r3, [r3, #0]
 8002342:	68da      	ldr	r2, [r3, #12]
 8002344:	4b3a      	ldr	r3, [pc, #232]	; (8002430 <ETH_SetMACConfig+0x234>)
 8002346:	4013      	ands	r3, r2
 8002348:	687a      	ldr	r2, [r7, #4]
 800234a:	6812      	ldr	r2, [r2, #0]
 800234c:	68f9      	ldr	r1, [r7, #12]
 800234e:	430b      	orrs	r3, r1
 8002350:	60d3      	str	r3, [r2, #12]

  /*------------------------ MACTFCR Configuration --------------------*/
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002352:	683b      	ldr	r3, [r7, #0]
 8002354:	f893 3054 	ldrb.w	r3, [r3, #84]	; 0x54
 8002358:	005a      	lsls	r2, r3, #1
               macconf->PauseLowThreshold |
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 800235e:	4313      	orrs	r3, r2
                 ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U)<< 7) |
 8002360:	683a      	ldr	r2, [r7, #0]
 8002362:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8002366:	2a00      	cmp	r2, #0
 8002368:	d101      	bne.n	800236e <ETH_SetMACConfig+0x172>
 800236a:	2280      	movs	r2, #128	; 0x80
 800236c:	e000      	b.n	8002370 <ETH_SetMACConfig+0x174>
 800236e:	2200      	movs	r2, #0
               macconf->PauseLowThreshold |
 8002370:	431a      	orrs	r2, r3
                   (macconf->PauseTime << 16));
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002376:	041b      	lsls	r3, r3, #16
  macregval = (((uint32_t)macconf->TransmitFlowControl << 1) |
 8002378:	4313      	orrs	r3, r2
 800237a:	60fb      	str	r3, [r7, #12]

  /* Write to MACTFCR */
  MODIFY_REG(heth->Instance->MACTFCR, ETH_MACTFCR_MASK, macregval);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002382:	f64f 730d 	movw	r3, #65293	; 0xff0d
 8002386:	4013      	ands	r3, r2
 8002388:	687a      	ldr	r2, [r7, #4]
 800238a:	6812      	ldr	r2, [r2, #0]
 800238c:	68f9      	ldr	r1, [r7, #12]
 800238e:	430b      	orrs	r3, r1
 8002390:	6713      	str	r3, [r2, #112]	; 0x70

  /*------------------------ MACRFCR Configuration --------------------*/
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 8002392:	683b      	ldr	r3, [r7, #0]
 8002394:	f893 3056 	ldrb.w	r3, [r3, #86]	; 0x56
 8002398:	461a      	mov	r2, r3
               ((uint32_t)macconf->UnicastPausePacketDetect << 1));
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f893 3055 	ldrb.w	r3, [r3, #85]	; 0x55
 80023a0:	005b      	lsls	r3, r3, #1
  macregval = ((uint32_t)macconf->ReceiveFlowControl |
 80023a2:	4313      	orrs	r3, r2
 80023a4:	60fb      	str	r3, [r7, #12]

  /* Write to MACRFCR */
  MODIFY_REG(heth->Instance->MACRFCR, ETH_MACRFCR_MASK, macregval);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ae:	f023 0103 	bic.w	r1, r3, #3
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68fa      	ldr	r2, [r7, #12]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /*------------------------ MTLTQOMR Configuration --------------------*/
  /* Write to MTLTQOMR */
  MODIFY_REG(heth->Instance->MTLTQOMR, ETH_MTLTQOMR_MASK, macconf->TransmitQueueMode);
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8d3 3d00 	ldr.w	r3, [r3, #3328]	; 0xd00
 80023c6:	f023 0172 	bic.w	r1, r3, #114	; 0x72
 80023ca:	683b      	ldr	r3, [r7, #0]
 80023cc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	430a      	orrs	r2, r1
 80023d4:	f8c3 2d00 	str.w	r2, [r3, #3328]	; 0xd00

  /*------------------------ MTLRQOMR Configuration --------------------*/
  macregval = (macconf->ReceiveQueueMode |
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023dc:	683a      	ldr	r2, [r7, #0]
 80023de:	f892 2060 	ldrb.w	r2, [r2, #96]	; 0x60
 80023e2:	2a00      	cmp	r2, #0
 80023e4:	d101      	bne.n	80023ea <ETH_SetMACConfig+0x1ee>
 80023e6:	2240      	movs	r2, #64	; 0x40
 80023e8:	e000      	b.n	80023ec <ETH_SetMACConfig+0x1f0>
 80023ea:	2200      	movs	r2, #0
  macregval = (macconf->ReceiveQueueMode |
 80023ec:	431a      	orrs	r2, r3
                 ((uint32_t)macconf->ForwardRxErrorPacket << 4) |
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	f893 3061 	ldrb.w	r3, [r3, #97]	; 0x61
 80023f4:	011b      	lsls	r3, r3, #4
               ((uint32_t)((macconf->DropTCPIPChecksumErrorPacket == DISABLE) ? 1U : 0U) << 6) |
 80023f6:	431a      	orrs	r2, r3
                   ((uint32_t)macconf->ForwardRxUndersizedGoodPacket << 3));
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	f893 3062 	ldrb.w	r3, [r3, #98]	; 0x62
 80023fe:	00db      	lsls	r3, r3, #3
  macregval = (macconf->ReceiveQueueMode |
 8002400:	4313      	orrs	r3, r2
 8002402:	60fb      	str	r3, [r7, #12]

  /* Write to MTLRQOMR */
  MODIFY_REG(heth->Instance->MTLRQOMR, ETH_MTLRQOMR_MASK, macregval);
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f8d3 3d30 	ldr.w	r3, [r3, #3376]	; 0xd30
 800240c:	f023 017b 	bic.w	r1, r3, #123	; 0x7b
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	68fa      	ldr	r2, [r7, #12]
 8002416:	430a      	orrs	r2, r1
 8002418:	f8c3 2d30 	str.w	r2, [r3, #3376]	; 0xd30
}
 800241c:	bf00      	nop
 800241e:	3714      	adds	r7, #20
 8002420:	46bd      	mov	sp, r7
 8002422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002426:	4770      	bx	lr
 8002428:	00048083 	.word	0x00048083
 800242c:	c0f88000 	.word	0xc0f88000
 8002430:	fffffef0 	.word	0xfffffef0

08002434 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8002434:	b480      	push	{r7}
 8002436:	b085      	sub	sp, #20
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
 800243c:	6039      	str	r1, [r7, #0]
  uint32_t dmaregval;

  /*------------------------ DMAMR Configuration --------------------*/
  MODIFY_REG(heth->Instance->DMAMR, ETH_DMAMR_MASK, dmaconf->DMAArbitration);
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002446:	681a      	ldr	r2, [r3, #0]
 8002448:	4b38      	ldr	r3, [pc, #224]	; (800252c <ETH_SetDMAConfig+0xf8>)
 800244a:	4013      	ands	r3, r2
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	6812      	ldr	r2, [r2, #0]
 8002450:	6879      	ldr	r1, [r7, #4]
 8002452:	6809      	ldr	r1, [r1, #0]
 8002454:	431a      	orrs	r2, r3
 8002456:	f501 5380 	add.w	r3, r1, #4096	; 0x1000
 800245a:	601a      	str	r2, [r3, #0]

  /*------------------------ DMASBMR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800245c:	683b      	ldr	r3, [r7, #0]
 800245e:	791b      	ldrb	r3, [r3, #4]
 8002460:	031a      	lsls	r2, r3, #12
               dmaconf->BurstMode |
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 8002466:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->RebuildINCRxBurst << 15));
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	7b1b      	ldrb	r3, [r3, #12]
 800246c:	03db      	lsls	r3, r3, #15
  dmaregval = (((uint32_t)dmaconf->AddressAlignedBeats << 12) |
 800246e:	4313      	orrs	r3, r2
 8002470:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMASBMR, ETH_DMASBMR_MASK, dmaregval);
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	f241 0304 	movw	r3, #4100	; 0x1004
 800247a:	4413      	add	r3, r2
 800247c:	681a      	ldr	r2, [r3, #0]
 800247e:	4b2c      	ldr	r3, [pc, #176]	; (8002530 <ETH_SetDMAConfig+0xfc>)
 8002480:	4013      	ands	r3, r2
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	6811      	ldr	r1, [r2, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	431a      	orrs	r2, r3
 800248a:	f241 0304 	movw	r3, #4100	; 0x1004
 800248e:	440b      	add	r3, r1
 8002490:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 8002492:	683b      	ldr	r3, [r7, #0]
 8002494:	7b5b      	ldrb	r3, [r3, #13]
 8002496:	041a      	lsls	r2, r3, #16
               dmaconf->MaximumSegmentSize);
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6a1b      	ldr	r3, [r3, #32]
  dmaregval = (((uint32_t)dmaconf->PBLx8Mode << 16) |
 800249c:	4313      	orrs	r3, r2
 800249e:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACCR, ETH_DMACCR_MASK, dmaregval);
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	f503 5388 	add.w	r3, r3, #4352	; 0x1100
 80024a8:	681a      	ldr	r2, [r3, #0]
 80024aa:	4b22      	ldr	r3, [pc, #136]	; (8002534 <ETH_SetDMAConfig+0x100>)
 80024ac:	4013      	ands	r3, r2
 80024ae:	687a      	ldr	r2, [r7, #4]
 80024b0:	6811      	ldr	r1, [r2, #0]
 80024b2:	68fa      	ldr	r2, [r7, #12]
 80024b4:	431a      	orrs	r2, r3
 80024b6:	f501 5388 	add.w	r3, r1, #4352	; 0x1100
 80024ba:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACTCR Configuration --------------------*/
  dmaregval = (dmaconf->TxDMABurstLength |
 80024bc:	683b      	ldr	r3, [r7, #0]
 80024be:	691a      	ldr	r2, [r3, #16]
               ((uint32_t)dmaconf->SecondPacketOperate << 4)|
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	7d1b      	ldrb	r3, [r3, #20]
 80024c4:	011b      	lsls	r3, r3, #4
  dmaregval = (dmaconf->TxDMABurstLength |
 80024c6:	431a      	orrs	r2, r3
                 ((uint32_t)dmaconf->TCPSegmentation << 12));
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	7f5b      	ldrb	r3, [r3, #29]
 80024cc:	031b      	lsls	r3, r3, #12
  dmaregval = (dmaconf->TxDMABurstLength |
 80024ce:	4313      	orrs	r3, r2
 80024d0:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(heth->Instance->DMACTCR, ETH_DMACTCR_MASK, dmaregval);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681a      	ldr	r2, [r3, #0]
 80024d6:	f241 1304 	movw	r3, #4356	; 0x1104
 80024da:	4413      	add	r3, r2
 80024dc:	681a      	ldr	r2, [r3, #0]
 80024de:	4b16      	ldr	r3, [pc, #88]	; (8002538 <ETH_SetDMAConfig+0x104>)
 80024e0:	4013      	ands	r3, r2
 80024e2:	687a      	ldr	r2, [r7, #4]
 80024e4:	6811      	ldr	r1, [r2, #0]
 80024e6:	68fa      	ldr	r2, [r7, #12]
 80024e8:	431a      	orrs	r2, r3
 80024ea:	f241 1304 	movw	r3, #4356	; 0x1104
 80024ee:	440b      	add	r3, r1
 80024f0:	601a      	str	r2, [r3, #0]

  /*------------------------ DMACRCR Configuration --------------------*/
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	7f1b      	ldrb	r3, [r3, #28]
 80024f6:	07da      	lsls	r2, r3, #31
               dmaconf->RxDMABurstLength);
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	699b      	ldr	r3, [r3, #24]
  dmaregval = (((uint32_t)dmaconf->FlushRxPacket  << 31) |
 80024fc:	4313      	orrs	r3, r2
 80024fe:	60fb      	str	r3, [r7, #12]

  /* Write to DMACRCR */
  MODIFY_REG(heth->Instance->DMACRCR, ETH_DMACRCR_MASK, dmaregval);
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	f241 1308 	movw	r3, #4360	; 0x1108
 8002508:	4413      	add	r3, r2
 800250a:	681a      	ldr	r2, [r3, #0]
 800250c:	4b0b      	ldr	r3, [pc, #44]	; (800253c <ETH_SetDMAConfig+0x108>)
 800250e:	4013      	ands	r3, r2
 8002510:	687a      	ldr	r2, [r7, #4]
 8002512:	6811      	ldr	r1, [r2, #0]
 8002514:	68fa      	ldr	r2, [r7, #12]
 8002516:	431a      	orrs	r2, r3
 8002518:	f241 1308 	movw	r3, #4360	; 0x1108
 800251c:	440b      	add	r3, r1
 800251e:	601a      	str	r2, [r3, #0]
}
 8002520:	bf00      	nop
 8002522:	3714      	adds	r7, #20
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr
 800252c:	ffff87fd 	.word	0xffff87fd
 8002530:	ffff2ffe 	.word	0xffff2ffe
 8002534:	fffec000 	.word	0xfffec000
 8002538:	ffc0efef 	.word	0xffc0efef
 800253c:	7fc0ffff 	.word	0x7fc0ffff

08002540 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b0a4      	sub	sp, #144	; 0x90
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.AutomaticPadCRCStrip = ENABLE;
 8002548:	2301      	movs	r3, #1
 800254a:	f887 303b 	strb.w	r3, [r7, #59]	; 0x3b
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 800254e:	2300      	movs	r3, #0
 8002550:	653b      	str	r3, [r7, #80]	; 0x50
  macDefaultConf.CarrierSenseBeforeTransmit = DISABLE;
 8002552:	2300      	movs	r3, #0
 8002554:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002558:	2300      	movs	r3, #0
 800255a:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
  macDefaultConf.ChecksumOffload = ENABLE;
 800255e:	2301      	movs	r3, #1
 8002560:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  macDefaultConf.CRCCheckingRxPackets = ENABLE;
 8002564:	2301      	movs	r3, #1
 8002566:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
  macDefaultConf.CRCStripTypePacket = ENABLE;
 800256a:	2301      	movs	r3, #1
 800256c:	f887 303a 	strb.w	r3, [r7, #58]	; 0x3a
  macDefaultConf.DeferralCheck = DISABLE;
 8002570:	2300      	movs	r3, #0
 8002572:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.DropTCPIPChecksumErrorPacket = ENABLE;
 8002576:	2301      	movs	r3, #1
 8002578:	f887 308c 	strb.w	r3, [r7, #140]	; 0x8c
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 800257c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002580:	647b      	str	r3, [r7, #68]	; 0x44
  macDefaultConf.ExtendedInterPacketGap = DISABLE;
 8002582:	2300      	movs	r3, #0
 8002584:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
  macDefaultConf.ExtendedInterPacketGapVal = 0x0;
 8002588:	2300      	movs	r3, #0
 800258a:	66bb      	str	r3, [r7, #104]	; 0x68
  macDefaultConf.ForwardRxErrorPacket = DISABLE;
 800258c:	2300      	movs	r3, #0
 800258e:	f887 308d 	strb.w	r3, [r7, #141]	; 0x8d
  macDefaultConf.ForwardRxUndersizedGoodPacket = DISABLE;
 8002592:	2300      	movs	r3, #0
 8002594:	f887 308e 	strb.w	r3, [r7, #142]	; 0x8e
  macDefaultConf.GiantPacketSizeLimit = 0x618;
 8002598:	f44f 63c3 	mov.w	r3, #1560	; 0x618
 800259c:	663b      	str	r3, [r7, #96]	; 0x60
  macDefaultConf.GiantPacketSizeLimitControl = DISABLE;
 800259e:	2300      	movs	r3, #0
 80025a0:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.InterPacketGapVal = ETH_INTERPACKETGAP_96BIT;
 80025a4:	2300      	movs	r3, #0
 80025a6:	637b      	str	r3, [r7, #52]	; 0x34
  macDefaultConf.Jabber = ENABLE;
 80025a8:	2301      	movs	r3, #1
 80025aa:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
  macDefaultConf.JumboPacket = DISABLE;
 80025ae:	2300      	movs	r3, #0
 80025b0:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
  macDefaultConf.LoopbackMode = DISABLE;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS_4;
 80025ba:	2300      	movs	r3, #0
 80025bc:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.PauseTime = 0x0;
 80025be:	2300      	movs	r3, #0
 80025c0:	677b      	str	r3, [r7, #116]	; 0x74
  macDefaultConf.PreambleLength = ETH_PREAMBLELENGTH_7;
 80025c2:	2300      	movs	r3, #0
 80025c4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.ProgrammableWatchdog = DISABLE;
 80025c6:	2300      	movs	r3, #0
 80025c8:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80025cc:	2300      	movs	r3, #0
 80025ce:	f887 3082 	strb.w	r3, [r7, #130]	; 0x82
  macDefaultConf.ReceiveOwn = ENABLE;
 80025d2:	2301      	movs	r3, #1
 80025d4:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
  macDefaultConf.ReceiveQueueMode = ETH_RECEIVESTOREFORWARD;
 80025d8:	2320      	movs	r3, #32
 80025da:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  macDefaultConf.RetryTransmission = ENABLE;
 80025de:	2301      	movs	r3, #1
 80025e0:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
  macDefaultConf.SlowProtocolDetect = DISABLE;
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
  macDefaultConf.SourceAddrControl = ETH_SOURCEADDRESS_REPLACE_ADDR0;
 80025ea:	f04f 5340 	mov.w	r3, #805306368	; 0x30000000
 80025ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  macDefaultConf.Speed = ETH_SPEED_100M;
 80025f0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80025f4:	643b      	str	r3, [r7, #64]	; 0x40
  macDefaultConf.Support2KPacket = DISABLE;
 80025f6:	2300      	movs	r3, #0
 80025f8:	f887 3039 	strb.w	r3, [r7, #57]	; 0x39
  macDefaultConf.TransmitQueueMode = ETH_TRANSMITSTOREFORWARD;
 80025fc:	2302      	movs	r3, #2
 80025fe:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002602:	2300      	movs	r3, #0
 8002604:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8002608:	2300      	movs	r3, #0
 800260a:	f887 3081 	strb.w	r3, [r7, #129]	; 0x81
  macDefaultConf.UnicastSlowProtocolPacketDetect = DISABLE;
 800260e:	2300      	movs	r3, #0
 8002610:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.Watchdog = ENABLE;
 8002614:	2301      	movs	r3, #1
 8002616:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
  macDefaultConf.WatchdogTimeout =  ETH_MACWTR_WTO_2KB;
 800261a:	2300      	movs	r3, #0
 800261c:	673b      	str	r3, [r7, #112]	; 0x70
  macDefaultConf.ZeroQuantaPause = ENABLE;
 800261e:	2301      	movs	r3, #1
 8002620:	f887 3078 	strb.w	r3, [r7, #120]	; 0x78

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002624:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002628:	4619      	mov	r1, r3
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f7ff fde6 	bl	80021fc <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8002630:	2301      	movs	r3, #1
 8002632:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8002634:	2301      	movs	r3, #1
 8002636:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_RX1_TX1;
 8002638:	2300      	movs	r3, #0
 800263a:	60bb      	str	r3, [r7, #8]
  dmaDefaultConf.FlushRxPacket = DISABLE;
 800263c:	2300      	movs	r3, #0
 800263e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.PBLx8Mode = DISABLE;
 8002642:	2300      	movs	r3, #0
 8002644:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.RebuildINCRxBurst = DISABLE;
 8002646:	2300      	movs	r3, #0
 8002648:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 800264a:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800264e:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.SecondPacketOperate = DISABLE;
 8002650:	2300      	movs	r3, #0
 8002652:	773b      	strb	r3, [r7, #28]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8002654:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8002658:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.TCPSegmentation = DISABLE;
 800265a:	2300      	movs	r3, #0
 800265c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.MaximumSegmentSize = 536;
 8002660:	f44f 7306 	mov.w	r3, #536	; 0x218
 8002664:	62bb      	str	r3, [r7, #40]	; 0x28

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8002666:	f107 0308 	add.w	r3, r7, #8
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f7ff fee1 	bl	8002434 <ETH_SetDMAConfig>
}
 8002672:	bf00      	nop
 8002674:	3790      	adds	r7, #144	; 0x90
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
	...

0800267c <ETH_MAC_MDIO_ClkConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_MAC_MDIO_ClkConfig(ETH_HandleTypeDef *heth)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
 8002682:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg, hclk;

  /* Get the ETHERNET MACMDIOAR value */
  tmpreg = (heth->Instance)->MACMDIOAR;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800268c:	60fb      	str	r3, [r7, #12]

  /* Clear CSR Clock Range bits */
  tmpreg &= ~ETH_MACMDIOAR_CR;
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002694:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002696:	f001 fbbd 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 800269a:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if((hclk >= 20000000U)&&(hclk < 35000000U))
 800269c:	68bb      	ldr	r3, [r7, #8]
 800269e:	4a1e      	ldr	r2, [pc, #120]	; (8002718 <ETH_MAC_MDIO_ClkConfig+0x9c>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d908      	bls.n	80026b6 <ETH_MAC_MDIO_ClkConfig+0x3a>
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	4a1d      	ldr	r2, [pc, #116]	; (800271c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80026a8:	4293      	cmp	r3, r2
 80026aa:	d804      	bhi.n	80026b6 <ETH_MAC_MDIO_ClkConfig+0x3a>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV16;
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80026b2:	60fb      	str	r3, [r7, #12]
 80026b4:	e027      	b.n	8002706 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 35000000U)&&(hclk < 60000000U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	4a18      	ldr	r2, [pc, #96]	; (800271c <ETH_MAC_MDIO_ClkConfig+0xa0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d908      	bls.n	80026d0 <ETH_MAC_MDIO_ClkConfig+0x54>
 80026be:	68bb      	ldr	r3, [r7, #8]
 80026c0:	4a17      	ldr	r2, [pc, #92]	; (8002720 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80026c2:	4293      	cmp	r3, r2
 80026c4:	d204      	bcs.n	80026d0 <ETH_MAC_MDIO_ClkConfig+0x54>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV26;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80026cc:	60fb      	str	r3, [r7, #12]
 80026ce:	e01a      	b.n	8002706 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else if((hclk >= 60000000U)&&(hclk < 100000000U))
 80026d0:	68bb      	ldr	r3, [r7, #8]
 80026d2:	4a13      	ldr	r2, [pc, #76]	; (8002720 <ETH_MAC_MDIO_ClkConfig+0xa4>)
 80026d4:	4293      	cmp	r3, r2
 80026d6:	d303      	bcc.n	80026e0 <ETH_MAC_MDIO_ClkConfig+0x64>
 80026d8:	68bb      	ldr	r3, [r7, #8]
 80026da:	4a12      	ldr	r2, [pc, #72]	; (8002724 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026dc:	4293      	cmp	r3, r2
 80026de:	d911      	bls.n	8002704 <ETH_MAC_MDIO_ClkConfig+0x88>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
  }
  else if((hclk >= 100000000U)&&(hclk < 150000000U))
 80026e0:	68bb      	ldr	r3, [r7, #8]
 80026e2:	4a10      	ldr	r2, [pc, #64]	; (8002724 <ETH_MAC_MDIO_ClkConfig+0xa8>)
 80026e4:	4293      	cmp	r3, r2
 80026e6:	d908      	bls.n	80026fa <ETH_MAC_MDIO_ClkConfig+0x7e>
 80026e8:	68bb      	ldr	r3, [r7, #8]
 80026ea:	4a0f      	ldr	r2, [pc, #60]	; (8002728 <ETH_MAC_MDIO_ClkConfig+0xac>)
 80026ec:	4293      	cmp	r3, r2
 80026ee:	d804      	bhi.n	80026fa <ETH_MAC_MDIO_ClkConfig+0x7e>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV62;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80026f6:	60fb      	str	r3, [r7, #12]
 80026f8:	e005      	b.n	8002706 <ETH_MAC_MDIO_ClkConfig+0x8a>
  }
  else /* (hclk >= 150000000)&&(hclk <= 200000000) */
  {
    /* CSR Clock Range between 150-200 MHz */
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV102;
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002700:	60fb      	str	r3, [r7, #12]
 8002702:	e000      	b.n	8002706 <ETH_MAC_MDIO_ClkConfig+0x8a>
    tmpreg |= (uint32_t)ETH_MACMDIOAR_CR_DIV42;
 8002704:	bf00      	nop
  }

  /* Configure the CSR Clock Range */
  (heth->Instance)->MACMDIOAR = (uint32_t)tmpreg;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	68fa      	ldr	r2, [r7, #12]
 800270c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
}
 8002710:	bf00      	nop
 8002712:	3710      	adds	r7, #16
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	01312cff 	.word	0x01312cff
 800271c:	02160ebf 	.word	0x02160ebf
 8002720:	03938700 	.word	0x03938700
 8002724:	05f5e0ff 	.word	0x05f5e0ff
 8002728:	08f0d17f 	.word	0x08f0d17f

0800272c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800272c:	b480      	push	{r7}
 800272e:	b085      	sub	sp, #20
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002734:	2300      	movs	r3, #0
 8002736:	60fb      	str	r3, [r7, #12]
 8002738:	e01d      	b.n	8002776 <ETH_DMATxDescListInit+0x4a>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	68d9      	ldr	r1, [r3, #12]
 800273e:	68fa      	ldr	r2, [r7, #12]
 8002740:	4613      	mov	r3, r2
 8002742:	005b      	lsls	r3, r3, #1
 8002744:	4413      	add	r3, r2
 8002746:	00db      	lsls	r3, r3, #3
 8002748:	440b      	add	r3, r1
 800274a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	2200      	movs	r2, #0
 8002750:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002752:	68bb      	ldr	r3, [r7, #8]
 8002754:	2200      	movs	r2, #0
 8002756:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002758:	68bb      	ldr	r3, [r7, #8]
 800275a:	2200      	movs	r2, #0
 800275c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800275e:	68bb      	ldr	r3, [r7, #8]
 8002760:	2200      	movs	r2, #0
 8002762:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002764:	68b9      	ldr	r1, [r7, #8]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	68fa      	ldr	r2, [r7, #12]
 800276a:	3206      	adds	r2, #6
 800276c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  for(i=0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002770:	68fb      	ldr	r3, [r7, #12]
 8002772:	3301      	adds	r3, #1
 8002774:	60fb      	str	r3, [r7, #12]
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2b03      	cmp	r3, #3
 800277a:	d9de      	bls.n	800273a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2200      	movs	r2, #0
 8002780:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACTDRLR, (ETH_TX_DESC_CNT -1));
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681a      	ldr	r2, [r3, #0]
 8002786:	f241 132c 	movw	r3, #4396	; 0x112c
 800278a:	4413      	add	r3, r2
 800278c:	2203      	movs	r2, #3
 800278e:	601a      	str	r2, [r3, #0]

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMACTDLAR, (uint32_t) heth->Init.TxDesc);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	68d9      	ldr	r1, [r3, #12]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681a      	ldr	r2, [r3, #0]
 8002798:	f241 1314 	movw	r3, #4372	; 0x1114
 800279c:	4413      	add	r3, r2
 800279e:	6019      	str	r1, [r3, #0]

  /* Set Transmit Descriptor Tail pointer */
  WRITE_REG(heth->Instance->DMACTDTPR, (uint32_t) heth->Init.TxDesc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	f503 5389 	add.w	r3, r3, #4384	; 0x1120
 80027ac:	601a      	str	r2, [r3, #0]
}
 80027ae:	bf00      	nop
 80027b0:	3714      	adds	r7, #20
 80027b2:	46bd      	mov	sp, r7
 80027b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027b8:	4770      	bx	lr

080027ba <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80027c2:	2300      	movs	r3, #0
 80027c4:	60fb      	str	r3, [r7, #12]
 80027c6:	e024      	b.n	8002812 <ETH_DMARxDescListInit+0x58>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	6919      	ldr	r1, [r3, #16]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	4613      	mov	r3, r2
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	4413      	add	r3, r2
 80027d4:	00db      	lsls	r3, r3, #3
 80027d6:	440b      	add	r3, r1
 80027d8:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 80027da:	68bb      	ldr	r3, [r7, #8]
 80027dc:	2200      	movs	r2, #0
 80027de:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 80027e0:	68bb      	ldr	r3, [r7, #8]
 80027e2:	2200      	movs	r2, #0
 80027e4:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 80027e6:	68bb      	ldr	r3, [r7, #8]
 80027e8:	2200      	movs	r2, #0
 80027ea:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	2200      	movs	r2, #0
 80027f0:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 80027f2:	68bb      	ldr	r3, [r7, #8]
 80027f4:	2200      	movs	r2, #0
 80027f6:	611a      	str	r2, [r3, #16]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	2200      	movs	r2, #0
 80027fc:	615a      	str	r2, [r3, #20]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 80027fe:	68ba      	ldr	r2, [r7, #8]
 8002800:	6879      	ldr	r1, [r7, #4]
 8002802:	68fb      	ldr	r3, [r7, #12]
 8002804:	3310      	adds	r3, #16
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	440b      	add	r3, r1
 800280a:	605a      	str	r2, [r3, #4]
  for(i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	3301      	adds	r3, #1
 8002810:	60fb      	str	r3, [r7, #12]
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2b03      	cmp	r3, #3
 8002816:	d9d7      	bls.n	80027c8 <ETH_DMARxDescListInit+0xe>
  }

  WRITE_REG(heth->RxDescList.CurRxDesc, 0);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	2200      	movs	r2, #0
 800281c:	655a      	str	r2, [r3, #84]	; 0x54
  WRITE_REG(heth->RxDescList.FirstAppDesc, 0);
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2200      	movs	r2, #0
 8002822:	659a      	str	r2, [r3, #88]	; 0x58
  WRITE_REG(heth->RxDescList.AppDescNbr, 0);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2200      	movs	r2, #0
 800282e:	665a      	str	r2, [r3, #100]	; 0x64
  WRITE_REG(heth->RxDescList.AppContextDesc, 0);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2200      	movs	r2, #0
 8002834:	661a      	str	r2, [r3, #96]	; 0x60

  /* Set Receive Descriptor Ring Length */
  WRITE_REG(heth->Instance->DMACRDRLR, ((uint32_t)(ETH_RX_DESC_CNT - 1)));
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681a      	ldr	r2, [r3, #0]
 800283a:	f241 1330 	movw	r3, #4400	; 0x1130
 800283e:	4413      	add	r3, r2
 8002840:	2203      	movs	r2, #3
 8002842:	601a      	str	r2, [r3, #0]

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMACRDLAR, (uint32_t) heth->Init.RxDesc);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	6919      	ldr	r1, [r3, #16]
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681a      	ldr	r2, [r3, #0]
 800284c:	f241 131c 	movw	r3, #4380	; 0x111c
 8002850:	4413      	add	r3, r2
 8002852:	6019      	str	r1, [r3, #0]

  /* Set Receive Descriptor Tail pointer Address */
  WRITE_REG(heth->Instance->DMACRDTPR, ((uint32_t)(heth->Init.RxDesc + (uint32_t)(ETH_RX_DESC_CNT - 1))));
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	f103 0148 	add.w	r1, r3, #72	; 0x48
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681a      	ldr	r2, [r3, #0]
 8002860:	f241 1328 	movw	r3, #4392	; 0x1128
 8002864:	4413      	add	r3, r2
 8002866:	6019      	str	r1, [r3, #0]
}
 8002868:	bf00      	nop
 800286a:	3714      	adds	r7, #20
 800286c:	46bd      	mov	sp, r7
 800286e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002872:	4770      	bx	lr

08002874 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002874:	b480      	push	{r7}
 8002876:	b089      	sub	sp, #36	; 0x24
 8002878:	af00      	add	r7, sp, #0
 800287a:	6078      	str	r0, [r7, #4]
 800287c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800287e:	2300      	movs	r3, #0
 8002880:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002882:	4b89      	ldr	r3, [pc, #548]	; (8002aa8 <HAL_GPIO_Init+0x234>)
 8002884:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002886:	e194      	b.n	8002bb2 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	2101      	movs	r1, #1
 800288e:	69fb      	ldr	r3, [r7, #28]
 8002890:	fa01 f303 	lsl.w	r3, r1, r3
 8002894:	4013      	ands	r3, r2
 8002896:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002898:	693b      	ldr	r3, [r7, #16]
 800289a:	2b00      	cmp	r3, #0
 800289c:	f000 8186 	beq.w	8002bac <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	685b      	ldr	r3, [r3, #4]
 80028a4:	2b01      	cmp	r3, #1
 80028a6:	d00b      	beq.n	80028c0 <HAL_GPIO_Init+0x4c>
 80028a8:	683b      	ldr	r3, [r7, #0]
 80028aa:	685b      	ldr	r3, [r3, #4]
 80028ac:	2b02      	cmp	r3, #2
 80028ae:	d007      	beq.n	80028c0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
      if ((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80028b4:	2b11      	cmp	r3, #17
 80028b6:	d003      	beq.n	80028c0 <HAL_GPIO_Init+0x4c>
          (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	2b12      	cmp	r3, #18
 80028be:	d130      	bne.n	8002922 <HAL_GPIO_Init+0xae>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	689b      	ldr	r3, [r3, #8]
 80028c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80028c6:	69fb      	ldr	r3, [r7, #28]
 80028c8:	005b      	lsls	r3, r3, #1
 80028ca:	2203      	movs	r2, #3
 80028cc:	fa02 f303 	lsl.w	r3, r2, r3
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	68da      	ldr	r2, [r3, #12]
 80028dc:	69fb      	ldr	r3, [r7, #28]
 80028de:	005b      	lsls	r3, r3, #1
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	69ba      	ldr	r2, [r7, #24]
 80028ee:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	685b      	ldr	r3, [r3, #4]
 80028f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80028f6:	2201      	movs	r2, #1
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	fa02 f303 	lsl.w	r3, r2, r3
 80028fe:	43db      	mvns	r3, r3
 8002900:	69ba      	ldr	r2, [r7, #24]
 8002902:	4013      	ands	r3, r2
 8002904:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	091b      	lsrs	r3, r3, #4
 800290c:	f003 0201 	and.w	r2, r3, #1
 8002910:	69fb      	ldr	r3, [r7, #28]
 8002912:	fa02 f303 	lsl.w	r3, r2, r3
 8002916:	69ba      	ldr	r2, [r7, #24]
 8002918:	4313      	orrs	r3, r2
 800291a:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	69ba      	ldr	r2, [r7, #24]
 8002920:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	68db      	ldr	r3, [r3, #12]
 8002926:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002928:	69fb      	ldr	r3, [r7, #28]
 800292a:	005b      	lsls	r3, r3, #1
 800292c:	2203      	movs	r2, #3
 800292e:	fa02 f303 	lsl.w	r3, r2, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	69ba      	ldr	r2, [r7, #24]
 8002936:	4013      	ands	r3, r2
 8002938:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	689a      	ldr	r2, [r3, #8]
 800293e:	69fb      	ldr	r3, [r7, #28]
 8002940:	005b      	lsls	r3, r3, #1
 8002942:	fa02 f303 	lsl.w	r3, r2, r3
 8002946:	69ba      	ldr	r2, [r7, #24]
 8002948:	4313      	orrs	r3, r2
 800294a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	69ba      	ldr	r2, [r7, #24]
 8002950:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002952:	683b      	ldr	r3, [r7, #0]
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	2b02      	cmp	r3, #2
 8002958:	d003      	beq.n	8002962 <HAL_GPIO_Init+0xee>
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b12      	cmp	r3, #18
 8002960:	d123      	bne.n	80029aa <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002962:	69fb      	ldr	r3, [r7, #28]
 8002964:	08da      	lsrs	r2, r3, #3
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	3208      	adds	r2, #8
 800296a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800296e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002970:	69fb      	ldr	r3, [r7, #28]
 8002972:	f003 0307 	and.w	r3, r3, #7
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	220f      	movs	r2, #15
 800297a:	fa02 f303 	lsl.w	r3, r2, r3
 800297e:	43db      	mvns	r3, r3
 8002980:	69ba      	ldr	r2, [r7, #24]
 8002982:	4013      	ands	r3, r2
 8002984:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002986:	683b      	ldr	r3, [r7, #0]
 8002988:	691a      	ldr	r2, [r3, #16]
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	f003 0307 	and.w	r3, r3, #7
 8002990:	009b      	lsls	r3, r3, #2
 8002992:	fa02 f303 	lsl.w	r3, r2, r3
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	4313      	orrs	r3, r2
 800299a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800299c:	69fb      	ldr	r3, [r7, #28]
 800299e:	08da      	lsrs	r2, r3, #3
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	3208      	adds	r2, #8
 80029a4:	69b9      	ldr	r1, [r7, #24]
 80029a6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	005b      	lsls	r3, r3, #1
 80029b4:	2203      	movs	r2, #3
 80029b6:	fa02 f303 	lsl.w	r3, r2, r3
 80029ba:	43db      	mvns	r3, r3
 80029bc:	69ba      	ldr	r2, [r7, #24]
 80029be:	4013      	ands	r3, r2
 80029c0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f003 0203 	and.w	r2, r3, #3
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	005b      	lsls	r3, r3, #1
 80029ce:	fa02 f303 	lsl.w	r3, r2, r3
 80029d2:	69ba      	ldr	r2, [r7, #24]
 80029d4:	4313      	orrs	r3, r2
 80029d6:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	69ba      	ldr	r2, [r7, #24]
 80029dc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	f000 80e0 	beq.w	8002bac <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80029ec:	4b2f      	ldr	r3, [pc, #188]	; (8002aac <HAL_GPIO_Init+0x238>)
 80029ee:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 80029f2:	4a2e      	ldr	r2, [pc, #184]	; (8002aac <HAL_GPIO_Init+0x238>)
 80029f4:	f043 0302 	orr.w	r3, r3, #2
 80029f8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 80029fc:	4b2b      	ldr	r3, [pc, #172]	; (8002aac <HAL_GPIO_Init+0x238>)
 80029fe:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002a02:	f003 0302 	and.w	r3, r3, #2
 8002a06:	60fb      	str	r3, [r7, #12]
 8002a08:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002a0a:	4a29      	ldr	r2, [pc, #164]	; (8002ab0 <HAL_GPIO_Init+0x23c>)
 8002a0c:	69fb      	ldr	r3, [r7, #28]
 8002a0e:	089b      	lsrs	r3, r3, #2
 8002a10:	3302      	adds	r3, #2
 8002a12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002a16:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002a18:	69fb      	ldr	r3, [r7, #28]
 8002a1a:	f003 0303 	and.w	r3, r3, #3
 8002a1e:	009b      	lsls	r3, r3, #2
 8002a20:	220f      	movs	r2, #15
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43db      	mvns	r3, r3
 8002a28:	69ba      	ldr	r2, [r7, #24]
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	4a20      	ldr	r2, [pc, #128]	; (8002ab4 <HAL_GPIO_Init+0x240>)
 8002a32:	4293      	cmp	r3, r2
 8002a34:	d052      	beq.n	8002adc <HAL_GPIO_Init+0x268>
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	4a1f      	ldr	r2, [pc, #124]	; (8002ab8 <HAL_GPIO_Init+0x244>)
 8002a3a:	4293      	cmp	r3, r2
 8002a3c:	d031      	beq.n	8002aa2 <HAL_GPIO_Init+0x22e>
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	4a1e      	ldr	r2, [pc, #120]	; (8002abc <HAL_GPIO_Init+0x248>)
 8002a42:	4293      	cmp	r3, r2
 8002a44:	d02b      	beq.n	8002a9e <HAL_GPIO_Init+0x22a>
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	4a1d      	ldr	r2, [pc, #116]	; (8002ac0 <HAL_GPIO_Init+0x24c>)
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d025      	beq.n	8002a9a <HAL_GPIO_Init+0x226>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	4a1c      	ldr	r2, [pc, #112]	; (8002ac4 <HAL_GPIO_Init+0x250>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d01f      	beq.n	8002a96 <HAL_GPIO_Init+0x222>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	4a1b      	ldr	r2, [pc, #108]	; (8002ac8 <HAL_GPIO_Init+0x254>)
 8002a5a:	4293      	cmp	r3, r2
 8002a5c:	d019      	beq.n	8002a92 <HAL_GPIO_Init+0x21e>
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	4a1a      	ldr	r2, [pc, #104]	; (8002acc <HAL_GPIO_Init+0x258>)
 8002a62:	4293      	cmp	r3, r2
 8002a64:	d013      	beq.n	8002a8e <HAL_GPIO_Init+0x21a>
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	4a19      	ldr	r2, [pc, #100]	; (8002ad0 <HAL_GPIO_Init+0x25c>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00d      	beq.n	8002a8a <HAL_GPIO_Init+0x216>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	4a18      	ldr	r2, [pc, #96]	; (8002ad4 <HAL_GPIO_Init+0x260>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d007      	beq.n	8002a86 <HAL_GPIO_Init+0x212>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	4a17      	ldr	r2, [pc, #92]	; (8002ad8 <HAL_GPIO_Init+0x264>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d101      	bne.n	8002a82 <HAL_GPIO_Init+0x20e>
 8002a7e:	2309      	movs	r3, #9
 8002a80:	e02d      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a82:	230a      	movs	r3, #10
 8002a84:	e02b      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a86:	2308      	movs	r3, #8
 8002a88:	e029      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a8a:	2307      	movs	r3, #7
 8002a8c:	e027      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a8e:	2306      	movs	r3, #6
 8002a90:	e025      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a92:	2305      	movs	r3, #5
 8002a94:	e023      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a96:	2304      	movs	r3, #4
 8002a98:	e021      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a9a:	2303      	movs	r3, #3
 8002a9c:	e01f      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002a9e:	2302      	movs	r3, #2
 8002aa0:	e01d      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e01b      	b.n	8002ade <HAL_GPIO_Init+0x26a>
 8002aa6:	bf00      	nop
 8002aa8:	58000080 	.word	0x58000080
 8002aac:	58024400 	.word	0x58024400
 8002ab0:	58000400 	.word	0x58000400
 8002ab4:	58020000 	.word	0x58020000
 8002ab8:	58020400 	.word	0x58020400
 8002abc:	58020800 	.word	0x58020800
 8002ac0:	58020c00 	.word	0x58020c00
 8002ac4:	58021000 	.word	0x58021000
 8002ac8:	58021400 	.word	0x58021400
 8002acc:	58021800 	.word	0x58021800
 8002ad0:	58021c00 	.word	0x58021c00
 8002ad4:	58022000 	.word	0x58022000
 8002ad8:	58022400 	.word	0x58022400
 8002adc:	2300      	movs	r3, #0
 8002ade:	69fa      	ldr	r2, [r7, #28]
 8002ae0:	f002 0203 	and.w	r2, r2, #3
 8002ae4:	0092      	lsls	r2, r2, #2
 8002ae6:	4093      	lsls	r3, r2
 8002ae8:	69ba      	ldr	r2, [r7, #24]
 8002aea:	4313      	orrs	r3, r2
 8002aec:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002aee:	4938      	ldr	r1, [pc, #224]	; (8002bd0 <HAL_GPIO_Init+0x35c>)
 8002af0:	69fb      	ldr	r3, [r7, #28]
 8002af2:	089b      	lsrs	r3, r3, #2
 8002af4:	3302      	adds	r3, #2
 8002af6:	69ba      	ldr	r2, [r7, #24]
 8002af8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b02:	693b      	ldr	r3, [r7, #16]
 8002b04:	43db      	mvns	r3, r3
 8002b06:	69ba      	ldr	r2, [r7, #24]
 8002b08:	4013      	ands	r3, r2
 8002b0a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002b0c:	683b      	ldr	r3, [r7, #0]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	d003      	beq.n	8002b20 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002b18:	69ba      	ldr	r2, [r7, #24]
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8002b20:	697b      	ldr	r3, [r7, #20]
 8002b22:	69ba      	ldr	r2, [r7, #24]
 8002b24:	601a      	str	r2, [r3, #0]

        temp = EXTI_CurrentCPU->EMR1;
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	685b      	ldr	r3, [r3, #4]
 8002b2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b2c:	693b      	ldr	r3, [r7, #16]
 8002b2e:	43db      	mvns	r3, r3
 8002b30:	69ba      	ldr	r2, [r7, #24]
 8002b32:	4013      	ands	r3, r2
 8002b34:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002b36:	683b      	ldr	r3, [r7, #0]
 8002b38:	685b      	ldr	r3, [r3, #4]
 8002b3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002b42:	69ba      	ldr	r2, [r7, #24]
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	4313      	orrs	r3, r2
 8002b48:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8002b4a:	697b      	ldr	r3, [r7, #20]
 8002b4c:	69ba      	ldr	r2, [r7, #24]
 8002b4e:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002b50:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	43db      	mvns	r3, r3
 8002b5c:	69ba      	ldr	r2, [r7, #24]
 8002b5e:	4013      	ands	r3, r2
 8002b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002b62:	683b      	ldr	r3, [r7, #0]
 8002b64:	685b      	ldr	r3, [r3, #4]
 8002b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d003      	beq.n	8002b76 <HAL_GPIO_Init+0x302>
        {
          temp |= iocurrent;
 8002b6e:	69ba      	ldr	r2, [r7, #24]
 8002b70:	693b      	ldr	r3, [r7, #16]
 8002b72:	4313      	orrs	r3, r2
 8002b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002b76:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002b7a:	69bb      	ldr	r3, [r7, #24]
 8002b7c:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002b7e:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002b86:	693b      	ldr	r3, [r7, #16]
 8002b88:	43db      	mvns	r3, r3
 8002b8a:	69ba      	ldr	r2, [r7, #24]
 8002b8c:	4013      	ands	r3, r2
 8002b8e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002b90:	683b      	ldr	r3, [r7, #0]
 8002b92:	685b      	ldr	r3, [r3, #4]
 8002b94:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d003      	beq.n	8002ba4 <HAL_GPIO_Init+0x330>
        {
          temp |= iocurrent;
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8002ba4:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002ba8:	69bb      	ldr	r3, [r7, #24]
 8002baa:	6053      	str	r3, [r2, #4]
      }
    }

    position++;
 8002bac:	69fb      	ldr	r3, [r7, #28]
 8002bae:	3301      	adds	r3, #1
 8002bb0:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681a      	ldr	r2, [r3, #0]
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	f47f ae63 	bne.w	8002888 <HAL_GPIO_Init+0x14>
  }
}
 8002bc2:	bf00      	nop
 8002bc4:	bf00      	nop
 8002bc6:	3724      	adds	r7, #36	; 0x24
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bce:	4770      	bx	lr
 8002bd0:	58000400 	.word	0x58000400

08002bd4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	b083      	sub	sp, #12
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8002bdc:	4a08      	ldr	r2, [pc, #32]	; (8002c00 <HAL_HSEM_FastTake+0x2c>)
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	3320      	adds	r3, #32
 8002be2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002be6:	4a07      	ldr	r2, [pc, #28]	; (8002c04 <HAL_HSEM_FastTake+0x30>)
 8002be8:	4293      	cmp	r3, r2
 8002bea:	d101      	bne.n	8002bf0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 8002bec:	2300      	movs	r3, #0
 8002bee:	e000      	b.n	8002bf2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 8002bf0:	2301      	movs	r3, #1
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	370c      	adds	r7, #12
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfc:	4770      	bx	lr
 8002bfe:	bf00      	nop
 8002c00:	58026400 	.word	0x58026400
 8002c04:	80000300 	.word	0x80000300

08002c08 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
 8002c10:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8002c12:	4906      	ldr	r1, [pc, #24]	; (8002c2c <HAL_HSEM_Release+0x24>)
 8002c14:	683b      	ldr	r3, [r7, #0]
 8002c16:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 8002c20:	bf00      	nop
 8002c22:	370c      	adds	r7, #12
 8002c24:	46bd      	mov	sp, r7
 8002c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c2a:	4770      	bx	lr
 8002c2c:	58026400 	.word	0x58026400

08002c30 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002c30:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c32:	b08f      	sub	sp, #60	; 0x3c
 8002c34:	af0a      	add	r7, sp, #40	; 0x28
 8002c36:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d101      	bne.n	8002c42 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e116      	b.n	8002e70 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d106      	bne.n	8002c62 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2200      	movs	r2, #0
 8002c58:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002c5c:	6878      	ldr	r0, [r7, #4]
 8002c5e:	f7fe fa07 	bl	8001070 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2203      	movs	r2, #3
 8002c66:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002c6a:	68bb      	ldr	r3, [r7, #8]
 8002c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d102      	bne.n	8002c7c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	2200      	movs	r2, #0
 8002c7a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	4618      	mov	r0, r3
 8002c82:	f004 fce5 	bl	8007650 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	603b      	str	r3, [r7, #0]
 8002c8c:	687e      	ldr	r6, [r7, #4]
 8002c8e:	466d      	mov	r5, sp
 8002c90:	f106 0410 	add.w	r4, r6, #16
 8002c94:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c96:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c98:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002c9a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002c9c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002ca0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002ca4:	1d33      	adds	r3, r6, #4
 8002ca6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002ca8:	6838      	ldr	r0, [r7, #0]
 8002caa:	f004 fc63 	bl	8007574 <USB_CoreInit>
 8002cae:	4603      	mov	r3, r0
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d005      	beq.n	8002cc0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2202      	movs	r2, #2
 8002cb8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002cbc:	2301      	movs	r3, #1
 8002cbe:	e0d7      	b.n	8002e70 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	2100      	movs	r1, #0
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	f004 fcd3 	bl	8007672 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002ccc:	2300      	movs	r3, #0
 8002cce:	73fb      	strb	r3, [r7, #15]
 8002cd0:	e04a      	b.n	8002d68 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002cd2:	7bfa      	ldrb	r2, [r7, #15]
 8002cd4:	6879      	ldr	r1, [r7, #4]
 8002cd6:	4613      	mov	r3, r2
 8002cd8:	00db      	lsls	r3, r3, #3
 8002cda:	1a9b      	subs	r3, r3, r2
 8002cdc:	009b      	lsls	r3, r3, #2
 8002cde:	440b      	add	r3, r1
 8002ce0:	333d      	adds	r3, #61	; 0x3d
 8002ce2:	2201      	movs	r2, #1
 8002ce4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002ce6:	7bfa      	ldrb	r2, [r7, #15]
 8002ce8:	6879      	ldr	r1, [r7, #4]
 8002cea:	4613      	mov	r3, r2
 8002cec:	00db      	lsls	r3, r3, #3
 8002cee:	1a9b      	subs	r3, r3, r2
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	440b      	add	r3, r1
 8002cf4:	333c      	adds	r3, #60	; 0x3c
 8002cf6:	7bfa      	ldrb	r2, [r7, #15]
 8002cf8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002cfa:	7bfa      	ldrb	r2, [r7, #15]
 8002cfc:	7bfb      	ldrb	r3, [r7, #15]
 8002cfe:	b298      	uxth	r0, r3
 8002d00:	6879      	ldr	r1, [r7, #4]
 8002d02:	4613      	mov	r3, r2
 8002d04:	00db      	lsls	r3, r3, #3
 8002d06:	1a9b      	subs	r3, r3, r2
 8002d08:	009b      	lsls	r3, r3, #2
 8002d0a:	440b      	add	r3, r1
 8002d0c:	3342      	adds	r3, #66	; 0x42
 8002d0e:	4602      	mov	r2, r0
 8002d10:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002d12:	7bfa      	ldrb	r2, [r7, #15]
 8002d14:	6879      	ldr	r1, [r7, #4]
 8002d16:	4613      	mov	r3, r2
 8002d18:	00db      	lsls	r3, r3, #3
 8002d1a:	1a9b      	subs	r3, r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	440b      	add	r3, r1
 8002d20:	333f      	adds	r3, #63	; 0x3f
 8002d22:	2200      	movs	r2, #0
 8002d24:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002d26:	7bfa      	ldrb	r2, [r7, #15]
 8002d28:	6879      	ldr	r1, [r7, #4]
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	1a9b      	subs	r3, r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	440b      	add	r3, r1
 8002d34:	3344      	adds	r3, #68	; 0x44
 8002d36:	2200      	movs	r2, #0
 8002d38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002d3a:	7bfa      	ldrb	r2, [r7, #15]
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	4613      	mov	r3, r2
 8002d40:	00db      	lsls	r3, r3, #3
 8002d42:	1a9b      	subs	r3, r3, r2
 8002d44:	009b      	lsls	r3, r3, #2
 8002d46:	440b      	add	r3, r1
 8002d48:	3348      	adds	r3, #72	; 0x48
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002d4e:	7bfa      	ldrb	r2, [r7, #15]
 8002d50:	6879      	ldr	r1, [r7, #4]
 8002d52:	4613      	mov	r3, r2
 8002d54:	00db      	lsls	r3, r3, #3
 8002d56:	1a9b      	subs	r3, r3, r2
 8002d58:	009b      	lsls	r3, r3, #2
 8002d5a:	440b      	add	r3, r1
 8002d5c:	3350      	adds	r3, #80	; 0x50
 8002d5e:	2200      	movs	r2, #0
 8002d60:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d62:	7bfb      	ldrb	r3, [r7, #15]
 8002d64:	3301      	adds	r3, #1
 8002d66:	73fb      	strb	r3, [r7, #15]
 8002d68:	7bfa      	ldrb	r2, [r7, #15]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	685b      	ldr	r3, [r3, #4]
 8002d6e:	429a      	cmp	r2, r3
 8002d70:	d3af      	bcc.n	8002cd2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	73fb      	strb	r3, [r7, #15]
 8002d76:	e044      	b.n	8002e02 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002d78:	7bfa      	ldrb	r2, [r7, #15]
 8002d7a:	6879      	ldr	r1, [r7, #4]
 8002d7c:	4613      	mov	r3, r2
 8002d7e:	00db      	lsls	r3, r3, #3
 8002d80:	1a9b      	subs	r3, r3, r2
 8002d82:	009b      	lsls	r3, r3, #2
 8002d84:	440b      	add	r3, r1
 8002d86:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002d8a:	2200      	movs	r2, #0
 8002d8c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002d8e:	7bfa      	ldrb	r2, [r7, #15]
 8002d90:	6879      	ldr	r1, [r7, #4]
 8002d92:	4613      	mov	r3, r2
 8002d94:	00db      	lsls	r3, r3, #3
 8002d96:	1a9b      	subs	r3, r3, r2
 8002d98:	009b      	lsls	r3, r3, #2
 8002d9a:	440b      	add	r3, r1
 8002d9c:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002da0:	7bfa      	ldrb	r2, [r7, #15]
 8002da2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002da4:	7bfa      	ldrb	r2, [r7, #15]
 8002da6:	6879      	ldr	r1, [r7, #4]
 8002da8:	4613      	mov	r3, r2
 8002daa:	00db      	lsls	r3, r3, #3
 8002dac:	1a9b      	subs	r3, r3, r2
 8002dae:	009b      	lsls	r3, r3, #2
 8002db0:	440b      	add	r3, r1
 8002db2:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002db6:	2200      	movs	r2, #0
 8002db8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002dba:	7bfa      	ldrb	r2, [r7, #15]
 8002dbc:	6879      	ldr	r1, [r7, #4]
 8002dbe:	4613      	mov	r3, r2
 8002dc0:	00db      	lsls	r3, r3, #3
 8002dc2:	1a9b      	subs	r3, r3, r2
 8002dc4:	009b      	lsls	r3, r3, #2
 8002dc6:	440b      	add	r3, r1
 8002dc8:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002dcc:	2200      	movs	r2, #0
 8002dce:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002dd0:	7bfa      	ldrb	r2, [r7, #15]
 8002dd2:	6879      	ldr	r1, [r7, #4]
 8002dd4:	4613      	mov	r3, r2
 8002dd6:	00db      	lsls	r3, r3, #3
 8002dd8:	1a9b      	subs	r3, r3, r2
 8002dda:	009b      	lsls	r3, r3, #2
 8002ddc:	440b      	add	r3, r1
 8002dde:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002de2:	2200      	movs	r2, #0
 8002de4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002de6:	7bfa      	ldrb	r2, [r7, #15]
 8002de8:	6879      	ldr	r1, [r7, #4]
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	1a9b      	subs	r3, r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	440b      	add	r3, r1
 8002df4:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002df8:	2200      	movs	r2, #0
 8002dfa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002dfc:	7bfb      	ldrb	r3, [r7, #15]
 8002dfe:	3301      	adds	r3, #1
 8002e00:	73fb      	strb	r3, [r7, #15]
 8002e02:	7bfa      	ldrb	r2, [r7, #15]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	685b      	ldr	r3, [r3, #4]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d3b5      	bcc.n	8002d78 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	603b      	str	r3, [r7, #0]
 8002e12:	687e      	ldr	r6, [r7, #4]
 8002e14:	466d      	mov	r5, sp
 8002e16:	f106 0410 	add.w	r4, r6, #16
 8002e1a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e1c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e1e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002e20:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002e22:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002e26:	e885 0003 	stmia.w	r5, {r0, r1}
 8002e2a:	1d33      	adds	r3, r6, #4
 8002e2c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002e2e:	6838      	ldr	r0, [r7, #0]
 8002e30:	f004 fc4a 	bl	80076c8 <USB_DevInit>
 8002e34:	4603      	mov	r3, r0
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d005      	beq.n	8002e46 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	2202      	movs	r2, #2
 8002e3e:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002e42:	2301      	movs	r3, #1
 8002e44:	e014      	b.n	8002e70 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d102      	bne.n	8002e64 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002e5e:	6878      	ldr	r0, [r7, #4]
 8002e60:	f000 f80a 	bl	8002e78 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	4618      	mov	r0, r3
 8002e6a:	f004 fdec 	bl	8007a46 <USB_DevDisconnect>

  return HAL_OK;
 8002e6e:	2300      	movs	r3, #0
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	3714      	adds	r7, #20
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e78 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002e78:	b480      	push	{r7}
 8002e7a:	b085      	sub	sp, #20
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002e96:	68fb      	ldr	r3, [r7, #12]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002ea6:	4b05      	ldr	r3, [pc, #20]	; (8002ebc <HAL_PCDEx_ActivateLPM+0x44>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	68fa      	ldr	r2, [r7, #12]
 8002eac:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002eae:	2300      	movs	r3, #0
}
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	3714      	adds	r7, #20
 8002eb4:	46bd      	mov	sp, r7
 8002eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eba:	4770      	bx	lr
 8002ebc:	10000003 	.word	0x10000003

08002ec0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	b084      	sub	sp, #16
 8002ec4:	af00      	add	r7, sp, #0
 8002ec6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8002ec8:	4b29      	ldr	r3, [pc, #164]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eca:	68db      	ldr	r3, [r3, #12]
 8002ecc:	f003 0307 	and.w	r3, r3, #7
 8002ed0:	2b06      	cmp	r3, #6
 8002ed2:	d00a      	beq.n	8002eea <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8002ed4:	4b26      	ldr	r3, [pc, #152]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	687a      	ldr	r2, [r7, #4]
 8002ede:	429a      	cmp	r2, r3
 8002ee0:	d001      	beq.n	8002ee6 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e040      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8002ee6:	2300      	movs	r3, #0
 8002ee8:	e03e      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 8002eea:	4b21      	ldr	r3, [pc, #132]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8002ef2:	491f      	ldr	r1, [pc, #124]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 8002efa:	f7fe f9e3 	bl	80012c4 <HAL_GetTick>
 8002efe:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f00:	e009      	b.n	8002f16 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f02:	f7fe f9df 	bl	80012c4 <HAL_GetTick>
 8002f06:	4602      	mov	r2, r0
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	1ad3      	subs	r3, r2, r3
 8002f0c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f10:	d901      	bls.n	8002f16 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e028      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8002f16:	4b16      	ldr	r3, [pc, #88]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f18:	685b      	ldr	r3, [r3, #4]
 8002f1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002f1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f22:	d1ee      	bne.n	8002f02 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2b1e      	cmp	r3, #30
 8002f28:	d008      	beq.n	8002f3c <HAL_PWREx_ConfigSupply+0x7c>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	2b2e      	cmp	r3, #46	; 0x2e
 8002f2e:	d005      	beq.n	8002f3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b1d      	cmp	r3, #29
 8002f34:	d002      	beq.n	8002f3c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	2b2d      	cmp	r3, #45	; 0x2d
 8002f3a:	d114      	bne.n	8002f66 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 8002f3c:	f7fe f9c2 	bl	80012c4 <HAL_GetTick>
 8002f40:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f42:	e009      	b.n	8002f58 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8002f44:	f7fe f9be 	bl	80012c4 <HAL_GetTick>
 8002f48:	4602      	mov	r2, r0
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	1ad3      	subs	r3, r2, r3
 8002f4e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002f52:	d901      	bls.n	8002f58 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e007      	b.n	8002f68 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <HAL_PWREx_ConfigSupply+0xb0>)
 8002f5a:	68db      	ldr	r3, [r3, #12]
 8002f5c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f64:	d1ee      	bne.n	8002f44 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8002f66:	2300      	movs	r3, #0
}
 8002f68:	4618      	mov	r0, r3
 8002f6a:	3710      	adds	r7, #16
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	bd80      	pop	{r7, pc}
 8002f70:	58024800 	.word	0x58024800

08002f74 <HAL_PWREx_EnableUSBVoltageDetector>:
/**
  * @brief Enable the USB voltage level detector.
  * @retval None.
  */
void HAL_PWREx_EnableUSBVoltageDetector (void)
{
 8002f74:	b480      	push	{r7}
 8002f76:	af00      	add	r7, sp, #0
  /* Enable the USB voltage detector */
  SET_BIT (PWR->CR3, PWR_CR3_USB33DEN);
 8002f78:	4b05      	ldr	r3, [pc, #20]	; (8002f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f7a:	68db      	ldr	r3, [r3, #12]
 8002f7c:	4a04      	ldr	r2, [pc, #16]	; (8002f90 <HAL_PWREx_EnableUSBVoltageDetector+0x1c>)
 8002f7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002f82:	60d3      	str	r3, [r2, #12]
}
 8002f84:	bf00      	nop
 8002f86:	46bd      	mov	sp, r7
 8002f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8c:	4770      	bx	lr
 8002f8e:	bf00      	nop
 8002f90:	58024800 	.word	0x58024800

08002f94 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b08c      	sub	sp, #48	; 0x30
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

    /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e3ff      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f003 0301 	and.w	r3, r3, #1
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	f000 8087 	beq.w	80030c2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fb4:	4b99      	ldr	r3, [pc, #612]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fb6:	691b      	ldr	r3, [r3, #16]
 8002fb8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002fbc:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8002fbe:	4b97      	ldr	r3, [pc, #604]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fc0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fc2:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8002fc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fc6:	2b10      	cmp	r3, #16
 8002fc8:	d007      	beq.n	8002fda <HAL_RCC_OscConfig+0x46>
 8002fca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fcc:	2b18      	cmp	r3, #24
 8002fce:	d110      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5e>
 8002fd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002fd2:	f003 0303 	and.w	r3, r3, #3
 8002fd6:	2b02      	cmp	r3, #2
 8002fd8:	d10b      	bne.n	8002ff2 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fda:	4b90      	ldr	r3, [pc, #576]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d06c      	beq.n	80030c0 <HAL_RCC_OscConfig+0x12c>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d168      	bne.n	80030c0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002fee:	2301      	movs	r3, #1
 8002ff0:	e3d9      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ffa:	d106      	bne.n	800300a <HAL_RCC_OscConfig+0x76>
 8002ffc:	4b87      	ldr	r3, [pc, #540]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	4a86      	ldr	r2, [pc, #536]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003002:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003006:	6013      	str	r3, [r2, #0]
 8003008:	e02e      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d10c      	bne.n	800302c <HAL_RCC_OscConfig+0x98>
 8003012:	4b82      	ldr	r3, [pc, #520]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4a81      	ldr	r2, [pc, #516]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003018:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800301c:	6013      	str	r3, [r2, #0]
 800301e:	4b7f      	ldr	r3, [pc, #508]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	4a7e      	ldr	r2, [pc, #504]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003024:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003028:	6013      	str	r3, [r2, #0]
 800302a:	e01d      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003034:	d10c      	bne.n	8003050 <HAL_RCC_OscConfig+0xbc>
 8003036:	4b79      	ldr	r3, [pc, #484]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	4a78      	ldr	r2, [pc, #480]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800303c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003040:	6013      	str	r3, [r2, #0]
 8003042:	4b76      	ldr	r3, [pc, #472]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	4a75      	ldr	r2, [pc, #468]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003048:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800304c:	6013      	str	r3, [r2, #0]
 800304e:	e00b      	b.n	8003068 <HAL_RCC_OscConfig+0xd4>
 8003050:	4b72      	ldr	r3, [pc, #456]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a71      	ldr	r2, [pc, #452]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003056:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800305a:	6013      	str	r3, [r2, #0]
 800305c:	4b6f      	ldr	r3, [pc, #444]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4a6e      	ldr	r2, [pc, #440]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003062:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003066:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	2b00      	cmp	r3, #0
 800306e:	d013      	beq.n	8003098 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003070:	f7fe f928 	bl	80012c4 <HAL_GetTick>
 8003074:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003076:	e008      	b.n	800308a <HAL_RCC_OscConfig+0xf6>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003078:	f7fe f924 	bl	80012c4 <HAL_GetTick>
 800307c:	4602      	mov	r2, r0
 800307e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003080:	1ad3      	subs	r3, r2, r3
 8003082:	2b64      	cmp	r3, #100	; 0x64
 8003084:	d901      	bls.n	800308a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003086:	2303      	movs	r3, #3
 8003088:	e38d      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800308a:	4b64      	ldr	r3, [pc, #400]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d0f0      	beq.n	8003078 <HAL_RCC_OscConfig+0xe4>
 8003096:	e014      	b.n	80030c2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003098:	f7fe f914 	bl	80012c4 <HAL_GetTick>
 800309c:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800309e:	e008      	b.n	80030b2 <HAL_RCC_OscConfig+0x11e>
        {
          if((uint32_t) (HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80030a0:	f7fe f910 	bl	80012c4 <HAL_GetTick>
 80030a4:	4602      	mov	r2, r0
 80030a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80030a8:	1ad3      	subs	r3, r2, r3
 80030aa:	2b64      	cmp	r3, #100	; 0x64
 80030ac:	d901      	bls.n	80030b2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80030ae:	2303      	movs	r3, #3
 80030b0:	e379      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80030b2:	4b5a      	ldr	r3, [pc, #360]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d1f0      	bne.n	80030a0 <HAL_RCC_OscConfig+0x10c>
 80030be:	e000      	b.n	80030c2 <HAL_RCC_OscConfig+0x12e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80030c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 0302 	and.w	r3, r3, #2
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	f000 80ae 	beq.w	800322c <HAL_RCC_OscConfig+0x298>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80030d0:	4b52      	ldr	r3, [pc, #328]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030d2:	691b      	ldr	r3, [r3, #16]
 80030d4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80030d8:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80030da:	4b50      	ldr	r3, [pc, #320]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030de:	61fb      	str	r3, [r7, #28]
    if((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80030e0:	6a3b      	ldr	r3, [r7, #32]
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d007      	beq.n	80030f6 <HAL_RCC_OscConfig+0x162>
 80030e6:	6a3b      	ldr	r3, [r7, #32]
 80030e8:	2b18      	cmp	r3, #24
 80030ea:	d13a      	bne.n	8003162 <HAL_RCC_OscConfig+0x1ce>
 80030ec:	69fb      	ldr	r3, [r7, #28]
 80030ee:	f003 0303 	and.w	r3, r3, #3
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d135      	bne.n	8003162 <HAL_RCC_OscConfig+0x1ce>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80030f6:	4b49      	ldr	r3, [pc, #292]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0304 	and.w	r3, r3, #4
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d005      	beq.n	800310e <HAL_RCC_OscConfig+0x17a>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	68db      	ldr	r3, [r3, #12]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d101      	bne.n	800310e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 800310a:	2301      	movs	r3, #1
 800310c:	e34b      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800310e:	f7fe f909 	bl	8001324 <HAL_GetREVID>
 8003112:	4603      	mov	r3, r0
 8003114:	f241 0203 	movw	r2, #4099	; 0x1003
 8003118:	4293      	cmp	r3, r2
 800311a:	d817      	bhi.n	800314c <HAL_RCC_OscConfig+0x1b8>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	691b      	ldr	r3, [r3, #16]
 8003120:	2b40      	cmp	r3, #64	; 0x40
 8003122:	d108      	bne.n	8003136 <HAL_RCC_OscConfig+0x1a2>
 8003124:	4b3d      	ldr	r3, [pc, #244]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003126:	685b      	ldr	r3, [r3, #4]
 8003128:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 800312c:	4a3b      	ldr	r2, [pc, #236]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800312e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003132:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003134:	e07a      	b.n	800322c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003136:	4b39      	ldr	r3, [pc, #228]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	031b      	lsls	r3, r3, #12
 8003144:	4935      	ldr	r1, [pc, #212]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003146:	4313      	orrs	r3, r2
 8003148:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800314a:	e06f      	b.n	800322c <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800314c:	4b33      	ldr	r3, [pc, #204]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800314e:	685b      	ldr	r3, [r3, #4]
 8003150:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	691b      	ldr	r3, [r3, #16]
 8003158:	061b      	lsls	r3, r3, #24
 800315a:	4930      	ldr	r1, [pc, #192]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800315c:	4313      	orrs	r3, r2
 800315e:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003160:	e064      	b.n	800322c <HAL_RCC_OscConfig+0x298>
    }

    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	68db      	ldr	r3, [r3, #12]
 8003166:	2b00      	cmp	r3, #0
 8003168:	d045      	beq.n	80031f6 <HAL_RCC_OscConfig+0x262>
      {
     /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800316a:	4b2c      	ldr	r3, [pc, #176]	; (800321c <HAL_RCC_OscConfig+0x288>)
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	f023 0219 	bic.w	r2, r3, #25
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	68db      	ldr	r3, [r3, #12]
 8003176:	4929      	ldr	r1, [pc, #164]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003178:	4313      	orrs	r3, r2
 800317a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800317c:	f7fe f8a2 	bl	80012c4 <HAL_GetTick>
 8003180:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003182:	e008      	b.n	8003196 <HAL_RCC_OscConfig+0x202>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003184:	f7fe f89e 	bl	80012c4 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	2b02      	cmp	r3, #2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x202>
          {
            return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e307      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003196:	4b21      	ldr	r3, [pc, #132]	; (800321c <HAL_RCC_OscConfig+0x288>)
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0304 	and.w	r3, r3, #4
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d0f0      	beq.n	8003184 <HAL_RCC_OscConfig+0x1f0>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031a2:	f7fe f8bf 	bl	8001324 <HAL_GetREVID>
 80031a6:	4603      	mov	r3, r0
 80031a8:	f241 0203 	movw	r2, #4099	; 0x1003
 80031ac:	4293      	cmp	r3, r2
 80031ae:	d817      	bhi.n	80031e0 <HAL_RCC_OscConfig+0x24c>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	691b      	ldr	r3, [r3, #16]
 80031b4:	2b40      	cmp	r3, #64	; 0x40
 80031b6:	d108      	bne.n	80031ca <HAL_RCC_OscConfig+0x236>
 80031b8:	4b18      	ldr	r3, [pc, #96]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80031c0:	4a16      	ldr	r2, [pc, #88]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80031c6:	6053      	str	r3, [r2, #4]
 80031c8:	e030      	b.n	800322c <HAL_RCC_OscConfig+0x298>
 80031ca:	4b14      	ldr	r3, [pc, #80]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	691b      	ldr	r3, [r3, #16]
 80031d6:	031b      	lsls	r3, r3, #12
 80031d8:	4910      	ldr	r1, [pc, #64]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031da:	4313      	orrs	r3, r2
 80031dc:	604b      	str	r3, [r1, #4]
 80031de:	e025      	b.n	800322c <HAL_RCC_OscConfig+0x298>
 80031e0:	4b0e      	ldr	r3, [pc, #56]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	691b      	ldr	r3, [r3, #16]
 80031ec:	061b      	lsls	r3, r3, #24
 80031ee:	490b      	ldr	r1, [pc, #44]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031f0:	4313      	orrs	r3, r2
 80031f2:	604b      	str	r3, [r1, #4]
 80031f4:	e01a      	b.n	800322c <HAL_RCC_OscConfig+0x298>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031f6:	4b09      	ldr	r3, [pc, #36]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a08      	ldr	r2, [pc, #32]	; (800321c <HAL_RCC_OscConfig+0x288>)
 80031fc:	f023 0301 	bic.w	r3, r3, #1
 8003200:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003202:	f7fe f85f 	bl	80012c4 <HAL_GetTick>
 8003206:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003208:	e00a      	b.n	8003220 <HAL_RCC_OscConfig+0x28c>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800320a:	f7fe f85b 	bl	80012c4 <HAL_GetTick>
 800320e:	4602      	mov	r2, r0
 8003210:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003212:	1ad3      	subs	r3, r2, r3
 8003214:	2b02      	cmp	r3, #2
 8003216:	d903      	bls.n	8003220 <HAL_RCC_OscConfig+0x28c>
          {
            return HAL_TIMEOUT;
 8003218:	2303      	movs	r3, #3
 800321a:	e2c4      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
 800321c:	58024400 	.word	0x58024400
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003220:	4ba4      	ldr	r3, [pc, #656]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	f003 0304 	and.w	r3, r3, #4
 8003228:	2b00      	cmp	r3, #0
 800322a:	d1ee      	bne.n	800320a <HAL_RCC_OscConfig+0x276>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	f003 0310 	and.w	r3, r3, #16
 8003234:	2b00      	cmp	r3, #0
 8003236:	f000 80a9 	beq.w	800338c <HAL_RCC_OscConfig+0x3f8>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800323a:	4b9e      	ldr	r3, [pc, #632]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800323c:	691b      	ldr	r3, [r3, #16]
 800323e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003242:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003244:	4b9b      	ldr	r3, [pc, #620]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003248:	617b      	str	r3, [r7, #20]
    if((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800324a:	69bb      	ldr	r3, [r7, #24]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d007      	beq.n	8003260 <HAL_RCC_OscConfig+0x2cc>
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b18      	cmp	r3, #24
 8003254:	d13a      	bne.n	80032cc <HAL_RCC_OscConfig+0x338>
 8003256:	697b      	ldr	r3, [r7, #20]
 8003258:	f003 0303 	and.w	r3, r3, #3
 800325c:	2b01      	cmp	r3, #1
 800325e:	d135      	bne.n	80032cc <HAL_RCC_OscConfig+0x338>
    {
      /* When CSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003260:	4b94      	ldr	r3, [pc, #592]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003268:	2b00      	cmp	r3, #0
 800326a:	d005      	beq.n	8003278 <HAL_RCC_OscConfig+0x2e4>
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	69db      	ldr	r3, [r3, #28]
 8003270:	2b80      	cmp	r3, #128	; 0x80
 8003272:	d001      	beq.n	8003278 <HAL_RCC_OscConfig+0x2e4>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	e296      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003278:	f7fe f854 	bl	8001324 <HAL_GetREVID>
 800327c:	4603      	mov	r3, r0
 800327e:	f241 0203 	movw	r2, #4099	; 0x1003
 8003282:	4293      	cmp	r3, r2
 8003284:	d817      	bhi.n	80032b6 <HAL_RCC_OscConfig+0x322>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	6a1b      	ldr	r3, [r3, #32]
 800328a:	2b20      	cmp	r3, #32
 800328c:	d108      	bne.n	80032a0 <HAL_RCC_OscConfig+0x30c>
 800328e:	4b89      	ldr	r3, [pc, #548]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003296:	4a87      	ldr	r2, [pc, #540]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003298:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800329c:	6053      	str	r3, [r2, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800329e:	e075      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032a0:	4b84      	ldr	r3, [pc, #528]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6a1b      	ldr	r3, [r3, #32]
 80032ac:	069b      	lsls	r3, r3, #26
 80032ae:	4981      	ldr	r1, [pc, #516]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032b0:	4313      	orrs	r3, r2
 80032b2:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032b4:	e06a      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80032b6:	4b7f      	ldr	r3, [pc, #508]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
 80032c2:	061b      	lsls	r3, r3, #24
 80032c4:	497b      	ldr	r1, [pc, #492]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032c6:	4313      	orrs	r3, r2
 80032c8:	60cb      	str	r3, [r1, #12]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80032ca:	e05f      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
      }
    }
    else
    {
      /* Check the CSI State */
      if((RCC_OscInitStruct->CSIState)!= RCC_CSI_OFF)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	69db      	ldr	r3, [r3, #28]
 80032d0:	2b00      	cmp	r3, #0
 80032d2:	d042      	beq.n	800335a <HAL_RCC_OscConfig+0x3c6>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 80032d4:	4b77      	ldr	r3, [pc, #476]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	4a76      	ldr	r2, [pc, #472]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032da:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032de:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032e0:	f7fd fff0 	bl	80012c4 <HAL_GetTick>
 80032e4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 80032e8:	f7fd ffec 	bl	80012c4 <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e255      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80032fa:	4b6e      	ldr	r3, [pc, #440]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003302:	2b00      	cmp	r3, #0
 8003304:	d0f0      	beq.n	80032e8 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003306:	f7fe f80d 	bl	8001324 <HAL_GetREVID>
 800330a:	4603      	mov	r3, r0
 800330c:	f241 0203 	movw	r2, #4099	; 0x1003
 8003310:	4293      	cmp	r3, r2
 8003312:	d817      	bhi.n	8003344 <HAL_RCC_OscConfig+0x3b0>
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6a1b      	ldr	r3, [r3, #32]
 8003318:	2b20      	cmp	r3, #32
 800331a:	d108      	bne.n	800332e <HAL_RCC_OscConfig+0x39a>
 800331c:	4b65      	ldr	r3, [pc, #404]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003324:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003326:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800332a:	6053      	str	r3, [r2, #4]
 800332c:	e02e      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
 800332e:	4b61      	ldr	r3, [pc, #388]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6a1b      	ldr	r3, [r3, #32]
 800333a:	069b      	lsls	r3, r3, #26
 800333c:	495d      	ldr	r1, [pc, #372]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800333e:	4313      	orrs	r3, r2
 8003340:	604b      	str	r3, [r1, #4]
 8003342:	e023      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
 8003344:	4b5b      	ldr	r3, [pc, #364]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003346:	68db      	ldr	r3, [r3, #12]
 8003348:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	6a1b      	ldr	r3, [r3, #32]
 8003350:	061b      	lsls	r3, r3, #24
 8003352:	4958      	ldr	r1, [pc, #352]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003354:	4313      	orrs	r3, r2
 8003356:	60cb      	str	r3, [r1, #12]
 8003358:	e018      	b.n	800338c <HAL_RCC_OscConfig+0x3f8>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800335a:	4b56      	ldr	r3, [pc, #344]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a55      	ldr	r2, [pc, #340]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003360:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003364:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003366:	f7fd ffad 	bl	80012c4 <HAL_GetTick>
 800336a:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800336c:	e008      	b.n	8003380 <HAL_RCC_OscConfig+0x3ec>
        {
          if((HAL_GetTick() - tickstart ) > CSI_TIMEOUT_VALUE)
 800336e:	f7fd ffa9 	bl	80012c4 <HAL_GetTick>
 8003372:	4602      	mov	r2, r0
 8003374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003376:	1ad3      	subs	r3, r2, r3
 8003378:	2b02      	cmp	r3, #2
 800337a:	d901      	bls.n	8003380 <HAL_RCC_OscConfig+0x3ec>
          {
            return HAL_TIMEOUT;
 800337c:	2303      	movs	r3, #3
 800337e:	e212      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8003380:	4b4c      	ldr	r3, [pc, #304]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003388:	2b00      	cmp	r3, #0
 800338a:	d1f0      	bne.n	800336e <HAL_RCC_OscConfig+0x3da>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	f003 0308 	and.w	r3, r3, #8
 8003394:	2b00      	cmp	r3, #0
 8003396:	d036      	beq.n	8003406 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	695b      	ldr	r3, [r3, #20]
 800339c:	2b00      	cmp	r3, #0
 800339e:	d019      	beq.n	80033d4 <HAL_RCC_OscConfig+0x440>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033a0:	4b44      	ldr	r3, [pc, #272]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033a4:	4a43      	ldr	r2, [pc, #268]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033a6:	f043 0301 	orr.w	r3, r3, #1
 80033aa:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033ac:	f7fd ff8a 	bl	80012c4 <HAL_GetTick>
 80033b0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033b4:	f7fd ff86 	bl	80012c4 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b02      	cmp	r3, #2
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e1ef      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80033c6:	4b3b      	ldr	r3, [pc, #236]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033ca:	f003 0302 	and.w	r3, r3, #2
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0x420>
 80033d2:	e018      	b.n	8003406 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033d4:	4b37      	ldr	r3, [pc, #220]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033d6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d8:	4a36      	ldr	r2, [pc, #216]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033da:	f023 0301 	bic.w	r3, r3, #1
 80033de:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033e0:	f7fd ff70 	bl	80012c4 <HAL_GetTick>
 80033e4:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033e6:	e008      	b.n	80033fa <HAL_RCC_OscConfig+0x466>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033e8:	f7fd ff6c 	bl	80012c4 <HAL_GetTick>
 80033ec:	4602      	mov	r2, r0
 80033ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033f0:	1ad3      	subs	r3, r2, r3
 80033f2:	2b02      	cmp	r3, #2
 80033f4:	d901      	bls.n	80033fa <HAL_RCC_OscConfig+0x466>
        {
          return HAL_TIMEOUT;
 80033f6:	2303      	movs	r3, #3
 80033f8:	e1d5      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80033fa:	4b2e      	ldr	r3, [pc, #184]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 80033fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033fe:	f003 0302 	and.w	r3, r3, #2
 8003402:	2b00      	cmp	r3, #0
 8003404:	d1f0      	bne.n	80033e8 <HAL_RCC_OscConfig+0x454>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0320 	and.w	r3, r3, #32
 800340e:	2b00      	cmp	r3, #0
 8003410:	d036      	beq.n	8003480 <HAL_RCC_OscConfig+0x4ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if((RCC_OscInitStruct->HSI48State)!= RCC_HSI48_OFF)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	699b      	ldr	r3, [r3, #24]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d019      	beq.n	800344e <HAL_RCC_OscConfig+0x4ba>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800341a:	4b26      	ldr	r3, [pc, #152]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	4a25      	ldr	r2, [pc, #148]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003420:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003424:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003426:	f7fd ff4d 	bl	80012c4 <HAL_GetTick>
 800342a:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800342c:	e008      	b.n	8003440 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 800342e:	f7fd ff49 	bl	80012c4 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b02      	cmp	r3, #2
 800343a:	d901      	bls.n	8003440 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 800343c:	2303      	movs	r3, #3
 800343e:	e1b2      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003440:	4b1c      	ldr	r3, [pc, #112]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003442:	681b      	ldr	r3, [r3, #0]
 8003444:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003448:	2b00      	cmp	r3, #0
 800344a:	d0f0      	beq.n	800342e <HAL_RCC_OscConfig+0x49a>
 800344c:	e018      	b.n	8003480 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800344e:	4b19      	ldr	r3, [pc, #100]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	4a18      	ldr	r2, [pc, #96]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003454:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003458:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800345a:	f7fd ff33 	bl	80012c4 <HAL_GetTick>
 800345e:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003460:	e008      	b.n	8003474 <HAL_RCC_OscConfig+0x4e0>
      {
        if((HAL_GetTick() - tickstart ) > HSI48_TIMEOUT_VALUE)
 8003462:	f7fd ff2f 	bl	80012c4 <HAL_GetTick>
 8003466:	4602      	mov	r2, r0
 8003468:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800346a:	1ad3      	subs	r3, r2, r3
 800346c:	2b02      	cmp	r3, #2
 800346e:	d901      	bls.n	8003474 <HAL_RCC_OscConfig+0x4e0>
        {
          return HAL_TIMEOUT;
 8003470:	2303      	movs	r3, #3
 8003472:	e198      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8003474:	4b0f      	ldr	r3, [pc, #60]	; (80034b4 <HAL_RCC_OscConfig+0x520>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d1f0      	bne.n	8003462 <HAL_RCC_OscConfig+0x4ce>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	f003 0304 	and.w	r3, r3, #4
 8003488:	2b00      	cmp	r3, #0
 800348a:	f000 8085 	beq.w	8003598 <HAL_RCC_OscConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800348e:	4b0a      	ldr	r3, [pc, #40]	; (80034b8 <HAL_RCC_OscConfig+0x524>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	4a09      	ldr	r2, [pc, #36]	; (80034b8 <HAL_RCC_OscConfig+0x524>)
 8003494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003498:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800349a:	f7fd ff13 	bl	80012c4 <HAL_GetTick>
 800349e:	6278      	str	r0, [r7, #36]	; 0x24

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034a0:	e00c      	b.n	80034bc <HAL_RCC_OscConfig+0x528>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80034a2:	f7fd ff0f 	bl	80012c4 <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b64      	cmp	r3, #100	; 0x64
 80034ae:	d905      	bls.n	80034bc <HAL_RCC_OscConfig+0x528>
      {
        return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e178      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
 80034b4:	58024400 	.word	0x58024400
 80034b8:	58024800 	.word	0x58024800
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80034bc:	4b96      	ldr	r3, [pc, #600]	; (8003718 <HAL_RCC_OscConfig+0x784>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0ec      	beq.n	80034a2 <HAL_RCC_OscConfig+0x50e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	689b      	ldr	r3, [r3, #8]
 80034cc:	2b01      	cmp	r3, #1
 80034ce:	d106      	bne.n	80034de <HAL_RCC_OscConfig+0x54a>
 80034d0:	4b92      	ldr	r3, [pc, #584]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d4:	4a91      	ldr	r2, [pc, #580]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034d6:	f043 0301 	orr.w	r3, r3, #1
 80034da:	6713      	str	r3, [r2, #112]	; 0x70
 80034dc:	e02d      	b.n	800353a <HAL_RCC_OscConfig+0x5a6>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10c      	bne.n	8003500 <HAL_RCC_OscConfig+0x56c>
 80034e6:	4b8d      	ldr	r3, [pc, #564]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034ea:	4a8c      	ldr	r2, [pc, #560]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034ec:	f023 0301 	bic.w	r3, r3, #1
 80034f0:	6713      	str	r3, [r2, #112]	; 0x70
 80034f2:	4b8a      	ldr	r3, [pc, #552]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034f6:	4a89      	ldr	r2, [pc, #548]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80034f8:	f023 0304 	bic.w	r3, r3, #4
 80034fc:	6713      	str	r3, [r2, #112]	; 0x70
 80034fe:	e01c      	b.n	800353a <HAL_RCC_OscConfig+0x5a6>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	689b      	ldr	r3, [r3, #8]
 8003504:	2b05      	cmp	r3, #5
 8003506:	d10c      	bne.n	8003522 <HAL_RCC_OscConfig+0x58e>
 8003508:	4b84      	ldr	r3, [pc, #528]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800350a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350c:	4a83      	ldr	r2, [pc, #524]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800350e:	f043 0304 	orr.w	r3, r3, #4
 8003512:	6713      	str	r3, [r2, #112]	; 0x70
 8003514:	4b81      	ldr	r3, [pc, #516]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003516:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003518:	4a80      	ldr	r2, [pc, #512]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6713      	str	r3, [r2, #112]	; 0x70
 8003520:	e00b      	b.n	800353a <HAL_RCC_OscConfig+0x5a6>
 8003522:	4b7e      	ldr	r3, [pc, #504]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003524:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003526:	4a7d      	ldr	r2, [pc, #500]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003528:	f023 0301 	bic.w	r3, r3, #1
 800352c:	6713      	str	r3, [r2, #112]	; 0x70
 800352e:	4b7b      	ldr	r3, [pc, #492]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003530:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003532:	4a7a      	ldr	r2, [pc, #488]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003534:	f023 0304 	bic.w	r3, r3, #4
 8003538:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	689b      	ldr	r3, [r3, #8]
 800353e:	2b00      	cmp	r3, #0
 8003540:	d015      	beq.n	800356e <HAL_RCC_OscConfig+0x5da>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003542:	f7fd febf 	bl	80012c4 <HAL_GetTick>
 8003546:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003548:	e00a      	b.n	8003560 <HAL_RCC_OscConfig+0x5cc>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800354a:	f7fd febb 	bl	80012c4 <HAL_GetTick>
 800354e:	4602      	mov	r2, r0
 8003550:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003552:	1ad3      	subs	r3, r2, r3
 8003554:	f241 3288 	movw	r2, #5000	; 0x1388
 8003558:	4293      	cmp	r3, r2
 800355a:	d901      	bls.n	8003560 <HAL_RCC_OscConfig+0x5cc>
        {
          return HAL_TIMEOUT;
 800355c:	2303      	movs	r3, #3
 800355e:	e122      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003560:	4b6e      	ldr	r3, [pc, #440]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003564:	f003 0302 	and.w	r3, r3, #2
 8003568:	2b00      	cmp	r3, #0
 800356a:	d0ee      	beq.n	800354a <HAL_RCC_OscConfig+0x5b6>
 800356c:	e014      	b.n	8003598 <HAL_RCC_OscConfig+0x604>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800356e:	f7fd fea9 	bl	80012c4 <HAL_GetTick>
 8003572:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003574:	e00a      	b.n	800358c <HAL_RCC_OscConfig+0x5f8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003576:	f7fd fea5 	bl	80012c4 <HAL_GetTick>
 800357a:	4602      	mov	r2, r0
 800357c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800357e:	1ad3      	subs	r3, r2, r3
 8003580:	f241 3288 	movw	r2, #5000	; 0x1388
 8003584:	4293      	cmp	r3, r2
 8003586:	d901      	bls.n	800358c <HAL_RCC_OscConfig+0x5f8>
        {
          return HAL_TIMEOUT;
 8003588:	2303      	movs	r3, #3
 800358a:	e10c      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800358c:	4b63      	ldr	r3, [pc, #396]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800358e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003590:	f003 0302 	and.w	r3, r3, #2
 8003594:	2b00      	cmp	r3, #0
 8003596:	d1ee      	bne.n	8003576 <HAL_RCC_OscConfig+0x5e2>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800359c:	2b00      	cmp	r3, #0
 800359e:	f000 8101 	beq.w	80037a4 <HAL_RCC_OscConfig+0x810>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80035a2:	4b5e      	ldr	r3, [pc, #376]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80035aa:	2b18      	cmp	r3, #24
 80035ac:	f000 80bc 	beq.w	8003728 <HAL_RCC_OscConfig+0x794>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	f040 8095 	bne.w	80036e4 <HAL_RCC_OscConfig+0x750>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035ba:	4b58      	ldr	r3, [pc, #352]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4a57      	ldr	r2, [pc, #348]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035c0:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035c4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035c6:	f7fd fe7d 	bl	80012c4 <HAL_GetTick>
 80035ca:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035cc:	e008      	b.n	80035e0 <HAL_RCC_OscConfig+0x64c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035ce:	f7fd fe79 	bl	80012c4 <HAL_GetTick>
 80035d2:	4602      	mov	r2, r0
 80035d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035d6:	1ad3      	subs	r3, r2, r3
 80035d8:	2b02      	cmp	r3, #2
 80035da:	d901      	bls.n	80035e0 <HAL_RCC_OscConfig+0x64c>
          {
            return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e0e2      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80035e0:	4b4e      	ldr	r3, [pc, #312]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	d1f0      	bne.n	80035ce <HAL_RCC_OscConfig+0x63a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80035ec:	4b4b      	ldr	r3, [pc, #300]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80035ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80035f0:	4b4b      	ldr	r3, [pc, #300]	; (8003720 <HAL_RCC_OscConfig+0x78c>)
 80035f2:	4013      	ands	r3, r2
 80035f4:	687a      	ldr	r2, [r7, #4]
 80035f6:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80035f8:	687a      	ldr	r2, [r7, #4]
 80035fa:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80035fc:	0112      	lsls	r2, r2, #4
 80035fe:	430a      	orrs	r2, r1
 8003600:	4946      	ldr	r1, [pc, #280]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003602:	4313      	orrs	r3, r2
 8003604:	628b      	str	r3, [r1, #40]	; 0x28
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800360a:	3b01      	subs	r3, #1
 800360c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003614:	3b01      	subs	r3, #1
 8003616:	025b      	lsls	r3, r3, #9
 8003618:	b29b      	uxth	r3, r3
 800361a:	431a      	orrs	r2, r3
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003620:	3b01      	subs	r3, #1
 8003622:	041b      	lsls	r3, r3, #16
 8003624:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003628:	431a      	orrs	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362e:	3b01      	subs	r3, #1
 8003630:	061b      	lsls	r3, r3, #24
 8003632:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003636:	4939      	ldr	r1, [pc, #228]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003638:	4313      	orrs	r3, r2
 800363a:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

         /* Disable PLLFRACN . */
         __HAL_RCC_PLLFRACN_DISABLE();
 800363c:	4b37      	ldr	r3, [pc, #220]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800363e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003640:	4a36      	ldr	r2, [pc, #216]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003642:	f023 0301 	bic.w	r3, r3, #1
 8003646:	62d3      	str	r3, [r2, #44]	; 0x2c

         /* Configure PLL PLL1FRACN */
         __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003648:	4b34      	ldr	r3, [pc, #208]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800364a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800364c:	4b35      	ldr	r3, [pc, #212]	; (8003724 <HAL_RCC_OscConfig+0x790>)
 800364e:	4013      	ands	r3, r2
 8003650:	687a      	ldr	r2, [r7, #4]
 8003652:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003654:	00d2      	lsls	r2, r2, #3
 8003656:	4931      	ldr	r1, [pc, #196]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003658:	4313      	orrs	r3, r2
 800365a:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800365c:	4b2f      	ldr	r3, [pc, #188]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800365e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003660:	f023 020c 	bic.w	r2, r3, #12
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003668:	492c      	ldr	r1, [pc, #176]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800366a:	4313      	orrs	r3, r2
 800366c:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800366e:	4b2b      	ldr	r3, [pc, #172]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003670:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003672:	f023 0202 	bic.w	r2, r3, #2
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4928      	ldr	r1, [pc, #160]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800367c:	4313      	orrs	r3, r2
 800367e:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8003680:	4b26      	ldr	r3, [pc, #152]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003686:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800368a:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800368c:	4b23      	ldr	r3, [pc, #140]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800368e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003690:	4a22      	ldr	r2, [pc, #136]	; (800371c <HAL_RCC_OscConfig+0x788>)
 8003692:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003696:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8003698:	4b20      	ldr	r3, [pc, #128]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800369a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800369c:	4a1f      	ldr	r2, [pc, #124]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800369e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80036a2:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
         __HAL_RCC_PLLFRACN_ENABLE();
 80036a4:	4b1d      	ldr	r3, [pc, #116]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a8:	4a1c      	ldr	r2, [pc, #112]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036aa:	f043 0301 	orr.w	r3, r3, #1
 80036ae:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036b0:	4b1a      	ldr	r3, [pc, #104]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	4a19      	ldr	r2, [pc, #100]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036b6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80036ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036bc:	f7fd fe02 	bl	80012c4 <HAL_GetTick>
 80036c0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036c2:	e008      	b.n	80036d6 <HAL_RCC_OscConfig+0x742>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036c4:	f7fd fdfe 	bl	80012c4 <HAL_GetTick>
 80036c8:	4602      	mov	r2, r0
 80036ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036cc:	1ad3      	subs	r3, r2, r3
 80036ce:	2b02      	cmp	r3, #2
 80036d0:	d901      	bls.n	80036d6 <HAL_RCC_OscConfig+0x742>
          {
            return HAL_TIMEOUT;
 80036d2:	2303      	movs	r3, #3
 80036d4:	e067      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80036d6:	4b11      	ldr	r3, [pc, #68]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d0f0      	beq.n	80036c4 <HAL_RCC_OscConfig+0x730>
 80036e2:	e05f      	b.n	80037a4 <HAL_RCC_OscConfig+0x810>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036e4:	4b0d      	ldr	r3, [pc, #52]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4a0c      	ldr	r2, [pc, #48]	; (800371c <HAL_RCC_OscConfig+0x788>)
 80036ea:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80036ee:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036f0:	f7fd fde8 	bl	80012c4 <HAL_GetTick>
 80036f4:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80036f6:	e008      	b.n	800370a <HAL_RCC_OscConfig+0x776>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036f8:	f7fd fde4 	bl	80012c4 <HAL_GetTick>
 80036fc:	4602      	mov	r2, r0
 80036fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003700:	1ad3      	subs	r3, r2, r3
 8003702:	2b02      	cmp	r3, #2
 8003704:	d901      	bls.n	800370a <HAL_RCC_OscConfig+0x776>
          {
            return HAL_TIMEOUT;
 8003706:	2303      	movs	r3, #3
 8003708:	e04d      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800370a:	4b04      	ldr	r3, [pc, #16]	; (800371c <HAL_RCC_OscConfig+0x788>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003712:	2b00      	cmp	r3, #0
 8003714:	d1f0      	bne.n	80036f8 <HAL_RCC_OscConfig+0x764>
 8003716:	e045      	b.n	80037a4 <HAL_RCC_OscConfig+0x810>
 8003718:	58024800 	.word	0x58024800
 800371c:	58024400 	.word	0x58024400
 8003720:	fffffc0c 	.word	0xfffffc0c
 8003724:	ffff0007 	.word	0xffff0007
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003728:	4b21      	ldr	r3, [pc, #132]	; (80037b0 <HAL_RCC_OscConfig+0x81c>)
 800372a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800372c:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800372e:	4b20      	ldr	r3, [pc, #128]	; (80037b0 <HAL_RCC_OscConfig+0x81c>)
 8003730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003732:	60fb      	str	r3, [r7, #12]
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003738:	2b01      	cmp	r3, #1
 800373a:	d031      	beq.n	80037a0 <HAL_RCC_OscConfig+0x80c>
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	f003 0203 	and.w	r2, r3, #3
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if(((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003746:	429a      	cmp	r2, r3
 8003748:	d12a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800374a:	693b      	ldr	r3, [r7, #16]
 800374c:	091b      	lsrs	r3, r3, #4
 800374e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	 (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003756:	429a      	cmp	r2, r3
 8003758:	d122      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003764:	3b01      	subs	r3, #1
         ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003766:	429a      	cmp	r2, r3
 8003768:	d11a      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	0a5b      	lsrs	r3, r3, #9
 800376e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003776:	3b01      	subs	r3, #1
         (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003778:	429a      	cmp	r2, r3
 800377a:	d111      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	0c1b      	lsrs	r3, r3, #16
 8003780:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003788:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800378a:	429a      	cmp	r2, r3
 800378c:	d108      	bne.n	80037a0 <HAL_RCC_OscConfig+0x80c>
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800378e:	68fb      	ldr	r3, [r7, #12]
 8003790:	0e1b      	lsrs	r3, r3, #24
 8003792:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800379a:	3b01      	subs	r3, #1
         ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800379c:	429a      	cmp	r2, r3
 800379e:	d001      	beq.n	80037a4 <HAL_RCC_OscConfig+0x810>
      {
        return HAL_ERROR;
 80037a0:	2301      	movs	r3, #1
 80037a2:	e000      	b.n	80037a6 <HAL_RCC_OscConfig+0x812>
      }
    }
  }
  return HAL_OK;
 80037a4:	2300      	movs	r3, #0
}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}
 80037ae:	bf00      	nop
 80037b0:	58024400 	.word	0x58024400

080037b4 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b086      	sub	sp, #24
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
 80037bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

   /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d101      	bne.n	80037c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e19c      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037c8:	4b8a      	ldr	r3, [pc, #552]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 030f 	and.w	r3, r3, #15
 80037d0:	683a      	ldr	r2, [r7, #0]
 80037d2:	429a      	cmp	r2, r3
 80037d4:	d910      	bls.n	80037f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037d6:	4b87      	ldr	r3, [pc, #540]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f023 020f 	bic.w	r2, r3, #15
 80037de:	4985      	ldr	r1, [pc, #532]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	4313      	orrs	r3, r2
 80037e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e6:	4b83      	ldr	r3, [pc, #524]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f003 030f 	and.w	r3, r3, #15
 80037ee:	683a      	ldr	r2, [r7, #0]
 80037f0:	429a      	cmp	r2, r3
 80037f2:	d001      	beq.n	80037f8 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	e184      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	d010      	beq.n	8003826 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	691a      	ldr	r2, [r3, #16]
 8003808:	4b7b      	ldr	r3, [pc, #492]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800380a:	699b      	ldr	r3, [r3, #24]
 800380c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003810:	429a      	cmp	r2, r3
 8003812:	d908      	bls.n	8003826 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003814:	4b78      	ldr	r3, [pc, #480]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003816:	699b      	ldr	r3, [r3, #24]
 8003818:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	691b      	ldr	r3, [r3, #16]
 8003820:	4975      	ldr	r1, [pc, #468]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003822:	4313      	orrs	r3, r2
 8003824:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f003 0308 	and.w	r3, r3, #8
 800382e:	2b00      	cmp	r3, #0
 8003830:	d010      	beq.n	8003854 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	695a      	ldr	r2, [r3, #20]
 8003836:	4b70      	ldr	r3, [pc, #448]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800383e:	429a      	cmp	r2, r3
 8003840:	d908      	bls.n	8003854 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003842:	4b6d      	ldr	r3, [pc, #436]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	496a      	ldr	r1, [pc, #424]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003850:	4313      	orrs	r3, r2
 8003852:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
  }
#endif
    }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	f003 0310 	and.w	r3, r3, #16
 800385c:	2b00      	cmp	r3, #0
 800385e:	d010      	beq.n	8003882 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	699a      	ldr	r2, [r3, #24]
 8003864:	4b64      	ldr	r3, [pc, #400]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003866:	69db      	ldr	r3, [r3, #28]
 8003868:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800386c:	429a      	cmp	r2, r3
 800386e:	d908      	bls.n	8003882 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003870:	4b61      	ldr	r3, [pc, #388]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003872:	69db      	ldr	r3, [r3, #28]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	699b      	ldr	r3, [r3, #24]
 800387c:	495e      	ldr	r1, [pc, #376]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800387e:	4313      	orrs	r3, r2
 8003880:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0320 	and.w	r3, r3, #32
 800388a:	2b00      	cmp	r3, #0
 800388c:	d010      	beq.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	69da      	ldr	r2, [r3, #28]
 8003892:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003894:	6a1b      	ldr	r3, [r3, #32]
 8003896:	f003 0370 	and.w	r3, r3, #112	; 0x70
 800389a:	429a      	cmp	r2, r3
 800389c:	d908      	bls.n	80038b0 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 800389e:	4b56      	ldr	r3, [pc, #344]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	69db      	ldr	r3, [r3, #28]
 80038aa:	4953      	ldr	r1, [pc, #332]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ac:	4313      	orrs	r3, r2
 80038ae:	620b      	str	r3, [r1, #32]
    }
#endif
  }

   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	f003 0302 	and.w	r3, r3, #2
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d010      	beq.n	80038de <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	68da      	ldr	r2, [r3, #12]
 80038c0:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038c2:	699b      	ldr	r3, [r3, #24]
 80038c4:	f003 030f 	and.w	r3, r3, #15
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d908      	bls.n	80038de <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038cc:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ce:	699b      	ldr	r3, [r3, #24]
 80038d0:	f023 020f 	bic.w	r2, r3, #15
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	68db      	ldr	r3, [r3, #12]
 80038d8:	4947      	ldr	r1, [pc, #284]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038da:	4313      	orrs	r3, r2
 80038dc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

    /*------------------------- SYSCLK Configuration -------------------------*/
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 0301 	and.w	r3, r3, #1
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d055      	beq.n	8003996 <HAL_RCC_ClockConfig+0x1e2>
    {
      assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
      assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 80038ea:	4b43      	ldr	r3, [pc, #268]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038ec:	699b      	ldr	r3, [r3, #24]
 80038ee:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	689b      	ldr	r3, [r3, #8]
 80038f6:	4940      	ldr	r1, [pc, #256]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80038f8:	4313      	orrs	r3, r2
 80038fa:	618b      	str	r3, [r1, #24]
#else
      MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	685b      	ldr	r3, [r3, #4]
 8003900:	2b02      	cmp	r3, #2
 8003902:	d107      	bne.n	8003914 <HAL_RCC_ClockConfig+0x160>
      {
        /* Check the HSE ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003904:	4b3c      	ldr	r3, [pc, #240]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800390c:	2b00      	cmp	r3, #0
 800390e:	d121      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e0f6      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* PLL is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	685b      	ldr	r3, [r3, #4]
 8003918:	2b03      	cmp	r3, #3
 800391a:	d107      	bne.n	800392c <HAL_RCC_ClockConfig+0x178>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800391c:	4b36      	ldr	r3, [pc, #216]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003924:	2b00      	cmp	r3, #0
 8003926:	d115      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0ea      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      /* CSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	685b      	ldr	r3, [r3, #4]
 8003930:	2b01      	cmp	r3, #1
 8003932:	d107      	bne.n	8003944 <HAL_RCC_ClockConfig+0x190>
      {
        /* Check the PLL ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003934:	4b30      	ldr	r3, [pc, #192]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e0de      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003944:	4b2c      	ldr	r3, [pc, #176]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f003 0304 	and.w	r3, r3, #4
 800394c:	2b00      	cmp	r3, #0
 800394e:	d101      	bne.n	8003954 <HAL_RCC_ClockConfig+0x1a0>
        {
          return HAL_ERROR;
 8003950:	2301      	movs	r3, #1
 8003952:	e0d6      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        }
      }
      MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003954:	4b28      	ldr	r3, [pc, #160]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003956:	691b      	ldr	r3, [r3, #16]
 8003958:	f023 0207 	bic.w	r2, r3, #7
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	685b      	ldr	r3, [r3, #4]
 8003960:	4925      	ldr	r1, [pc, #148]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003962:	4313      	orrs	r3, r2
 8003964:	610b      	str	r3, [r1, #16]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003966:	f7fd fcad 	bl	80012c4 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800396c:	e00a      	b.n	8003984 <HAL_RCC_ClockConfig+0x1d0>
        {
          if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800396e:	f7fd fca9 	bl	80012c4 <HAL_GetTick>
 8003972:	4602      	mov	r2, r0
 8003974:	697b      	ldr	r3, [r7, #20]
 8003976:	1ad3      	subs	r3, r2, r3
 8003978:	f241 3288 	movw	r2, #5000	; 0x1388
 800397c:	4293      	cmp	r3, r2
 800397e:	d901      	bls.n	8003984 <HAL_RCC_ClockConfig+0x1d0>
          {
            return HAL_TIMEOUT;
 8003980:	2303      	movs	r3, #3
 8003982:	e0be      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() !=  (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003984:	4b1c      	ldr	r3, [pc, #112]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 8003986:	691b      	ldr	r3, [r3, #16]
 8003988:	f003 0238 	and.w	r2, r3, #56	; 0x38
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	685b      	ldr	r3, [r3, #4]
 8003990:	00db      	lsls	r3, r3, #3
 8003992:	429a      	cmp	r2, r3
 8003994:	d1eb      	bne.n	800396e <HAL_RCC_ClockConfig+0x1ba>

    }

    /* Decreasing the BUS frequency divider */
   /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	f003 0302 	and.w	r3, r3, #2
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d010      	beq.n	80039c4 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	68da      	ldr	r2, [r3, #12]
 80039a6:	4b14      	ldr	r3, [pc, #80]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	f003 030f 	and.w	r3, r3, #15
 80039ae:	429a      	cmp	r2, r3
 80039b0:	d208      	bcs.n	80039c4 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039b4:	699b      	ldr	r3, [r3, #24]
 80039b6:	f023 020f 	bic.w	r2, r3, #15
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68db      	ldr	r3, [r3, #12]
 80039be:	490e      	ldr	r1, [pc, #56]	; (80039f8 <HAL_RCC_ClockConfig+0x244>)
 80039c0:	4313      	orrs	r3, r2
 80039c2:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80039c4:	4b0b      	ldr	r3, [pc, #44]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f003 030f 	and.w	r3, r3, #15
 80039cc:	683a      	ldr	r2, [r7, #0]
 80039ce:	429a      	cmp	r2, r3
 80039d0:	d214      	bcs.n	80039fc <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d2:	4b08      	ldr	r3, [pc, #32]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f023 020f 	bic.w	r2, r3, #15
 80039da:	4906      	ldr	r1, [pc, #24]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039dc:	683b      	ldr	r3, [r7, #0]
 80039de:	4313      	orrs	r3, r2
 80039e0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e2:	4b04      	ldr	r3, [pc, #16]	; (80039f4 <HAL_RCC_ClockConfig+0x240>)
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	f003 030f 	and.w	r3, r3, #15
 80039ea:	683a      	ldr	r2, [r7, #0]
 80039ec:	429a      	cmp	r2, r3
 80039ee:	d005      	beq.n	80039fc <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e086      	b.n	8003b02 <HAL_RCC_ClockConfig+0x34e>
 80039f4:	52002000 	.word	0x52002000
 80039f8:	58024400 	.word	0x58024400
    }
 }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	f003 0304 	and.w	r3, r3, #4
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d010      	beq.n	8003a2a <HAL_RCC_ClockConfig+0x276>
 {
#if defined(RCC_D1CFGR_D1PPRE)
   if((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	691a      	ldr	r2, [r3, #16]
 8003a0c:	4b3f      	ldr	r3, [pc, #252]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a0e:	699b      	ldr	r3, [r3, #24]
 8003a10:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d208      	bcs.n	8003a2a <HAL_RCC_ClockConfig+0x276>
   {
     assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
     MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003a18:	4b3c      	ldr	r3, [pc, #240]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a1a:	699b      	ldr	r3, [r3, #24]
 8003a1c:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	4939      	ldr	r1, [pc, #228]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	618b      	str	r3, [r1, #24]
   }
#endif
 }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	f003 0308 	and.w	r3, r3, #8
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d010      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x2a4>
 {
#if defined(RCC_D2CFGR_D2PPRE1)
   if((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	4b34      	ldr	r3, [pc, #208]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a3c:	69db      	ldr	r3, [r3, #28]
 8003a3e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d208      	bcs.n	8003a58 <HAL_RCC_ClockConfig+0x2a4>
   {
     assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003a46:	4b31      	ldr	r3, [pc, #196]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a48:	69db      	ldr	r3, [r3, #28]
 8003a4a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	695b      	ldr	r3, [r3, #20]
 8003a52:	492e      	ldr	r1, [pc, #184]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a54:	4313      	orrs	r3, r2
 8003a56:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f003 0310 	and.w	r3, r3, #16
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d010      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x2d2>
 {
#if defined (RCC_D2CFGR_D2PPRE2)
   if((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	699a      	ldr	r2, [r3, #24]
 8003a68:	4b28      	ldr	r3, [pc, #160]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a6a:	69db      	ldr	r3, [r3, #28]
 8003a6c:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d208      	bcs.n	8003a86 <HAL_RCC_ClockConfig+0x2d2>
   {
     assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
     MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003a74:	4b25      	ldr	r3, [pc, #148]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a76:	69db      	ldr	r3, [r3, #28]
 8003a78:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	699b      	ldr	r3, [r3, #24]
 8003a80:	4922      	ldr	r1, [pc, #136]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	61cb      	str	r3, [r1, #28]
   }
#endif
 }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
 if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0320 	and.w	r3, r3, #32
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d010      	beq.n	8003ab4 <HAL_RCC_ClockConfig+0x300>
 {
#if defined(RCC_D3CFGR_D3PPRE)
   if((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	69da      	ldr	r2, [r3, #28]
 8003a96:	4b1d      	ldr	r3, [pc, #116]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003a98:	6a1b      	ldr	r3, [r3, #32]
 8003a9a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003a9e:	429a      	cmp	r2, r3
 8003aa0:	d208      	bcs.n	8003ab4 <HAL_RCC_ClockConfig+0x300>
   {
     assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
     MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider) );
 8003aa2:	4b1a      	ldr	r3, [pc, #104]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003aa4:	6a1b      	ldr	r3, [r3, #32]
 8003aa6:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	69db      	ldr	r3, [r3, #28]
 8003aae:	4917      	ldr	r1, [pc, #92]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003ab0:	4313      	orrs	r3, r2
 8003ab2:	620b      	str	r3, [r1, #32]
#endif
 }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003ab4:	f000 f834 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	4b14      	ldr	r3, [pc, #80]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003abc:	699b      	ldr	r3, [r3, #24]
 8003abe:	0a1b      	lsrs	r3, r3, #8
 8003ac0:	f003 030f 	and.w	r3, r3, #15
 8003ac4:	4912      	ldr	r1, [pc, #72]	; (8003b10 <HAL_RCC_ClockConfig+0x35c>)
 8003ac6:	5ccb      	ldrb	r3, [r1, r3]
 8003ac8:	f003 031f 	and.w	r3, r3, #31
 8003acc:	fa22 f303 	lsr.w	r3, r2, r3
 8003ad0:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003ad2:	4b0e      	ldr	r3, [pc, #56]	; (8003b0c <HAL_RCC_ClockConfig+0x358>)
 8003ad4:	699b      	ldr	r3, [r3, #24]
 8003ad6:	f003 030f 	and.w	r3, r3, #15
 8003ada:	4a0d      	ldr	r2, [pc, #52]	; (8003b10 <HAL_RCC_ClockConfig+0x35c>)
 8003adc:	5cd3      	ldrb	r3, [r2, r3]
 8003ade:	f003 031f 	and.w	r3, r3, #31
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	fa22 f303 	lsr.w	r3, r2, r3
 8003ae8:	4a0a      	ldr	r2, [pc, #40]	; (8003b14 <HAL_RCC_ClockConfig+0x360>)
 8003aea:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003aec:	4a0a      	ldr	r2, [pc, #40]	; (8003b18 <HAL_RCC_ClockConfig+0x364>)
 8003aee:	693b      	ldr	r3, [r7, #16]
 8003af0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick (uwTickPrio);
 8003af2:	4b0a      	ldr	r3, [pc, #40]	; (8003b1c <HAL_RCC_ClockConfig+0x368>)
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fd fb9a 	bl	8001230 <HAL_InitTick>
 8003afc:	4603      	mov	r3, r0
 8003afe:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003b00:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b02:	4618      	mov	r0, r3
 8003b04:	3718      	adds	r7, #24
 8003b06:	46bd      	mov	sp, r7
 8003b08:	bd80      	pop	{r7, pc}
 8003b0a:	bf00      	nop
 8003b0c:	58024400 	.word	0x58024400
 8003b10:	08008508 	.word	0x08008508
 8003b14:	24000004 	.word	0x24000004
 8003b18:	24000000 	.word	0x24000000
 8003b1c:	24000008 	.word	0x24000008

08003b20 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b089      	sub	sp, #36	; 0x24
 8003b24:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b26:	4bb3      	ldr	r3, [pc, #716]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003b2e:	2b18      	cmp	r3, #24
 8003b30:	f200 8155 	bhi.w	8003dde <HAL_RCC_GetSysClockFreq+0x2be>
 8003b34:	a201      	add	r2, pc, #4	; (adr r2, 8003b3c <HAL_RCC_GetSysClockFreq+0x1c>)
 8003b36:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b3a:	bf00      	nop
 8003b3c:	08003ba1 	.word	0x08003ba1
 8003b40:	08003ddf 	.word	0x08003ddf
 8003b44:	08003ddf 	.word	0x08003ddf
 8003b48:	08003ddf 	.word	0x08003ddf
 8003b4c:	08003ddf 	.word	0x08003ddf
 8003b50:	08003ddf 	.word	0x08003ddf
 8003b54:	08003ddf 	.word	0x08003ddf
 8003b58:	08003ddf 	.word	0x08003ddf
 8003b5c:	08003bc7 	.word	0x08003bc7
 8003b60:	08003ddf 	.word	0x08003ddf
 8003b64:	08003ddf 	.word	0x08003ddf
 8003b68:	08003ddf 	.word	0x08003ddf
 8003b6c:	08003ddf 	.word	0x08003ddf
 8003b70:	08003ddf 	.word	0x08003ddf
 8003b74:	08003ddf 	.word	0x08003ddf
 8003b78:	08003ddf 	.word	0x08003ddf
 8003b7c:	08003bcd 	.word	0x08003bcd
 8003b80:	08003ddf 	.word	0x08003ddf
 8003b84:	08003ddf 	.word	0x08003ddf
 8003b88:	08003ddf 	.word	0x08003ddf
 8003b8c:	08003ddf 	.word	0x08003ddf
 8003b90:	08003ddf 	.word	0x08003ddf
 8003b94:	08003ddf 	.word	0x08003ddf
 8003b98:	08003ddf 	.word	0x08003ddf
 8003b9c:	08003bd3 	.word	0x08003bd3
  {
  case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

   if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ba0:	4b94      	ldr	r3, [pc, #592]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0320 	and.w	r3, r3, #32
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t) (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003bac:	4b91      	ldr	r3, [pc, #580]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	08db      	lsrs	r3, r3, #3
 8003bb2:	f003 0303 	and.w	r3, r3, #3
 8003bb6:	4a90      	ldr	r2, [pc, #576]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bb8:	fa22 f303 	lsr.w	r3, r2, r3
 8003bbc:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

    break;
 8003bbe:	e111      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003bc0:	4b8d      	ldr	r3, [pc, #564]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003bc2:	61bb      	str	r3, [r7, #24]
    break;
 8003bc4:	e10e      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
    sysclockfreq = CSI_VALUE;
 8003bc6:	4b8d      	ldr	r3, [pc, #564]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003bc8:	61bb      	str	r3, [r7, #24]
    break;
 8003bca:	e10b      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    sysclockfreq = HSE_VALUE;
 8003bcc:	4b8c      	ldr	r3, [pc, #560]	; (8003e00 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003bce:	61bb      	str	r3, [r7, #24]
    break;
 8003bd0:	e108      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
  case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003bd2:	4b88      	ldr	r3, [pc, #544]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003bd6:	f003 0303 	and.w	r3, r3, #3
 8003bda:	617b      	str	r3, [r7, #20]
    pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1)>> 4)  ;
 8003bdc:	4b85      	ldr	r3, [pc, #532]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003be0:	091b      	lsrs	r3, r3, #4
 8003be2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003be6:	613b      	str	r3, [r7, #16]
    pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN)>>RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003be8:	4b82      	ldr	r3, [pc, #520]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bec:	f003 0301 	and.w	r3, r3, #1
 8003bf0:	60fb      	str	r3, [r7, #12]
    fracn1 = (float_t)(uint32_t)(pllfracen* ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1)>> 3));
 8003bf2:	4b80      	ldr	r3, [pc, #512]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003bf4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bf6:	08db      	lsrs	r3, r3, #3
 8003bf8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003bfc:	68fa      	ldr	r2, [r7, #12]
 8003bfe:	fb02 f303 	mul.w	r3, r2, r3
 8003c02:	ee07 3a90 	vmov	s15, r3
 8003c06:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c0a:	edc7 7a02 	vstr	s15, [r7, #8]

    if (pllm != 0U)
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	f000 80e1 	beq.w	8003dd8 <HAL_RCC_GetSysClockFreq+0x2b8>
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	f000 8083 	beq.w	8003d24 <HAL_RCC_GetSysClockFreq+0x204>
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	2b02      	cmp	r3, #2
 8003c22:	f200 80a1 	bhi.w	8003d68 <HAL_RCC_GetSysClockFreq+0x248>
 8003c26:	697b      	ldr	r3, [r7, #20]
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d003      	beq.n	8003c34 <HAL_RCC_GetSysClockFreq+0x114>
 8003c2c:	697b      	ldr	r3, [r7, #20]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d056      	beq.n	8003ce0 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003c32:	e099      	b.n	8003d68 <HAL_RCC_GetSysClockFreq+0x248>
    {
      switch (pllsource)
      {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

       if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003c34:	4b6f      	ldr	r3, [pc, #444]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	f003 0320 	and.w	r3, r3, #32
 8003c3c:	2b00      	cmp	r3, #0
 8003c3e:	d02d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x17c>
        {
          hsivalue= (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8003c40:	4b6c      	ldr	r3, [pc, #432]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	08db      	lsrs	r3, r3, #3
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	4a6b      	ldr	r2, [pc, #428]	; (8003df8 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003c50:	607b      	str	r3, [r7, #4]
          pllvco = ( (float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	ee07 3a90 	vmov	s15, r3
 8003c58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	ee07 3a90 	vmov	s15, r3
 8003c62:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c6a:	4b62      	ldr	r3, [pc, #392]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003c6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c72:	ee07 3a90 	vmov	s15, r3
 8003c76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c7a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003c7e:	eddf 5a61 	vldr	s11, [pc, #388]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003c82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c8a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003c8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c96:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
        }
        break;
 8003c9a:	e087      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>
          pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	ee07 3a90 	vmov	s15, r3
 8003ca2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ca6:	eddf 6a58 	vldr	s13, [pc, #352]	; 8003e08 <HAL_RCC_GetSysClockFreq+0x2e8>
 8003caa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cae:	4b51      	ldr	r3, [pc, #324]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cb6:	ee07 3a90 	vmov	s15, r3
 8003cba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003cbe:	ed97 6a02 	vldr	s12, [r7, #8]
 8003cc2:	eddf 5a50 	vldr	s11, [pc, #320]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003cc6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003cca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003cce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003cd2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003cd6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003cde:	e065      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003ce0:	693b      	ldr	r3, [r7, #16]
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eddf 6a48 	vldr	s13, [pc, #288]	; 8003e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003cee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003cf2:	4b40      	ldr	r3, [pc, #256]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cf6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cfa:	ee07 3a90 	vmov	s15, r3
 8003cfe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d02:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d06:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d12:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d22:	e043      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d24:	693b      	ldr	r3, [r7, #16]
 8003d26:	ee07 3a90 	vmov	s15, r3
 8003d2a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d2e:	eddf 6a38 	vldr	s13, [pc, #224]	; 8003e10 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003d32:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d36:	4b2f      	ldr	r3, [pc, #188]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d3a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d3e:	ee07 3a90 	vmov	s15, r3
 8003d42:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d46:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d4a:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d4e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d52:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d56:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d5a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003d5e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d62:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003d66:	e021      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x28c>

      default:
        pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1/(float_t)0x2000) +(float_t)1 );
 8003d68:	693b      	ldr	r3, [r7, #16]
 8003d6a:	ee07 3a90 	vmov	s15, r3
 8003d6e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d72:	eddf 6a26 	vldr	s13, [pc, #152]	; 8003e0c <HAL_RCC_GetSysClockFreq+0x2ec>
 8003d76:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003d7a:	4b1e      	ldr	r3, [pc, #120]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003d82:	ee07 3a90 	vmov	s15, r3
 8003d86:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003d8a:	ed97 6a02 	vldr	s12, [r7, #8]
 8003d8e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8003e04 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003d92:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003d96:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003d9a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003d9e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003da2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003da6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003daa:	bf00      	nop
      }
      pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >>9) + 1U ) ;
 8003dac:	4b11      	ldr	r3, [pc, #68]	; (8003df4 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db0:	0a5b      	lsrs	r3, r3, #9
 8003db2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8003db6:	3301      	adds	r3, #1
 8003db8:	603b      	str	r3, [r7, #0]
      sysclockfreq =  (uint32_t)(float_t)(pllvco/(float_t)pllp);
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	ee07 3a90 	vmov	s15, r3
 8003dc0:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003dc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003dc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dcc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003dd0:	ee17 3a90 	vmov	r3, s15
 8003dd4:	61bb      	str	r3, [r7, #24]
    }
    else
    {
      sysclockfreq = 0U;
    }
    break;
 8003dd6:	e005      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>
      sysclockfreq = 0U;
 8003dd8:	2300      	movs	r3, #0
 8003dda:	61bb      	str	r3, [r7, #24]
    break;
 8003ddc:	e002      	b.n	8003de4 <HAL_RCC_GetSysClockFreq+0x2c4>

  default:
    sysclockfreq = CSI_VALUE;
 8003dde:	4b07      	ldr	r3, [pc, #28]	; (8003dfc <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003de0:	61bb      	str	r3, [r7, #24]
    break;
 8003de2:	bf00      	nop
  }

  return sysclockfreq;
 8003de4:	69bb      	ldr	r3, [r7, #24]
}
 8003de6:	4618      	mov	r0, r3
 8003de8:	3724      	adds	r7, #36	; 0x24
 8003dea:	46bd      	mov	sp, r7
 8003dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	58024400 	.word	0x58024400
 8003df8:	03d09000 	.word	0x03d09000
 8003dfc:	003d0900 	.word	0x003d0900
 8003e00:	007a1200 	.word	0x007a1200
 8003e04:	46000000 	.word	0x46000000
 8003e08:	4c742400 	.word	0x4c742400
 8003e0c:	4a742400 	.word	0x4a742400
 8003e10:	4af42400 	.word	0x4af42400

08003e14 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	b082      	sub	sp, #8
 8003e18:	af00      	add	r7, sp, #0
uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8003e1a:	f7ff fe81 	bl	8003b20 <HAL_RCC_GetSysClockFreq>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	4b10      	ldr	r3, [pc, #64]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e22:	699b      	ldr	r3, [r3, #24]
 8003e24:	0a1b      	lsrs	r3, r3, #8
 8003e26:	f003 030f 	and.w	r3, r3, #15
 8003e2a:	490f      	ldr	r1, [pc, #60]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e2c:	5ccb      	ldrb	r3, [r1, r3]
 8003e2e:	f003 031f 	and.w	r3, r3, #31
 8003e32:	fa22 f303 	lsr.w	r3, r2, r3
 8003e36:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003e38:	4b0a      	ldr	r3, [pc, #40]	; (8003e64 <HAL_RCC_GetHCLKFreq+0x50>)
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	f003 030f 	and.w	r3, r3, #15
 8003e40:	4a09      	ldr	r2, [pc, #36]	; (8003e68 <HAL_RCC_GetHCLKFreq+0x54>)
 8003e42:	5cd3      	ldrb	r3, [r2, r3]
 8003e44:	f003 031f 	and.w	r3, r3, #31
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	fa22 f303 	lsr.w	r3, r2, r3
 8003e4e:	4a07      	ldr	r2, [pc, #28]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e50:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003e52:	4a07      	ldr	r2, [pc, #28]	; (8003e70 <HAL_RCC_GetHCLKFreq+0x5c>)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8003e58:	4b04      	ldr	r3, [pc, #16]	; (8003e6c <HAL_RCC_GetHCLKFreq+0x58>)
 8003e5a:	681b      	ldr	r3, [r3, #0]
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3708      	adds	r7, #8
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	58024400 	.word	0x58024400
 8003e68:	08008508 	.word	0x08008508
 8003e6c:	24000004 	.word	0x24000004
 8003e70:	24000000 	.word	0x24000000

08003e74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1)>> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8003e78:	f7ff ffcc 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003e7c:	4602      	mov	r2, r0
 8003e7e:	4b06      	ldr	r3, [pc, #24]	; (8003e98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e80:	69db      	ldr	r3, [r3, #28]
 8003e82:	091b      	lsrs	r3, r3, #4
 8003e84:	f003 0307 	and.w	r3, r3, #7
 8003e88:	4904      	ldr	r1, [pc, #16]	; (8003e9c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003e8a:	5ccb      	ldrb	r3, [r1, r3]
 8003e8c:	f003 031f 	and.w	r3, r3, #31
 8003e90:	fa22 f303 	lsr.w	r3, r2, r3
#else
 /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1)>> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	bd80      	pop	{r7, pc}
 8003e98:	58024400 	.word	0x58024400
 8003e9c:	08008508 	.word	0x08008508

08003ea0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2)>> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8003ea4:	f7ff ffb6 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8003ea8:	4602      	mov	r2, r0
 8003eaa:	4b06      	ldr	r3, [pc, #24]	; (8003ec4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	0a1b      	lsrs	r3, r3, #8
 8003eb0:	f003 0307 	and.w	r3, r3, #7
 8003eb4:	4904      	ldr	r1, [pc, #16]	; (8003ec8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003eb6:	5ccb      	ldrb	r3, [r1, r3]
 8003eb8:	f003 031f 	and.w	r3, r3, #31
 8003ebc:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2)>> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8003ec0:	4618      	mov	r0, r3
 8003ec2:	bd80      	pop	{r7, pc}
 8003ec4:	58024400 	.word	0x58024400
 8003ec8:	08008508 	.word	0x08008508

08003ecc <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b086      	sub	sp, #24
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003ed4:	2300      	movs	r3, #0
 8003ed6:	75fb      	strb	r3, [r7, #23]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003ed8:	2300      	movs	r3, #0
 8003eda:	75bb      	strb	r3, [r7, #22]

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003ee4:	2b00      	cmp	r3, #0
 8003ee6:	d03f      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {

    switch(PeriphClkInit->SpdifrxClockSelection)
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003eec:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef0:	d02a      	beq.n	8003f48 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 8003ef2:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003ef6:	d824      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003ef8:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003efc:	d018      	beq.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003efe:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003f02:	d81e      	bhi.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003f04:	2b00      	cmp	r3, #0
 8003f06:	d003      	beq.n	8003f10 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003f08:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003f0c:	d007      	beq.n	8003f1e <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003f0e:	e018      	b.n	8003f42 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
      /* Enable PLL1Q Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f10:	4bab      	ldr	r3, [pc, #684]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f14:	4aaa      	ldr	r2, [pc, #680]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f16:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003f1a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f1c:	e015      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	3304      	adds	r3, #4
 8003f22:	2102      	movs	r1, #2
 8003f24:	4618      	mov	r0, r3
 8003f26:	f001 f9cf 	bl	80052c8 <RCCEx_PLL2_Config>
 8003f2a:	4603      	mov	r3, r0
 8003f2c:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f2e:	e00c      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	3324      	adds	r3, #36	; 0x24
 8003f34:	2102      	movs	r1, #2
 8003f36:	4618      	mov	r0, r3
 8003f38:	f001 fa78 	bl	800542c <RCCEx_PLL3_Config>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	75fb      	strb	r3, [r7, #23]

      /* SPDIFRX clock source configuration done later after clock selection check */
      break;
 8003f40:	e003      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      /* Internal OSC clock is used as source of SPDIFRX clock*/
      /* SPDIFRX clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	75fb      	strb	r3, [r7, #23]
      break;
 8003f46:	e000      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003f48:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003f4a:	7dfb      	ldrb	r3, [r7, #23]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d109      	bne.n	8003f64 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8003f50:	4b9b      	ldr	r3, [pc, #620]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f54:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003f5c:	4998      	ldr	r1, [pc, #608]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f5e:	4313      	orrs	r3, r2
 8003f60:	650b      	str	r3, [r1, #80]	; 0x50
 8003f62:	e001      	b.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f64:	7dfb      	ldrb	r3, [r7, #23]
 8003f66:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d03d      	beq.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
  {
    switch(PeriphClkInit->Sai1ClockSelection)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f78:	2b04      	cmp	r3, #4
 8003f7a:	d826      	bhi.n	8003fca <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8003f7c:	a201      	add	r2, pc, #4	; (adr r2, 8003f84 <HAL_RCCEx_PeriphCLKConfig+0xb8>)
 8003f7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f82:	bf00      	nop
 8003f84:	08003f99 	.word	0x08003f99
 8003f88:	08003fa7 	.word	0x08003fa7
 8003f8c:	08003fb9 	.word	0x08003fb9
 8003f90:	08003fd1 	.word	0x08003fd1
 8003f94:	08003fd1 	.word	0x08003fd1
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003f98:	4b89      	ldr	r3, [pc, #548]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f9c:	4a88      	ldr	r2, [pc, #544]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003f9e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003fa2:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fa4:	e015      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	3304      	adds	r3, #4
 8003faa:	2100      	movs	r1, #0
 8003fac:	4618      	mov	r0, r3
 8003fae:	f001 f98b 	bl	80052c8 <RCCEx_PLL2_Config>
 8003fb2:	4603      	mov	r3, r0
 8003fb4:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fb6:	e00c      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	3324      	adds	r3, #36	; 0x24
 8003fbc:	2100      	movs	r1, #0
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	f001 fa34 	bl	800542c <RCCEx_PLL3_Config>
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8003fc8:	e003      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
      /* SAI1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003fca:	2301      	movs	r3, #1
 8003fcc:	75fb      	strb	r3, [r7, #23]
      break;
 8003fce:	e000      	b.n	8003fd2 <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8003fd0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003fd2:	7dfb      	ldrb	r3, [r7, #23]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d109      	bne.n	8003fec <HAL_RCCEx_PeriphCLKConfig+0x120>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003fd8:	4b79      	ldr	r3, [pc, #484]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fda:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003fdc:	f023 0207 	bic.w	r2, r3, #7
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fe4:	4976      	ldr	r1, [pc, #472]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	650b      	str	r3, [r1, #80]	; 0x50
 8003fea:	e001      	b.n	8003ff0 <HAL_RCCEx_PeriphCLKConfig+0x124>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003fec:	7dfb      	ldrb	r3, [r7, #23]
 8003fee:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d042      	beq.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
  {
    switch(PeriphClkInit->Sai23ClockSelection)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004000:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004004:	d02b      	beq.n	800405e <HAL_RCCEx_PeriphCLKConfig+0x192>
 8004006:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800400a:	d825      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800400c:	2bc0      	cmp	r3, #192	; 0xc0
 800400e:	d028      	beq.n	8004062 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8004010:	2bc0      	cmp	r3, #192	; 0xc0
 8004012:	d821      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 8004014:	2b80      	cmp	r3, #128	; 0x80
 8004016:	d016      	beq.n	8004046 <HAL_RCCEx_PeriphCLKConfig+0x17a>
 8004018:	2b80      	cmp	r3, #128	; 0x80
 800401a:	d81d      	bhi.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x15a>
 8004020:	2b40      	cmp	r3, #64	; 0x40
 8004022:	d007      	beq.n	8004034 <HAL_RCCEx_PeriphCLKConfig+0x168>
 8004024:	e018      	b.n	8004058 <HAL_RCCEx_PeriphCLKConfig+0x18c>
    {
    case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004026:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004028:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800402a:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800402c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004030:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004032:	e017      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	3304      	adds	r3, #4
 8004038:	2100      	movs	r1, #0
 800403a:	4618      	mov	r0, r3
 800403c:	f001 f944 	bl	80052c8 <RCCEx_PLL2_Config>
 8004040:	4603      	mov	r3, r0
 8004042:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004044:	e00e      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>

    case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	3324      	adds	r3, #36	; 0x24
 800404a:	2100      	movs	r1, #0
 800404c:	4618      	mov	r0, r3
 800404e:	f001 f9ed 	bl	800542c <RCCEx_PLL3_Config>
 8004052:	4603      	mov	r3, r0
 8004054:	75fb      	strb	r3, [r7, #23]

      /* SAI2/3 clock source configuration done later after clock selection check */
      break;
 8004056:	e005      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
      /* SAI2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	75fb      	strb	r3, [r7, #23]
      break;
 800405c:	e002      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 800405e:	bf00      	nop
 8004060:	e000      	b.n	8004064 <HAL_RCCEx_PeriphCLKConfig+0x198>
      break;
 8004062:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004064:	7dfb      	ldrb	r3, [r7, #23]
 8004066:	2b00      	cmp	r3, #0
 8004068:	d109      	bne.n	800407e <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800406a:	4b55      	ldr	r3, [pc, #340]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800406c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800406e:	f423 72e0 	bic.w	r2, r3, #448	; 0x1c0
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004076:	4952      	ldr	r1, [pc, #328]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004078:	4313      	orrs	r3, r2
 800407a:	650b      	str	r3, [r1, #80]	; 0x50
 800407c:	e001      	b.n	8004082 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800407e:	7dfb      	ldrb	r3, [r7, #23]
 8004080:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800408a:	2b00      	cmp	r3, #0
 800408c:	d049      	beq.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x256>
  {
    switch(PeriphClkInit->Sai4AClockSelection)
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004094:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004098:	d030      	beq.n	80040fc <HAL_RCCEx_PeriphCLKConfig+0x230>
 800409a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800409e:	d82a      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040a0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040a4:	d02c      	beq.n	8004100 <HAL_RCCEx_PeriphCLKConfig+0x234>
 80040a6:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80040aa:	d824      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040ac:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b0:	d018      	beq.n	80040e4 <HAL_RCCEx_PeriphCLKConfig+0x218>
 80040b2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80040b6:	d81e      	bhi.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d003      	beq.n	80040c4 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80040bc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80040c0:	d007      	beq.n	80040d2 <HAL_RCCEx_PeriphCLKConfig+0x206>
 80040c2:	e018      	b.n	80040f6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
    {
    case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80040c4:	4b3e      	ldr	r3, [pc, #248]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c8:	4a3d      	ldr	r2, [pc, #244]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80040ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80040ce:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040d0:	e017      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	3304      	adds	r3, #4
 80040d6:	2100      	movs	r1, #0
 80040d8:	4618      	mov	r0, r3
 80040da:	f001 f8f5 	bl	80052c8 <RCCEx_PLL2_Config>
 80040de:	4603      	mov	r3, r0
 80040e0:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 80040e2:	e00e      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>

    case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	3324      	adds	r3, #36	; 0x24
 80040e8:	2100      	movs	r1, #0
 80040ea:	4618      	mov	r0, r3
 80040ec:	f001 f99e 	bl	800542c <RCCEx_PLL3_Config>
 80040f0:	4603      	mov	r3, r0
 80040f2:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 80040f4:	e005      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      /* SAI4A clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	75fb      	strb	r3, [r7, #23]
      break;
 80040fa:	e002      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 80040fc:	bf00      	nop
 80040fe:	e000      	b.n	8004102 <HAL_RCCEx_PeriphCLKConfig+0x236>
      break;
 8004100:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004102:	7dfb      	ldrb	r3, [r7, #23]
 8004104:	2b00      	cmp	r3, #0
 8004106:	d10a      	bne.n	800411e <HAL_RCCEx_PeriphCLKConfig+0x252>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8004108:	4b2d      	ldr	r3, [pc, #180]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800410a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800410c:	f423 0260 	bic.w	r2, r3, #14680064	; 0xe00000
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004116:	492a      	ldr	r1, [pc, #168]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004118:	4313      	orrs	r3, r2
 800411a:	658b      	str	r3, [r1, #88]	; 0x58
 800411c:	e001      	b.n	8004122 <HAL_RCCEx_PeriphCLKConfig+0x256>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800411e:	7dfb      	ldrb	r3, [r7, #23]
 8004120:	75bb      	strb	r3, [r7, #22]
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800412a:	2b00      	cmp	r3, #0
 800412c:	d04c      	beq.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    switch(PeriphClkInit->Sai4BClockSelection)
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8004134:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004138:	d030      	beq.n	800419c <HAL_RCCEx_PeriphCLKConfig+0x2d0>
 800413a:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800413e:	d82a      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004140:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004144:	d02c      	beq.n	80041a0 <HAL_RCCEx_PeriphCLKConfig+0x2d4>
 8004146:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800414a:	d824      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 800414c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004150:	d018      	beq.n	8004184 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
 8004152:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004156:	d81e      	bhi.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
 8004158:	2b00      	cmp	r3, #0
 800415a:	d003      	beq.n	8004164 <HAL_RCCEx_PeriphCLKConfig+0x298>
 800415c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004160:	d007      	beq.n	8004172 <HAL_RCCEx_PeriphCLKConfig+0x2a6>
 8004162:	e018      	b.n	8004196 <HAL_RCCEx_PeriphCLKConfig+0x2ca>
    {
    case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004164:	4b16      	ldr	r3, [pc, #88]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 8004166:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004168:	4a15      	ldr	r2, [pc, #84]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 800416a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800416e:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004170:	e017      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	2100      	movs	r1, #0
 8004178:	4618      	mov	r0, r3
 800417a:	f001 f8a5 	bl	80052c8 <RCCEx_PLL2_Config>
 800417e:	4603      	mov	r3, r0
 8004180:	75fb      	strb	r3, [r7, #23]

      /* SAI2 clock source configuration done later after clock selection check */
      break;
 8004182:	e00e      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>

    case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	3324      	adds	r3, #36	; 0x24
 8004188:	2100      	movs	r1, #0
 800418a:	4618      	mov	r0, r3
 800418c:	f001 f94e 	bl	800542c <RCCEx_PLL3_Config>
 8004190:	4603      	mov	r3, r0
 8004192:	75fb      	strb	r3, [r7, #23]

      /* SAI1 clock source configuration done later after clock selection check */
      break;
 8004194:	e005      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      /* SAI4B clock source configuration done later after clock selection check */
      break;
#endif /* RCC_VER_3_0 */

    default:
      ret = HAL_ERROR;
 8004196:	2301      	movs	r3, #1
 8004198:	75fb      	strb	r3, [r7, #23]
      break;
 800419a:	e002      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 800419c:	bf00      	nop
 800419e:	e000      	b.n	80041a2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
      break;
 80041a0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d10d      	bne.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80041a8:	4b05      	ldr	r3, [pc, #20]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80041ac:	f023 62e0 	bic.w	r2, r3, #117440512	; 0x7000000
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80041b6:	4902      	ldr	r1, [pc, #8]	; (80041c0 <HAL_RCCEx_PeriphCLKConfig+0x2f4>)
 80041b8:	4313      	orrs	r3, r2
 80041ba:	658b      	str	r3, [r1, #88]	; 0x58
 80041bc:	e004      	b.n	80041c8 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
 80041be:	bf00      	nop
 80041c0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80041c4:	7dfb      	ldrb	r3, [r7, #23]
 80041c6:	75bb      	strb	r3, [r7, #22]
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d032      	beq.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x36e>
  {
    switch(PeriphClkInit->QspiClockSelection)
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d8:	2b30      	cmp	r3, #48	; 0x30
 80041da:	d01c      	beq.n	8004216 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 80041dc:	2b30      	cmp	r3, #48	; 0x30
 80041de:	d817      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80041e0:	2b20      	cmp	r3, #32
 80041e2:	d00c      	beq.n	80041fe <HAL_RCCEx_PeriphCLKConfig+0x332>
 80041e4:	2b20      	cmp	r3, #32
 80041e6:	d813      	bhi.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x344>
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d016      	beq.n	800421a <HAL_RCCEx_PeriphCLKConfig+0x34e>
 80041ec:	2b10      	cmp	r3, #16
 80041ee:	d10f      	bne.n	8004210 <HAL_RCCEx_PeriphCLKConfig+0x344>
    {
    case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
      /* Enable QSPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041f0:	4baf      	ldr	r3, [pc, #700]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f4:	4aae      	ldr	r2, [pc, #696]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80041f6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041fa:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* QSPI clock source configuration done later after clock selection check */
      break;
 80041fc:	e00e      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>

    case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	3304      	adds	r3, #4
 8004202:	2102      	movs	r1, #2
 8004204:	4618      	mov	r0, r3
 8004206:	f001 f85f 	bl	80052c8 <RCCEx_PLL2_Config>
 800420a:	4603      	mov	r3, r0
 800420c:	75fb      	strb	r3, [r7, #23]

      /* QSPI clock source configuration done later after clock selection check */
      break;
 800420e:	e005      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>
    case RCC_QSPICLKSOURCE_D1HCLK:
      /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 8004210:	2301      	movs	r3, #1
 8004212:	75fb      	strb	r3, [r7, #23]
      break;
 8004214:	e002      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 8004216:	bf00      	nop
 8004218:	e000      	b.n	800421c <HAL_RCCEx_PeriphCLKConfig+0x350>
      break;
 800421a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800421c:	7dfb      	ldrb	r3, [r7, #23]
 800421e:	2b00      	cmp	r3, #0
 8004220:	d109      	bne.n	8004236 <HAL_RCCEx_PeriphCLKConfig+0x36a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004222:	4ba3      	ldr	r3, [pc, #652]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004224:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004226:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800422e:	49a0      	ldr	r1, [pc, #640]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004230:	4313      	orrs	r3, r2
 8004232:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004234:	e001      	b.n	800423a <HAL_RCCEx_PeriphCLKConfig+0x36e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004236:	7dfb      	ldrb	r3, [r7, #23]
 8004238:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004242:	2b00      	cmp	r3, #0
 8004244:	d047      	beq.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
  {
    switch(PeriphClkInit->Spi123ClockSelection)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800424a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800424e:	d030      	beq.n	80042b2 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
 8004250:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004254:	d82a      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004256:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800425a:	d02c      	beq.n	80042b6 <HAL_RCCEx_PeriphCLKConfig+0x3ea>
 800425c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004260:	d824      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 8004262:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004266:	d018      	beq.n	800429a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 8004268:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800426c:	d81e      	bhi.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
 800426e:	2b00      	cmp	r3, #0
 8004270:	d003      	beq.n	800427a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004272:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004276:	d007      	beq.n	8004288 <HAL_RCCEx_PeriphCLKConfig+0x3bc>
 8004278:	e018      	b.n	80042ac <HAL_RCCEx_PeriphCLKConfig+0x3e0>
    {
    case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
      /* Enable SPI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800427a:	4b8d      	ldr	r3, [pc, #564]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800427c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800427e:	4a8c      	ldr	r2, [pc, #560]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004280:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004284:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004286:	e017      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	3304      	adds	r3, #4
 800428c:	2100      	movs	r1, #0
 800428e:	4618      	mov	r0, r3
 8004290:	f001 f81a 	bl	80052c8 <RCCEx_PLL2_Config>
 8004294:	4603      	mov	r3, r0
 8004296:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 8004298:	e00e      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>

    case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_P_UPDATE);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	3324      	adds	r3, #36	; 0x24
 800429e:	2100      	movs	r1, #0
 80042a0:	4618      	mov	r0, r3
 80042a2:	f001 f8c3 	bl	800542c <RCCEx_PLL3_Config>
 80042a6:	4603      	mov	r3, r0
 80042a8:	75fb      	strb	r3, [r7, #23]

      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;
 80042aa:	e005      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
      /* SPI1/2/3 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80042ac:	2301      	movs	r3, #1
 80042ae:	75fb      	strb	r3, [r7, #23]
      break;
 80042b0:	e002      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80042b2:	bf00      	nop
 80042b4:	e000      	b.n	80042b8 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
      break;
 80042b6:	bf00      	nop
    }

    if(ret == HAL_OK)
 80042b8:	7dfb      	ldrb	r3, [r7, #23]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d109      	bne.n	80042d2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 80042be:	4b7c      	ldr	r3, [pc, #496]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042c2:	f423 42e0 	bic.w	r2, r3, #28672	; 0x7000
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042ca:	4979      	ldr	r1, [pc, #484]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 80042cc:	4313      	orrs	r3, r2
 80042ce:	650b      	str	r3, [r1, #80]	; 0x50
 80042d0:	e001      	b.n	80042d6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042d2:	7dfb      	ldrb	r3, [r7, #23]
 80042d4:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d049      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
  {
    switch(PeriphClkInit->Spi45ClockSelection)
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042ea:	d02e      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x47e>
 80042ec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80042f0:	d828      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80042f2:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042f6:	d02a      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x482>
 80042f8:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80042fc:	d822      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 80042fe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004302:	d026      	beq.n	8004352 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004304:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004308:	d81c      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 800430a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800430e:	d010      	beq.n	8004332 <HAL_RCCEx_PeriphCLKConfig+0x466>
 8004310:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004314:	d816      	bhi.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
 8004316:	2b00      	cmp	r3, #0
 8004318:	d01d      	beq.n	8004356 <HAL_RCCEx_PeriphCLKConfig+0x48a>
 800431a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800431e:	d111      	bne.n	8004344 <HAL_RCCEx_PeriphCLKConfig+0x478>
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	2101      	movs	r1, #1
 8004326:	4618      	mov	r0, r3
 8004328:	f000 ffce 	bl	80052c8 <RCCEx_PLL2_Config>
 800432c:	4603      	mov	r3, r0
 800432e:	75fb      	strb	r3, [r7, #23]

      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004330:	e012      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	3324      	adds	r3, #36	; 0x24
 8004336:	2101      	movs	r1, #1
 8004338:	4618      	mov	r0, r3
 800433a:	f001 f877 	bl	800542c <RCCEx_PLL3_Config>
 800433e:	4603      	mov	r3, r0
 8004340:	75fb      	strb	r3, [r7, #23]
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;
 8004342:	e009      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      /* HSE,  oscillator is used as source of SPI4/5 clock */
      /* SPI4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004344:	2301      	movs	r3, #1
 8004346:	75fb      	strb	r3, [r7, #23]
      break;
 8004348:	e006      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800434a:	bf00      	nop
 800434c:	e004      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 800434e:	bf00      	nop
 8004350:	e002      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004352:	bf00      	nop
 8004354:	e000      	b.n	8004358 <HAL_RCCEx_PeriphCLKConfig+0x48c>
      break;
 8004356:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004358:	7dfb      	ldrb	r3, [r7, #23]
 800435a:	2b00      	cmp	r3, #0
 800435c:	d109      	bne.n	8004372 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800435e:	4b54      	ldr	r3, [pc, #336]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004360:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004362:	f423 22e0 	bic.w	r2, r3, #458752	; 0x70000
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800436a:	4951      	ldr	r1, [pc, #324]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800436c:	4313      	orrs	r3, r2
 800436e:	650b      	str	r3, [r1, #80]	; 0x50
 8004370:	e001      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x4aa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004372:	7dfb      	ldrb	r3, [r7, #23]
 8004374:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800437e:	2b00      	cmp	r3, #0
 8004380:	d04b      	beq.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x54e>
  {
    switch(PeriphClkInit->Spi6ClockSelection)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 8004388:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800438c:	d02e      	beq.n	80043ec <HAL_RCCEx_PeriphCLKConfig+0x520>
 800438e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004392:	d828      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8004394:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004398:	d02a      	beq.n	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x524>
 800439a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800439e:	d822      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043a0:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043a4:	d026      	beq.n	80043f4 <HAL_RCCEx_PeriphCLKConfig+0x528>
 80043a6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80043aa:	d81c      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043ac:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b0:	d010      	beq.n	80043d4 <HAL_RCCEx_PeriphCLKConfig+0x508>
 80043b2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80043b6:	d816      	bhi.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d01d      	beq.n	80043f8 <HAL_RCCEx_PeriphCLKConfig+0x52c>
 80043bc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80043c0:	d111      	bne.n	80043e6 <HAL_RCCEx_PeriphCLKConfig+0x51a>
      /* SPI6 clock source configuration done later after clock selection check */
      break;

    case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	3304      	adds	r3, #4
 80043c6:	2101      	movs	r1, #1
 80043c8:	4618      	mov	r0, r3
 80043ca:	f000 ff7d 	bl	80052c8 <RCCEx_PLL2_Config>
 80043ce:	4603      	mov	r3, r0
 80043d0:	75fb      	strb	r3, [r7, #23]

      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043d2:	e012      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
    case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	3324      	adds	r3, #36	; 0x24
 80043d8:	2101      	movs	r1, #1
 80043da:	4618      	mov	r0, r3
 80043dc:	f001 f826 	bl	800542c <RCCEx_PLL3_Config>
 80043e0:	4603      	mov	r3, r0
 80043e2:	75fb      	strb	r3, [r7, #23]
      /* SPI6 clock source configuration done later after clock selection check */
      break;
 80043e4:	e009      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      /* SPI6 clock source configuration done later after clock selection check */
      break;
#endif

    default:
      ret = HAL_ERROR;
 80043e6:	2301      	movs	r3, #1
 80043e8:	75fb      	strb	r3, [r7, #23]
      break;
 80043ea:	e006      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043ec:	bf00      	nop
 80043ee:	e004      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043f0:	bf00      	nop
 80043f2:	e002      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043f4:	bf00      	nop
 80043f6:	e000      	b.n	80043fa <HAL_RCCEx_PeriphCLKConfig+0x52e>
      break;
 80043f8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80043fa:	7dfb      	ldrb	r3, [r7, #23]
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d10a      	bne.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x54a>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8004400:	4b2b      	ldr	r3, [pc, #172]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004402:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004404:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800440e:	4928      	ldr	r1, [pc, #160]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004410:	4313      	orrs	r3, r2
 8004412:	658b      	str	r3, [r1, #88]	; 0x58
 8004414:	e001      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x54e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004416:	7dfb      	ldrb	r3, [r7, #23]
 8004418:	75bb      	strb	r3, [r7, #22]
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004422:	2b00      	cmp	r3, #0
 8004424:	d02f      	beq.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
  {
    switch(PeriphClkInit->FdcanClockSelection)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800442a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800442e:	d00e      	beq.n	800444e <HAL_RCCEx_PeriphCLKConfig+0x582>
 8004430:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004434:	d814      	bhi.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x594>
 8004436:	2b00      	cmp	r3, #0
 8004438:	d015      	beq.n	8004466 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800443a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800443e:	d10f      	bne.n	8004460 <HAL_RCCEx_PeriphCLKConfig+0x594>
    {
    case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
      /* Enable FDCAN Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004440:	4b1b      	ldr	r3, [pc, #108]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004444:	4a1a      	ldr	r2, [pc, #104]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004446:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800444a:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800444c:	e00c      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>

    case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	3304      	adds	r3, #4
 8004452:	2101      	movs	r1, #1
 8004454:	4618      	mov	r0, r3
 8004456:	f000 ff37 	bl	80052c8 <RCCEx_PLL2_Config>
 800445a:	4603      	mov	r3, r0
 800445c:	75fb      	strb	r3, [r7, #23]

      /* FDCAN clock source configuration done later after clock selection check */
      break;
 800445e:	e003      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      /* HSE is used as clock source for FDCAN*/
      /* FDCAN clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004460:	2301      	movs	r3, #1
 8004462:	75fb      	strb	r3, [r7, #23]
      break;
 8004464:	e000      	b.n	8004468 <HAL_RCCEx_PeriphCLKConfig+0x59c>
      break;
 8004466:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004468:	7dfb      	ldrb	r3, [r7, #23]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d109      	bne.n	8004482 <HAL_RCCEx_PeriphCLKConfig+0x5b6>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800446e:	4b10      	ldr	r3, [pc, #64]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 8004470:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004472:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800447a:	490d      	ldr	r1, [pc, #52]	; (80044b0 <HAL_RCCEx_PeriphCLKConfig+0x5e4>)
 800447c:	4313      	orrs	r3, r2
 800447e:	650b      	str	r3, [r1, #80]	; 0x50
 8004480:	e001      	b.n	8004486 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004482:	7dfb      	ldrb	r3, [r7, #23]
 8004484:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d033      	beq.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    switch(PeriphClkInit->FmcClockSelection)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004496:	2b03      	cmp	r3, #3
 8004498:	d81c      	bhi.n	80044d4 <HAL_RCCEx_PeriphCLKConfig+0x608>
 800449a:	a201      	add	r2, pc, #4	; (adr r2, 80044a0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>)
 800449c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044a0:	080044db 	.word	0x080044db
 80044a4:	080044b5 	.word	0x080044b5
 80044a8:	080044c3 	.word	0x080044c3
 80044ac:	080044db 	.word	0x080044db
 80044b0:	58024400 	.word	0x58024400
    {
    case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
      /* Enable FMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80044b4:	4bb8      	ldr	r3, [pc, #736]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044b8:	4ab7      	ldr	r2, [pc, #732]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044be:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044c0:	e00c      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>

    case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	3304      	adds	r3, #4
 80044c6:	2102      	movs	r1, #2
 80044c8:	4618      	mov	r0, r3
 80044ca:	f000 fefd 	bl	80052c8 <RCCEx_PLL2_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	75fb      	strb	r3, [r7, #23]

      /* FMC clock source configuration done later after clock selection check */
      break;
 80044d2:	e003      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>
    case RCC_FMCCLKSOURCE_HCLK:
      /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
      break;

    default:
      ret = HAL_ERROR;
 80044d4:	2301      	movs	r3, #1
 80044d6:	75fb      	strb	r3, [r7, #23]
      break;
 80044d8:	e000      	b.n	80044dc <HAL_RCCEx_PeriphCLKConfig+0x610>
      break;
 80044da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044dc:	7dfb      	ldrb	r3, [r7, #23]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d109      	bne.n	80044f6 <HAL_RCCEx_PeriphCLKConfig+0x62a>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 80044e2:	4bad      	ldr	r3, [pc, #692]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044e6:	f023 0203 	bic.w	r2, r3, #3
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ee:	49aa      	ldr	r1, [pc, #680]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80044f0:	4313      	orrs	r3, r2
 80044f2:	64cb      	str	r3, [r1, #76]	; 0x4c
 80044f4:	e001      	b.n	80044fa <HAL_RCCEx_PeriphCLKConfig+0x62e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044f6:	7dfb      	ldrb	r3, [r7, #23]
 80044f8:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004502:	2b00      	cmp	r3, #0
 8004504:	f000 8086 	beq.w	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004508:	4ba4      	ldr	r3, [pc, #656]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4aa3      	ldr	r2, [pc, #652]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 800450e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004512:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004514:	f7fc fed6 	bl	80012c4 <HAL_GetTick>
 8004518:	6138      	str	r0, [r7, #16]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800451a:	e009      	b.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x664>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800451c:	f7fc fed2 	bl	80012c4 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	693b      	ldr	r3, [r7, #16]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	2b64      	cmp	r3, #100	; 0x64
 8004528:	d902      	bls.n	8004530 <HAL_RCCEx_PeriphCLKConfig+0x664>
      {
        ret = HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	75fb      	strb	r3, [r7, #23]
        break;
 800452e:	e005      	b.n	800453c <HAL_RCCEx_PeriphCLKConfig+0x670>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004530:	4b9a      	ldr	r3, [pc, #616]	; (800479c <HAL_RCCEx_PeriphCLKConfig+0x8d0>)
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004538:	2b00      	cmp	r3, #0
 800453a:	d0ef      	beq.n	800451c <HAL_RCCEx_PeriphCLKConfig+0x650>
      }
    }

    if(ret == HAL_OK)
 800453c:	7dfb      	ldrb	r3, [r7, #23]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d166      	bne.n	8004610 <HAL_RCCEx_PeriphCLKConfig+0x744>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004542:	4b95      	ldr	r3, [pc, #596]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004544:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 800454c:	4053      	eors	r3, r2
 800454e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004552:	2b00      	cmp	r3, #0
 8004554:	d013      	beq.n	800457e <HAL_RCCEx_PeriphCLKConfig+0x6b2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004556:	4b90      	ldr	r3, [pc, #576]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800455a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800455e:	60fb      	str	r3, [r7, #12]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004560:	4b8d      	ldr	r3, [pc, #564]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004564:	4a8c      	ldr	r2, [pc, #560]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004566:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800456a:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800456c:	4b8a      	ldr	r3, [pc, #552]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800456e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004570:	4a89      	ldr	r2, [pc, #548]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004572:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004576:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004578:	4a87      	ldr	r2, [pc, #540]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if(PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800457e:	687b      	ldr	r3, [r7, #4]
 8004580:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004584:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004588:	d115      	bne.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800458a:	f7fc fe9b 	bl	80012c4 <HAL_GetTick>
 800458e:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004590:	e00b      	b.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004592:	f7fc fe97 	bl	80012c4 <HAL_GetTick>
 8004596:	4602      	mov	r2, r0
 8004598:	693b      	ldr	r3, [r7, #16]
 800459a:	1ad3      	subs	r3, r2, r3
 800459c:	f241 3288 	movw	r2, #5000	; 0x1388
 80045a0:	4293      	cmp	r3, r2
 80045a2:	d902      	bls.n	80045aa <HAL_RCCEx_PeriphCLKConfig+0x6de>
          {
            ret = HAL_TIMEOUT;
 80045a4:	2303      	movs	r3, #3
 80045a6:	75fb      	strb	r3, [r7, #23]
            break;
 80045a8:	e005      	b.n	80045b6 <HAL_RCCEx_PeriphCLKConfig+0x6ea>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80045aa:	4b7b      	ldr	r3, [pc, #492]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80045ae:	f003 0302 	and.w	r3, r3, #2
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d0ed      	beq.n	8004592 <HAL_RCCEx_PeriphCLKConfig+0x6c6>
          }
        }
      }

      if(ret == HAL_OK)
 80045b6:	7dfb      	ldrb	r3, [r7, #23]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d126      	bne.n	800460a <HAL_RCCEx_PeriphCLKConfig+0x73e>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80045c6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80045ca:	d10d      	bne.n	80045e8 <HAL_RCCEx_PeriphCLKConfig+0x71c>
 80045cc:	4b72      	ldr	r3, [pc, #456]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ce:	691b      	ldr	r3, [r3, #16]
 80045d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045da:	0919      	lsrs	r1, r3, #4
 80045dc:	4b70      	ldr	r3, [pc, #448]	; (80047a0 <HAL_RCCEx_PeriphCLKConfig+0x8d4>)
 80045de:	400b      	ands	r3, r1
 80045e0:	496d      	ldr	r1, [pc, #436]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045e2:	4313      	orrs	r3, r2
 80045e4:	610b      	str	r3, [r1, #16]
 80045e6:	e005      	b.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x728>
 80045e8:	4b6b      	ldr	r3, [pc, #428]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ea:	691b      	ldr	r3, [r3, #16]
 80045ec:	4a6a      	ldr	r2, [pc, #424]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045ee:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80045f2:	6113      	str	r3, [r2, #16]
 80045f4:	4b68      	ldr	r3, [pc, #416]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 80045f6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80045fe:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004602:	4965      	ldr	r1, [pc, #404]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004604:	4313      	orrs	r3, r2
 8004606:	670b      	str	r3, [r1, #112]	; 0x70
 8004608:	e004      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800460a:	7dfb      	ldrb	r3, [r7, #23]
 800460c:	75bb      	strb	r3, [r7, #22]
 800460e:	e001      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x748>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004610:	7dfb      	ldrb	r3, [r7, #23]
 8004612:	75bb      	strb	r3, [r7, #22]
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f003 0301 	and.w	r3, r3, #1
 800461c:	2b00      	cmp	r3, #0
 800461e:	d07e      	beq.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x852>
  {
    switch(PeriphClkInit->Usart16ClockSelection)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004624:	2b28      	cmp	r3, #40	; 0x28
 8004626:	d867      	bhi.n	80046f8 <HAL_RCCEx_PeriphCLKConfig+0x82c>
 8004628:	a201      	add	r2, pc, #4	; (adr r2, 8004630 <HAL_RCCEx_PeriphCLKConfig+0x764>)
 800462a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800462e:	bf00      	nop
 8004630:	080046ff 	.word	0x080046ff
 8004634:	080046f9 	.word	0x080046f9
 8004638:	080046f9 	.word	0x080046f9
 800463c:	080046f9 	.word	0x080046f9
 8004640:	080046f9 	.word	0x080046f9
 8004644:	080046f9 	.word	0x080046f9
 8004648:	080046f9 	.word	0x080046f9
 800464c:	080046f9 	.word	0x080046f9
 8004650:	080046d5 	.word	0x080046d5
 8004654:	080046f9 	.word	0x080046f9
 8004658:	080046f9 	.word	0x080046f9
 800465c:	080046f9 	.word	0x080046f9
 8004660:	080046f9 	.word	0x080046f9
 8004664:	080046f9 	.word	0x080046f9
 8004668:	080046f9 	.word	0x080046f9
 800466c:	080046f9 	.word	0x080046f9
 8004670:	080046e7 	.word	0x080046e7
 8004674:	080046f9 	.word	0x080046f9
 8004678:	080046f9 	.word	0x080046f9
 800467c:	080046f9 	.word	0x080046f9
 8004680:	080046f9 	.word	0x080046f9
 8004684:	080046f9 	.word	0x080046f9
 8004688:	080046f9 	.word	0x080046f9
 800468c:	080046f9 	.word	0x080046f9
 8004690:	080046ff 	.word	0x080046ff
 8004694:	080046f9 	.word	0x080046f9
 8004698:	080046f9 	.word	0x080046f9
 800469c:	080046f9 	.word	0x080046f9
 80046a0:	080046f9 	.word	0x080046f9
 80046a4:	080046f9 	.word	0x080046f9
 80046a8:	080046f9 	.word	0x080046f9
 80046ac:	080046f9 	.word	0x080046f9
 80046b0:	080046ff 	.word	0x080046ff
 80046b4:	080046f9 	.word	0x080046f9
 80046b8:	080046f9 	.word	0x080046f9
 80046bc:	080046f9 	.word	0x080046f9
 80046c0:	080046f9 	.word	0x080046f9
 80046c4:	080046f9 	.word	0x080046f9
 80046c8:	080046f9 	.word	0x080046f9
 80046cc:	080046f9 	.word	0x080046f9
 80046d0:	080046ff 	.word	0x080046ff
    case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	3304      	adds	r3, #4
 80046d8:	2101      	movs	r1, #1
 80046da:	4618      	mov	r0, r3
 80046dc:	f000 fdf4 	bl	80052c8 <RCCEx_PLL2_Config>
 80046e0:	4603      	mov	r3, r0
 80046e2:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046e4:	e00c      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>

    case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	3324      	adds	r3, #36	; 0x24
 80046ea:	2101      	movs	r1, #1
 80046ec:	4618      	mov	r0, r3
 80046ee:	f000 fe9d 	bl	800542c <RCCEx_PLL3_Config>
 80046f2:	4603      	mov	r3, r0
 80046f4:	75fb      	strb	r3, [r7, #23]
      /* USART1/6 clock source configuration done later after clock selection check */
      break;
 80046f6:	e003      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>
      /* LSE,  oscillator is used as source of USART1/6 clock */
      /* USART1/6 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80046f8:	2301      	movs	r3, #1
 80046fa:	75fb      	strb	r3, [r7, #23]
      break;
 80046fc:	e000      	b.n	8004700 <HAL_RCCEx_PeriphCLKConfig+0x834>
      break;
 80046fe:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004700:	7dfb      	ldrb	r3, [r7, #23]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d109      	bne.n	800471a <HAL_RCCEx_PeriphCLKConfig+0x84e>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004706:	4b24      	ldr	r3, [pc, #144]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004708:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800470a:	f023 0238 	bic.w	r2, r3, #56	; 0x38
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8004712:	4921      	ldr	r1, [pc, #132]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004714:	4313      	orrs	r3, r2
 8004716:	654b      	str	r3, [r1, #84]	; 0x54
 8004718:	e001      	b.n	800471e <HAL_RCCEx_PeriphCLKConfig+0x852>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800471a:	7dfb      	ldrb	r3, [r7, #23]
 800471c:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f003 0302 	and.w	r3, r3, #2
 8004726:	2b00      	cmp	r3, #0
 8004728:	d03e      	beq.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
  {
    switch(PeriphClkInit->Usart234578ClockSelection)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800472e:	2b05      	cmp	r3, #5
 8004730:	d820      	bhi.n	8004774 <HAL_RCCEx_PeriphCLKConfig+0x8a8>
 8004732:	a201      	add	r2, pc, #4	; (adr r2, 8004738 <HAL_RCCEx_PeriphCLKConfig+0x86c>)
 8004734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004738:	0800477b 	.word	0x0800477b
 800473c:	08004751 	.word	0x08004751
 8004740:	08004763 	.word	0x08004763
 8004744:	0800477b 	.word	0x0800477b
 8004748:	0800477b 	.word	0x0800477b
 800474c:	0800477b 	.word	0x0800477b
    case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	3304      	adds	r3, #4
 8004754:	2101      	movs	r1, #1
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fdb6 	bl	80052c8 <RCCEx_PLL2_Config>
 800475c:	4603      	mov	r3, r0
 800475e:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004760:	e00c      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8b0>

    case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	3324      	adds	r3, #36	; 0x24
 8004766:	2101      	movs	r1, #1
 8004768:	4618      	mov	r0, r3
 800476a:	f000 fe5f 	bl	800542c <RCCEx_PLL3_Config>
 800476e:	4603      	mov	r3, r0
 8004770:	75fb      	strb	r3, [r7, #23]
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;
 8004772:	e003      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
      /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004774:	2301      	movs	r3, #1
 8004776:	75fb      	strb	r3, [r7, #23]
      break;
 8004778:	e000      	b.n	800477c <HAL_RCCEx_PeriphCLKConfig+0x8b0>
      break;
 800477a:	bf00      	nop
    }

    if(ret == HAL_OK)
 800477c:	7dfb      	ldrb	r3, [r7, #23]
 800477e:	2b00      	cmp	r3, #0
 8004780:	d110      	bne.n	80047a4 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004782:	4b05      	ldr	r3, [pc, #20]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004786:	f023 0207 	bic.w	r2, r3, #7
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800478e:	4902      	ldr	r1, [pc, #8]	; (8004798 <HAL_RCCEx_PeriphCLKConfig+0x8cc>)
 8004790:	4313      	orrs	r3, r2
 8004792:	654b      	str	r3, [r1, #84]	; 0x54
 8004794:	e008      	b.n	80047a8 <HAL_RCCEx_PeriphCLKConfig+0x8dc>
 8004796:	bf00      	nop
 8004798:	58024400 	.word	0x58024400
 800479c:	58024800 	.word	0x58024800
 80047a0:	00ffffcf 	.word	0x00ffffcf
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047a4:	7dfb      	ldrb	r3, [r7, #23]
 80047a6:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d039      	beq.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x95c>
  {
    switch(PeriphClkInit->Lpuart1ClockSelection)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ba:	2b05      	cmp	r3, #5
 80047bc:	d820      	bhi.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x934>
 80047be:	a201      	add	r2, pc, #4	; (adr r2, 80047c4 <HAL_RCCEx_PeriphCLKConfig+0x8f8>)
 80047c0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047c4:	08004807 	.word	0x08004807
 80047c8:	080047dd 	.word	0x080047dd
 80047cc:	080047ef 	.word	0x080047ef
 80047d0:	08004807 	.word	0x08004807
 80047d4:	08004807 	.word	0x08004807
 80047d8:	08004807 	.word	0x08004807
    case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_Q_UPDATE);
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	3304      	adds	r3, #4
 80047e0:	2101      	movs	r1, #1
 80047e2:	4618      	mov	r0, r3
 80047e4:	f000 fd70 	bl	80052c8 <RCCEx_PLL2_Config>
 80047e8:	4603      	mov	r3, r0
 80047ea:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047ec:	e00c      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x93c>

    case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	3324      	adds	r3, #36	; 0x24
 80047f2:	2101      	movs	r1, #1
 80047f4:	4618      	mov	r0, r3
 80047f6:	f000 fe19 	bl	800542c <RCCEx_PLL3_Config>
 80047fa:	4603      	mov	r3, r0
 80047fc:	75fb      	strb	r3, [r7, #23]
      /* LPUART1 clock source configuration done later after clock selection check */
      break;
 80047fe:	e003      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      /* LSE,  oscillator is used as source of LPUART1 clock */
      /* LPUART1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	75fb      	strb	r3, [r7, #23]
      break;
 8004804:	e000      	b.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x93c>
      break;
 8004806:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004808:	7dfb      	ldrb	r3, [r7, #23]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d10a      	bne.n	8004824 <HAL_RCCEx_PeriphCLKConfig+0x958>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800480e:	4bb7      	ldr	r3, [pc, #732]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004810:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004812:	f023 0207 	bic.w	r2, r3, #7
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800481c:	49b3      	ldr	r1, [pc, #716]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 800481e:	4313      	orrs	r3, r2
 8004820:	658b      	str	r3, [r1, #88]	; 0x58
 8004822:	e001      	b.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x95c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004824:	7dfb      	ldrb	r3, [r7, #23]
 8004826:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0320 	and.w	r3, r3, #32
 8004830:	2b00      	cmp	r3, #0
 8004832:	d04b      	beq.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
  {
    switch(PeriphClkInit->Lptim1ClockSelection)
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800483a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800483e:	d02e      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x9d2>
 8004840:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004844:	d828      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004846:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800484a:	d02a      	beq.n	80048a2 <HAL_RCCEx_PeriphCLKConfig+0x9d6>
 800484c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004850:	d822      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 8004852:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004856:	d026      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x9da>
 8004858:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800485c:	d81c      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800485e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004862:	d010      	beq.n	8004886 <HAL_RCCEx_PeriphCLKConfig+0x9ba>
 8004864:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004868:	d816      	bhi.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
 800486a:	2b00      	cmp	r3, #0
 800486c:	d01d      	beq.n	80048aa <HAL_RCCEx_PeriphCLKConfig+0x9de>
 800486e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004872:	d111      	bne.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x9cc>
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	3304      	adds	r3, #4
 8004878:	2100      	movs	r1, #0
 800487a:	4618      	mov	r0, r3
 800487c:	f000 fd24 	bl	80052c8 <RCCEx_PLL2_Config>
 8004880:	4603      	mov	r3, r0
 8004882:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004884:	e012      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>

    case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	3324      	adds	r3, #36	; 0x24
 800488a:	2102      	movs	r1, #2
 800488c:	4618      	mov	r0, r3
 800488e:	f000 fdcd 	bl	800542c <RCCEx_PLL3_Config>
 8004892:	4603      	mov	r3, r0
 8004894:	75fb      	strb	r3, [r7, #23]

      /* LPTIM1 clock source configuration done later after clock selection check */
      break;
 8004896:	e009      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
      /* LPTIM1 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004898:	2301      	movs	r3, #1
 800489a:	75fb      	strb	r3, [r7, #23]
      break;
 800489c:	e006      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 800489e:	bf00      	nop
 80048a0:	e004      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80048a2:	bf00      	nop
 80048a4:	e002      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80048a6:	bf00      	nop
 80048a8:	e000      	b.n	80048ac <HAL_RCCEx_PeriphCLKConfig+0x9e0>
      break;
 80048aa:	bf00      	nop
    }

    if(ret == HAL_OK)
 80048ac:	7dfb      	ldrb	r3, [r7, #23]
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d10a      	bne.n	80048c8 <HAL_RCCEx_PeriphCLKConfig+0x9fc>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80048b2:	4b8e      	ldr	r3, [pc, #568]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80048b6:	f023 42e0 	bic.w	r2, r3, #1879048192	; 0x70000000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80048c0:	498a      	ldr	r1, [pc, #552]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80048c2:	4313      	orrs	r3, r2
 80048c4:	654b      	str	r3, [r1, #84]	; 0x54
 80048c6:	e001      	b.n	80048cc <HAL_RCCEx_PeriphCLKConfig+0xa00>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048c8:	7dfb      	ldrb	r3, [r7, #23]
 80048ca:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d04b      	beq.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
  {
    switch(PeriphClkInit->Lptim2ClockSelection)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80048de:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e2:	d02e      	beq.n	8004942 <HAL_RCCEx_PeriphCLKConfig+0xa76>
 80048e4:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 80048e8:	d828      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80048ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048ee:	d02a      	beq.n	8004946 <HAL_RCCEx_PeriphCLKConfig+0xa7a>
 80048f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80048f4:	d822      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 80048f6:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80048fa:	d026      	beq.n	800494a <HAL_RCCEx_PeriphCLKConfig+0xa7e>
 80048fc:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004900:	d81c      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 8004902:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004906:	d010      	beq.n	800492a <HAL_RCCEx_PeriphCLKConfig+0xa5e>
 8004908:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800490c:	d816      	bhi.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
 800490e:	2b00      	cmp	r3, #0
 8004910:	d01d      	beq.n	800494e <HAL_RCCEx_PeriphCLKConfig+0xa82>
 8004912:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004916:	d111      	bne.n	800493c <HAL_RCCEx_PeriphCLKConfig+0xa70>
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	3304      	adds	r3, #4
 800491c:	2100      	movs	r1, #0
 800491e:	4618      	mov	r0, r3
 8004920:	f000 fcd2 	bl	80052c8 <RCCEx_PLL2_Config>
 8004924:	4603      	mov	r3, r0
 8004926:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 8004928:	e012      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>

    case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	3324      	adds	r3, #36	; 0x24
 800492e:	2102      	movs	r1, #2
 8004930:	4618      	mov	r0, r3
 8004932:	f000 fd7b 	bl	800542c <RCCEx_PLL3_Config>
 8004936:	4603      	mov	r3, r0
 8004938:	75fb      	strb	r3, [r7, #23]

      /* LPTIM2 clock source configuration done later after clock selection check */
      break;
 800493a:	e009      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
      /* LPTIM2 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800493c:	2301      	movs	r3, #1
 800493e:	75fb      	strb	r3, [r7, #23]
      break;
 8004940:	e006      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004942:	bf00      	nop
 8004944:	e004      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 8004946:	bf00      	nop
 8004948:	e002      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800494a:	bf00      	nop
 800494c:	e000      	b.n	8004950 <HAL_RCCEx_PeriphCLKConfig+0xa84>
      break;
 800494e:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004950:	7dfb      	ldrb	r3, [r7, #23]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d10a      	bne.n	800496c <HAL_RCCEx_PeriphCLKConfig+0xaa0>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004956:	4b65      	ldr	r3, [pc, #404]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495a:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004964:	4961      	ldr	r1, [pc, #388]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004966:	4313      	orrs	r3, r2
 8004968:	658b      	str	r3, [r1, #88]	; 0x58
 800496a:	e001      	b.n	8004970 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800496c:	7dfb      	ldrb	r3, [r7, #23]
 800496e:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004978:	2b00      	cmp	r3, #0
 800497a:	d04b      	beq.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
  {
    switch(PeriphClkInit->Lptim345ClockSelection)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004982:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004986:	d02e      	beq.n	80049e6 <HAL_RCCEx_PeriphCLKConfig+0xb1a>
 8004988:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 800498c:	d828      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800498e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004992:	d02a      	beq.n	80049ea <HAL_RCCEx_PeriphCLKConfig+0xb1e>
 8004994:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004998:	d822      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 800499a:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 800499e:	d026      	beq.n	80049ee <HAL_RCCEx_PeriphCLKConfig+0xb22>
 80049a0:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 80049a4:	d81c      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80049a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049aa:	d010      	beq.n	80049ce <HAL_RCCEx_PeriphCLKConfig+0xb02>
 80049ac:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80049b0:	d816      	bhi.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d01d      	beq.n	80049f2 <HAL_RCCEx_PeriphCLKConfig+0xb26>
 80049b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80049ba:	d111      	bne.n	80049e0 <HAL_RCCEx_PeriphCLKConfig+0xb14>
    case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	3304      	adds	r3, #4
 80049c0:	2100      	movs	r1, #0
 80049c2:	4618      	mov	r0, r3
 80049c4:	f000 fc80 	bl	80052c8 <RCCEx_PLL2_Config>
 80049c8:	4603      	mov	r3, r0
 80049ca:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049cc:	e012      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>

    case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	3324      	adds	r3, #36	; 0x24
 80049d2:	2102      	movs	r1, #2
 80049d4:	4618      	mov	r0, r3
 80049d6:	f000 fd29 	bl	800542c <RCCEx_PLL3_Config>
 80049da:	4603      	mov	r3, r0
 80049dc:	75fb      	strb	r3, [r7, #23]

      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;
 80049de:	e009      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
      /* LPTIM3/4/5 clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80049e0:	2301      	movs	r3, #1
 80049e2:	75fb      	strb	r3, [r7, #23]
      break;
 80049e4:	e006      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049e6:	bf00      	nop
 80049e8:	e004      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049ea:	bf00      	nop
 80049ec:	e002      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049ee:	bf00      	nop
 80049f0:	e000      	b.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0xb28>
      break;
 80049f2:	bf00      	nop
    }

    if(ret == HAL_OK)
 80049f4:	7dfb      	ldrb	r3, [r7, #23]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d10a      	bne.n	8004a10 <HAL_RCCEx_PeriphCLKConfig+0xb44>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 80049fa:	4b3c      	ldr	r3, [pc, #240]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 80049fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80049fe:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8004a08:	4938      	ldr	r1, [pc, #224]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	658b      	str	r3, [r1, #88]	; 0x58
 8004a0e:	e001      	b.n	8004a14 <HAL_RCCEx_PeriphCLKConfig+0xb48>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004a10:	7dfb      	ldrb	r3, [r7, #23]
 8004a12:	75bb      	strb	r3, [r7, #22]

      __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	f003 0308 	and.w	r3, r3, #8
 8004a1c:	2b00      	cmp	r3, #0
 8004a1e:	d01a      	beq.n	8004a56 <HAL_RCCEx_PeriphCLKConfig+0xb8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection )== RCC_I2C123CLKSOURCE_PLL3 )
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004a2a:	d10a      	bne.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
    {
        if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	3324      	adds	r3, #36	; 0x24
 8004a30:	2102      	movs	r1, #2
 8004a32:	4618      	mov	r0, r3
 8004a34:	f000 fcfa 	bl	800542c <RCCEx_PLL3_Config>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d001      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0xb76>
        {
          status = HAL_ERROR;
 8004a3e:	2301      	movs	r3, #1
 8004a40:	75bb      	strb	r3, [r7, #22]
        }
    }

      __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8004a42:	4b2a      	ldr	r3, [pc, #168]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a46:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004a50:	4926      	ldr	r1, [pc, #152]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a52:	4313      	orrs	r3, r2
 8004a54:	654b      	str	r3, [r1, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f003 0310 	and.w	r3, r3, #16
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d01a      	beq.n	8004a98 <HAL_RCCEx_PeriphCLKConfig+0xbcc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3 )
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a6c:	d10a      	bne.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
    {
      if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!= HAL_OK)
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	3324      	adds	r3, #36	; 0x24
 8004a72:	2102      	movs	r1, #2
 8004a74:	4618      	mov	r0, r3
 8004a76:	f000 fcd9 	bl	800542c <RCCEx_PLL3_Config>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d001      	beq.n	8004a84 <HAL_RCCEx_PeriphCLKConfig+0xbb8>
      {
        status = HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
 8004a82:	75bb      	strb	r3, [r7, #22]
      }
    }

      __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8004a84:	4b19      	ldr	r3, [pc, #100]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a92:	4916      	ldr	r1, [pc, #88]	; (8004aec <HAL_RCCEx_PeriphCLKConfig+0xc20>)
 8004a94:	4313      	orrs	r3, r2
 8004a96:	658b      	str	r3, [r1, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	d036      	beq.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
  {
    switch(PeriphClkInit->AdcClockSelection)
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004aaa:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004aae:	d01f      	beq.n	8004af0 <HAL_RCCEx_PeriphCLKConfig+0xc24>
 8004ab0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004ab4:	d817      	bhi.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d003      	beq.n	8004ac2 <HAL_RCCEx_PeriphCLKConfig+0xbf6>
 8004aba:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004abe:	d009      	beq.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0xc08>
 8004ac0:	e011      	b.n	8004ae6 <HAL_RCCEx_PeriphCLKConfig+0xc1a>
    {

    case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_P_UPDATE);
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	3304      	adds	r3, #4
 8004ac6:	2100      	movs	r1, #0
 8004ac8:	4618      	mov	r0, r3
 8004aca:	f000 fbfd 	bl	80052c8 <RCCEx_PLL2_Config>
 8004ace:	4603      	mov	r3, r0
 8004ad0:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ad2:	e00e      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc26>

    case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	3324      	adds	r3, #36	; 0x24
 8004ad8:	2102      	movs	r1, #2
 8004ada:	4618      	mov	r0, r3
 8004adc:	f000 fca6 	bl	800542c <RCCEx_PLL3_Config>
 8004ae0:	4603      	mov	r3, r0
 8004ae2:	75fb      	strb	r3, [r7, #23]

      /* ADC clock source configuration done later after clock selection check */
      break;
 8004ae4:	e005      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
      /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
      /* ADC clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004ae6:	2301      	movs	r3, #1
 8004ae8:	75fb      	strb	r3, [r7, #23]
      break;
 8004aea:	e002      	b.n	8004af2 <HAL_RCCEx_PeriphCLKConfig+0xc26>
 8004aec:	58024400 	.word	0x58024400
      break;
 8004af0:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004af2:	7dfb      	ldrb	r3, [r7, #23]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d10a      	bne.n	8004b0e <HAL_RCCEx_PeriphCLKConfig+0xc42>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004af8:	4b93      	ldr	r3, [pc, #588]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004afa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004afc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004b06:	4990      	ldr	r1, [pc, #576]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b08:	4313      	orrs	r3, r2
 8004b0a:	658b      	str	r3, [r1, #88]	; 0x58
 8004b0c:	e001      	b.n	8004b12 <HAL_RCCEx_PeriphCLKConfig+0xc46>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b0e:	7dfb      	ldrb	r3, [r7, #23]
 8004b10:	75bb      	strb	r3, [r7, #22]
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d033      	beq.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
  {

    switch(PeriphClkInit->UsbClockSelection)
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b24:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b28:	d01c      	beq.n	8004b64 <HAL_RCCEx_PeriphCLKConfig+0xc98>
 8004b2a:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004b2e:	d816      	bhi.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
 8004b30:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004b34:	d003      	beq.n	8004b3e <HAL_RCCEx_PeriphCLKConfig+0xc72>
 8004b36:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8004b3a:	d007      	beq.n	8004b4c <HAL_RCCEx_PeriphCLKConfig+0xc80>
 8004b3c:	e00f      	b.n	8004b5e <HAL_RCCEx_PeriphCLKConfig+0xc92>
    {
    case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
      /* Enable USB Clock output generated form System USB . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004b3e:	4b82      	ldr	r3, [pc, #520]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b42:	4a81      	ldr	r2, [pc, #516]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b44:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004b48:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b4a:	e00c      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>

    case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

      ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_Q_UPDATE);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	3324      	adds	r3, #36	; 0x24
 8004b50:	2101      	movs	r1, #1
 8004b52:	4618      	mov	r0, r3
 8004b54:	f000 fc6a 	bl	800542c <RCCEx_PLL3_Config>
 8004b58:	4603      	mov	r3, r0
 8004b5a:	75fb      	strb	r3, [r7, #23]

      /* USB clock source configuration done later after clock selection check */
      break;
 8004b5c:	e003      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      /* HSI48 oscillator is used as source of USB clock */
      /* USB clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	75fb      	strb	r3, [r7, #23]
      break;
 8004b62:	e000      	b.n	8004b66 <HAL_RCCEx_PeriphCLKConfig+0xc9a>
      break;
 8004b64:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004b66:	7dfb      	ldrb	r3, [r7, #23]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d10a      	bne.n	8004b82 <HAL_RCCEx_PeriphCLKConfig+0xcb6>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b6c:	4b76      	ldr	r3, [pc, #472]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b6e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004b70:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004b7a:	4973      	ldr	r1, [pc, #460]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004b7c:	4313      	orrs	r3, r2
 8004b7e:	654b      	str	r3, [r1, #84]	; 0x54
 8004b80:	e001      	b.n	8004b86 <HAL_RCCEx_PeriphCLKConfig+0xcba>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004b82:	7dfb      	ldrb	r3, [r7, #23]
 8004b84:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d029      	beq.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch(PeriphClkInit->SdmmcClockSelection)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d003      	beq.n	8004ba2 <HAL_RCCEx_PeriphCLKConfig+0xcd6>
 8004b9a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b9e:	d007      	beq.n	8004bb0 <HAL_RCCEx_PeriphCLKConfig+0xce4>
 8004ba0:	e00f      	b.n	8004bc2 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    {
    case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
      /* Enable SDMMC Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004ba2:	4b69      	ldr	r3, [pc, #420]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ba4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ba6:	4a68      	ldr	r2, [pc, #416]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ba8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004bac:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bae:	e00b      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

      ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2),DIVIDER_R_UPDATE);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	3304      	adds	r3, #4
 8004bb4:	2102      	movs	r1, #2
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fb86 	bl	80052c8 <RCCEx_PLL2_Config>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	75fb      	strb	r3, [r7, #23]

      /* SDMMC clock source configuration done later after clock selection check */
      break;
 8004bc0:	e002      	b.n	8004bc8 <HAL_RCCEx_PeriphCLKConfig+0xcfc>

    default:
      ret = HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	75fb      	strb	r3, [r7, #23]
      break;
 8004bc6:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004bc8:	7dfb      	ldrb	r3, [r7, #23]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d109      	bne.n	8004be2 <HAL_RCCEx_PeriphCLKConfig+0xd16>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8004bce:	4b5e      	ldr	r3, [pc, #376]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bd0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bd2:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004bda:	495b      	ldr	r1, [pc, #364]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004bdc:	4313      	orrs	r3, r2
 8004bde:	64cb      	str	r3, [r1, #76]	; 0x4c
 8004be0:	e001      	b.n	8004be6 <HAL_RCCEx_PeriphCLKConfig+0xd1a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004be2:	7dfb      	ldrb	r3, [r7, #23]
 8004be4:	75bb      	strb	r3, [r7, #22]
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d00a      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
  {
    if(RCCEx_PLL3_Config(&(PeriphClkInit->PLL3),DIVIDER_R_UPDATE)!=HAL_OK)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	3324      	adds	r3, #36	; 0x24
 8004bf6:	2102      	movs	r1, #2
 8004bf8:	4618      	mov	r0, r3
 8004bfa:	f000 fc17 	bl	800542c <RCCEx_PLL3_Config>
 8004bfe:	4603      	mov	r3, r0
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d001      	beq.n	8004c08 <HAL_RCCEx_PeriphCLKConfig+0xd3c>
    {
      status=HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	75bb      	strb	r3, [r7, #22]
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d030      	beq.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
  {

    switch(PeriphClkInit->RngClockSelection)
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c18:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c1c:	d017      	beq.n	8004c4e <HAL_RCCEx_PeriphCLKConfig+0xd82>
 8004c1e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004c22:	d811      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004c24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c28:	d013      	beq.n	8004c52 <HAL_RCCEx_PeriphCLKConfig+0xd86>
 8004c2a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c2e:	d80b      	bhi.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <HAL_RCCEx_PeriphCLKConfig+0xd8a>
 8004c34:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004c38:	d106      	bne.n	8004c48 <HAL_RCCEx_PeriphCLKConfig+0xd7c>
    {
    case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
      /* Enable RNG Clock output generated form System RNG . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004c3a:	4b43      	ldr	r3, [pc, #268]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c3e:	4a42      	ldr	r2, [pc, #264]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c44:	62d3      	str	r3, [r2, #44]	; 0x2c

      /* RNG clock source configuration done later after clock selection check */
      break;
 8004c46:	e007      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      /* HSI48 oscillator is used as source of RNG clock */
      /* RNG clock source configuration done later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004c48:	2301      	movs	r3, #1
 8004c4a:	75fb      	strb	r3, [r7, #23]
      break;
 8004c4c:	e004      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004c4e:	bf00      	nop
 8004c50:	e002      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004c52:	bf00      	nop
 8004c54:	e000      	b.n	8004c58 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
      break;
 8004c56:	bf00      	nop
    }

    if(ret == HAL_OK)
 8004c58:	7dfb      	ldrb	r3, [r7, #23]
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d109      	bne.n	8004c72 <HAL_RCCEx_PeriphCLKConfig+0xda6>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004c5e:	4b3a      	ldr	r3, [pc, #232]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c62:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c6a:	4937      	ldr	r1, [pc, #220]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c6c:	4313      	orrs	r3, r2
 8004c6e:	654b      	str	r3, [r1, #84]	; 0x54
 8004c70:	e001      	b.n	8004c76 <HAL_RCCEx_PeriphCLKConfig+0xdaa>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c72:	7dfb      	ldrb	r3, [r7, #23]
 8004c74:	75bb      	strb	r3, [r7, #22]
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d008      	beq.n	8004c94 <HAL_RCCEx_PeriphCLKConfig+0xdc8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004c82:	4b31      	ldr	r3, [pc, #196]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c86:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004c8e:	492e      	ldr	r1, [pc, #184]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004c90:	4313      	orrs	r3, r2
 8004c92:	650b      	str	r3, [r1, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d009      	beq.n	8004cb4 <HAL_RCCEx_PeriphCLKConfig+0xde8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8004ca0:	4b29      	ldr	r3, [pc, #164]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 8004cae:	4926      	ldr	r1, [pc, #152]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cb0:	4313      	orrs	r3, r2
 8004cb2:	610b      	str	r3, [r1, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d008      	beq.n	8004cd2 <HAL_RCCEx_PeriphCLKConfig+0xe06>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8004cc0:	4b21      	ldr	r3, [pc, #132]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cc2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004cc4:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004ccc:	491e      	ldr	r1, [pc, #120]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	650b      	str	r3, [r1, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00d      	beq.n	8004cfa <HAL_RCCEx_PeriphCLKConfig+0xe2e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8004cde:	4b1a      	ldr	r3, [pc, #104]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ce0:	691b      	ldr	r3, [r3, #16]
 8004ce2:	4a19      	ldr	r2, [pc, #100]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004ce4:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8004ce8:	6113      	str	r3, [r2, #16]
 8004cea:	4b17      	ldr	r3, [pc, #92]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cec:	691a      	ldr	r2, [r3, #16]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004cf4:	4914      	ldr	r1, [pc, #80]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004cf6:	4313      	orrs	r3, r2
 8004cf8:	610b      	str	r3, [r1, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	681b      	ldr	r3, [r3, #0]
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	da08      	bge.n	8004d14 <HAL_RCCEx_PeriphCLKConfig+0xe48>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d04:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004d06:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d0e:	490e      	ldr	r1, [pc, #56]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d10:	4313      	orrs	r3, r2
 8004d12:	64cb      	str	r3, [r1, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d009      	beq.n	8004d34 <HAL_RCCEx_PeriphCLKConfig+0xe68>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004d20:	4b09      	ldr	r3, [pc, #36]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d22:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d24:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d2e:	4906      	ldr	r1, [pc, #24]	; (8004d48 <HAL_RCCEx_PeriphCLKConfig+0xe7c>)
 8004d30:	4313      	orrs	r3, r2
 8004d32:	654b      	str	r3, [r1, #84]	; 0x54
  }

  if (status == HAL_OK)
 8004d34:	7dbb      	ldrb	r3, [r7, #22]
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d101      	bne.n	8004d3e <HAL_RCCEx_PeriphCLKConfig+0xe72>
  {
    return HAL_OK;
 8004d3a:	2300      	movs	r3, #0
 8004d3c:	e000      	b.n	8004d40 <HAL_RCCEx_PeriphCLKConfig+0xe74>
  }
  return HAL_ERROR;
 8004d3e:	2301      	movs	r3, #1
}
 8004d40:	4618      	mov	r0, r3
 8004d42:	3718      	adds	r7, #24
 8004d44:	46bd      	mov	sp, r7
 8004d46:	bd80      	pop	{r7, pc}
 8004d48:	58024400 	.word	0x58024400

08004d4c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE)>> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8004d50:	f7ff f860 	bl	8003e14 <HAL_RCC_GetHCLKFreq>
 8004d54:	4602      	mov	r2, r0
 8004d56:	4b06      	ldr	r3, [pc, #24]	; (8004d70 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8004d58:	6a1b      	ldr	r3, [r3, #32]
 8004d5a:	091b      	lsrs	r3, r3, #4
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	4904      	ldr	r1, [pc, #16]	; (8004d74 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8004d62:	5ccb      	ldrb	r3, [r1, r3]
 8004d64:	f003 031f 	and.w	r3, r3, #31
 8004d68:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE)>> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	bd80      	pop	{r7, pc}
 8004d70:	58024400 	.word	0x58024400
 8004d74:	08008508 	.word	0x08008508

08004d78 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef* PLL2_Clocks)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b089      	sub	sp, #36	; 0x24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8004d80:	4ba1      	ldr	r3, [pc, #644]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d84:	f003 0303 	and.w	r3, r3, #3
 8004d88:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2)>> 12);
 8004d8a:	4b9f      	ldr	r3, [pc, #636]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d8e:	0b1b      	lsrs	r3, r3, #12
 8004d90:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004d94:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8004d96:	4b9c      	ldr	r3, [pc, #624]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004d98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9a:	091b      	lsrs	r3, r3, #4
 8004d9c:	f003 0301 	and.w	r3, r3, #1
 8004da0:	613b      	str	r3, [r7, #16]
  fracn2 =(float_t)(uint32_t)(pll2fracen* ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2)>> 3));
 8004da2:	4b99      	ldr	r3, [pc, #612]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004da4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004da6:	08db      	lsrs	r3, r3, #3
 8004da8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8004dac:	693a      	ldr	r2, [r7, #16]
 8004dae:	fb02 f303 	mul.w	r3, r2, r3
 8004db2:	ee07 3a90 	vmov	s15, r3
 8004db6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004dba:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f000 8111 	beq.w	8004fe8 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8004dc6:	69bb      	ldr	r3, [r7, #24]
 8004dc8:	2b02      	cmp	r3, #2
 8004dca:	f000 8083 	beq.w	8004ed4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	2b02      	cmp	r3, #2
 8004dd2:	f200 80a1 	bhi.w	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8004dd6:	69bb      	ldr	r3, [r7, #24]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d003      	beq.n	8004de4 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8004ddc:	69bb      	ldr	r3, [r7, #24]
 8004dde:	2b01      	cmp	r3, #1
 8004de0:	d056      	beq.n	8004e90 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8004de2:	e099      	b.n	8004f18 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004de4:	4b88      	ldr	r3, [pc, #544]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f003 0320 	and.w	r3, r3, #32
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d02d      	beq.n	8004e4c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8004df0:	4b85      	ldr	r3, [pc, #532]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	08db      	lsrs	r3, r3, #3
 8004df6:	f003 0303 	and.w	r3, r3, #3
 8004dfa:	4a84      	ldr	r2, [pc, #528]	; (800500c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8004dfc:	fa22 f303 	lsr.w	r3, r2, r3
 8004e00:	60bb      	str	r3, [r7, #8]
        pll2vco = ( (float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	ee07 3a90 	vmov	s15, r3
 8004e08:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e0c:	697b      	ldr	r3, [r7, #20]
 8004e0e:	ee07 3a90 	vmov	s15, r3
 8004e12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e16:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e1a:	4b7b      	ldr	r3, [pc, #492]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e22:	ee07 3a90 	vmov	s15, r3
 8004e26:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e2a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e2e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e32:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e36:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e3a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e3e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e42:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e46:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
      }
      break;
 8004e4a:	e087      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
        pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	ee07 3a90 	vmov	s15, r3
 8004e52:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e56:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8005014 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8004e5a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004e5e:	4b6a      	ldr	r3, [pc, #424]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004e60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e62:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e66:	ee07 3a90 	vmov	s15, r3
 8004e6a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004e6e:	ed97 6a03 	vldr	s12, [r7, #12]
 8004e72:	eddf 5a67 	vldr	s11, [pc, #412]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004e76:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004e7a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004e7e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004e82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004e86:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004e8a:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004e8e:	e065      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004e90:	697b      	ldr	r3, [r7, #20]
 8004e92:	ee07 3a90 	vmov	s15, r3
 8004e96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004e9a:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004e9e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ea2:	4b59      	ldr	r3, [pc, #356]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ea4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ea6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eaa:	ee07 3a90 	vmov	s15, r3
 8004eae:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004eb2:	ed97 6a03 	vldr	s12, [r7, #12]
 8004eb6:	eddf 5a56 	vldr	s11, [pc, #344]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004eba:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004ebe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004ec2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004ec6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004eca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004ece:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004ed2:	e043      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004ed4:	697b      	ldr	r3, [r7, #20]
 8004ed6:	ee07 3a90 	vmov	s15, r3
 8004eda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004ede:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800501c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8004ee2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004ee6:	4b48      	ldr	r3, [pc, #288]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004ee8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004eea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004eee:	ee07 3a90 	vmov	s15, r3
 8004ef2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004ef6:	ed97 6a03 	vldr	s12, [r7, #12]
 8004efa:	eddf 5a45 	vldr	s11, [pc, #276]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004efe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f02:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f06:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f0a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f0e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f12:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f16:	e021      	b.n	8004f5c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

    default:
      pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2/(float_t)0x2000) +(float_t)1 );
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	ee07 3a90 	vmov	s15, r3
 8004f1e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f22:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8005018 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8004f26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8004f2a:	4b37      	ldr	r3, [pc, #220]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004f32:	ee07 3a90 	vmov	s15, r3
 8004f36:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8004f3a:	ed97 6a03 	vldr	s12, [r7, #12]
 8004f3e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8005010 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8004f42:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8004f46:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8004f4a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004f4e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004f52:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004f56:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8004f5a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >>9)  + (float_t)1 )) ;
 8004f5c:	4b2a      	ldr	r3, [pc, #168]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f60:	0a5b      	lsrs	r3, r3, #9
 8004f62:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f66:	ee07 3a90 	vmov	s15, r3
 8004f6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f6e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f72:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004f76:	edd7 6a07 	vldr	s13, [r7, #28]
 8004f7a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004f7e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f82:	ee17 2a90 	vmov	r2, s15
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >>16) + (float_t)1 )) ;
 8004f8a:	4b1f      	ldr	r3, [pc, #124]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f8e:	0c1b      	lsrs	r3, r3, #16
 8004f90:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004f94:	ee07 3a90 	vmov	s15, r3
 8004f98:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004f9c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fa0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fa4:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fa8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fb0:	ee17 2a90 	vmov	r2, s15
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco/((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >>24) + (float_t)1 )) ;
 8004fb8:	4b13      	ldr	r3, [pc, #76]	; (8005008 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8004fba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fbc:	0e1b      	lsrs	r3, r3, #24
 8004fbe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004fc2:	ee07 3a90 	vmov	s15, r3
 8004fc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004fca:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fce:	ee37 7a87 	vadd.f32	s14, s15, s14
 8004fd2:	edd7 6a07 	vldr	s13, [r7, #28]
 8004fd6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004fda:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004fde:	ee17 2a90 	vmov	r2, s15
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8004fe6:	e008      	b.n	8004ffa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	609a      	str	r2, [r3, #8]
}
 8004ffa:	bf00      	nop
 8004ffc:	3724      	adds	r7, #36	; 0x24
 8004ffe:	46bd      	mov	sp, r7
 8005000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005004:	4770      	bx	lr
 8005006:	bf00      	nop
 8005008:	58024400 	.word	0x58024400
 800500c:	03d09000 	.word	0x03d09000
 8005010:	46000000 	.word	0x46000000
 8005014:	4c742400 	.word	0x4c742400
 8005018:	4a742400 	.word	0x4a742400
 800501c:	4af42400 	.word	0x4af42400

08005020 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef* PLL3_Clocks)
{
 8005020:	b480      	push	{r7}
 8005022:	b089      	sub	sp, #36	; 0x24
 8005024:	af00      	add	r7, sp, #0
 8005026:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8005028:	4ba1      	ldr	r3, [pc, #644]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800502a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800502c:	f003 0303 	and.w	r3, r3, #3
 8005030:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3)>> 20)  ;
 8005032:	4b9f      	ldr	r3, [pc, #636]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005034:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005036:	0d1b      	lsrs	r3, r3, #20
 8005038:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800503c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800503e:	4b9c      	ldr	r3, [pc, #624]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005040:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005042:	0a1b      	lsrs	r3, r3, #8
 8005044:	f003 0301 	and.w	r3, r3, #1
 8005048:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen* ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3)>> 3));
 800504a:	4b99      	ldr	r3, [pc, #612]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800504c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800504e:	08db      	lsrs	r3, r3, #3
 8005050:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8005054:	693a      	ldr	r2, [r7, #16]
 8005056:	fb02 f303 	mul.w	r3, r2, r3
 800505a:	ee07 3a90 	vmov	s15, r3
 800505e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005062:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8005066:	697b      	ldr	r3, [r7, #20]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f000 8111 	beq.w	8005290 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	2b02      	cmp	r3, #2
 8005072:	f000 8083 	beq.w	800517c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8005076:	69bb      	ldr	r3, [r7, #24]
 8005078:	2b02      	cmp	r3, #2
 800507a:	f200 80a1 	bhi.w	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800507e:	69bb      	ldr	r3, [r7, #24]
 8005080:	2b00      	cmp	r3, #0
 8005082:	d003      	beq.n	800508c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8005084:	69bb      	ldr	r3, [r7, #24]
 8005086:	2b01      	cmp	r3, #1
 8005088:	d056      	beq.n	8005138 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800508a:	e099      	b.n	80051c0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800508c:	4b88      	ldr	r3, [pc, #544]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f003 0320 	and.w	r3, r3, #32
 8005094:	2b00      	cmp	r3, #0
 8005096:	d02d      	beq.n	80050f4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
      {
        hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER()>> 3));
 8005098:	4b85      	ldr	r3, [pc, #532]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	08db      	lsrs	r3, r3, #3
 800509e:	f003 0303 	and.w	r3, r3, #3
 80050a2:	4a84      	ldr	r2, [pc, #528]	; (80052b4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 80050a4:	fa22 f303 	lsr.w	r3, r2, r3
 80050a8:	60bb      	str	r3, [r7, #8]
        pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	ee07 3a90 	vmov	s15, r3
 80050b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050b4:	697b      	ldr	r3, [r7, #20]
 80050b6:	ee07 3a90 	vmov	s15, r3
 80050ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80050c2:	4b7b      	ldr	r3, [pc, #492]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050ca:	ee07 3a90 	vmov	s15, r3
 80050ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80050d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80050d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80050da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80050de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80050e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80050e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80050ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80050ee:	edc7 7a07 	vstr	s15, [r7, #28]
      }
      else
      {
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
      }
      break;
 80050f2:	e087      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
        pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80050f4:	697b      	ldr	r3, [r7, #20]
 80050f6:	ee07 3a90 	vmov	s15, r3
 80050fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80050fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80052bc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8005102:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8005106:	4b6a      	ldr	r3, [pc, #424]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800510e:	ee07 3a90 	vmov	s15, r3
 8005112:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8005116:	ed97 6a03 	vldr	s12, [r7, #12]
 800511a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800511e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005122:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8005126:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800512a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800512e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005132:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005136:	e065      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
    case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 8005138:	697b      	ldr	r3, [r7, #20]
 800513a:	ee07 3a90 	vmov	s15, r3
 800513e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005142:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8005146:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800514a:	4b59      	ldr	r3, [pc, #356]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800514c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800514e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005152:	ee07 3a90 	vmov	s15, r3
 8005156:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800515a:	ed97 6a03 	vldr	s12, [r7, #12]
 800515e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8005162:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8005166:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800516a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800516e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8005172:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005176:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 800517a:	e043      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 800517c:	697b      	ldr	r3, [r7, #20]
 800517e:	ee07 3a90 	vmov	s15, r3
 8005182:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005186:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80052c4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800518a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800518e:	4b48      	ldr	r3, [pc, #288]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005192:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005196:	ee07 3a90 	vmov	s15, r3
 800519a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800519e:	ed97 6a03 	vldr	s12, [r7, #12]
 80051a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051ba:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 80051be:	e021      	b.n	8005204 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

    default:
      pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3/(float_t)0x2000) +(float_t)1 );
 80051c0:	697b      	ldr	r3, [r7, #20]
 80051c2:	ee07 3a90 	vmov	s15, r3
 80051c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80051ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80052c0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80051ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80051d2:	4b37      	ldr	r3, [pc, #220]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80051d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80051da:	ee07 3a90 	vmov	s15, r3
 80051de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80051e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80051e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80052b8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80051ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80051ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80051f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80051f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80051fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80051fe:	edc7 7a07 	vstr	s15, [r7, #28]
      break;
 8005202:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >>9)  + (float_t)1 )) ;
 8005204:	4b2a      	ldr	r3, [pc, #168]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005208:	0a5b      	lsrs	r3, r3, #9
 800520a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800520e:	ee07 3a90 	vmov	s15, r3
 8005212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005216:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800521a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800521e:	edd7 6a07 	vldr	s13, [r7, #28]
 8005222:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005226:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800522a:	ee17 2a90 	vmov	r2, s15
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >>16) + (float_t)1 )) ;
 8005232:	4b1f      	ldr	r3, [pc, #124]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005236:	0c1b      	lsrs	r3, r3, #16
 8005238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800523c:	ee07 3a90 	vmov	s15, r3
 8005240:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005244:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005248:	ee37 7a87 	vadd.f32	s14, s15, s14
 800524c:	edd7 6a07 	vldr	s13, [r7, #28]
 8005250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005254:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005258:	ee17 2a90 	vmov	r2, s15
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco/((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >>24) + (float_t)1 )) ;
 8005260:	4b13      	ldr	r3, [pc, #76]	; (80052b0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8005262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005264:	0e1b      	lsrs	r3, r3, #24
 8005266:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800526a:	ee07 3a90 	vmov	s15, r3
 800526e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005272:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005276:	ee37 7a87 	vadd.f32	s14, s15, s14
 800527a:	edd7 6a07 	vldr	s13, [r7, #28]
 800527e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8005282:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005286:	ee17 2a90 	vmov	r2, s15
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800528e:	e008      	b.n	80052a2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	2200      	movs	r2, #0
 8005294:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	2200      	movs	r2, #0
 800529a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	2200      	movs	r2, #0
 80052a0:	609a      	str	r2, [r3, #8]
}
 80052a2:	bf00      	nop
 80052a4:	3724      	adds	r7, #36	; 0x24
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
 80052ae:	bf00      	nop
 80052b0:	58024400 	.word	0x58024400
 80052b4:	03d09000 	.word	0x03d09000
 80052b8:	46000000 	.word	0x46000000
 80052bc:	4c742400 	.word	0x4c742400
 80052c0:	4a742400 	.word	0x4a742400
 80052c4:	4af42400 	.word	0x4af42400

080052c8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	b084      	sub	sp, #16
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
 80052d0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80052d2:	2300      	movs	r3, #0
 80052d4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 80052d6:	4b53      	ldr	r3, [pc, #332]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052da:	f003 0303 	and.w	r3, r3, #3
 80052de:	2b03      	cmp	r3, #3
 80052e0:	d101      	bne.n	80052e6 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e099      	b.n	800541a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 80052e6:	4b4f      	ldr	r3, [pc, #316]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a4e      	ldr	r2, [pc, #312]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80052ec:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80052f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80052f2:	f7fb ffe7 	bl	80012c4 <HAL_GetTick>
 80052f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 80052f8:	e008      	b.n	800530c <RCCEx_PLL2_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80052fa:	f7fb ffe3 	bl	80012c4 <HAL_GetTick>
 80052fe:	4602      	mov	r2, r0
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	1ad3      	subs	r3, r2, r3
 8005304:	2b02      	cmp	r3, #2
 8005306:	d901      	bls.n	800530c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8005308:	2303      	movs	r3, #3
 800530a:	e086      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800530c:	4b45      	ldr	r3, [pc, #276]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800530e:	681b      	ldr	r3, [r3, #0]
 8005310:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005314:	2b00      	cmp	r3, #0
 8005316:	d1f0      	bne.n	80052fa <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8005318:	4b42      	ldr	r3, [pc, #264]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800531a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800531c:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	031b      	lsls	r3, r3, #12
 8005326:	493f      	ldr	r1, [pc, #252]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005328:	4313      	orrs	r3, r2
 800532a:	628b      	str	r3, [r1, #40]	; 0x28
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	685b      	ldr	r3, [r3, #4]
 8005330:	3b01      	subs	r3, #1
 8005332:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	689b      	ldr	r3, [r3, #8]
 800533a:	3b01      	subs	r3, #1
 800533c:	025b      	lsls	r3, r3, #9
 800533e:	b29b      	uxth	r3, r3
 8005340:	431a      	orrs	r2, r3
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	3b01      	subs	r3, #1
 8005348:	041b      	lsls	r3, r3, #16
 800534a:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800534e:	431a      	orrs	r2, r3
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	691b      	ldr	r3, [r3, #16]
 8005354:	3b01      	subs	r3, #1
 8005356:	061b      	lsls	r3, r3, #24
 8005358:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 800535c:	4931      	ldr	r1, [pc, #196]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800535e:	4313      	orrs	r3, r2
 8005360:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8005362:	4b30      	ldr	r3, [pc, #192]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005366:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	492d      	ldr	r1, [pc, #180]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005370:	4313      	orrs	r3, r2
 8005372:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8005374:	4b2b      	ldr	r3, [pc, #172]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005376:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005378:	f023 0220 	bic.w	r2, r3, #32
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	699b      	ldr	r3, [r3, #24]
 8005380:	4928      	ldr	r1, [pc, #160]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005382:	4313      	orrs	r3, r2
 8005384:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 8005386:	4b27      	ldr	r3, [pc, #156]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005388:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538a:	4a26      	ldr	r2, [pc, #152]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800538c:	f023 0310 	bic.w	r3, r3, #16
 8005390:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 8005392:	4b24      	ldr	r3, [pc, #144]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 8005394:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8005396:	4b24      	ldr	r3, [pc, #144]	; (8005428 <RCCEx_PLL2_Config+0x160>)
 8005398:	4013      	ands	r3, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	69d2      	ldr	r2, [r2, #28]
 800539e:	00d2      	lsls	r2, r2, #3
 80053a0:	4920      	ldr	r1, [pc, #128]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a2:	4313      	orrs	r3, r2
 80053a4:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80053a6:	4b1f      	ldr	r3, [pc, #124]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053aa:	4a1e      	ldr	r2, [pc, #120]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ac:	f043 0310 	orr.w	r3, r3, #16
 80053b0:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	d106      	bne.n	80053c6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80053b8:	4b1a      	ldr	r3, [pc, #104]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053bc:	4a19      	ldr	r2, [pc, #100]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053be:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053c2:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053c4:	e00f      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 80053c6:	683b      	ldr	r3, [r7, #0]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d106      	bne.n	80053da <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80053cc:	4b15      	ldr	r3, [pc, #84]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053d0:	4a14      	ldr	r2, [pc, #80]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80053d6:	62d3      	str	r3, [r2, #44]	; 0x2c
 80053d8:	e005      	b.n	80053e6 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80053da:	4b12      	ldr	r3, [pc, #72]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	4a11      	ldr	r2, [pc, #68]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80053e4:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 80053e6:	4b0f      	ldr	r3, [pc, #60]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a0e      	ldr	r2, [pc, #56]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 80053ec:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80053f0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80053f2:	f7fb ff67 	bl	80012c4 <HAL_GetTick>
 80053f6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 80053f8:	e008      	b.n	800540c <RCCEx_PLL2_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL2_TIMEOUT_VALUE)
 80053fa:	f7fb ff63 	bl	80012c4 <HAL_GetTick>
 80053fe:	4602      	mov	r2, r0
 8005400:	68bb      	ldr	r3, [r7, #8]
 8005402:	1ad3      	subs	r3, r2, r3
 8005404:	2b02      	cmp	r3, #2
 8005406:	d901      	bls.n	800540c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e006      	b.n	800541a <RCCEx_PLL2_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800540c:	4b05      	ldr	r3, [pc, #20]	; (8005424 <RCCEx_PLL2_Config+0x15c>)
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0f0      	beq.n	80053fa <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8005418:	7bfb      	ldrb	r3, [r7, #15]
}
 800541a:	4618      	mov	r0, r3
 800541c:	3710      	adds	r7, #16
 800541e:	46bd      	mov	sp, r7
 8005420:	bd80      	pop	{r7, pc}
 8005422:	bf00      	nop
 8005424:	58024400 	.word	0x58024400
 8005428:	ffff0007 	.word	0xffff0007

0800542c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800542c:	b580      	push	{r7, lr}
 800542e:	b084      	sub	sp, #16
 8005430:	af00      	add	r7, sp, #0
 8005432:	6078      	str	r0, [r7, #4]
 8005434:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800543a:	4b53      	ldr	r3, [pc, #332]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800543c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800543e:	f003 0303 	and.w	r3, r3, #3
 8005442:	2b03      	cmp	r3, #3
 8005444:	d101      	bne.n	800544a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8005446:	2301      	movs	r3, #1
 8005448:	e099      	b.n	800557e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800544a:	4b4f      	ldr	r3, [pc, #316]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4a4e      	ldr	r2, [pc, #312]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005454:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005456:	f7fb ff35 	bl	80012c4 <HAL_GetTick>
 800545a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800545c:	e008      	b.n	8005470 <RCCEx_PLL3_Config+0x44>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800545e:	f7fb ff31 	bl	80012c4 <HAL_GetTick>
 8005462:	4602      	mov	r2, r0
 8005464:	68bb      	ldr	r3, [r7, #8]
 8005466:	1ad3      	subs	r3, r2, r3
 8005468:	2b02      	cmp	r3, #2
 800546a:	d901      	bls.n	8005470 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800546c:	2303      	movs	r3, #3
 800546e:	e086      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8005470:	4b45      	ldr	r3, [pc, #276]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005478:	2b00      	cmp	r3, #0
 800547a:	d1f0      	bne.n	800545e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800547c:	4b42      	ldr	r3, [pc, #264]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	051b      	lsls	r3, r3, #20
 800548a:	493f      	ldr	r1, [pc, #252]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800548c:	4313      	orrs	r3, r2
 800548e:	628b      	str	r3, [r1, #40]	; 0x28
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	685b      	ldr	r3, [r3, #4]
 8005494:	3b01      	subs	r3, #1
 8005496:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	689b      	ldr	r3, [r3, #8]
 800549e:	3b01      	subs	r3, #1
 80054a0:	025b      	lsls	r3, r3, #9
 80054a2:	b29b      	uxth	r3, r3
 80054a4:	431a      	orrs	r2, r3
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	3b01      	subs	r3, #1
 80054ac:	041b      	lsls	r3, r3, #16
 80054ae:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 80054b2:	431a      	orrs	r2, r3
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	691b      	ldr	r3, [r3, #16]
 80054b8:	3b01      	subs	r3, #1
 80054ba:	061b      	lsls	r3, r3, #24
 80054bc:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80054c0:	4931      	ldr	r1, [pc, #196]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c2:	4313      	orrs	r3, r2
 80054c4:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80054c6:	4b30      	ldr	r3, [pc, #192]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ca:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695b      	ldr	r3, [r3, #20]
 80054d2:	492d      	ldr	r1, [pc, #180]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054d4:	4313      	orrs	r3, r2
 80054d6:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80054d8:	4b2b      	ldr	r3, [pc, #172]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054dc:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	699b      	ldr	r3, [r3, #24]
 80054e4:	4928      	ldr	r1, [pc, #160]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054e6:	4313      	orrs	r3, r2
 80054e8:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 80054ea:	4b27      	ldr	r3, [pc, #156]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054ee:	4a26      	ldr	r2, [pc, #152]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80054f4:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 80054f6:	4b24      	ldr	r3, [pc, #144]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 80054f8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80054fa:	4b24      	ldr	r3, [pc, #144]	; (800558c <RCCEx_PLL3_Config+0x160>)
 80054fc:	4013      	ands	r3, r2
 80054fe:	687a      	ldr	r2, [r7, #4]
 8005500:	69d2      	ldr	r2, [r2, #28]
 8005502:	00d2      	lsls	r2, r2, #3
 8005504:	4920      	ldr	r1, [pc, #128]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005506:	4313      	orrs	r3, r2
 8005508:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800550a:	4b1f      	ldr	r3, [pc, #124]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800550c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800550e:	4a1e      	ldr	r2, [pc, #120]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005510:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005514:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if(Divider == DIVIDER_P_UPDATE)
 8005516:	683b      	ldr	r3, [r7, #0]
 8005518:	2b00      	cmp	r3, #0
 800551a:	d106      	bne.n	800552a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800551c:	4b1a      	ldr	r3, [pc, #104]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	4a19      	ldr	r2, [pc, #100]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005522:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8005526:	62d3      	str	r3, [r2, #44]	; 0x2c
 8005528:	e00f      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else if(Divider == DIVIDER_Q_UPDATE)
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	2b01      	cmp	r3, #1
 800552e:	d106      	bne.n	800553e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8005530:	4b15      	ldr	r3, [pc, #84]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005534:	4a14      	ldr	r2, [pc, #80]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005536:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800553a:	62d3      	str	r3, [r2, #44]	; 0x2c
 800553c:	e005      	b.n	800554a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800553e:	4b12      	ldr	r3, [pc, #72]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005540:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005542:	4a11      	ldr	r2, [pc, #68]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005544:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8005548:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800554a:	4b0f      	ldr	r3, [pc, #60]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	4a0e      	ldr	r2, [pc, #56]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005550:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005554:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005556:	f7fb feb5 	bl	80012c4 <HAL_GetTick>
 800555a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800555c:	e008      	b.n	8005570 <RCCEx_PLL3_Config+0x144>
    {
      if( (HAL_GetTick() - tickstart ) > PLL3_TIMEOUT_VALUE)
 800555e:	f7fb feb1 	bl	80012c4 <HAL_GetTick>
 8005562:	4602      	mov	r2, r0
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	1ad3      	subs	r3, r2, r3
 8005568:	2b02      	cmp	r3, #2
 800556a:	d901      	bls.n	8005570 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800556c:	2303      	movs	r3, #3
 800556e:	e006      	b.n	800557e <RCCEx_PLL3_Config+0x152>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8005570:	4b05      	ldr	r3, [pc, #20]	; (8005588 <RCCEx_PLL3_Config+0x15c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005578:	2b00      	cmp	r3, #0
 800557a:	d0f0      	beq.n	800555e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800557c:	7bfb      	ldrb	r3, [r7, #15]
}
 800557e:	4618      	mov	r0, r3
 8005580:	3710      	adds	r7, #16
 8005582:	46bd      	mov	sp, r7
 8005584:	bd80      	pop	{r7, pc}
 8005586:	bf00      	nop
 8005588:	58024400 	.word	0x58024400
 800558c:	ffff0007 	.word	0xffff0007

08005590 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b082      	sub	sp, #8
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d101      	bne.n	80055a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800559e:	2301      	movs	r3, #1
 80055a0:	e042      	b.n	8005628 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d106      	bne.n	80055ba <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f7fb fcbb 	bl	8000f30 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	2224      	movs	r2, #36	; 0x24
 80055be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	681a      	ldr	r2, [r3, #0]
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f022 0201 	bic.w	r2, r2, #1
 80055d0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80055d2:	6878      	ldr	r0, [r7, #4]
 80055d4:	f000 fbe2 	bl	8005d9c <UART_SetConfig>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d101      	bne.n	80055e2 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 80055de:	2301      	movs	r3, #1
 80055e0:	e022      	b.n	8005628 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d002      	beq.n	80055f0 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f936 	bl	800685c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	685a      	ldr	r2, [r3, #4]
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80055fe:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	689a      	ldr	r2, [r3, #8]
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800560e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	681a      	ldr	r2, [r3, #0]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f042 0201 	orr.w	r2, r2, #1
 800561e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005620:	6878      	ldr	r0, [r7, #4]
 8005622:	f001 f9bd 	bl	80069a0 <UART_CheckIdleState>
 8005626:	4603      	mov	r3, r0
}
 8005628:	4618      	mov	r0, r3
 800562a:	3708      	adds	r7, #8
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}

08005630 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005630:	b580      	push	{r7, lr}
 8005632:	b08a      	sub	sp, #40	; 0x28
 8005634:	af02      	add	r7, sp, #8
 8005636:	60f8      	str	r0, [r7, #12]
 8005638:	60b9      	str	r1, [r7, #8]
 800563a:	603b      	str	r3, [r7, #0]
 800563c:	4613      	mov	r3, r2
 800563e:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005646:	2b20      	cmp	r3, #32
 8005648:	f040 8083 	bne.w	8005752 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 800564c:	68bb      	ldr	r3, [r7, #8]
 800564e:	2b00      	cmp	r3, #0
 8005650:	d002      	beq.n	8005658 <HAL_UART_Transmit+0x28>
 8005652:	88fb      	ldrh	r3, [r7, #6]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d101      	bne.n	800565c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005658:	2301      	movs	r3, #1
 800565a:	e07b      	b.n	8005754 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005662:	2b01      	cmp	r3, #1
 8005664:	d101      	bne.n	800566a <HAL_UART_Transmit+0x3a>
 8005666:	2302      	movs	r3, #2
 8005668:	e074      	b.n	8005754 <HAL_UART_Transmit+0x124>
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	2201      	movs	r2, #1
 800566e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	2200      	movs	r2, #0
 8005676:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	2221      	movs	r2, #33	; 0x21
 800567e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005682:	f7fb fe1f 	bl	80012c4 <HAL_GetTick>
 8005686:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	88fa      	ldrh	r2, [r7, #6]
 800568c:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	88fa      	ldrh	r2, [r7, #6]
 8005694:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80056a0:	d108      	bne.n	80056b4 <HAL_UART_Transmit+0x84>
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	691b      	ldr	r3, [r3, #16]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d104      	bne.n	80056b4 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 80056aa:	2300      	movs	r3, #0
 80056ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 80056ae:	68bb      	ldr	r3, [r7, #8]
 80056b0:	61bb      	str	r3, [r7, #24]
 80056b2:	e003      	b.n	80056bc <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 80056b4:	68bb      	ldr	r3, [r7, #8]
 80056b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80056b8:	2300      	movs	r3, #0
 80056ba:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	2200      	movs	r2, #0
 80056c0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 80056c4:	e02c      	b.n	8005720 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	9300      	str	r3, [sp, #0]
 80056ca:	697b      	ldr	r3, [r7, #20]
 80056cc:	2200      	movs	r2, #0
 80056ce:	2180      	movs	r1, #128	; 0x80
 80056d0:	68f8      	ldr	r0, [r7, #12]
 80056d2:	f001 f9b0 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 80056d6:	4603      	mov	r3, r0
 80056d8:	2b00      	cmp	r3, #0
 80056da:	d001      	beq.n	80056e0 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 80056dc:	2303      	movs	r3, #3
 80056de:	e039      	b.n	8005754 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d10b      	bne.n	80056fe <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80056e6:	69bb      	ldr	r3, [r7, #24]
 80056e8:	881b      	ldrh	r3, [r3, #0]
 80056ea:	461a      	mov	r2, r3
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	681b      	ldr	r3, [r3, #0]
 80056f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80056f4:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80056f6:	69bb      	ldr	r3, [r7, #24]
 80056f8:	3302      	adds	r3, #2
 80056fa:	61bb      	str	r3, [r7, #24]
 80056fc:	e007      	b.n	800570e <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80056fe:	69fb      	ldr	r3, [r7, #28]
 8005700:	781a      	ldrb	r2, [r3, #0]
 8005702:	68fb      	ldr	r3, [r7, #12]
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005708:	69fb      	ldr	r3, [r7, #28]
 800570a:	3301      	adds	r3, #1
 800570c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005726:	b29b      	uxth	r3, r3
 8005728:	2b00      	cmp	r3, #0
 800572a:	d1cc      	bne.n	80056c6 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800572c:	683b      	ldr	r3, [r7, #0]
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	2200      	movs	r2, #0
 8005734:	2140      	movs	r1, #64	; 0x40
 8005736:	68f8      	ldr	r0, [r7, #12]
 8005738:	f001 f97d 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d001      	beq.n	8005746 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005742:	2303      	movs	r3, #3
 8005744:	e006      	b.n	8005754 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2220      	movs	r2, #32
 800574a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 800574e:	2300      	movs	r3, #0
 8005750:	e000      	b.n	8005754 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005752:	2302      	movs	r3, #2
  }
}
 8005754:	4618      	mov	r0, r3
 8005756:	3720      	adds	r7, #32
 8005758:	46bd      	mov	sp, r7
 800575a:	bd80      	pop	{r7, pc}

0800575c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800575c:	b580      	push	{r7, lr}
 800575e:	b084      	sub	sp, #16
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	4613      	mov	r3, r2
 8005768:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005770:	2b20      	cmp	r3, #32
 8005772:	d131      	bne.n	80057d8 <HAL_UART_Receive_IT+0x7c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005774:	68bb      	ldr	r3, [r7, #8]
 8005776:	2b00      	cmp	r3, #0
 8005778:	d002      	beq.n	8005780 <HAL_UART_Receive_IT+0x24>
 800577a:	88fb      	ldrh	r3, [r7, #6]
 800577c:	2b00      	cmp	r3, #0
 800577e:	d101      	bne.n	8005784 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005780:	2301      	movs	r3, #1
 8005782:	e02a      	b.n	80057da <HAL_UART_Receive_IT+0x7e>
    }

    __HAL_LOCK(huart);
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800578a:	2b01      	cmp	r3, #1
 800578c:	d101      	bne.n	8005792 <HAL_UART_Receive_IT+0x36>
 800578e:	2302      	movs	r3, #2
 8005790:	e023      	b.n	80057da <HAL_UART_Receive_IT+0x7e>
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	2201      	movs	r2, #1
 8005796:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2200      	movs	r2, #0
 800579e:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	4a0f      	ldr	r2, [pc, #60]	; (80057e4 <HAL_UART_Receive_IT+0x88>)
 80057a6:	4293      	cmp	r3, r2
 80057a8:	d00e      	beq.n	80057c8 <HAL_UART_Receive_IT+0x6c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80057aa:	68fb      	ldr	r3, [r7, #12]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	685b      	ldr	r3, [r3, #4]
 80057b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <HAL_UART_Receive_IT+0x6c>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80057c6:	601a      	str	r2, [r3, #0]
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 80057c8:	88fb      	ldrh	r3, [r7, #6]
 80057ca:	461a      	mov	r2, r3
 80057cc:	68b9      	ldr	r1, [r7, #8]
 80057ce:	68f8      	ldr	r0, [r7, #12]
 80057d0:	f001 f9b2 	bl	8006b38 <UART_Start_Receive_IT>
 80057d4:	4603      	mov	r3, r0
 80057d6:	e000      	b.n	80057da <HAL_UART_Receive_IT+0x7e>
  }
  else
  {
    return HAL_BUSY;
 80057d8:	2302      	movs	r3, #2
  }
}
 80057da:	4618      	mov	r0, r3
 80057dc:	3710      	adds	r7, #16
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}
 80057e2:	bf00      	nop
 80057e4:	58000c00 	.word	0x58000c00

080057e8 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80057e8:	b580      	push	{r7, lr}
 80057ea:	b088      	sub	sp, #32
 80057ec:	af00      	add	r7, sp, #0
 80057ee:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	69db      	ldr	r3, [r3, #28]
 80057f6:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	689b      	ldr	r3, [r3, #8]
 8005806:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005808:	69fa      	ldr	r2, [r7, #28]
 800580a:	f640 030f 	movw	r3, #2063	; 0x80f
 800580e:	4013      	ands	r3, r2
 8005810:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 8005812:	693b      	ldr	r3, [r7, #16]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d118      	bne.n	800584a <HAL_UART_IRQHandler+0x62>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005818:	69fb      	ldr	r3, [r7, #28]
 800581a:	f003 0320 	and.w	r3, r3, #32
 800581e:	2b00      	cmp	r3, #0
 8005820:	d013      	beq.n	800584a <HAL_UART_IRQHandler+0x62>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005822:	69bb      	ldr	r3, [r7, #24]
 8005824:	f003 0320 	and.w	r3, r3, #32
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <HAL_UART_IRQHandler+0x4e>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800582c:	697b      	ldr	r3, [r7, #20]
 800582e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005832:	2b00      	cmp	r3, #0
 8005834:	d009      	beq.n	800584a <HAL_UART_IRQHandler+0x62>
    {
      if (huart->RxISR != NULL)
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 8282 	beq.w	8005d44 <HAL_UART_IRQHandler+0x55c>
      {
        huart->RxISR(huart);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005844:	6878      	ldr	r0, [r7, #4]
 8005846:	4798      	blx	r3
      }
      return;
 8005848:	e27c      	b.n	8005d44 <HAL_UART_IRQHandler+0x55c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	2b00      	cmp	r3, #0
 800584e:	f000 80ef 	beq.w	8005a30 <HAL_UART_IRQHandler+0x248>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005852:	697a      	ldr	r2, [r7, #20]
 8005854:	4b73      	ldr	r3, [pc, #460]	; (8005a24 <HAL_UART_IRQHandler+0x23c>)
 8005856:	4013      	ands	r3, r2
 8005858:	2b00      	cmp	r3, #0
 800585a:	d105      	bne.n	8005868 <HAL_UART_IRQHandler+0x80>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800585c:	69ba      	ldr	r2, [r7, #24]
 800585e:	4b72      	ldr	r3, [pc, #456]	; (8005a28 <HAL_UART_IRQHandler+0x240>)
 8005860:	4013      	ands	r3, r2
 8005862:	2b00      	cmp	r3, #0
 8005864:	f000 80e4 	beq.w	8005a30 <HAL_UART_IRQHandler+0x248>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005868:	69fb      	ldr	r3, [r7, #28]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d010      	beq.n	8005894 <HAL_UART_IRQHandler+0xac>
 8005872:	69bb      	ldr	r3, [r7, #24]
 8005874:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005878:	2b00      	cmp	r3, #0
 800587a:	d00b      	beq.n	8005894 <HAL_UART_IRQHandler+0xac>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	2201      	movs	r2, #1
 8005882:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800588a:	f043 0201 	orr.w	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005894:	69fb      	ldr	r3, [r7, #28]
 8005896:	f003 0302 	and.w	r3, r3, #2
 800589a:	2b00      	cmp	r3, #0
 800589c:	d010      	beq.n	80058c0 <HAL_UART_IRQHandler+0xd8>
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	f003 0301 	and.w	r3, r3, #1
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00b      	beq.n	80058c0 <HAL_UART_IRQHandler+0xd8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	2202      	movs	r2, #2
 80058ae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058b6:	f043 0204 	orr.w	r2, r3, #4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80058c0:	69fb      	ldr	r3, [r7, #28]
 80058c2:	f003 0304 	and.w	r3, r3, #4
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d010      	beq.n	80058ec <HAL_UART_IRQHandler+0x104>
 80058ca:	697b      	ldr	r3, [r7, #20]
 80058cc:	f003 0301 	and.w	r3, r3, #1
 80058d0:	2b00      	cmp	r3, #0
 80058d2:	d00b      	beq.n	80058ec <HAL_UART_IRQHandler+0x104>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	2204      	movs	r2, #4
 80058da:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80058e2:	f043 0202 	orr.w	r2, r3, #2
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80058ec:	69fb      	ldr	r3, [r7, #28]
 80058ee:	f003 0308 	and.w	r3, r3, #8
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d015      	beq.n	8005922 <HAL_UART_IRQHandler+0x13a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 80058f6:	69bb      	ldr	r3, [r7, #24]
 80058f8:	f003 0320 	and.w	r3, r3, #32
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d104      	bne.n	800590a <HAL_UART_IRQHandler+0x122>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005900:	697a      	ldr	r2, [r7, #20]
 8005902:	4b48      	ldr	r3, [pc, #288]	; (8005a24 <HAL_UART_IRQHandler+0x23c>)
 8005904:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005906:	2b00      	cmp	r3, #0
 8005908:	d00b      	beq.n	8005922 <HAL_UART_IRQHandler+0x13a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	2208      	movs	r2, #8
 8005910:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005918:	f043 0208 	orr.w	r2, r3, #8
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005922:	69fb      	ldr	r3, [r7, #28]
 8005924:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005928:	2b00      	cmp	r3, #0
 800592a:	d011      	beq.n	8005950 <HAL_UART_IRQHandler+0x168>
 800592c:	69bb      	ldr	r3, [r7, #24]
 800592e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005932:	2b00      	cmp	r3, #0
 8005934:	d00c      	beq.n	8005950 <HAL_UART_IRQHandler+0x168>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	681b      	ldr	r3, [r3, #0]
 800593a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800593e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005956:	2b00      	cmp	r3, #0
 8005958:	f000 81f6 	beq.w	8005d48 <HAL_UART_IRQHandler+0x560>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800595c:	69fb      	ldr	r3, [r7, #28]
 800595e:	f003 0320 	and.w	r3, r3, #32
 8005962:	2b00      	cmp	r3, #0
 8005964:	d011      	beq.n	800598a <HAL_UART_IRQHandler+0x1a2>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	f003 0320 	and.w	r3, r3, #32
 800596c:	2b00      	cmp	r3, #0
 800596e:	d104      	bne.n	800597a <HAL_UART_IRQHandler+0x192>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005970:	697b      	ldr	r3, [r7, #20]
 8005972:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005976:	2b00      	cmp	r3, #0
 8005978:	d007      	beq.n	800598a <HAL_UART_IRQHandler+0x1a2>
      {
        if (huart->RxISR != NULL)
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800597e:	2b00      	cmp	r3, #0
 8005980:	d003      	beq.n	800598a <HAL_UART_IRQHandler+0x1a2>
        {
          huart->RxISR(huart);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005986:	6878      	ldr	r0, [r7, #4]
 8005988:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005990:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	681b      	ldr	r3, [r3, #0]
 8005996:	689b      	ldr	r3, [r3, #8]
 8005998:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800599c:	2b40      	cmp	r3, #64	; 0x40
 800599e:	d004      	beq.n	80059aa <HAL_UART_IRQHandler+0x1c2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d031      	beq.n	8005a0e <HAL_UART_IRQHandler+0x226>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80059aa:	6878      	ldr	r0, [r7, #4]
 80059ac:	f001 f982 	bl	8006cb4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	689b      	ldr	r3, [r3, #8]
 80059b6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059ba:	2b40      	cmp	r3, #64	; 0x40
 80059bc:	d123      	bne.n	8005a06 <HAL_UART_IRQHandler+0x21e>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	689a      	ldr	r2, [r3, #8]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80059cc:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d013      	beq.n	80059fe <HAL_UART_IRQHandler+0x216>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059da:	4a14      	ldr	r2, [pc, #80]	; (8005a2c <HAL_UART_IRQHandler+0x244>)
 80059dc:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059e2:	4618      	mov	r0, r3
 80059e4:	f7fc f8ec 	bl	8001bc0 <HAL_DMA_Abort_IT>
 80059e8:	4603      	mov	r3, r0
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d017      	beq.n	8005a1e <HAL_UART_IRQHandler+0x236>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80059f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059f4:	687a      	ldr	r2, [r7, #4]
 80059f6:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 80059f8:	4610      	mov	r0, r2
 80059fa:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80059fc:	e00f      	b.n	8005a1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 f9b6 	bl	8005d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a04:	e00b      	b.n	8005a1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f000 f9b2 	bl	8005d70 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a0c:	e007      	b.n	8005a1e <HAL_UART_IRQHandler+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f000 f9ae 	bl	8005d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2200      	movs	r2, #0
 8005a18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8005a1c:	e194      	b.n	8005d48 <HAL_UART_IRQHandler+0x560>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a1e:	bf00      	nop
    return;
 8005a20:	e192      	b.n	8005d48 <HAL_UART_IRQHandler+0x560>
 8005a22:	bf00      	nop
 8005a24:	10000001 	.word	0x10000001
 8005a28:	04000120 	.word	0x04000120
 8005a2c:	08006d19 	.word	0x08006d19

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005a34:	2b01      	cmp	r3, #1
 8005a36:	f040 810f 	bne.w	8005c58 <HAL_UART_IRQHandler+0x470>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005a3a:	69fb      	ldr	r3, [r7, #28]
 8005a3c:	f003 0310 	and.w	r3, r3, #16
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	f000 8109 	beq.w	8005c58 <HAL_UART_IRQHandler+0x470>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8005a46:	69bb      	ldr	r3, [r7, #24]
 8005a48:	f003 0310 	and.w	r3, r3, #16
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	f000 8103 	beq.w	8005c58 <HAL_UART_IRQHandler+0x470>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2210      	movs	r2, #16
 8005a58:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a64:	2b40      	cmp	r3, #64	; 0x40
 8005a66:	f040 80bb 	bne.w	8005be0 <HAL_UART_IRQHandler+0x3f8>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a96      	ldr	r2, [pc, #600]	; (8005ccc <HAL_UART_IRQHandler+0x4e4>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d059      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a94      	ldr	r2, [pc, #592]	; (8005cd0 <HAL_UART_IRQHandler+0x4e8>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d053      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a92      	ldr	r2, [pc, #584]	; (8005cd4 <HAL_UART_IRQHandler+0x4ec>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d04d      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	4a90      	ldr	r2, [pc, #576]	; (8005cd8 <HAL_UART_IRQHandler+0x4f0>)
 8005a96:	4293      	cmp	r3, r2
 8005a98:	d047      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	4a8e      	ldr	r2, [pc, #568]	; (8005cdc <HAL_UART_IRQHandler+0x4f4>)
 8005aa2:	4293      	cmp	r3, r2
 8005aa4:	d041      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	4a8c      	ldr	r2, [pc, #560]	; (8005ce0 <HAL_UART_IRQHandler+0x4f8>)
 8005aae:	4293      	cmp	r3, r2
 8005ab0:	d03b      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	4a8a      	ldr	r2, [pc, #552]	; (8005ce4 <HAL_UART_IRQHandler+0x4fc>)
 8005aba:	4293      	cmp	r3, r2
 8005abc:	d035      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a88      	ldr	r2, [pc, #544]	; (8005ce8 <HAL_UART_IRQHandler+0x500>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d02f      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005aca:	687b      	ldr	r3, [r7, #4]
 8005acc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	4a86      	ldr	r2, [pc, #536]	; (8005cec <HAL_UART_IRQHandler+0x504>)
 8005ad2:	4293      	cmp	r3, r2
 8005ad4:	d029      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a84      	ldr	r2, [pc, #528]	; (8005cf0 <HAL_UART_IRQHandler+0x508>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d023      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a82      	ldr	r2, [pc, #520]	; (8005cf4 <HAL_UART_IRQHandler+0x50c>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d01d      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	4a80      	ldr	r2, [pc, #512]	; (8005cf8 <HAL_UART_IRQHandler+0x510>)
 8005af6:	4293      	cmp	r3, r2
 8005af8:	d017      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	4a7e      	ldr	r2, [pc, #504]	; (8005cfc <HAL_UART_IRQHandler+0x514>)
 8005b02:	4293      	cmp	r3, r2
 8005b04:	d011      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	4a7c      	ldr	r2, [pc, #496]	; (8005d00 <HAL_UART_IRQHandler+0x518>)
 8005b0e:	4293      	cmp	r3, r2
 8005b10:	d00b      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	4a7a      	ldr	r2, [pc, #488]	; (8005d04 <HAL_UART_IRQHandler+0x51c>)
 8005b1a:	4293      	cmp	r3, r2
 8005b1c:	d005      	beq.n	8005b2a <HAL_UART_IRQHandler+0x342>
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	4a78      	ldr	r2, [pc, #480]	; (8005d08 <HAL_UART_IRQHandler+0x520>)
 8005b26:	4293      	cmp	r3, r2
 8005b28:	d105      	bne.n	8005b36 <HAL_UART_IRQHandler+0x34e>
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	685b      	ldr	r3, [r3, #4]
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	e004      	b.n	8005b40 <HAL_UART_IRQHandler+0x358>
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	685b      	ldr	r3, [r3, #4]
 8005b3e:	b29b      	uxth	r3, r3
 8005b40:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8005b42:	893b      	ldrh	r3, [r7, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	f000 8101 	beq.w	8005d4c <HAL_UART_IRQHandler+0x564>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8005b50:	893a      	ldrh	r2, [r7, #8]
 8005b52:	429a      	cmp	r2, r3
 8005b54:	f080 80fa 	bcs.w	8005d4c <HAL_UART_IRQHandler+0x564>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	893a      	ldrh	r2, [r7, #8]
 8005b5c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b64:	69db      	ldr	r3, [r3, #28]
 8005b66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005b6a:	d02b      	beq.n	8005bc4 <HAL_UART_IRQHandler+0x3dc>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005b7a:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	689a      	ldr	r2, [r3, #8]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f022 0201 	bic.w	r2, r2, #1
 8005b8a:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	689a      	ldr	r2, [r3, #8]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005b9a:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2220      	movs	r2, #32
 8005ba0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	66da      	str	r2, [r3, #108]	; 0x6c

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	681a      	ldr	r2, [r3, #0]
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f022 0210 	bic.w	r2, r2, #16
 8005bb8:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005bbe:	4618      	mov	r0, r3
 8005bc0:	f7fb fce0 	bl	8001584 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bd0:	b29b      	uxth	r3, r3
 8005bd2:	1ad3      	subs	r3, r2, r3
 8005bd4:	b29b      	uxth	r3, r3
 8005bd6:	4619      	mov	r1, r3
 8005bd8:	6878      	ldr	r0, [r7, #4]
 8005bda:	f000 f8d3 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005bde:	e0b5      	b.n	8005d4c <HAL_UART_IRQHandler+0x564>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bec:	b29b      	uxth	r3, r3
 8005bee:	1ad3      	subs	r3, r2, r3
 8005bf0:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8005bf8:	b29b      	uxth	r3, r3
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	f000 80a8 	beq.w	8005d50 <HAL_UART_IRQHandler+0x568>
          && (nb_rx_data > 0U))
 8005c00:	897b      	ldrh	r3, [r7, #10]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	f000 80a4 	beq.w	8005d50 <HAL_UART_IRQHandler+0x568>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8005c16:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	6899      	ldr	r1, [r3, #8]
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681a      	ldr	r2, [r3, #0]
 8005c22:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <HAL_UART_IRQHandler+0x524>)
 8005c24:	400b      	ands	r3, r1
 8005c26:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	2220      	movs	r2, #32
 8005c2c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2200      	movs	r2, #0
 8005c34:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	2200      	movs	r2, #0
 8005c3a:	671a      	str	r2, [r3, #112]	; 0x70

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681a      	ldr	r2, [r3, #0]
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	f022 0210 	bic.w	r2, r2, #16
 8005c4a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005c4c:	897b      	ldrh	r3, [r7, #10]
 8005c4e:	4619      	mov	r1, r3
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 f897 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8005c56:	e07b      	b.n	8005d50 <HAL_UART_IRQHandler+0x568>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8005c58:	69fb      	ldr	r3, [r7, #28]
 8005c5a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d00d      	beq.n	8005c7e <HAL_UART_IRQHandler+0x496>
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d008      	beq.n	8005c7e <HAL_UART_IRQHandler+0x496>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005c74:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8005c76:	6878      	ldr	r0, [r7, #4]
 8005c78:	f001 fb5a 	bl	8007330 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005c7c:	e06b      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8005c7e:	69fb      	ldr	r3, [r7, #28]
 8005c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d012      	beq.n	8005cae <HAL_UART_IRQHandler+0x4c6>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8005c88:	69bb      	ldr	r3, [r7, #24]
 8005c8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c8e:	2b00      	cmp	r3, #0
 8005c90:	d104      	bne.n	8005c9c <HAL_UART_IRQHandler+0x4b4>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d008      	beq.n	8005cae <HAL_UART_IRQHandler+0x4c6>
  {
    if (huart->TxISR != NULL)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d057      	beq.n	8005d54 <HAL_UART_IRQHandler+0x56c>
    {
      huart->TxISR(huart);
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ca8:	6878      	ldr	r0, [r7, #4]
 8005caa:	4798      	blx	r3
    }
    return;
 8005cac:	e052      	b.n	8005d54 <HAL_UART_IRQHandler+0x56c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8005cae:	69fb      	ldr	r3, [r7, #28]
 8005cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cb4:	2b00      	cmp	r3, #0
 8005cb6:	d02b      	beq.n	8005d10 <HAL_UART_IRQHandler+0x528>
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d026      	beq.n	8005d10 <HAL_UART_IRQHandler+0x528>
  {
    UART_EndTransmit_IT(huart);
 8005cc2:	6878      	ldr	r0, [r7, #4]
 8005cc4:	f001 f83e 	bl	8006d44 <UART_EndTransmit_IT>
    return;
 8005cc8:	e045      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
 8005cca:	bf00      	nop
 8005ccc:	40020010 	.word	0x40020010
 8005cd0:	40020028 	.word	0x40020028
 8005cd4:	40020040 	.word	0x40020040
 8005cd8:	40020058 	.word	0x40020058
 8005cdc:	40020070 	.word	0x40020070
 8005ce0:	40020088 	.word	0x40020088
 8005ce4:	400200a0 	.word	0x400200a0
 8005ce8:	400200b8 	.word	0x400200b8
 8005cec:	40020410 	.word	0x40020410
 8005cf0:	40020428 	.word	0x40020428
 8005cf4:	40020440 	.word	0x40020440
 8005cf8:	40020458 	.word	0x40020458
 8005cfc:	40020470 	.word	0x40020470
 8005d00:	40020488 	.word	0x40020488
 8005d04:	400204a0 	.word	0x400204a0
 8005d08:	400204b8 	.word	0x400204b8
 8005d0c:	effffffe 	.word	0xeffffffe
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8005d10:	69fb      	ldr	r3, [r7, #28]
 8005d12:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	d008      	beq.n	8005d2c <HAL_UART_IRQHandler+0x544>
 8005d1a:	69bb      	ldr	r3, [r7, #24]
 8005d1c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d003      	beq.n	8005d2c <HAL_UART_IRQHandler+0x544>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8005d24:	6878      	ldr	r0, [r7, #4]
 8005d26:	f001 fb17 	bl	8007358 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d2a:	e014      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8005d2c:	69fb      	ldr	r3, [r7, #28]
 8005d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d00f      	beq.n	8005d56 <HAL_UART_IRQHandler+0x56e>
 8005d36:	69bb      	ldr	r3, [r7, #24]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	da0c      	bge.n	8005d56 <HAL_UART_IRQHandler+0x56e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f001 fb01 	bl	8007344 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8005d42:	e008      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
      return;
 8005d44:	bf00      	nop
 8005d46:	e006      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
    return;
 8005d48:	bf00      	nop
 8005d4a:	e004      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
      return;
 8005d4c:	bf00      	nop
 8005d4e:	e002      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
      return;
 8005d50:	bf00      	nop
 8005d52:	e000      	b.n	8005d56 <HAL_UART_IRQHandler+0x56e>
    return;
 8005d54:	bf00      	nop
  }
}
 8005d56:	3720      	adds	r7, #32
 8005d58:	46bd      	mov	sp, r7
 8005d5a:	bd80      	pop	{r7, pc}

08005d5c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005d5c:	b480      	push	{r7}
 8005d5e:	b083      	sub	sp, #12
 8005d60:	af00      	add	r7, sp, #0
 8005d62:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8005d64:	bf00      	nop
 8005d66:	370c      	adds	r7, #12
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d6e:	4770      	bx	lr

08005d70 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005d70:	b480      	push	{r7}
 8005d72:	b083      	sub	sp, #12
 8005d74:	af00      	add	r7, sp, #0
 8005d76:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8005d78:	bf00      	nop
 8005d7a:	370c      	adds	r7, #12
 8005d7c:	46bd      	mov	sp, r7
 8005d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d82:	4770      	bx	lr

08005d84 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005d84:	b480      	push	{r7}
 8005d86:	b083      	sub	sp, #12
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	460b      	mov	r3, r1
 8005d8e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005d90:	bf00      	nop
 8005d92:	370c      	adds	r7, #12
 8005d94:	46bd      	mov	sp, r7
 8005d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d9a:	4770      	bx	lr

08005d9c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005d9c:	b5b0      	push	{r4, r5, r7, lr}
 8005d9e:	b08e      	sub	sp, #56	; 0x38
 8005da0:	af00      	add	r7, sp, #0
 8005da2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005da4:	2300      	movs	r3, #0
 8005da6:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	689a      	ldr	r2, [r3, #8]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	431a      	orrs	r2, r3
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	695b      	ldr	r3, [r3, #20]
 8005db8:	431a      	orrs	r2, r3
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	69db      	ldr	r3, [r3, #28]
 8005dbe:	4313      	orrs	r3, r2
 8005dc0:	637b      	str	r3, [r7, #52]	; 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	681b      	ldr	r3, [r3, #0]
 8005dc6:	681a      	ldr	r2, [r3, #0]
 8005dc8:	4bbf      	ldr	r3, [pc, #764]	; (80060c8 <UART_SetConfig+0x32c>)
 8005dca:	4013      	ands	r3, r2
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	6812      	ldr	r2, [r2, #0]
 8005dd0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005dd2:	430b      	orrs	r3, r1
 8005dd4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	685b      	ldr	r3, [r3, #4]
 8005ddc:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	430a      	orrs	r2, r1
 8005dea:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	637b      	str	r3, [r7, #52]	; 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4ab5      	ldr	r2, [pc, #724]	; (80060cc <UART_SetConfig+0x330>)
 8005df8:	4293      	cmp	r3, r2
 8005dfa:	d004      	beq.n	8005e06 <UART_SetConfig+0x6a>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	6a1b      	ldr	r3, [r3, #32]
 8005e00:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005e02:	4313      	orrs	r3, r2
 8005e04:	637b      	str	r3, [r7, #52]	; 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	689a      	ldr	r2, [r3, #8]
 8005e0c:	4bb0      	ldr	r3, [pc, #704]	; (80060d0 <UART_SetConfig+0x334>)
 8005e0e:	4013      	ands	r3, r2
 8005e10:	687a      	ldr	r2, [r7, #4]
 8005e12:	6812      	ldr	r2, [r2, #0]
 8005e14:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8005e16:	430b      	orrs	r3, r1
 8005e18:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e20:	f023 010f 	bic.w	r1, r3, #15
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	430a      	orrs	r2, r1
 8005e2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4aa7      	ldr	r2, [pc, #668]	; (80060d4 <UART_SetConfig+0x338>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d176      	bne.n	8005f28 <UART_SetConfig+0x18c>
 8005e3a:	4ba7      	ldr	r3, [pc, #668]	; (80060d8 <UART_SetConfig+0x33c>)
 8005e3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005e3e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e42:	2b28      	cmp	r3, #40	; 0x28
 8005e44:	d86c      	bhi.n	8005f20 <UART_SetConfig+0x184>
 8005e46:	a201      	add	r2, pc, #4	; (adr r2, 8005e4c <UART_SetConfig+0xb0>)
 8005e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e4c:	08005ef1 	.word	0x08005ef1
 8005e50:	08005f21 	.word	0x08005f21
 8005e54:	08005f21 	.word	0x08005f21
 8005e58:	08005f21 	.word	0x08005f21
 8005e5c:	08005f21 	.word	0x08005f21
 8005e60:	08005f21 	.word	0x08005f21
 8005e64:	08005f21 	.word	0x08005f21
 8005e68:	08005f21 	.word	0x08005f21
 8005e6c:	08005ef9 	.word	0x08005ef9
 8005e70:	08005f21 	.word	0x08005f21
 8005e74:	08005f21 	.word	0x08005f21
 8005e78:	08005f21 	.word	0x08005f21
 8005e7c:	08005f21 	.word	0x08005f21
 8005e80:	08005f21 	.word	0x08005f21
 8005e84:	08005f21 	.word	0x08005f21
 8005e88:	08005f21 	.word	0x08005f21
 8005e8c:	08005f01 	.word	0x08005f01
 8005e90:	08005f21 	.word	0x08005f21
 8005e94:	08005f21 	.word	0x08005f21
 8005e98:	08005f21 	.word	0x08005f21
 8005e9c:	08005f21 	.word	0x08005f21
 8005ea0:	08005f21 	.word	0x08005f21
 8005ea4:	08005f21 	.word	0x08005f21
 8005ea8:	08005f21 	.word	0x08005f21
 8005eac:	08005f09 	.word	0x08005f09
 8005eb0:	08005f21 	.word	0x08005f21
 8005eb4:	08005f21 	.word	0x08005f21
 8005eb8:	08005f21 	.word	0x08005f21
 8005ebc:	08005f21 	.word	0x08005f21
 8005ec0:	08005f21 	.word	0x08005f21
 8005ec4:	08005f21 	.word	0x08005f21
 8005ec8:	08005f21 	.word	0x08005f21
 8005ecc:	08005f11 	.word	0x08005f11
 8005ed0:	08005f21 	.word	0x08005f21
 8005ed4:	08005f21 	.word	0x08005f21
 8005ed8:	08005f21 	.word	0x08005f21
 8005edc:	08005f21 	.word	0x08005f21
 8005ee0:	08005f21 	.word	0x08005f21
 8005ee4:	08005f21 	.word	0x08005f21
 8005ee8:	08005f21 	.word	0x08005f21
 8005eec:	08005f19 	.word	0x08005f19
 8005ef0:	2301      	movs	r3, #1
 8005ef2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ef6:	e222      	b.n	800633e <UART_SetConfig+0x5a2>
 8005ef8:	2304      	movs	r3, #4
 8005efa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005efe:	e21e      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f00:	2308      	movs	r3, #8
 8005f02:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f06:	e21a      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f08:	2310      	movs	r3, #16
 8005f0a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f0e:	e216      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f10:	2320      	movs	r3, #32
 8005f12:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f16:	e212      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f18:	2340      	movs	r3, #64	; 0x40
 8005f1a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f1e:	e20e      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f20:	2380      	movs	r3, #128	; 0x80
 8005f22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f26:	e20a      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a6b      	ldr	r2, [pc, #428]	; (80060dc <UART_SetConfig+0x340>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d130      	bne.n	8005f94 <UART_SetConfig+0x1f8>
 8005f32:	4b69      	ldr	r3, [pc, #420]	; (80060d8 <UART_SetConfig+0x33c>)
 8005f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005f36:	f003 0307 	and.w	r3, r3, #7
 8005f3a:	2b05      	cmp	r3, #5
 8005f3c:	d826      	bhi.n	8005f8c <UART_SetConfig+0x1f0>
 8005f3e:	a201      	add	r2, pc, #4	; (adr r2, 8005f44 <UART_SetConfig+0x1a8>)
 8005f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f44:	08005f5d 	.word	0x08005f5d
 8005f48:	08005f65 	.word	0x08005f65
 8005f4c:	08005f6d 	.word	0x08005f6d
 8005f50:	08005f75 	.word	0x08005f75
 8005f54:	08005f7d 	.word	0x08005f7d
 8005f58:	08005f85 	.word	0x08005f85
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f62:	e1ec      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f64:	2304      	movs	r3, #4
 8005f66:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f6a:	e1e8      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f6c:	2308      	movs	r3, #8
 8005f6e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f72:	e1e4      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f74:	2310      	movs	r3, #16
 8005f76:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f7a:	e1e0      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f7c:	2320      	movs	r3, #32
 8005f7e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f82:	e1dc      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f84:	2340      	movs	r3, #64	; 0x40
 8005f86:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f8a:	e1d8      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f8c:	2380      	movs	r3, #128	; 0x80
 8005f8e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005f92:	e1d4      	b.n	800633e <UART_SetConfig+0x5a2>
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	4a51      	ldr	r2, [pc, #324]	; (80060e0 <UART_SetConfig+0x344>)
 8005f9a:	4293      	cmp	r3, r2
 8005f9c:	d130      	bne.n	8006000 <UART_SetConfig+0x264>
 8005f9e:	4b4e      	ldr	r3, [pc, #312]	; (80060d8 <UART_SetConfig+0x33c>)
 8005fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005fa2:	f003 0307 	and.w	r3, r3, #7
 8005fa6:	2b05      	cmp	r3, #5
 8005fa8:	d826      	bhi.n	8005ff8 <UART_SetConfig+0x25c>
 8005faa:	a201      	add	r2, pc, #4	; (adr r2, 8005fb0 <UART_SetConfig+0x214>)
 8005fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fb0:	08005fc9 	.word	0x08005fc9
 8005fb4:	08005fd1 	.word	0x08005fd1
 8005fb8:	08005fd9 	.word	0x08005fd9
 8005fbc:	08005fe1 	.word	0x08005fe1
 8005fc0:	08005fe9 	.word	0x08005fe9
 8005fc4:	08005ff1 	.word	0x08005ff1
 8005fc8:	2300      	movs	r3, #0
 8005fca:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fce:	e1b6      	b.n	800633e <UART_SetConfig+0x5a2>
 8005fd0:	2304      	movs	r3, #4
 8005fd2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fd6:	e1b2      	b.n	800633e <UART_SetConfig+0x5a2>
 8005fd8:	2308      	movs	r3, #8
 8005fda:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fde:	e1ae      	b.n	800633e <UART_SetConfig+0x5a2>
 8005fe0:	2310      	movs	r3, #16
 8005fe2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fe6:	e1aa      	b.n	800633e <UART_SetConfig+0x5a2>
 8005fe8:	2320      	movs	r3, #32
 8005fea:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005fee:	e1a6      	b.n	800633e <UART_SetConfig+0x5a2>
 8005ff0:	2340      	movs	r3, #64	; 0x40
 8005ff2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ff6:	e1a2      	b.n	800633e <UART_SetConfig+0x5a2>
 8005ff8:	2380      	movs	r3, #128	; 0x80
 8005ffa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8005ffe:	e19e      	b.n	800633e <UART_SetConfig+0x5a2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	4a37      	ldr	r2, [pc, #220]	; (80060e4 <UART_SetConfig+0x348>)
 8006006:	4293      	cmp	r3, r2
 8006008:	d130      	bne.n	800606c <UART_SetConfig+0x2d0>
 800600a:	4b33      	ldr	r3, [pc, #204]	; (80060d8 <UART_SetConfig+0x33c>)
 800600c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800600e:	f003 0307 	and.w	r3, r3, #7
 8006012:	2b05      	cmp	r3, #5
 8006014:	d826      	bhi.n	8006064 <UART_SetConfig+0x2c8>
 8006016:	a201      	add	r2, pc, #4	; (adr r2, 800601c <UART_SetConfig+0x280>)
 8006018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800601c:	08006035 	.word	0x08006035
 8006020:	0800603d 	.word	0x0800603d
 8006024:	08006045 	.word	0x08006045
 8006028:	0800604d 	.word	0x0800604d
 800602c:	08006055 	.word	0x08006055
 8006030:	0800605d 	.word	0x0800605d
 8006034:	2300      	movs	r3, #0
 8006036:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800603a:	e180      	b.n	800633e <UART_SetConfig+0x5a2>
 800603c:	2304      	movs	r3, #4
 800603e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006042:	e17c      	b.n	800633e <UART_SetConfig+0x5a2>
 8006044:	2308      	movs	r3, #8
 8006046:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800604a:	e178      	b.n	800633e <UART_SetConfig+0x5a2>
 800604c:	2310      	movs	r3, #16
 800604e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006052:	e174      	b.n	800633e <UART_SetConfig+0x5a2>
 8006054:	2320      	movs	r3, #32
 8006056:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800605a:	e170      	b.n	800633e <UART_SetConfig+0x5a2>
 800605c:	2340      	movs	r3, #64	; 0x40
 800605e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006062:	e16c      	b.n	800633e <UART_SetConfig+0x5a2>
 8006064:	2380      	movs	r3, #128	; 0x80
 8006066:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800606a:	e168      	b.n	800633e <UART_SetConfig+0x5a2>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	681b      	ldr	r3, [r3, #0]
 8006070:	4a1d      	ldr	r2, [pc, #116]	; (80060e8 <UART_SetConfig+0x34c>)
 8006072:	4293      	cmp	r3, r2
 8006074:	d142      	bne.n	80060fc <UART_SetConfig+0x360>
 8006076:	4b18      	ldr	r3, [pc, #96]	; (80060d8 <UART_SetConfig+0x33c>)
 8006078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800607a:	f003 0307 	and.w	r3, r3, #7
 800607e:	2b05      	cmp	r3, #5
 8006080:	d838      	bhi.n	80060f4 <UART_SetConfig+0x358>
 8006082:	a201      	add	r2, pc, #4	; (adr r2, 8006088 <UART_SetConfig+0x2ec>)
 8006084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006088:	080060a1 	.word	0x080060a1
 800608c:	080060a9 	.word	0x080060a9
 8006090:	080060b1 	.word	0x080060b1
 8006094:	080060b9 	.word	0x080060b9
 8006098:	080060c1 	.word	0x080060c1
 800609c:	080060ed 	.word	0x080060ed
 80060a0:	2300      	movs	r3, #0
 80060a2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060a6:	e14a      	b.n	800633e <UART_SetConfig+0x5a2>
 80060a8:	2304      	movs	r3, #4
 80060aa:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060ae:	e146      	b.n	800633e <UART_SetConfig+0x5a2>
 80060b0:	2308      	movs	r3, #8
 80060b2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060b6:	e142      	b.n	800633e <UART_SetConfig+0x5a2>
 80060b8:	2310      	movs	r3, #16
 80060ba:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060be:	e13e      	b.n	800633e <UART_SetConfig+0x5a2>
 80060c0:	2320      	movs	r3, #32
 80060c2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060c6:	e13a      	b.n	800633e <UART_SetConfig+0x5a2>
 80060c8:	cfff69f3 	.word	0xcfff69f3
 80060cc:	58000c00 	.word	0x58000c00
 80060d0:	11fff4ff 	.word	0x11fff4ff
 80060d4:	40011000 	.word	0x40011000
 80060d8:	58024400 	.word	0x58024400
 80060dc:	40004400 	.word	0x40004400
 80060e0:	40004800 	.word	0x40004800
 80060e4:	40004c00 	.word	0x40004c00
 80060e8:	40005000 	.word	0x40005000
 80060ec:	2340      	movs	r3, #64	; 0x40
 80060ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060f2:	e124      	b.n	800633e <UART_SetConfig+0x5a2>
 80060f4:	2380      	movs	r3, #128	; 0x80
 80060f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80060fa:	e120      	b.n	800633e <UART_SetConfig+0x5a2>
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	4acc      	ldr	r2, [pc, #816]	; (8006434 <UART_SetConfig+0x698>)
 8006102:	4293      	cmp	r3, r2
 8006104:	d176      	bne.n	80061f4 <UART_SetConfig+0x458>
 8006106:	4bcc      	ldr	r3, [pc, #816]	; (8006438 <UART_SetConfig+0x69c>)
 8006108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800610a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800610e:	2b28      	cmp	r3, #40	; 0x28
 8006110:	d86c      	bhi.n	80061ec <UART_SetConfig+0x450>
 8006112:	a201      	add	r2, pc, #4	; (adr r2, 8006118 <UART_SetConfig+0x37c>)
 8006114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006118:	080061bd 	.word	0x080061bd
 800611c:	080061ed 	.word	0x080061ed
 8006120:	080061ed 	.word	0x080061ed
 8006124:	080061ed 	.word	0x080061ed
 8006128:	080061ed 	.word	0x080061ed
 800612c:	080061ed 	.word	0x080061ed
 8006130:	080061ed 	.word	0x080061ed
 8006134:	080061ed 	.word	0x080061ed
 8006138:	080061c5 	.word	0x080061c5
 800613c:	080061ed 	.word	0x080061ed
 8006140:	080061ed 	.word	0x080061ed
 8006144:	080061ed 	.word	0x080061ed
 8006148:	080061ed 	.word	0x080061ed
 800614c:	080061ed 	.word	0x080061ed
 8006150:	080061ed 	.word	0x080061ed
 8006154:	080061ed 	.word	0x080061ed
 8006158:	080061cd 	.word	0x080061cd
 800615c:	080061ed 	.word	0x080061ed
 8006160:	080061ed 	.word	0x080061ed
 8006164:	080061ed 	.word	0x080061ed
 8006168:	080061ed 	.word	0x080061ed
 800616c:	080061ed 	.word	0x080061ed
 8006170:	080061ed 	.word	0x080061ed
 8006174:	080061ed 	.word	0x080061ed
 8006178:	080061d5 	.word	0x080061d5
 800617c:	080061ed 	.word	0x080061ed
 8006180:	080061ed 	.word	0x080061ed
 8006184:	080061ed 	.word	0x080061ed
 8006188:	080061ed 	.word	0x080061ed
 800618c:	080061ed 	.word	0x080061ed
 8006190:	080061ed 	.word	0x080061ed
 8006194:	080061ed 	.word	0x080061ed
 8006198:	080061dd 	.word	0x080061dd
 800619c:	080061ed 	.word	0x080061ed
 80061a0:	080061ed 	.word	0x080061ed
 80061a4:	080061ed 	.word	0x080061ed
 80061a8:	080061ed 	.word	0x080061ed
 80061ac:	080061ed 	.word	0x080061ed
 80061b0:	080061ed 	.word	0x080061ed
 80061b4:	080061ed 	.word	0x080061ed
 80061b8:	080061e5 	.word	0x080061e5
 80061bc:	2301      	movs	r3, #1
 80061be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061c2:	e0bc      	b.n	800633e <UART_SetConfig+0x5a2>
 80061c4:	2304      	movs	r3, #4
 80061c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ca:	e0b8      	b.n	800633e <UART_SetConfig+0x5a2>
 80061cc:	2308      	movs	r3, #8
 80061ce:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061d2:	e0b4      	b.n	800633e <UART_SetConfig+0x5a2>
 80061d4:	2310      	movs	r3, #16
 80061d6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061da:	e0b0      	b.n	800633e <UART_SetConfig+0x5a2>
 80061dc:	2320      	movs	r3, #32
 80061de:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061e2:	e0ac      	b.n	800633e <UART_SetConfig+0x5a2>
 80061e4:	2340      	movs	r3, #64	; 0x40
 80061e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061ea:	e0a8      	b.n	800633e <UART_SetConfig+0x5a2>
 80061ec:	2380      	movs	r3, #128	; 0x80
 80061ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80061f2:	e0a4      	b.n	800633e <UART_SetConfig+0x5a2>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	4a90      	ldr	r2, [pc, #576]	; (800643c <UART_SetConfig+0x6a0>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d130      	bne.n	8006260 <UART_SetConfig+0x4c4>
 80061fe:	4b8e      	ldr	r3, [pc, #568]	; (8006438 <UART_SetConfig+0x69c>)
 8006200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	2b05      	cmp	r3, #5
 8006208:	d826      	bhi.n	8006258 <UART_SetConfig+0x4bc>
 800620a:	a201      	add	r2, pc, #4	; (adr r2, 8006210 <UART_SetConfig+0x474>)
 800620c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006210:	08006229 	.word	0x08006229
 8006214:	08006231 	.word	0x08006231
 8006218:	08006239 	.word	0x08006239
 800621c:	08006241 	.word	0x08006241
 8006220:	08006249 	.word	0x08006249
 8006224:	08006251 	.word	0x08006251
 8006228:	2300      	movs	r3, #0
 800622a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800622e:	e086      	b.n	800633e <UART_SetConfig+0x5a2>
 8006230:	2304      	movs	r3, #4
 8006232:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006236:	e082      	b.n	800633e <UART_SetConfig+0x5a2>
 8006238:	2308      	movs	r3, #8
 800623a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800623e:	e07e      	b.n	800633e <UART_SetConfig+0x5a2>
 8006240:	2310      	movs	r3, #16
 8006242:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006246:	e07a      	b.n	800633e <UART_SetConfig+0x5a2>
 8006248:	2320      	movs	r3, #32
 800624a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800624e:	e076      	b.n	800633e <UART_SetConfig+0x5a2>
 8006250:	2340      	movs	r3, #64	; 0x40
 8006252:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006256:	e072      	b.n	800633e <UART_SetConfig+0x5a2>
 8006258:	2380      	movs	r3, #128	; 0x80
 800625a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800625e:	e06e      	b.n	800633e <UART_SetConfig+0x5a2>
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	4a76      	ldr	r2, [pc, #472]	; (8006440 <UART_SetConfig+0x6a4>)
 8006266:	4293      	cmp	r3, r2
 8006268:	d130      	bne.n	80062cc <UART_SetConfig+0x530>
 800626a:	4b73      	ldr	r3, [pc, #460]	; (8006438 <UART_SetConfig+0x69c>)
 800626c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800626e:	f003 0307 	and.w	r3, r3, #7
 8006272:	2b05      	cmp	r3, #5
 8006274:	d826      	bhi.n	80062c4 <UART_SetConfig+0x528>
 8006276:	a201      	add	r2, pc, #4	; (adr r2, 800627c <UART_SetConfig+0x4e0>)
 8006278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800627c:	08006295 	.word	0x08006295
 8006280:	0800629d 	.word	0x0800629d
 8006284:	080062a5 	.word	0x080062a5
 8006288:	080062ad 	.word	0x080062ad
 800628c:	080062b5 	.word	0x080062b5
 8006290:	080062bd 	.word	0x080062bd
 8006294:	2300      	movs	r3, #0
 8006296:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800629a:	e050      	b.n	800633e <UART_SetConfig+0x5a2>
 800629c:	2304      	movs	r3, #4
 800629e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062a2:	e04c      	b.n	800633e <UART_SetConfig+0x5a2>
 80062a4:	2308      	movs	r3, #8
 80062a6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062aa:	e048      	b.n	800633e <UART_SetConfig+0x5a2>
 80062ac:	2310      	movs	r3, #16
 80062ae:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062b2:	e044      	b.n	800633e <UART_SetConfig+0x5a2>
 80062b4:	2320      	movs	r3, #32
 80062b6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ba:	e040      	b.n	800633e <UART_SetConfig+0x5a2>
 80062bc:	2340      	movs	r3, #64	; 0x40
 80062be:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062c2:	e03c      	b.n	800633e <UART_SetConfig+0x5a2>
 80062c4:	2380      	movs	r3, #128	; 0x80
 80062c6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 80062ca:	e038      	b.n	800633e <UART_SetConfig+0x5a2>
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	4a5c      	ldr	r2, [pc, #368]	; (8006444 <UART_SetConfig+0x6a8>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d130      	bne.n	8006338 <UART_SetConfig+0x59c>
 80062d6:	4b58      	ldr	r3, [pc, #352]	; (8006438 <UART_SetConfig+0x69c>)
 80062d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	2b05      	cmp	r3, #5
 80062e0:	d826      	bhi.n	8006330 <UART_SetConfig+0x594>
 80062e2:	a201      	add	r2, pc, #4	; (adr r2, 80062e8 <UART_SetConfig+0x54c>)
 80062e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062e8:	08006301 	.word	0x08006301
 80062ec:	08006309 	.word	0x08006309
 80062f0:	08006311 	.word	0x08006311
 80062f4:	08006319 	.word	0x08006319
 80062f8:	08006321 	.word	0x08006321
 80062fc:	08006329 	.word	0x08006329
 8006300:	2302      	movs	r3, #2
 8006302:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006306:	e01a      	b.n	800633e <UART_SetConfig+0x5a2>
 8006308:	2304      	movs	r3, #4
 800630a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800630e:	e016      	b.n	800633e <UART_SetConfig+0x5a2>
 8006310:	2308      	movs	r3, #8
 8006312:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006316:	e012      	b.n	800633e <UART_SetConfig+0x5a2>
 8006318:	2310      	movs	r3, #16
 800631a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800631e:	e00e      	b.n	800633e <UART_SetConfig+0x5a2>
 8006320:	2320      	movs	r3, #32
 8006322:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006326:	e00a      	b.n	800633e <UART_SetConfig+0x5a2>
 8006328:	2340      	movs	r3, #64	; 0x40
 800632a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 800632e:	e006      	b.n	800633e <UART_SetConfig+0x5a2>
 8006330:	2380      	movs	r3, #128	; 0x80
 8006332:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8006336:	e002      	b.n	800633e <UART_SetConfig+0x5a2>
 8006338:	2380      	movs	r3, #128	; 0x80
 800633a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	4a40      	ldr	r2, [pc, #256]	; (8006444 <UART_SetConfig+0x6a8>)
 8006344:	4293      	cmp	r3, r2
 8006346:	f040 80ef 	bne.w	8006528 <UART_SetConfig+0x78c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800634a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800634e:	2b20      	cmp	r3, #32
 8006350:	dc46      	bgt.n	80063e0 <UART_SetConfig+0x644>
 8006352:	2b02      	cmp	r3, #2
 8006354:	f2c0 8081 	blt.w	800645a <UART_SetConfig+0x6be>
 8006358:	3b02      	subs	r3, #2
 800635a:	2b1e      	cmp	r3, #30
 800635c:	d87d      	bhi.n	800645a <UART_SetConfig+0x6be>
 800635e:	a201      	add	r2, pc, #4	; (adr r2, 8006364 <UART_SetConfig+0x5c8>)
 8006360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006364:	080063e7 	.word	0x080063e7
 8006368:	0800645b 	.word	0x0800645b
 800636c:	080063ef 	.word	0x080063ef
 8006370:	0800645b 	.word	0x0800645b
 8006374:	0800645b 	.word	0x0800645b
 8006378:	0800645b 	.word	0x0800645b
 800637c:	080063ff 	.word	0x080063ff
 8006380:	0800645b 	.word	0x0800645b
 8006384:	0800645b 	.word	0x0800645b
 8006388:	0800645b 	.word	0x0800645b
 800638c:	0800645b 	.word	0x0800645b
 8006390:	0800645b 	.word	0x0800645b
 8006394:	0800645b 	.word	0x0800645b
 8006398:	0800645b 	.word	0x0800645b
 800639c:	0800640f 	.word	0x0800640f
 80063a0:	0800645b 	.word	0x0800645b
 80063a4:	0800645b 	.word	0x0800645b
 80063a8:	0800645b 	.word	0x0800645b
 80063ac:	0800645b 	.word	0x0800645b
 80063b0:	0800645b 	.word	0x0800645b
 80063b4:	0800645b 	.word	0x0800645b
 80063b8:	0800645b 	.word	0x0800645b
 80063bc:	0800645b 	.word	0x0800645b
 80063c0:	0800645b 	.word	0x0800645b
 80063c4:	0800645b 	.word	0x0800645b
 80063c8:	0800645b 	.word	0x0800645b
 80063cc:	0800645b 	.word	0x0800645b
 80063d0:	0800645b 	.word	0x0800645b
 80063d4:	0800645b 	.word	0x0800645b
 80063d8:	0800645b 	.word	0x0800645b
 80063dc:	0800644d 	.word	0x0800644d
 80063e0:	2b40      	cmp	r3, #64	; 0x40
 80063e2:	d036      	beq.n	8006452 <UART_SetConfig+0x6b6>
 80063e4:	e039      	b.n	800645a <UART_SetConfig+0x6be>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80063e6:	f7fe fcb1 	bl	8004d4c <HAL_RCCEx_GetD3PCLK1Freq>
 80063ea:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80063ec:	e03b      	b.n	8006466 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80063ee:	f107 0314 	add.w	r3, r7, #20
 80063f2:	4618      	mov	r0, r3
 80063f4:	f7fe fcc0 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80063f8:	69bb      	ldr	r3, [r7, #24]
 80063fa:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80063fc:	e033      	b.n	8006466 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80063fe:	f107 0308 	add.w	r3, r7, #8
 8006402:	4618      	mov	r0, r3
 8006404:	f7fe fe0c 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006408:	68fb      	ldr	r3, [r7, #12]
 800640a:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800640c:	e02b      	b.n	8006466 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800640e:	4b0a      	ldr	r3, [pc, #40]	; (8006438 <UART_SetConfig+0x69c>)
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	f003 0320 	and.w	r3, r3, #32
 8006416:	2b00      	cmp	r3, #0
 8006418:	d009      	beq.n	800642e <UART_SetConfig+0x692>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800641a:	4b07      	ldr	r3, [pc, #28]	; (8006438 <UART_SetConfig+0x69c>)
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	08db      	lsrs	r3, r3, #3
 8006420:	f003 0303 	and.w	r3, r3, #3
 8006424:	4a08      	ldr	r2, [pc, #32]	; (8006448 <UART_SetConfig+0x6ac>)
 8006426:	fa22 f303 	lsr.w	r3, r2, r3
 800642a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800642c:	e01b      	b.n	8006466 <UART_SetConfig+0x6ca>
          pclk = (uint32_t) HSI_VALUE;
 800642e:	4b06      	ldr	r3, [pc, #24]	; (8006448 <UART_SetConfig+0x6ac>)
 8006430:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006432:	e018      	b.n	8006466 <UART_SetConfig+0x6ca>
 8006434:	40011400 	.word	0x40011400
 8006438:	58024400 	.word	0x58024400
 800643c:	40007800 	.word	0x40007800
 8006440:	40007c00 	.word	0x40007c00
 8006444:	58000c00 	.word	0x58000c00
 8006448:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800644c:	4bc4      	ldr	r3, [pc, #784]	; (8006760 <UART_SetConfig+0x9c4>)
 800644e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006450:	e009      	b.n	8006466 <UART_SetConfig+0x6ca>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006452:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006456:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006458:	e005      	b.n	8006466 <UART_SetConfig+0x6ca>
      default:
        pclk = 0U;
 800645a:	2300      	movs	r3, #0
 800645c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800645e:	2301      	movs	r3, #1
 8006460:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006464:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006468:	2b00      	cmp	r3, #0
 800646a:	f000 81da 	beq.w	8006822 <UART_SetConfig+0xa86>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006472:	4abc      	ldr	r2, [pc, #752]	; (8006764 <UART_SetConfig+0x9c8>)
 8006474:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006478:	461a      	mov	r2, r3
 800647a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800647c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006480:	623b      	str	r3, [r7, #32]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	685a      	ldr	r2, [r3, #4]
 8006486:	4613      	mov	r3, r2
 8006488:	005b      	lsls	r3, r3, #1
 800648a:	4413      	add	r3, r2
 800648c:	6a3a      	ldr	r2, [r7, #32]
 800648e:	429a      	cmp	r2, r3
 8006490:	d305      	bcc.n	800649e <UART_SetConfig+0x702>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006498:	6a3a      	ldr	r2, [r7, #32]
 800649a:	429a      	cmp	r2, r3
 800649c:	d903      	bls.n	80064a6 <UART_SetConfig+0x70a>
      {
        ret = HAL_ERROR;
 800649e:	2301      	movs	r3, #1
 80064a0:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80064a4:	e1bd      	b.n	8006822 <UART_SetConfig+0xa86>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80064a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80064a8:	4618      	mov	r0, r3
 80064aa:	f04f 0100 	mov.w	r1, #0
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064b2:	4aac      	ldr	r2, [pc, #688]	; (8006764 <UART_SetConfig+0x9c8>)
 80064b4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80064b8:	b29a      	uxth	r2, r3
 80064ba:	f04f 0300 	mov.w	r3, #0
 80064be:	f7f9 ff67 	bl	8000390 <__aeabi_uldivmod>
 80064c2:	4602      	mov	r2, r0
 80064c4:	460b      	mov	r3, r1
 80064c6:	4610      	mov	r0, r2
 80064c8:	4619      	mov	r1, r3
 80064ca:	f04f 0200 	mov.w	r2, #0
 80064ce:	f04f 0300 	mov.w	r3, #0
 80064d2:	020b      	lsls	r3, r1, #8
 80064d4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80064d8:	0202      	lsls	r2, r0, #8
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	6849      	ldr	r1, [r1, #4]
 80064de:	0849      	lsrs	r1, r1, #1
 80064e0:	4608      	mov	r0, r1
 80064e2:	f04f 0100 	mov.w	r1, #0
 80064e6:	1814      	adds	r4, r2, r0
 80064e8:	eb43 0501 	adc.w	r5, r3, r1
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	685b      	ldr	r3, [r3, #4]
 80064f0:	461a      	mov	r2, r3
 80064f2:	f04f 0300 	mov.w	r3, #0
 80064f6:	4620      	mov	r0, r4
 80064f8:	4629      	mov	r1, r5
 80064fa:	f7f9 ff49 	bl	8000390 <__aeabi_uldivmod>
 80064fe:	4602      	mov	r2, r0
 8006500:	460b      	mov	r3, r1
 8006502:	4613      	mov	r3, r2
 8006504:	62bb      	str	r3, [r7, #40]	; 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006506:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006508:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800650c:	d308      	bcc.n	8006520 <UART_SetConfig+0x784>
 800650e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006510:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006514:	d204      	bcs.n	8006520 <UART_SetConfig+0x784>
        {
          huart->Instance->BRR = usartdiv;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800651c:	60da      	str	r2, [r3, #12]
 800651e:	e180      	b.n	8006822 <UART_SetConfig+0xa86>
        }
        else
        {
          ret = HAL_ERROR;
 8006520:	2301      	movs	r3, #1
 8006522:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 8006526:	e17c      	b.n	8006822 <UART_SetConfig+0xa86>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	69db      	ldr	r3, [r3, #28]
 800652c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006530:	f040 80bf 	bne.w	80066b2 <UART_SetConfig+0x916>
  {
    switch (clocksource)
 8006534:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006538:	2b20      	cmp	r3, #32
 800653a:	dc49      	bgt.n	80065d0 <UART_SetConfig+0x834>
 800653c:	2b00      	cmp	r3, #0
 800653e:	db7c      	blt.n	800663a <UART_SetConfig+0x89e>
 8006540:	2b20      	cmp	r3, #32
 8006542:	d87a      	bhi.n	800663a <UART_SetConfig+0x89e>
 8006544:	a201      	add	r2, pc, #4	; (adr r2, 800654c <UART_SetConfig+0x7b0>)
 8006546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800654a:	bf00      	nop
 800654c:	080065d7 	.word	0x080065d7
 8006550:	080065df 	.word	0x080065df
 8006554:	0800663b 	.word	0x0800663b
 8006558:	0800663b 	.word	0x0800663b
 800655c:	080065e7 	.word	0x080065e7
 8006560:	0800663b 	.word	0x0800663b
 8006564:	0800663b 	.word	0x0800663b
 8006568:	0800663b 	.word	0x0800663b
 800656c:	080065f7 	.word	0x080065f7
 8006570:	0800663b 	.word	0x0800663b
 8006574:	0800663b 	.word	0x0800663b
 8006578:	0800663b 	.word	0x0800663b
 800657c:	0800663b 	.word	0x0800663b
 8006580:	0800663b 	.word	0x0800663b
 8006584:	0800663b 	.word	0x0800663b
 8006588:	0800663b 	.word	0x0800663b
 800658c:	08006607 	.word	0x08006607
 8006590:	0800663b 	.word	0x0800663b
 8006594:	0800663b 	.word	0x0800663b
 8006598:	0800663b 	.word	0x0800663b
 800659c:	0800663b 	.word	0x0800663b
 80065a0:	0800663b 	.word	0x0800663b
 80065a4:	0800663b 	.word	0x0800663b
 80065a8:	0800663b 	.word	0x0800663b
 80065ac:	0800663b 	.word	0x0800663b
 80065b0:	0800663b 	.word	0x0800663b
 80065b4:	0800663b 	.word	0x0800663b
 80065b8:	0800663b 	.word	0x0800663b
 80065bc:	0800663b 	.word	0x0800663b
 80065c0:	0800663b 	.word	0x0800663b
 80065c4:	0800663b 	.word	0x0800663b
 80065c8:	0800663b 	.word	0x0800663b
 80065cc:	0800662d 	.word	0x0800662d
 80065d0:	2b40      	cmp	r3, #64	; 0x40
 80065d2:	d02e      	beq.n	8006632 <UART_SetConfig+0x896>
 80065d4:	e031      	b.n	800663a <UART_SetConfig+0x89e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80065d6:	f7fd fc4d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 80065da:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065dc:	e033      	b.n	8006646 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80065de:	f7fd fc5f 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 80065e2:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 80065e4:	e02f      	b.n	8006646 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80065e6:	f107 0314 	add.w	r3, r7, #20
 80065ea:	4618      	mov	r0, r3
 80065ec:	f7fe fbc4 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80065f0:	69bb      	ldr	r3, [r7, #24]
 80065f2:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80065f4:	e027      	b.n	8006646 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80065f6:	f107 0308 	add.w	r3, r7, #8
 80065fa:	4618      	mov	r0, r3
 80065fc:	f7fe fd10 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006604:	e01f      	b.n	8006646 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006606:	4b58      	ldr	r3, [pc, #352]	; (8006768 <UART_SetConfig+0x9cc>)
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	f003 0320 	and.w	r3, r3, #32
 800660e:	2b00      	cmp	r3, #0
 8006610:	d009      	beq.n	8006626 <UART_SetConfig+0x88a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8006612:	4b55      	ldr	r3, [pc, #340]	; (8006768 <UART_SetConfig+0x9cc>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	08db      	lsrs	r3, r3, #3
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	4a53      	ldr	r2, [pc, #332]	; (800676c <UART_SetConfig+0x9d0>)
 800661e:	fa22 f303 	lsr.w	r3, r2, r3
 8006622:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8006624:	e00f      	b.n	8006646 <UART_SetConfig+0x8aa>
          pclk = (uint32_t) HSI_VALUE;
 8006626:	4b51      	ldr	r3, [pc, #324]	; (800676c <UART_SetConfig+0x9d0>)
 8006628:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 800662a:	e00c      	b.n	8006646 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800662c:	4b4c      	ldr	r3, [pc, #304]	; (8006760 <UART_SetConfig+0x9c4>)
 800662e:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006630:	e009      	b.n	8006646 <UART_SetConfig+0x8aa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006632:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006636:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006638:	e005      	b.n	8006646 <UART_SetConfig+0x8aa>
      default:
        pclk = 0U;
 800663a:	2300      	movs	r3, #0
 800663c:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 800663e:	2301      	movs	r3, #1
 8006640:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 8006644:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006646:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006648:	2b00      	cmp	r3, #0
 800664a:	f000 80ea 	beq.w	8006822 <UART_SetConfig+0xa86>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006652:	4a44      	ldr	r2, [pc, #272]	; (8006764 <UART_SetConfig+0x9c8>)
 8006654:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006658:	461a      	mov	r2, r3
 800665a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800665c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006660:	005a      	lsls	r2, r3, #1
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	685b      	ldr	r3, [r3, #4]
 8006666:	085b      	lsrs	r3, r3, #1
 8006668:	441a      	add	r2, r3
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	fbb2 f3f3 	udiv	r3, r2, r3
 8006672:	b29b      	uxth	r3, r3
 8006674:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006676:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006678:	2b0f      	cmp	r3, #15
 800667a:	d916      	bls.n	80066aa <UART_SetConfig+0x90e>
 800667c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800667e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006682:	d212      	bcs.n	80066aa <UART_SetConfig+0x90e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006684:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006686:	b29b      	uxth	r3, r3
 8006688:	f023 030f 	bic.w	r3, r3, #15
 800668c:	84fb      	strh	r3, [r7, #38]	; 0x26
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800668e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006690:	085b      	lsrs	r3, r3, #1
 8006692:	b29b      	uxth	r3, r3
 8006694:	f003 0307 	and.w	r3, r3, #7
 8006698:	b29a      	uxth	r2, r3
 800669a:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 800669c:	4313      	orrs	r3, r2
 800669e:	84fb      	strh	r3, [r7, #38]	; 0x26
        huart->Instance->BRR = brrtemp;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	681b      	ldr	r3, [r3, #0]
 80066a4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80066a6:	60da      	str	r2, [r3, #12]
 80066a8:	e0bb      	b.n	8006822 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 80066aa:	2301      	movs	r3, #1
 80066ac:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
 80066b0:	e0b7      	b.n	8006822 <UART_SetConfig+0xa86>
      }
    }
  }
  else
  {
    switch (clocksource)
 80066b2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80066b6:	2b20      	cmp	r3, #32
 80066b8:	dc4a      	bgt.n	8006750 <UART_SetConfig+0x9b4>
 80066ba:	2b00      	cmp	r3, #0
 80066bc:	f2c0 8086 	blt.w	80067cc <UART_SetConfig+0xa30>
 80066c0:	2b20      	cmp	r3, #32
 80066c2:	f200 8083 	bhi.w	80067cc <UART_SetConfig+0xa30>
 80066c6:	a201      	add	r2, pc, #4	; (adr r2, 80066cc <UART_SetConfig+0x930>)
 80066c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80066cc:	08006757 	.word	0x08006757
 80066d0:	08006771 	.word	0x08006771
 80066d4:	080067cd 	.word	0x080067cd
 80066d8:	080067cd 	.word	0x080067cd
 80066dc:	08006779 	.word	0x08006779
 80066e0:	080067cd 	.word	0x080067cd
 80066e4:	080067cd 	.word	0x080067cd
 80066e8:	080067cd 	.word	0x080067cd
 80066ec:	08006789 	.word	0x08006789
 80066f0:	080067cd 	.word	0x080067cd
 80066f4:	080067cd 	.word	0x080067cd
 80066f8:	080067cd 	.word	0x080067cd
 80066fc:	080067cd 	.word	0x080067cd
 8006700:	080067cd 	.word	0x080067cd
 8006704:	080067cd 	.word	0x080067cd
 8006708:	080067cd 	.word	0x080067cd
 800670c:	08006799 	.word	0x08006799
 8006710:	080067cd 	.word	0x080067cd
 8006714:	080067cd 	.word	0x080067cd
 8006718:	080067cd 	.word	0x080067cd
 800671c:	080067cd 	.word	0x080067cd
 8006720:	080067cd 	.word	0x080067cd
 8006724:	080067cd 	.word	0x080067cd
 8006728:	080067cd 	.word	0x080067cd
 800672c:	080067cd 	.word	0x080067cd
 8006730:	080067cd 	.word	0x080067cd
 8006734:	080067cd 	.word	0x080067cd
 8006738:	080067cd 	.word	0x080067cd
 800673c:	080067cd 	.word	0x080067cd
 8006740:	080067cd 	.word	0x080067cd
 8006744:	080067cd 	.word	0x080067cd
 8006748:	080067cd 	.word	0x080067cd
 800674c:	080067bf 	.word	0x080067bf
 8006750:	2b40      	cmp	r3, #64	; 0x40
 8006752:	d037      	beq.n	80067c4 <UART_SetConfig+0xa28>
 8006754:	e03a      	b.n	80067cc <UART_SetConfig+0xa30>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006756:	f7fd fb8d 	bl	8003e74 <HAL_RCC_GetPCLK1Freq>
 800675a:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 800675c:	e03c      	b.n	80067d8 <UART_SetConfig+0xa3c>
 800675e:	bf00      	nop
 8006760:	003d0900 	.word	0x003d0900
 8006764:	08008518 	.word	0x08008518
 8006768:	58024400 	.word	0x58024400
 800676c:	03d09000 	.word	0x03d09000
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006770:	f7fd fb96 	bl	8003ea0 <HAL_RCC_GetPCLK2Freq>
 8006774:	62f8      	str	r0, [r7, #44]	; 0x2c
        break;
 8006776:	e02f      	b.n	80067d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8006778:	f107 0314 	add.w	r3, r7, #20
 800677c:	4618      	mov	r0, r3
 800677e:	f7fe fafb 	bl	8004d78 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8006782:	69bb      	ldr	r3, [r7, #24]
 8006784:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006786:	e027      	b.n	80067d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8006788:	f107 0308 	add.w	r3, r7, #8
 800678c:	4618      	mov	r0, r3
 800678e:	f7fe fc47 	bl	8005020 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8006792:	68fb      	ldr	r3, [r7, #12]
 8006794:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 8006796:	e01f      	b.n	80067d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006798:	4b2c      	ldr	r3, [pc, #176]	; (800684c <UART_SetConfig+0xab0>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	f003 0320 	and.w	r3, r3, #32
 80067a0:	2b00      	cmp	r3, #0
 80067a2:	d009      	beq.n	80067b8 <UART_SetConfig+0xa1c>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80067a4:	4b29      	ldr	r3, [pc, #164]	; (800684c <UART_SetConfig+0xab0>)
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	08db      	lsrs	r3, r3, #3
 80067aa:	f003 0303 	and.w	r3, r3, #3
 80067ae:	4a28      	ldr	r2, [pc, #160]	; (8006850 <UART_SetConfig+0xab4>)
 80067b0:	fa22 f303 	lsr.w	r3, r2, r3
 80067b4:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80067b6:	e00f      	b.n	80067d8 <UART_SetConfig+0xa3c>
          pclk = (uint32_t) HSI_VALUE;
 80067b8:	4b25      	ldr	r3, [pc, #148]	; (8006850 <UART_SetConfig+0xab4>)
 80067ba:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067bc:	e00c      	b.n	80067d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80067be:	4b25      	ldr	r3, [pc, #148]	; (8006854 <UART_SetConfig+0xab8>)
 80067c0:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067c2:	e009      	b.n	80067d8 <UART_SetConfig+0xa3c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80067c4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80067c8:	62fb      	str	r3, [r7, #44]	; 0x2c
        break;
 80067ca:	e005      	b.n	80067d8 <UART_SetConfig+0xa3c>
      default:
        pclk = 0U;
 80067cc:	2300      	movs	r3, #0
 80067ce:	62fb      	str	r3, [r7, #44]	; 0x2c
        ret = HAL_ERROR;
 80067d0:	2301      	movs	r3, #1
 80067d2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
        break;
 80067d6:	bf00      	nop
    }

    if (pclk != 0U)
 80067d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d021      	beq.n	8006822 <UART_SetConfig+0xa86>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80067e2:	4a1d      	ldr	r2, [pc, #116]	; (8006858 <UART_SetConfig+0xabc>)
 80067e4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067e8:	461a      	mov	r2, r3
 80067ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80067ec:	fbb3 f2f2 	udiv	r2, r3, r2
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	085b      	lsrs	r3, r3, #1
 80067f6:	441a      	add	r2, r3
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	685b      	ldr	r3, [r3, #4]
 80067fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8006800:	b29b      	uxth	r3, r3
 8006802:	62bb      	str	r3, [r7, #40]	; 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006804:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006806:	2b0f      	cmp	r3, #15
 8006808:	d908      	bls.n	800681c <UART_SetConfig+0xa80>
 800680a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800680c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006810:	d204      	bcs.n	800681c <UART_SetConfig+0xa80>
      {
        huart->Instance->BRR = usartdiv;
 8006812:	687b      	ldr	r3, [r7, #4]
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006818:	60da      	str	r2, [r3, #12]
 800681a:	e002      	b.n	8006822 <UART_SetConfig+0xa86>
      }
      else
      {
        ret = HAL_ERROR;
 800681c:	2301      	movs	r3, #1
 800681e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	2201      	movs	r2, #1
 8006826:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	2201      	movs	r2, #1
 800682e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2200      	movs	r2, #0
 8006836:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	2200      	movs	r2, #0
 800683c:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 800683e:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
}
 8006842:	4618      	mov	r0, r3
 8006844:	3738      	adds	r7, #56	; 0x38
 8006846:	46bd      	mov	sp, r7
 8006848:	bdb0      	pop	{r4, r5, r7, pc}
 800684a:	bf00      	nop
 800684c:	58024400 	.word	0x58024400
 8006850:	03d09000 	.word	0x03d09000
 8006854:	003d0900 	.word	0x003d0900
 8006858:	08008518 	.word	0x08008518

0800685c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800685c:	b480      	push	{r7}
 800685e:	b083      	sub	sp, #12
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006864:	687b      	ldr	r3, [r7, #4]
 8006866:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006868:	f003 0301 	and.w	r3, r3, #1
 800686c:	2b00      	cmp	r3, #0
 800686e:	d00a      	beq.n	8006886 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	685b      	ldr	r3, [r3, #4]
 8006876:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	430a      	orrs	r2, r1
 8006884:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800688a:	f003 0302 	and.w	r3, r3, #2
 800688e:	2b00      	cmp	r3, #0
 8006890:	d00a      	beq.n	80068a8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	685b      	ldr	r3, [r3, #4]
 8006898:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	430a      	orrs	r2, r1
 80068a6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ac:	f003 0304 	and.w	r3, r3, #4
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d00a      	beq.n	80068ca <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685b      	ldr	r3, [r3, #4]
 80068ba:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	430a      	orrs	r2, r1
 80068c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068ce:	f003 0308 	and.w	r3, r3, #8
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d00a      	beq.n	80068ec <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	685b      	ldr	r3, [r3, #4]
 80068dc:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	681b      	ldr	r3, [r3, #0]
 80068e8:	430a      	orrs	r2, r1
 80068ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80068f0:	f003 0310 	and.w	r3, r3, #16
 80068f4:	2b00      	cmp	r3, #0
 80068f6:	d00a      	beq.n	800690e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	430a      	orrs	r2, r1
 800690c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006912:	f003 0320 	and.w	r3, r3, #32
 8006916:	2b00      	cmp	r3, #0
 8006918:	d00a      	beq.n	8006930 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	689b      	ldr	r3, [r3, #8]
 8006920:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	430a      	orrs	r2, r1
 800692e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006938:	2b00      	cmp	r3, #0
 800693a:	d01a      	beq.n	8006972 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	681b      	ldr	r3, [r3, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	430a      	orrs	r2, r1
 8006950:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006956:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800695a:	d10a      	bne.n	8006972 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800695c:	687b      	ldr	r3, [r7, #4]
 800695e:	681b      	ldr	r3, [r3, #0]
 8006960:	685b      	ldr	r3, [r3, #4]
 8006962:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	430a      	orrs	r2, r1
 8006970:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006976:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800697a:	2b00      	cmp	r3, #0
 800697c:	d00a      	beq.n	8006994 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	685b      	ldr	r3, [r3, #4]
 8006984:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	430a      	orrs	r2, r1
 8006992:	605a      	str	r2, [r3, #4]
  }
}
 8006994:	bf00      	nop
 8006996:	370c      	adds	r7, #12
 8006998:	46bd      	mov	sp, r7
 800699a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699e:	4770      	bx	lr

080069a0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80069a0:	b580      	push	{r7, lr}
 80069a2:	b086      	sub	sp, #24
 80069a4:	af02      	add	r7, sp, #8
 80069a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069a8:	687b      	ldr	r3, [r7, #4]
 80069aa:	2200      	movs	r2, #0
 80069ac:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80069b0:	f7fa fc88 	bl	80012c4 <HAL_GetTick>
 80069b4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681b      	ldr	r3, [r3, #0]
 80069bc:	f003 0308 	and.w	r3, r3, #8
 80069c0:	2b08      	cmp	r3, #8
 80069c2:	d10e      	bne.n	80069e2 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069c8:	9300      	str	r3, [sp, #0]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	2200      	movs	r2, #0
 80069ce:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	f000 f82f 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d001      	beq.n	80069e2 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e025      	b.n	8006a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	f003 0304 	and.w	r3, r3, #4
 80069ec:	2b04      	cmp	r3, #4
 80069ee:	d10e      	bne.n	8006a0e <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80069f0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80069f4:	9300      	str	r3, [sp, #0]
 80069f6:	68fb      	ldr	r3, [r7, #12]
 80069f8:	2200      	movs	r2, #0
 80069fa:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f819 	bl	8006a36 <UART_WaitOnFlagUntilTimeout>
 8006a04:	4603      	mov	r3, r0
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d001      	beq.n	8006a0e <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006a0a:	2303      	movs	r3, #3
 8006a0c:	e00f      	b.n	8006a2e <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2220      	movs	r2, #32
 8006a12:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	2220      	movs	r2, #32
 8006a1a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	2200      	movs	r2, #0
 8006a22:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2200      	movs	r2, #0
 8006a28:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b084      	sub	sp, #16
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	60f8      	str	r0, [r7, #12]
 8006a3e:	60b9      	str	r1, [r7, #8]
 8006a40:	603b      	str	r3, [r7, #0]
 8006a42:	4613      	mov	r3, r2
 8006a44:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a46:	e062      	b.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006a48:	69bb      	ldr	r3, [r7, #24]
 8006a4a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a4e:	d05e      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a50:	f7fa fc38 	bl	80012c4 <HAL_GetTick>
 8006a54:	4602      	mov	r2, r0
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	1ad3      	subs	r3, r2, r3
 8006a5a:	69ba      	ldr	r2, [r7, #24]
 8006a5c:	429a      	cmp	r2, r3
 8006a5e:	d302      	bcc.n	8006a66 <UART_WaitOnFlagUntilTimeout+0x30>
 8006a60:	69bb      	ldr	r3, [r7, #24]
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d11d      	bne.n	8006aa2 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	681a      	ldr	r2, [r3, #0]
 8006a6c:	68fb      	ldr	r3, [r7, #12]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006a74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	689a      	ldr	r2, [r3, #8]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f022 0201 	bic.w	r2, r2, #1
 8006a84:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	2220      	movs	r2, #32
 8006a8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006a8e:	68fb      	ldr	r3, [r7, #12]
 8006a90:	2220      	movs	r2, #32
 8006a92:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006a9e:	2303      	movs	r3, #3
 8006aa0:	e045      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	f003 0304 	and.w	r3, r3, #4
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d02e      	beq.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	69db      	ldr	r3, [r3, #28]
 8006ab6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006aba:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006abe:	d126      	bne.n	8006b0e <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006ac0:	68fb      	ldr	r3, [r7, #12]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006ac8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8006aca:	68fb      	ldr	r3, [r7, #12]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	681a      	ldr	r2, [r3, #0]
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006ad8:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	689a      	ldr	r2, [r3, #8]
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f022 0201 	bic.w	r2, r2, #1
 8006ae8:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	2220      	movs	r2, #32
 8006aee:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	2220      	movs	r2, #32
 8006af6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2220      	movs	r2, #32
 8006afe:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	2200      	movs	r2, #0
 8006b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006b0a:	2303      	movs	r3, #3
 8006b0c:	e00f      	b.n	8006b2e <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	69da      	ldr	r2, [r3, #28]
 8006b14:	68bb      	ldr	r3, [r7, #8]
 8006b16:	4013      	ands	r3, r2
 8006b18:	68ba      	ldr	r2, [r7, #8]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	bf0c      	ite	eq
 8006b1e:	2301      	moveq	r3, #1
 8006b20:	2300      	movne	r3, #0
 8006b22:	b2db      	uxtb	r3, r3
 8006b24:	461a      	mov	r2, r3
 8006b26:	79fb      	ldrb	r3, [r7, #7]
 8006b28:	429a      	cmp	r2, r3
 8006b2a:	d08d      	beq.n	8006a48 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006b2c:	2300      	movs	r3, #0
}
 8006b2e:	4618      	mov	r0, r3
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
	...

08006b38 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006b38:	b480      	push	{r7}
 8006b3a:	b085      	sub	sp, #20
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	60f8      	str	r0, [r7, #12]
 8006b40:	60b9      	str	r1, [r7, #8]
 8006b42:	4613      	mov	r3, r2
 8006b44:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006b46:	68fb      	ldr	r3, [r7, #12]
 8006b48:	68ba      	ldr	r2, [r7, #8]
 8006b4a:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	88fa      	ldrh	r2, [r7, #6]
 8006b50:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	88fa      	ldrh	r2, [r7, #6]
 8006b58:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006b6a:	d10e      	bne.n	8006b8a <UART_Start_Receive_IT+0x52>
 8006b6c:	68fb      	ldr	r3, [r7, #12]
 8006b6e:	691b      	ldr	r3, [r3, #16]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	d105      	bne.n	8006b80 <UART_Start_Receive_IT+0x48>
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006b7a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b7e:	e02d      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006b80:	68fb      	ldr	r3, [r7, #12]
 8006b82:	22ff      	movs	r2, #255	; 0xff
 8006b84:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006b88:	e028      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	689b      	ldr	r3, [r3, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d10d      	bne.n	8006bae <UART_Start_Receive_IT+0x76>
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	691b      	ldr	r3, [r3, #16]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d104      	bne.n	8006ba4 <UART_Start_Receive_IT+0x6c>
 8006b9a:	68fb      	ldr	r3, [r7, #12]
 8006b9c:	22ff      	movs	r2, #255	; 0xff
 8006b9e:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ba2:	e01b      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006ba4:	68fb      	ldr	r3, [r7, #12]
 8006ba6:	227f      	movs	r2, #127	; 0x7f
 8006ba8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bac:	e016      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006bb6:	d10d      	bne.n	8006bd4 <UART_Start_Receive_IT+0x9c>
 8006bb8:	68fb      	ldr	r3, [r7, #12]
 8006bba:	691b      	ldr	r3, [r3, #16]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d104      	bne.n	8006bca <UART_Start_Receive_IT+0x92>
 8006bc0:	68fb      	ldr	r3, [r7, #12]
 8006bc2:	227f      	movs	r2, #127	; 0x7f
 8006bc4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bc8:	e008      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	223f      	movs	r2, #63	; 0x3f
 8006bce:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006bd2:	e003      	b.n	8006bdc <UART_Start_Receive_IT+0xa4>
 8006bd4:	68fb      	ldr	r3, [r7, #12]
 8006bd6:	2200      	movs	r2, #0
 8006bd8:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006bdc:	68fb      	ldr	r3, [r7, #12]
 8006bde:	2200      	movs	r2, #0
 8006be0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	2222      	movs	r2, #34	; 0x22
 8006be8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	681b      	ldr	r3, [r3, #0]
 8006bf0:	689a      	ldr	r2, [r3, #8]
 8006bf2:	68fb      	ldr	r3, [r7, #12]
 8006bf4:	681b      	ldr	r3, [r3, #0]
 8006bf6:	f042 0201 	orr.w	r2, r2, #1
 8006bfa:	609a      	str	r2, [r3, #8]

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006c00:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006c04:	d12a      	bne.n	8006c5c <UART_Start_Receive_IT+0x124>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006c0c:	88fa      	ldrh	r2, [r7, #6]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d324      	bcc.n	8006c5c <UART_Start_Receive_IT+0x124>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	689b      	ldr	r3, [r3, #8]
 8006c16:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c1a:	d107      	bne.n	8006c2c <UART_Start_Receive_IT+0xf4>
 8006c1c:	68fb      	ldr	r3, [r7, #12]
 8006c1e:	691b      	ldr	r3, [r3, #16]
 8006c20:	2b00      	cmp	r3, #0
 8006c22:	d103      	bne.n	8006c2c <UART_Start_Receive_IT+0xf4>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	4a1f      	ldr	r2, [pc, #124]	; (8006ca4 <UART_Start_Receive_IT+0x16c>)
 8006c28:	671a      	str	r2, [r3, #112]	; 0x70
 8006c2a:	e002      	b.n	8006c32 <UART_Start_Receive_IT+0xfa>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006c2c:	68fb      	ldr	r3, [r7, #12]
 8006c2e:	4a1e      	ldr	r2, [pc, #120]	; (8006ca8 <UART_Start_Receive_IT+0x170>)
 8006c30:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2200      	movs	r2, #0
 8006c36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	681a      	ldr	r2, [r3, #0]
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c48:	601a      	str	r2, [r3, #0]
    SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006c4a:	68fb      	ldr	r3, [r7, #12]
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	689a      	ldr	r2, [r3, #8]
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006c58:	609a      	str	r2, [r3, #8]
 8006c5a:	e01b      	b.n	8006c94 <UART_Start_Receive_IT+0x15c>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	689b      	ldr	r3, [r3, #8]
 8006c60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c64:	d107      	bne.n	8006c76 <UART_Start_Receive_IT+0x13e>
 8006c66:	68fb      	ldr	r3, [r7, #12]
 8006c68:	691b      	ldr	r3, [r3, #16]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d103      	bne.n	8006c76 <UART_Start_Receive_IT+0x13e>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	4a0e      	ldr	r2, [pc, #56]	; (8006cac <UART_Start_Receive_IT+0x174>)
 8006c72:	671a      	str	r2, [r3, #112]	; 0x70
 8006c74:	e002      	b.n	8006c7c <UART_Start_Receive_IT+0x144>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8006c76:	68fb      	ldr	r3, [r7, #12]
 8006c78:	4a0d      	ldr	r2, [pc, #52]	; (8006cb0 <UART_Start_Receive_IT+0x178>)
 8006c7a:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681a      	ldr	r2, [r3, #0]
 8006c8a:	68fb      	ldr	r3, [r7, #12]
 8006c8c:	681b      	ldr	r3, [r3, #0]
 8006c8e:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8006c92:	601a      	str	r2, [r3, #0]
  }
  return HAL_OK;
 8006c94:	2300      	movs	r3, #0
}
 8006c96:	4618      	mov	r0, r3
 8006c98:	3714      	adds	r7, #20
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ca0:	4770      	bx	lr
 8006ca2:	bf00      	nop
 8006ca4:	0800712d 	.word	0x0800712d
 8006ca8:	08006f29 	.word	0x08006f29
 8006cac:	08006e51 	.word	0x08006e51
 8006cb0:	08006d79 	.word	0x08006d79

08006cb4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006cb4:	b480      	push	{r7}
 8006cb6:	b083      	sub	sp, #12
 8006cb8:	af00      	add	r7, sp, #0
 8006cba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006cca:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	6899      	ldr	r1, [r3, #8]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4b0f      	ldr	r3, [pc, #60]	; (8006d14 <UART_EndRxTransfer+0x60>)
 8006cd8:	400b      	ands	r3, r1
 8006cda:	6093      	str	r3, [r2, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	d107      	bne.n	8006cf4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681a      	ldr	r2, [r3, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	f022 0210 	bic.w	r2, r2, #16
 8006cf2:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2220      	movs	r2, #32
 8006cf8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	2200      	movs	r2, #0
 8006d00:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2200      	movs	r2, #0
 8006d06:	671a      	str	r2, [r3, #112]	; 0x70
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr
 8006d14:	effffffe 	.word	0xeffffffe

08006d18 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006d18:	b580      	push	{r7, lr}
 8006d1a:	b084      	sub	sp, #16
 8006d1c:	af00      	add	r7, sp, #0
 8006d1e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d24:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	2200      	movs	r2, #0
 8006d2a:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	2200      	movs	r2, #0
 8006d32:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f7ff f81a 	bl	8005d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d3c:	bf00      	nop
 8006d3e:	3710      	adds	r7, #16
 8006d40:	46bd      	mov	sp, r7
 8006d42:	bd80      	pop	{r7, pc}

08006d44 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006d44:	b580      	push	{r7, lr}
 8006d46:	b082      	sub	sp, #8
 8006d48:	af00      	add	r7, sp, #0
 8006d4a:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	681a      	ldr	r2, [r3, #0]
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006d5a:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	2220      	movs	r2, #32
 8006d60:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	2200      	movs	r2, #0
 8006d68:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fe fff6 	bl	8005d5c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006d70:	bf00      	nop
 8006d72:	3708      	adds	r7, #8
 8006d74:	46bd      	mov	sp, r7
 8006d76:	bd80      	pop	{r7, pc}

08006d78 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8006d78:	b580      	push	{r7, lr}
 8006d7a:	b084      	sub	sp, #16
 8006d7c:	af00      	add	r7, sp, #0
 8006d7e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006d86:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006d8e:	2b22      	cmp	r3, #34	; 0x22
 8006d90:	d152      	bne.n	8006e38 <UART_RxISR_8BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d98:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006d9a:	89bb      	ldrh	r3, [r7, #12]
 8006d9c:	b2d9      	uxtb	r1, r3
 8006d9e:	89fb      	ldrh	r3, [r7, #14]
 8006da0:	b2da      	uxtb	r2, r3
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006da6:	400a      	ands	r2, r1
 8006da8:	b2d2      	uxtb	r2, r2
 8006daa:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006db0:	1c5a      	adds	r2, r3, #1
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dbc:	b29b      	uxth	r3, r3
 8006dbe:	3b01      	subs	r3, #1
 8006dc0:	b29a      	uxth	r2, r3
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006dce:	b29b      	uxth	r3, r3
 8006dd0:	2b00      	cmp	r3, #0
 8006dd2:	d139      	bne.n	8006e48 <UART_RxISR_8BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681a      	ldr	r2, [r3, #0]
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006de2:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	689a      	ldr	r2, [r3, #8]
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	f022 0201 	bic.w	r2, r2, #1
 8006df2:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2220      	movs	r2, #32
 8006df8:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	2200      	movs	r2, #0
 8006e00:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10f      	bne.n	8006e2a <UART_RxISR_8BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f022 0210 	bic.w	r2, r2, #16
 8006e18:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7fe ffae 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
 8006e28:	e002      	b.n	8006e30 <UART_RxISR_8BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006e2a:	6878      	ldr	r0, [r7, #4]
 8006e2c:	f7f9 fe4c 	bl	8000ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	2200      	movs	r2, #0
 8006e34:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006e36:	e007      	b.n	8006e48 <UART_RxISR_8BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	699a      	ldr	r2, [r3, #24]
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	f042 0208 	orr.w	r2, r2, #8
 8006e46:	619a      	str	r2, [r3, #24]
}
 8006e48:	bf00      	nop
 8006e4a:	3710      	adds	r7, #16
 8006e4c:	46bd      	mov	sp, r7
 8006e4e:	bd80      	pop	{r7, pc}

08006e50 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b084      	sub	sp, #16
 8006e54:	af00      	add	r7, sp, #0
 8006e56:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006e5e:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e66:	2b22      	cmp	r3, #34	; 0x22
 8006e68:	d152      	bne.n	8006f10 <UART_RxISR_16BIT+0xc0>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006e70:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e76:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 8006e78:	89ba      	ldrh	r2, [r7, #12]
 8006e7a:	89fb      	ldrh	r3, [r7, #14]
 8006e7c:	4013      	ands	r3, r2
 8006e7e:	b29a      	uxth	r2, r3
 8006e80:	68bb      	ldr	r3, [r7, #8]
 8006e82:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8006e84:	687b      	ldr	r3, [r7, #4]
 8006e86:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006e88:	1c9a      	adds	r2, r3, #2
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006e94:	b29b      	uxth	r3, r3
 8006e96:	3b01      	subs	r3, #1
 8006e98:	b29a      	uxth	r2, r3
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006ea6:	b29b      	uxth	r3, r3
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d139      	bne.n	8006f20 <UART_RxISR_16BIT+0xd0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8006eba:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	689a      	ldr	r2, [r3, #8]
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0201 	bic.w	r2, r2, #1
 8006eca:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	2220      	movs	r2, #32
 8006ed0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	2200      	movs	r2, #0
 8006ed8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006ede:	2b01      	cmp	r3, #1
 8006ee0:	d10f      	bne.n	8006f02 <UART_RxISR_16BIT+0xb2>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	681a      	ldr	r2, [r3, #0]
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	f022 0210 	bic.w	r2, r2, #16
 8006ef0:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006ef8:	4619      	mov	r1, r3
 8006efa:	6878      	ldr	r0, [r7, #4]
 8006efc:	f7fe ff42 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
 8006f00:	e002      	b.n	8006f08 <UART_RxISR_16BIT+0xb8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006f02:	6878      	ldr	r0, [r7, #4]
 8006f04:	f7f9 fde0 	bl	8000ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	2200      	movs	r2, #0
 8006f0c:	66da      	str	r2, [r3, #108]	; 0x6c
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8006f0e:	e007      	b.n	8006f20 <UART_RxISR_16BIT+0xd0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	699a      	ldr	r2, [r3, #24]
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f042 0208 	orr.w	r2, r2, #8
 8006f1e:	619a      	str	r2, [r3, #24]
}
 8006f20:	bf00      	nop
 8006f22:	3710      	adds	r7, #16
 8006f24:	46bd      	mov	sp, r7
 8006f26:	bd80      	pop	{r7, pc}

08006f28 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8006f28:	b580      	push	{r7, lr}
 8006f2a:	b088      	sub	sp, #32
 8006f2c:	af00      	add	r7, sp, #0
 8006f2e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8006f36:	837b      	strh	r3, [r7, #26]
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	69db      	ldr	r3, [r3, #28]
 8006f3e:	61fb      	str	r3, [r7, #28]
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	681b      	ldr	r3, [r3, #0]
 8006f44:	681b      	ldr	r3, [r3, #0]
 8006f46:	617b      	str	r3, [r7, #20]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	681b      	ldr	r3, [r3, #0]
 8006f4c:	689b      	ldr	r3, [r3, #8]
 8006f4e:	613b      	str	r3, [r7, #16]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006f56:	2b22      	cmp	r3, #34	; 0x22
 8006f58:	f040 80d8 	bne.w	800710c <UART_RxISR_8BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f62:	81fb      	strh	r3, [r7, #14]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8006f64:	e0a8      	b.n	80070b8 <UART_RxISR_8BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6c:	81bb      	strh	r3, [r7, #12]
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8006f6e:	89bb      	ldrh	r3, [r7, #12]
 8006f70:	b2d9      	uxtb	r1, r3
 8006f72:	8b7b      	ldrh	r3, [r7, #26]
 8006f74:	b2da      	uxtb	r2, r3
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f7a:	400a      	ands	r2, r1
 8006f7c:	b2d2      	uxtb	r2, r2
 8006f7e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006f84:	1c5a      	adds	r2, r3, #1
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8006f8a:	687b      	ldr	r3, [r7, #4]
 8006f8c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8006f90:	b29b      	uxth	r3, r3
 8006f92:	3b01      	subs	r3, #1
 8006f94:	b29a      	uxth	r2, r3
 8006f96:	687b      	ldr	r3, [r7, #4]
 8006f98:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	69db      	ldr	r3, [r3, #28]
 8006fa2:	61fb      	str	r3, [r7, #28]

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8006fa4:	69fb      	ldr	r3, [r7, #28]
 8006fa6:	f003 0307 	and.w	r3, r3, #7
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	d04d      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006fae:	69fb      	ldr	r3, [r7, #28]
 8006fb0:	f003 0301 	and.w	r3, r3, #1
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d010      	beq.n	8006fda <UART_RxISR_8BIT_FIFOEN+0xb2>
 8006fb8:	697b      	ldr	r3, [r7, #20]
 8006fba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d00b      	beq.n	8006fda <UART_RxISR_8BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	2201      	movs	r2, #1
 8006fc8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006fd0:	f043 0201 	orr.w	r2, r3, #1
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006fda:	69fb      	ldr	r3, [r7, #28]
 8006fdc:	f003 0302 	and.w	r3, r3, #2
 8006fe0:	2b00      	cmp	r3, #0
 8006fe2:	d010      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xde>
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	f003 0301 	and.w	r3, r3, #1
 8006fea:	2b00      	cmp	r3, #0
 8006fec:	d00b      	beq.n	8007006 <UART_RxISR_8BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	2202      	movs	r2, #2
 8006ff4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007006:	69fb      	ldr	r3, [r7, #28]
 8007008:	f003 0304 	and.w	r3, r3, #4
 800700c:	2b00      	cmp	r3, #0
 800700e:	d010      	beq.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x10a>
 8007010:	693b      	ldr	r3, [r7, #16]
 8007012:	f003 0301 	and.w	r3, r3, #1
 8007016:	2b00      	cmp	r3, #0
 8007018:	d00b      	beq.n	8007032 <UART_RxISR_8BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	2204      	movs	r2, #4
 8007020:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007028:	f043 0202 	orr.w	r2, r3, #2
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007032:	687b      	ldr	r3, [r7, #4]
 8007034:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007038:	2b00      	cmp	r3, #0
 800703a:	d006      	beq.n	800704a <UART_RxISR_8BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800703c:	6878      	ldr	r0, [r7, #4]
 800703e:	f7fe fe97 	bl	8005d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	2200      	movs	r2, #0
 8007046:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800704a:	687b      	ldr	r3, [r7, #4]
 800704c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007050:	b29b      	uxth	r3, r3
 8007052:	2b00      	cmp	r3, #0
 8007054:	d130      	bne.n	80070b8 <UART_RxISR_8BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007056:	687b      	ldr	r3, [r7, #4]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	681a      	ldr	r2, [r3, #0]
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007064:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	6899      	ldr	r1, [r3, #8]
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	681a      	ldr	r2, [r3, #0]
 8007070:	4b2c      	ldr	r3, [pc, #176]	; (8007124 <UART_RxISR_8BIT_FIFOEN+0x1fc>)
 8007072:	400b      	ands	r3, r1
 8007074:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	2220      	movs	r2, #32
 800707a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2200      	movs	r2, #0
 8007082:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007088:	2b01      	cmp	r3, #1
 800708a:	d10f      	bne.n	80070ac <UART_RxISR_8BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	f022 0210 	bic.w	r2, r2, #16
 800709a:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe fe6d 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
 80070aa:	e002      	b.n	80070b2 <UART_RxISR_8BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80070ac:	6878      	ldr	r0, [r7, #4]
 80070ae:	f7f9 fd0b 	bl	8000ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	2200      	movs	r2, #0
 80070b6:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80070b8:	89fb      	ldrh	r3, [r7, #14]
 80070ba:	2b00      	cmp	r3, #0
 80070bc:	d005      	beq.n	80070ca <UART_RxISR_8BIT_FIFOEN+0x1a2>
 80070be:	69fb      	ldr	r3, [r7, #28]
 80070c0:	f003 0320 	and.w	r3, r3, #32
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	f47f af4e 	bne.w	8006f66 <UART_RxISR_8BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80070d0:	817b      	strh	r3, [r7, #10]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80070d2:	897b      	ldrh	r3, [r7, #10]
 80070d4:	2b00      	cmp	r3, #0
 80070d6:	d021      	beq.n	800711c <UART_RxISR_8BIT_FIFOEN+0x1f4>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80070de:	897a      	ldrh	r2, [r7, #10]
 80070e0:	429a      	cmp	r2, r3
 80070e2:	d21b      	bcs.n	800711c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	681b      	ldr	r3, [r3, #0]
 80070e8:	689a      	ldr	r2, [r3, #8]
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80070f2:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	4a0c      	ldr	r2, [pc, #48]	; (8007128 <UART_RxISR_8BIT_FIFOEN+0x200>)
 80070f8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	681a      	ldr	r2, [r3, #0]
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f042 0220 	orr.w	r2, r2, #32
 8007108:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800710a:	e007      	b.n	800711c <UART_RxISR_8BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	699a      	ldr	r2, [r3, #24]
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	f042 0208 	orr.w	r2, r2, #8
 800711a:	619a      	str	r2, [r3, #24]
}
 800711c:	bf00      	nop
 800711e:	3720      	adds	r7, #32
 8007120:	46bd      	mov	sp, r7
 8007122:	bd80      	pop	{r7, pc}
 8007124:	effffffe 	.word	0xeffffffe
 8007128:	08006d79 	.word	0x08006d79

0800712c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800712c:	b580      	push	{r7, lr}
 800712e:	b08a      	sub	sp, #40	; 0x28
 8007130:	af00      	add	r7, sp, #0
 8007132:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800713a:	847b      	strh	r3, [r7, #34]	; 0x22
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	61fb      	str	r3, [r7, #28]
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	689b      	ldr	r3, [r3, #8]
 8007152:	61bb      	str	r3, [r7, #24]

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800715a:	2b22      	cmp	r3, #34	; 0x22
 800715c:	f040 80d8 	bne.w	8007310 <UART_RxISR_16BIT_FIFOEN+0x1e4>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007166:	82fb      	strh	r3, [r7, #22]
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007168:	e0a8      	b.n	80072bc <UART_RxISR_16BIT_FIFOEN+0x190>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007170:	82bb      	strh	r3, [r7, #20]
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007176:	613b      	str	r3, [r7, #16]
      *tmp = (uint16_t)(uhdata & uhMask);
 8007178:	8aba      	ldrh	r2, [r7, #20]
 800717a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800717c:	4013      	ands	r3, r2
 800717e:	b29a      	uxth	r2, r3
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007188:	1c9a      	adds	r2, r3, #2
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007194:	b29b      	uxth	r3, r3
 8007196:	3b01      	subs	r3, #1
 8007198:	b29a      	uxth	r2, r3
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	69db      	ldr	r3, [r3, #28]
 80071a6:	627b      	str	r3, [r7, #36]	; 0x24

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80071a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071aa:	f003 0307 	and.w	r3, r3, #7
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d04d      	beq.n	800724e <UART_RxISR_16BIT_FIFOEN+0x122>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80071b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071b4:	f003 0301 	and.w	r3, r3, #1
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d010      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0xb2>
 80071bc:	69fb      	ldr	r3, [r7, #28]
 80071be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00b      	beq.n	80071de <UART_RxISR_16BIT_FIFOEN+0xb2>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	2201      	movs	r2, #1
 80071cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80071d4:	f043 0201 	orr.w	r2, r3, #1
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80071de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80071e0:	f003 0302 	and.w	r3, r3, #2
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d010      	beq.n	800720a <UART_RxISR_16BIT_FIFOEN+0xde>
 80071e8:	69bb      	ldr	r3, [r7, #24]
 80071ea:	f003 0301 	and.w	r3, r3, #1
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d00b      	beq.n	800720a <UART_RxISR_16BIT_FIFOEN+0xde>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2202      	movs	r2, #2
 80071f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007200:	f043 0204 	orr.w	r2, r3, #4
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800720a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800720c:	f003 0304 	and.w	r3, r3, #4
 8007210:	2b00      	cmp	r3, #0
 8007212:	d010      	beq.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x10a>
 8007214:	69bb      	ldr	r3, [r7, #24]
 8007216:	f003 0301 	and.w	r3, r3, #1
 800721a:	2b00      	cmp	r3, #0
 800721c:	d00b      	beq.n	8007236 <UART_RxISR_16BIT_FIFOEN+0x10a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	2204      	movs	r2, #4
 8007224:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800722c:	f043 0202 	orr.w	r2, r3, #2
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800723c:	2b00      	cmp	r3, #0
 800723e:	d006      	beq.n	800724e <UART_RxISR_16BIT_FIFOEN+0x122>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7fe fd95 	bl	8005d70 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	2200      	movs	r2, #0
 800724a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007254:	b29b      	uxth	r3, r3
 8007256:	2b00      	cmp	r3, #0
 8007258:	d130      	bne.n	80072bc <UART_RxISR_16BIT_FIFOEN+0x190>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	681a      	ldr	r2, [r3, #0]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007268:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	6899      	ldr	r1, [r3, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681a      	ldr	r2, [r3, #0]
 8007274:	4b2c      	ldr	r3, [pc, #176]	; (8007328 <UART_RxISR_16BIT_FIFOEN+0x1fc>)
 8007276:	400b      	ands	r3, r1
 8007278:	6093      	str	r3, [r2, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	2220      	movs	r2, #32
 800727e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800728c:	2b01      	cmp	r3, #1
 800728e:	d10f      	bne.n	80072b0 <UART_RxISR_16BIT_FIFOEN+0x184>
        {
          /* Disable IDLE interrupt */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	681a      	ldr	r2, [r3, #0]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f022 0210 	bic.w	r2, r2, #16
 800729e:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80072a6:	4619      	mov	r1, r3
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f7fe fd6b 	bl	8005d84 <HAL_UARTEx_RxEventCallback>
 80072ae:	e002      	b.n	80072b6 <UART_RxISR_16BIT_FIFOEN+0x18a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80072b0:	6878      	ldr	r0, [r7, #4]
 80072b2:	f7f9 fc09 	bl	8000ac8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        }
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	2200      	movs	r2, #0
 80072ba:	66da      	str	r2, [r3, #108]	; 0x6c
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80072bc:	8afb      	ldrh	r3, [r7, #22]
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d005      	beq.n	80072ce <UART_RxISR_16BIT_FIFOEN+0x1a2>
 80072c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80072c4:	f003 0320 	and.w	r3, r3, #32
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	f47f af4e 	bne.w	800716a <UART_RxISR_16BIT_FIFOEN+0x3e>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80072d4:	81fb      	strh	r3, [r7, #14]
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80072d6:	89fb      	ldrh	r3, [r7, #14]
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d021      	beq.n	8007320 <UART_RxISR_16BIT_FIFOEN+0x1f4>
 80072dc:	687b      	ldr	r3, [r7, #4]
 80072de:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80072e2:	89fa      	ldrh	r2, [r7, #14]
 80072e4:	429a      	cmp	r2, r3
 80072e6:	d21b      	bcs.n	8007320 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    {
      /* Disable the UART RXFT interrupt*/
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	681b      	ldr	r3, [r3, #0]
 80072ec:	689a      	ldr	r2, [r3, #8]
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	f022 5280 	bic.w	r2, r2, #268435456	; 0x10000000
 80072f6:	609a      	str	r2, [r3, #8]

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a0c      	ldr	r2, [pc, #48]	; (800732c <UART_RxISR_16BIT_FIFOEN+0x200>)
 80072fc:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	681a      	ldr	r2, [r3, #0]
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f042 0220 	orr.w	r2, r2, #32
 800730c:	601a      	str	r2, [r3, #0]
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800730e:	e007      	b.n	8007320 <UART_RxISR_16BIT_FIFOEN+0x1f4>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	699a      	ldr	r2, [r3, #24]
 8007316:	687b      	ldr	r3, [r7, #4]
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	f042 0208 	orr.w	r2, r2, #8
 800731e:	619a      	str	r2, [r3, #24]
}
 8007320:	bf00      	nop
 8007322:	3728      	adds	r7, #40	; 0x28
 8007324:	46bd      	mov	sp, r7
 8007326:	bd80      	pop	{r7, pc}
 8007328:	effffffe 	.word	0xeffffffe
 800732c:	08006e51 	.word	0x08006e51

08007330 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007330:	b480      	push	{r7}
 8007332:	b083      	sub	sp, #12
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007338:	bf00      	nop
 800733a:	370c      	adds	r7, #12
 800733c:	46bd      	mov	sp, r7
 800733e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007342:	4770      	bx	lr

08007344 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007344:	b480      	push	{r7}
 8007346:	b083      	sub	sp, #12
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 800734c:	bf00      	nop
 800734e:	370c      	adds	r7, #12
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr

08007358 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007358:	b480      	push	{r7}
 800735a:	b083      	sub	sp, #12
 800735c:	af00      	add	r7, sp, #0
 800735e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007360:	bf00      	nop
 8007362:	370c      	adds	r7, #12
 8007364:	46bd      	mov	sp, r7
 8007366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736a:	4770      	bx	lr

0800736c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800736c:	b480      	push	{r7}
 800736e:	b085      	sub	sp, #20
 8007370:	af00      	add	r7, sp, #0
 8007372:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800737a:	2b01      	cmp	r3, #1
 800737c:	d101      	bne.n	8007382 <HAL_UARTEx_DisableFifoMode+0x16>
 800737e:	2302      	movs	r3, #2
 8007380:	e027      	b.n	80073d2 <HAL_UARTEx_DisableFifoMode+0x66>
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	2201      	movs	r2, #1
 8007386:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	2224      	movs	r2, #36	; 0x24
 800738e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	681a      	ldr	r2, [r3, #0]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	f022 0201 	bic.w	r2, r2, #1
 80073a8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80073aa:	68fb      	ldr	r3, [r7, #12]
 80073ac:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 80073b0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2200      	movs	r2, #0
 80073b6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	68fa      	ldr	r2, [r7, #12]
 80073be:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80073c0:	687b      	ldr	r3, [r7, #4]
 80073c2:	2220      	movs	r2, #32
 80073c4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2200      	movs	r2, #0
 80073cc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3714      	adds	r7, #20
 80073d6:	46bd      	mov	sp, r7
 80073d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073dc:	4770      	bx	lr

080073de <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80073de:	b580      	push	{r7, lr}
 80073e0:	b084      	sub	sp, #16
 80073e2:	af00      	add	r7, sp, #0
 80073e4:	6078      	str	r0, [r7, #4]
 80073e6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80073ee:	2b01      	cmp	r3, #1
 80073f0:	d101      	bne.n	80073f6 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80073f2:	2302      	movs	r3, #2
 80073f4:	e02d      	b.n	8007452 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2201      	movs	r2, #1
 80073fa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2224      	movs	r2, #36	; 0x24
 8007402:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681a      	ldr	r2, [r3, #0]
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	f022 0201 	bic.w	r2, r2, #1
 800741c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	689b      	ldr	r3, [r3, #8]
 8007424:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	683a      	ldr	r2, [r7, #0]
 800742e:	430a      	orrs	r2, r1
 8007430:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007432:	6878      	ldr	r0, [r7, #4]
 8007434:	f000 f850 	bl	80074d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	68fa      	ldr	r2, [r7, #12]
 800743e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	2220      	movs	r2, #32
 8007444:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2200      	movs	r2, #0
 800744c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007450:	2300      	movs	r3, #0
}
 8007452:	4618      	mov	r0, r3
 8007454:	3710      	adds	r7, #16
 8007456:	46bd      	mov	sp, r7
 8007458:	bd80      	pop	{r7, pc}

0800745a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800745a:	b580      	push	{r7, lr}
 800745c:	b084      	sub	sp, #16
 800745e:	af00      	add	r7, sp, #0
 8007460:	6078      	str	r0, [r7, #4]
 8007462:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800746a:	2b01      	cmp	r3, #1
 800746c:	d101      	bne.n	8007472 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800746e:	2302      	movs	r3, #2
 8007470:	e02d      	b.n	80074ce <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	2201      	movs	r2, #1
 8007476:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	2224      	movs	r2, #36	; 0x24
 800747e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	681a      	ldr	r2, [r3, #0]
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	f022 0201 	bic.w	r2, r2, #1
 8007498:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	681b      	ldr	r3, [r3, #0]
 800749e:	689b      	ldr	r3, [r3, #8]
 80074a0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	683a      	ldr	r2, [r7, #0]
 80074aa:	430a      	orrs	r2, r1
 80074ac:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80074ae:	6878      	ldr	r0, [r7, #4]
 80074b0:	f000 f812 	bl	80074d8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	681b      	ldr	r3, [r3, #0]
 80074b8:	68fa      	ldr	r2, [r7, #12]
 80074ba:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2220      	movs	r2, #32
 80074c0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	2200      	movs	r2, #0
 80074c8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80074cc:	2300      	movs	r3, #0
}
 80074ce:	4618      	mov	r0, r3
 80074d0:	3710      	adds	r7, #16
 80074d2:	46bd      	mov	sp, r7
 80074d4:	bd80      	pop	{r7, pc}
	...

080074d8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80074d8:	b480      	push	{r7}
 80074da:	b085      	sub	sp, #20
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d108      	bne.n	80074fa <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	2201      	movs	r2, #1
 80074ec:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80074f0:	687b      	ldr	r3, [r7, #4]
 80074f2:	2201      	movs	r2, #1
 80074f4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80074f8:	e031      	b.n	800755e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80074fa:	2310      	movs	r3, #16
 80074fc:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80074fe:	2310      	movs	r3, #16
 8007500:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	689b      	ldr	r3, [r3, #8]
 8007508:	0e5b      	lsrs	r3, r3, #25
 800750a:	b2db      	uxtb	r3, r3
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	689b      	ldr	r3, [r3, #8]
 8007518:	0f5b      	lsrs	r3, r3, #29
 800751a:	b2db      	uxtb	r3, r3
 800751c:	f003 0307 	and.w	r3, r3, #7
 8007520:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007522:	7bbb      	ldrb	r3, [r7, #14]
 8007524:	7b3a      	ldrb	r2, [r7, #12]
 8007526:	4911      	ldr	r1, [pc, #68]	; (800756c <UARTEx_SetNbDataToProcess+0x94>)
 8007528:	5c8a      	ldrb	r2, [r1, r2]
 800752a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800752e:	7b3a      	ldrb	r2, [r7, #12]
 8007530:	490f      	ldr	r1, [pc, #60]	; (8007570 <UARTEx_SetNbDataToProcess+0x98>)
 8007532:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007534:	fb93 f3f2 	sdiv	r3, r3, r2
 8007538:	b29a      	uxth	r2, r3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007540:	7bfb      	ldrb	r3, [r7, #15]
 8007542:	7b7a      	ldrb	r2, [r7, #13]
 8007544:	4909      	ldr	r1, [pc, #36]	; (800756c <UARTEx_SetNbDataToProcess+0x94>)
 8007546:	5c8a      	ldrb	r2, [r1, r2]
 8007548:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800754c:	7b7a      	ldrb	r2, [r7, #13]
 800754e:	4908      	ldr	r1, [pc, #32]	; (8007570 <UARTEx_SetNbDataToProcess+0x98>)
 8007550:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007552:	fb93 f3f2 	sdiv	r3, r3, r2
 8007556:	b29a      	uxth	r2, r3
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800755e:	bf00      	nop
 8007560:	3714      	adds	r7, #20
 8007562:	46bd      	mov	sp, r7
 8007564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007568:	4770      	bx	lr
 800756a:	bf00      	nop
 800756c:	08008530 	.word	0x08008530
 8007570:	08008538 	.word	0x08008538

08007574 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007574:	b084      	sub	sp, #16
 8007576:	b580      	push	{r7, lr}
 8007578:	b084      	sub	sp, #16
 800757a:	af00      	add	r7, sp, #0
 800757c:	6078      	str	r0, [r7, #4]
 800757e:	f107 001c 	add.w	r0, r7, #28
 8007582:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007588:	2b01      	cmp	r3, #1
 800758a:	d120      	bne.n	80075ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007590:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007598:	687b      	ldr	r3, [r7, #4]
 800759a:	68da      	ldr	r2, [r3, #12]
 800759c:	4b2a      	ldr	r3, [pc, #168]	; (8007648 <USB_CoreInit+0xd4>)
 800759e:	4013      	ands	r3, r2
 80075a0:	687a      	ldr	r2, [r7, #4]
 80075a2:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80075a4:	687b      	ldr	r3, [r7, #4]
 80075a6:	68db      	ldr	r3, [r3, #12]
 80075a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80075b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80075b2:	2b01      	cmp	r3, #1
 80075b4:	d105      	bne.n	80075c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80075b6:	687b      	ldr	r3, [r7, #4]
 80075b8:	68db      	ldr	r3, [r3, #12]
 80075ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075c2:	6878      	ldr	r0, [r7, #4]
 80075c4:	f000 fa60 	bl	8007a88 <USB_CoreReset>
 80075c8:	4603      	mov	r3, r0
 80075ca:	73fb      	strb	r3, [r7, #15]
 80075cc:	e01a      	b.n	8007604 <USB_CoreInit+0x90>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	68db      	ldr	r3, [r3, #12]
 80075d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80075da:	6878      	ldr	r0, [r7, #4]
 80075dc:	f000 fa54 	bl	8007a88 <USB_CoreReset>
 80075e0:	4603      	mov	r3, r0
 80075e2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80075e4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d106      	bne.n	80075f8 <USB_CoreInit+0x84>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075ee:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	639a      	str	r2, [r3, #56]	; 0x38
 80075f6:	e005      	b.n	8007604 <USB_CoreInit+0x90>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075fc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8007604:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007606:	2b01      	cmp	r3, #1
 8007608:	d116      	bne.n	8007638 <USB_CoreInit+0xc4>
  {
    /* make sure to reserve 18 fifo Locations for DMA buffers */
    USBx->GDFIFOCFG &= ~(0xFFFFU << 16);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800760e:	b29a      	uxth	r2, r3
 8007610:	687b      	ldr	r3, [r7, #4]
 8007612:	65da      	str	r2, [r3, #92]	; 0x5c
    USBx->GDFIFOCFG |= 0x3EEU << 16;
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8007618:	4b0c      	ldr	r3, [pc, #48]	; (800764c <USB_CoreInit+0xd8>)
 800761a:	4313      	orrs	r3, r2
 800761c:	687a      	ldr	r2, [r7, #4]
 800761e:	65d3      	str	r3, [r2, #92]	; 0x5c

    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	f043 0206 	orr.w	r2, r3, #6
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f043 0220 	orr.w	r2, r3, #32
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8007638:	7bfb      	ldrb	r3, [r7, #15]
}
 800763a:	4618      	mov	r0, r3
 800763c:	3710      	adds	r7, #16
 800763e:	46bd      	mov	sp, r7
 8007640:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007644:	b004      	add	sp, #16
 8007646:	4770      	bx	lr
 8007648:	ffbdffbf 	.word	0xffbdffbf
 800764c:	03ee0000 	.word	0x03ee0000

08007650 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8007650:	b480      	push	{r7}
 8007652:	b083      	sub	sp, #12
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	689b      	ldr	r3, [r3, #8]
 800765c:	f023 0201 	bic.w	r2, r3, #1
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007664:	2300      	movs	r3, #0
}
 8007666:	4618      	mov	r0, r3
 8007668:	370c      	adds	r7, #12
 800766a:	46bd      	mov	sp, r7
 800766c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007670:	4770      	bx	lr

08007672 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007672:	b580      	push	{r7, lr}
 8007674:	b082      	sub	sp, #8
 8007676:	af00      	add	r7, sp, #0
 8007678:	6078      	str	r0, [r7, #4]
 800767a:	460b      	mov	r3, r1
 800767c:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	68db      	ldr	r3, [r3, #12]
 8007682:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800768a:	78fb      	ldrb	r3, [r7, #3]
 800768c:	2b01      	cmp	r3, #1
 800768e:	d106      	bne.n	800769e <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	68db      	ldr	r3, [r3, #12]
 8007694:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8007698:	687b      	ldr	r3, [r7, #4]
 800769a:	60da      	str	r2, [r3, #12]
 800769c:	e00b      	b.n	80076b6 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 800769e:	78fb      	ldrb	r3, [r7, #3]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d106      	bne.n	80076b2 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80076a4:	687b      	ldr	r3, [r7, #4]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	60da      	str	r2, [r3, #12]
 80076b0:	e001      	b.n	80076b6 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80076b2:	2301      	movs	r3, #1
 80076b4:	e003      	b.n	80076be <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80076b6:	2032      	movs	r0, #50	; 0x32
 80076b8:	f7f9 fe10 	bl	80012dc <HAL_Delay>

  return HAL_OK;
 80076bc:	2300      	movs	r3, #0
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3708      	adds	r7, #8
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}
	...

080076c8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80076c8:	b084      	sub	sp, #16
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	6078      	str	r0, [r7, #4]
 80076d2:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80076d6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80076e2:	2300      	movs	r3, #0
 80076e4:	613b      	str	r3, [r7, #16]
 80076e6:	e009      	b.n	80076fc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	693b      	ldr	r3, [r7, #16]
 80076ec:	3340      	adds	r3, #64	; 0x40
 80076ee:	009b      	lsls	r3, r3, #2
 80076f0:	4413      	add	r3, r2
 80076f2:	2200      	movs	r2, #0
 80076f4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	613b      	str	r3, [r7, #16]
 80076fc:	693b      	ldr	r3, [r7, #16]
 80076fe:	2b0e      	cmp	r3, #14
 8007700:	d9f2      	bls.n	80076e8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8007702:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007704:	2b00      	cmp	r3, #0
 8007706:	d11c      	bne.n	8007742 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007708:	68fb      	ldr	r3, [r7, #12]
 800770a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800770e:	685b      	ldr	r3, [r3, #4]
 8007710:	68fa      	ldr	r2, [r7, #12]
 8007712:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007716:	f043 0302 	orr.w	r3, r3, #2
 800771a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007720:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	681b      	ldr	r3, [r3, #0]
 800772c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	601a      	str	r2, [r3, #0]
 8007740:	e005      	b.n	800774e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007746:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007754:	461a      	mov	r2, r3
 8007756:	2300      	movs	r3, #0
 8007758:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800775a:	68fb      	ldr	r3, [r7, #12]
 800775c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007760:	4619      	mov	r1, r3
 8007762:	68fb      	ldr	r3, [r7, #12]
 8007764:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007768:	461a      	mov	r2, r3
 800776a:	680b      	ldr	r3, [r1, #0]
 800776c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800776e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007770:	2b01      	cmp	r3, #1
 8007772:	d10c      	bne.n	800778e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8007774:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007776:	2b00      	cmp	r3, #0
 8007778:	d104      	bne.n	8007784 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800777a:	2100      	movs	r1, #0
 800777c:	6878      	ldr	r0, [r7, #4]
 800777e:	f000 f949 	bl	8007a14 <USB_SetDevSpeed>
 8007782:	e008      	b.n	8007796 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8007784:	2101      	movs	r1, #1
 8007786:	6878      	ldr	r0, [r7, #4]
 8007788:	f000 f944 	bl	8007a14 <USB_SetDevSpeed>
 800778c:	e003      	b.n	8007796 <USB_DevInit+0xce>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800778e:	2103      	movs	r1, #3
 8007790:	6878      	ldr	r0, [r7, #4]
 8007792:	f000 f93f 	bl	8007a14 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007796:	2110      	movs	r1, #16
 8007798:	6878      	ldr	r0, [r7, #4]
 800779a:	f000 f8f3 	bl	8007984 <USB_FlushTxFifo>
 800779e:	4603      	mov	r3, r0
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d001      	beq.n	80077a8 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 80077a4:	2301      	movs	r3, #1
 80077a6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80077a8:	6878      	ldr	r0, [r7, #4]
 80077aa:	f000 f911 	bl	80079d0 <USB_FlushRxFifo>
 80077ae:	4603      	mov	r3, r0
 80077b0:	2b00      	cmp	r3, #0
 80077b2:	d001      	beq.n	80077b8 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 80077b4:	2301      	movs	r3, #1
 80077b6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077be:	461a      	mov	r2, r3
 80077c0:	2300      	movs	r3, #0
 80077c2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077ca:	461a      	mov	r2, r3
 80077cc:	2300      	movs	r3, #0
 80077ce:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80077d0:	68fb      	ldr	r3, [r7, #12]
 80077d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80077d6:	461a      	mov	r2, r3
 80077d8:	2300      	movs	r3, #0
 80077da:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80077dc:	2300      	movs	r3, #0
 80077de:	613b      	str	r3, [r7, #16]
 80077e0:	e043      	b.n	800786a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80077e2:	693b      	ldr	r3, [r7, #16]
 80077e4:	015a      	lsls	r2, r3, #5
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	4413      	add	r3, r2
 80077ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80077f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80077f8:	d118      	bne.n	800782c <USB_DevInit+0x164>
    {
      if (i == 0U)
 80077fa:	693b      	ldr	r3, [r7, #16]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d10a      	bne.n	8007816 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8007800:	693b      	ldr	r3, [r7, #16]
 8007802:	015a      	lsls	r2, r3, #5
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800780c:	461a      	mov	r2, r3
 800780e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8007812:	6013      	str	r3, [r2, #0]
 8007814:	e013      	b.n	800783e <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8007816:	693b      	ldr	r3, [r7, #16]
 8007818:	015a      	lsls	r2, r3, #5
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	4413      	add	r3, r2
 800781e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007822:	461a      	mov	r2, r3
 8007824:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8007828:	6013      	str	r3, [r2, #0]
 800782a:	e008      	b.n	800783e <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800782c:	693b      	ldr	r3, [r7, #16]
 800782e:	015a      	lsls	r2, r3, #5
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	4413      	add	r3, r2
 8007834:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8007838:	461a      	mov	r2, r3
 800783a:	2300      	movs	r3, #0
 800783c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	015a      	lsls	r2, r3, #5
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	4413      	add	r3, r2
 8007846:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800784a:	461a      	mov	r2, r3
 800784c:	2300      	movs	r3, #0
 800784e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8007850:	693b      	ldr	r3, [r7, #16]
 8007852:	015a      	lsls	r2, r3, #5
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	4413      	add	r3, r2
 8007858:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800785c:	461a      	mov	r2, r3
 800785e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8007862:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007864:	693b      	ldr	r3, [r7, #16]
 8007866:	3301      	adds	r3, #1
 8007868:	613b      	str	r3, [r7, #16]
 800786a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800786c:	693a      	ldr	r2, [r7, #16]
 800786e:	429a      	cmp	r2, r3
 8007870:	d3b7      	bcc.n	80077e2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007872:	2300      	movs	r3, #0
 8007874:	613b      	str	r3, [r7, #16]
 8007876:	e043      	b.n	8007900 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007878:	693b      	ldr	r3, [r7, #16]
 800787a:	015a      	lsls	r2, r3, #5
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	4413      	add	r3, r2
 8007880:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800788a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800788e:	d118      	bne.n	80078c2 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8007890:	693b      	ldr	r3, [r7, #16]
 8007892:	2b00      	cmp	r3, #0
 8007894:	d10a      	bne.n	80078ac <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	015a      	lsls	r2, r3, #5
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	4413      	add	r3, r2
 800789e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078a2:	461a      	mov	r2, r3
 80078a4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80078a8:	6013      	str	r3, [r2, #0]
 80078aa:	e013      	b.n	80078d4 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80078ac:	693b      	ldr	r3, [r7, #16]
 80078ae:	015a      	lsls	r2, r3, #5
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078b8:	461a      	mov	r2, r3
 80078ba:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80078be:	6013      	str	r3, [r2, #0]
 80078c0:	e008      	b.n	80078d4 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80078c2:	693b      	ldr	r3, [r7, #16]
 80078c4:	015a      	lsls	r2, r3, #5
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	4413      	add	r3, r2
 80078ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078ce:	461a      	mov	r2, r3
 80078d0:	2300      	movs	r3, #0
 80078d2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80078d4:	693b      	ldr	r3, [r7, #16]
 80078d6:	015a      	lsls	r2, r3, #5
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	4413      	add	r3, r2
 80078dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078e0:	461a      	mov	r2, r3
 80078e2:	2300      	movs	r3, #0
 80078e4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80078e6:	693b      	ldr	r3, [r7, #16]
 80078e8:	015a      	lsls	r2, r3, #5
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	4413      	add	r3, r2
 80078ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80078f2:	461a      	mov	r2, r3
 80078f4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80078f8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80078fa:	693b      	ldr	r3, [r7, #16]
 80078fc:	3301      	adds	r3, #1
 80078fe:	613b      	str	r3, [r7, #16]
 8007900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007902:	693a      	ldr	r2, [r7, #16]
 8007904:	429a      	cmp	r2, r3
 8007906:	d3b7      	bcc.n	8007878 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	68fa      	ldr	r2, [r7, #12]
 8007912:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007916:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800791a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2200      	movs	r2, #0
 8007920:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007922:	687b      	ldr	r3, [r7, #4]
 8007924:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8007928:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800792a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800792c:	2b00      	cmp	r3, #0
 800792e:	d105      	bne.n	800793c <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	699b      	ldr	r3, [r3, #24]
 8007934:	f043 0210 	orr.w	r2, r3, #16
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	699a      	ldr	r2, [r3, #24]
 8007940:	4b0e      	ldr	r3, [pc, #56]	; (800797c <USB_DevInit+0x2b4>)
 8007942:	4313      	orrs	r3, r2
 8007944:	687a      	ldr	r2, [r7, #4]
 8007946:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8007948:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800794a:	2b00      	cmp	r3, #0
 800794c:	d005      	beq.n	800795a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	699b      	ldr	r3, [r3, #24]
 8007952:	f043 0208 	orr.w	r2, r3, #8
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800795a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800795c:	2b01      	cmp	r3, #1
 800795e:	d105      	bne.n	800796c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	699a      	ldr	r2, [r3, #24]
 8007964:	4b06      	ldr	r3, [pc, #24]	; (8007980 <USB_DevInit+0x2b8>)
 8007966:	4313      	orrs	r3, r2
 8007968:	687a      	ldr	r2, [r7, #4]
 800796a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 800796c:	7dfb      	ldrb	r3, [r7, #23]
}
 800796e:	4618      	mov	r0, r3
 8007970:	3718      	adds	r7, #24
 8007972:	46bd      	mov	sp, r7
 8007974:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007978:	b004      	add	sp, #16
 800797a:	4770      	bx	lr
 800797c:	803c3800 	.word	0x803c3800
 8007980:	40000004 	.word	0x40000004

08007984 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
 800798c:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 800798e:	2300      	movs	r3, #0
 8007990:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007992:	683b      	ldr	r3, [r7, #0]
 8007994:	019b      	lsls	r3, r3, #6
 8007996:	f043 0220 	orr.w	r2, r3, #32
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3301      	adds	r3, #1
 80079a2:	60fb      	str	r3, [r7, #12]
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	4a09      	ldr	r2, [pc, #36]	; (80079cc <USB_FlushTxFifo+0x48>)
 80079a8:	4293      	cmp	r3, r2
 80079aa:	d901      	bls.n	80079b0 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80079ac:	2303      	movs	r3, #3
 80079ae:	e006      	b.n	80079be <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	691b      	ldr	r3, [r3, #16]
 80079b4:	f003 0320 	and.w	r3, r3, #32
 80079b8:	2b20      	cmp	r3, #32
 80079ba:	d0f0      	beq.n	800799e <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80079bc:	2300      	movs	r3, #0
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3714      	adds	r7, #20
 80079c2:	46bd      	mov	sp, r7
 80079c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c8:	4770      	bx	lr
 80079ca:	bf00      	nop
 80079cc:	00030d40 	.word	0x00030d40

080079d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80079d0:	b480      	push	{r7}
 80079d2:	b085      	sub	sp, #20
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80079d8:	2300      	movs	r3, #0
 80079da:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2210      	movs	r2, #16
 80079e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80079e2:	68fb      	ldr	r3, [r7, #12]
 80079e4:	3301      	adds	r3, #1
 80079e6:	60fb      	str	r3, [r7, #12]
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	4a09      	ldr	r2, [pc, #36]	; (8007a10 <USB_FlushRxFifo+0x40>)
 80079ec:	4293      	cmp	r3, r2
 80079ee:	d901      	bls.n	80079f4 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80079f0:	2303      	movs	r3, #3
 80079f2:	e006      	b.n	8007a02 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80079f4:	687b      	ldr	r3, [r7, #4]
 80079f6:	691b      	ldr	r3, [r3, #16]
 80079f8:	f003 0310 	and.w	r3, r3, #16
 80079fc:	2b10      	cmp	r3, #16
 80079fe:	d0f0      	beq.n	80079e2 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8007a00:	2300      	movs	r3, #0
}
 8007a02:	4618      	mov	r0, r3
 8007a04:	3714      	adds	r7, #20
 8007a06:	46bd      	mov	sp, r7
 8007a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a0c:	4770      	bx	lr
 8007a0e:	bf00      	nop
 8007a10:	00030d40 	.word	0x00030d40

08007a14 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8007a14:	b480      	push	{r7}
 8007a16:	b085      	sub	sp, #20
 8007a18:	af00      	add	r7, sp, #0
 8007a1a:	6078      	str	r0, [r7, #4]
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a2a:	681a      	ldr	r2, [r3, #0]
 8007a2c:	78fb      	ldrb	r3, [r7, #3]
 8007a2e:	68f9      	ldr	r1, [r7, #12]
 8007a30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8007a34:	4313      	orrs	r3, r2
 8007a36:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007a38:	2300      	movs	r3, #0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3714      	adds	r7, #20
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a44:	4770      	bx	lr

08007a46 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8007a46:	b480      	push	{r7}
 8007a48:	b085      	sub	sp, #20
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007a4e:	687b      	ldr	r3, [r7, #4]
 8007a50:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	68fa      	ldr	r2, [r7, #12]
 8007a5c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007a60:	f023 0303 	bic.w	r3, r3, #3
 8007a64:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8007a6c:	685b      	ldr	r3, [r3, #4]
 8007a6e:	68fa      	ldr	r2, [r7, #12]
 8007a70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8007a74:	f043 0302 	orr.w	r3, r3, #2
 8007a78:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007a7a:	2300      	movs	r3, #0
}
 8007a7c:	4618      	mov	r0, r3
 8007a7e:	3714      	adds	r7, #20
 8007a80:	46bd      	mov	sp, r7
 8007a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a86:	4770      	bx	lr

08007a88 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8007a88:	b480      	push	{r7}
 8007a8a:	b085      	sub	sp, #20
 8007a8c:	af00      	add	r7, sp, #0
 8007a8e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8007a90:	2300      	movs	r3, #0
 8007a92:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8007a94:	68fb      	ldr	r3, [r7, #12]
 8007a96:	3301      	adds	r3, #1
 8007a98:	60fb      	str	r3, [r7, #12]
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	4a13      	ldr	r2, [pc, #76]	; (8007aec <USB_CoreReset+0x64>)
 8007a9e:	4293      	cmp	r3, r2
 8007aa0:	d901      	bls.n	8007aa6 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8007aa2:	2303      	movs	r3, #3
 8007aa4:	e01b      	b.n	8007ade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8007aa6:	687b      	ldr	r3, [r7, #4]
 8007aa8:	691b      	ldr	r3, [r3, #16]
 8007aaa:	2b00      	cmp	r3, #0
 8007aac:	daf2      	bge.n	8007a94 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8007aae:	2300      	movs	r3, #0
 8007ab0:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	691b      	ldr	r3, [r3, #16]
 8007ab6:	f043 0201 	orr.w	r2, r3, #1
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	3301      	adds	r3, #1
 8007ac2:	60fb      	str	r3, [r7, #12]
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	4a09      	ldr	r2, [pc, #36]	; (8007aec <USB_CoreReset+0x64>)
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	d901      	bls.n	8007ad0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007acc:	2303      	movs	r3, #3
 8007ace:	e006      	b.n	8007ade <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007ad0:	687b      	ldr	r3, [r7, #4]
 8007ad2:	691b      	ldr	r3, [r3, #16]
 8007ad4:	f003 0301 	and.w	r3, r3, #1
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	d0f0      	beq.n	8007abe <USB_CoreReset+0x36>

  return HAL_OK;
 8007adc:	2300      	movs	r3, #0
}
 8007ade:	4618      	mov	r0, r3
 8007ae0:	3714      	adds	r7, #20
 8007ae2:	46bd      	mov	sp, r7
 8007ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae8:	4770      	bx	lr
 8007aea:	bf00      	nop
 8007aec:	00030d40 	.word	0x00030d40

08007af0 <atoi>:
 8007af0:	220a      	movs	r2, #10
 8007af2:	2100      	movs	r1, #0
 8007af4:	f000 b8d6 	b.w	8007ca4 <strtol>

08007af8 <__errno>:
 8007af8:	4b01      	ldr	r3, [pc, #4]	; (8007b00 <__errno+0x8>)
 8007afa:	6818      	ldr	r0, [r3, #0]
 8007afc:	4770      	bx	lr
 8007afe:	bf00      	nop
 8007b00:	24000010 	.word	0x24000010

08007b04 <__libc_init_array>:
 8007b04:	b570      	push	{r4, r5, r6, lr}
 8007b06:	4d0d      	ldr	r5, [pc, #52]	; (8007b3c <__libc_init_array+0x38>)
 8007b08:	4c0d      	ldr	r4, [pc, #52]	; (8007b40 <__libc_init_array+0x3c>)
 8007b0a:	1b64      	subs	r4, r4, r5
 8007b0c:	10a4      	asrs	r4, r4, #2
 8007b0e:	2600      	movs	r6, #0
 8007b10:	42a6      	cmp	r6, r4
 8007b12:	d109      	bne.n	8007b28 <__libc_init_array+0x24>
 8007b14:	4d0b      	ldr	r5, [pc, #44]	; (8007b44 <__libc_init_array+0x40>)
 8007b16:	4c0c      	ldr	r4, [pc, #48]	; (8007b48 <__libc_init_array+0x44>)
 8007b18:	f000 fcdc 	bl	80084d4 <_init>
 8007b1c:	1b64      	subs	r4, r4, r5
 8007b1e:	10a4      	asrs	r4, r4, #2
 8007b20:	2600      	movs	r6, #0
 8007b22:	42a6      	cmp	r6, r4
 8007b24:	d105      	bne.n	8007b32 <__libc_init_array+0x2e>
 8007b26:	bd70      	pop	{r4, r5, r6, pc}
 8007b28:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b2c:	4798      	blx	r3
 8007b2e:	3601      	adds	r6, #1
 8007b30:	e7ee      	b.n	8007b10 <__libc_init_array+0xc>
 8007b32:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b36:	4798      	blx	r3
 8007b38:	3601      	adds	r6, #1
 8007b3a:	e7f2      	b.n	8007b22 <__libc_init_array+0x1e>
 8007b3c:	0800867c 	.word	0x0800867c
 8007b40:	0800867c 	.word	0x0800867c
 8007b44:	0800867c 	.word	0x0800867c
 8007b48:	08008680 	.word	0x08008680

08007b4c <memset>:
 8007b4c:	4402      	add	r2, r0
 8007b4e:	4603      	mov	r3, r0
 8007b50:	4293      	cmp	r3, r2
 8007b52:	d100      	bne.n	8007b56 <memset+0xa>
 8007b54:	4770      	bx	lr
 8007b56:	f803 1b01 	strb.w	r1, [r3], #1
 8007b5a:	e7f9      	b.n	8007b50 <memset+0x4>

08007b5c <siprintf>:
 8007b5c:	b40e      	push	{r1, r2, r3}
 8007b5e:	b500      	push	{lr}
 8007b60:	b09c      	sub	sp, #112	; 0x70
 8007b62:	ab1d      	add	r3, sp, #116	; 0x74
 8007b64:	9002      	str	r0, [sp, #8]
 8007b66:	9006      	str	r0, [sp, #24]
 8007b68:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007b6c:	4809      	ldr	r0, [pc, #36]	; (8007b94 <siprintf+0x38>)
 8007b6e:	9107      	str	r1, [sp, #28]
 8007b70:	9104      	str	r1, [sp, #16]
 8007b72:	4909      	ldr	r1, [pc, #36]	; (8007b98 <siprintf+0x3c>)
 8007b74:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b78:	9105      	str	r1, [sp, #20]
 8007b7a:	6800      	ldr	r0, [r0, #0]
 8007b7c:	9301      	str	r3, [sp, #4]
 8007b7e:	a902      	add	r1, sp, #8
 8007b80:	f000 f8f6 	bl	8007d70 <_svfiprintf_r>
 8007b84:	9b02      	ldr	r3, [sp, #8]
 8007b86:	2200      	movs	r2, #0
 8007b88:	701a      	strb	r2, [r3, #0]
 8007b8a:	b01c      	add	sp, #112	; 0x70
 8007b8c:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b90:	b003      	add	sp, #12
 8007b92:	4770      	bx	lr
 8007b94:	24000010 	.word	0x24000010
 8007b98:	ffff0208 	.word	0xffff0208

08007b9c <_strtol_l.isra.0>:
 8007b9c:	2b01      	cmp	r3, #1
 8007b9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ba2:	d001      	beq.n	8007ba8 <_strtol_l.isra.0+0xc>
 8007ba4:	2b24      	cmp	r3, #36	; 0x24
 8007ba6:	d906      	bls.n	8007bb6 <_strtol_l.isra.0+0x1a>
 8007ba8:	f7ff ffa6 	bl	8007af8 <__errno>
 8007bac:	2316      	movs	r3, #22
 8007bae:	6003      	str	r3, [r0, #0]
 8007bb0:	2000      	movs	r0, #0
 8007bb2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007bb6:	4f3a      	ldr	r7, [pc, #232]	; (8007ca0 <_strtol_l.isra.0+0x104>)
 8007bb8:	468e      	mov	lr, r1
 8007bba:	4676      	mov	r6, lr
 8007bbc:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007bc0:	5de5      	ldrb	r5, [r4, r7]
 8007bc2:	f015 0508 	ands.w	r5, r5, #8
 8007bc6:	d1f8      	bne.n	8007bba <_strtol_l.isra.0+0x1e>
 8007bc8:	2c2d      	cmp	r4, #45	; 0x2d
 8007bca:	d134      	bne.n	8007c36 <_strtol_l.isra.0+0x9a>
 8007bcc:	f89e 4000 	ldrb.w	r4, [lr]
 8007bd0:	f04f 0801 	mov.w	r8, #1
 8007bd4:	f106 0e02 	add.w	lr, r6, #2
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	d05c      	beq.n	8007c96 <_strtol_l.isra.0+0xfa>
 8007bdc:	2b10      	cmp	r3, #16
 8007bde:	d10c      	bne.n	8007bfa <_strtol_l.isra.0+0x5e>
 8007be0:	2c30      	cmp	r4, #48	; 0x30
 8007be2:	d10a      	bne.n	8007bfa <_strtol_l.isra.0+0x5e>
 8007be4:	f89e 4000 	ldrb.w	r4, [lr]
 8007be8:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007bec:	2c58      	cmp	r4, #88	; 0x58
 8007bee:	d14d      	bne.n	8007c8c <_strtol_l.isra.0+0xf0>
 8007bf0:	f89e 4001 	ldrb.w	r4, [lr, #1]
 8007bf4:	2310      	movs	r3, #16
 8007bf6:	f10e 0e02 	add.w	lr, lr, #2
 8007bfa:	f108 4c00 	add.w	ip, r8, #2147483648	; 0x80000000
 8007bfe:	f10c 3cff 	add.w	ip, ip, #4294967295
 8007c02:	2600      	movs	r6, #0
 8007c04:	fbbc f9f3 	udiv	r9, ip, r3
 8007c08:	4635      	mov	r5, r6
 8007c0a:	fb03 ca19 	mls	sl, r3, r9, ip
 8007c0e:	f1a4 0730 	sub.w	r7, r4, #48	; 0x30
 8007c12:	2f09      	cmp	r7, #9
 8007c14:	d818      	bhi.n	8007c48 <_strtol_l.isra.0+0xac>
 8007c16:	463c      	mov	r4, r7
 8007c18:	42a3      	cmp	r3, r4
 8007c1a:	dd24      	ble.n	8007c66 <_strtol_l.isra.0+0xca>
 8007c1c:	2e00      	cmp	r6, #0
 8007c1e:	db1f      	blt.n	8007c60 <_strtol_l.isra.0+0xc4>
 8007c20:	45a9      	cmp	r9, r5
 8007c22:	d31d      	bcc.n	8007c60 <_strtol_l.isra.0+0xc4>
 8007c24:	d101      	bne.n	8007c2a <_strtol_l.isra.0+0x8e>
 8007c26:	45a2      	cmp	sl, r4
 8007c28:	db1a      	blt.n	8007c60 <_strtol_l.isra.0+0xc4>
 8007c2a:	fb05 4503 	mla	r5, r5, r3, r4
 8007c2e:	2601      	movs	r6, #1
 8007c30:	f81e 4b01 	ldrb.w	r4, [lr], #1
 8007c34:	e7eb      	b.n	8007c0e <_strtol_l.isra.0+0x72>
 8007c36:	2c2b      	cmp	r4, #43	; 0x2b
 8007c38:	bf08      	it	eq
 8007c3a:	f89e 4000 	ldrbeq.w	r4, [lr]
 8007c3e:	46a8      	mov	r8, r5
 8007c40:	bf08      	it	eq
 8007c42:	f106 0e02 	addeq.w	lr, r6, #2
 8007c46:	e7c7      	b.n	8007bd8 <_strtol_l.isra.0+0x3c>
 8007c48:	f1a4 0741 	sub.w	r7, r4, #65	; 0x41
 8007c4c:	2f19      	cmp	r7, #25
 8007c4e:	d801      	bhi.n	8007c54 <_strtol_l.isra.0+0xb8>
 8007c50:	3c37      	subs	r4, #55	; 0x37
 8007c52:	e7e1      	b.n	8007c18 <_strtol_l.isra.0+0x7c>
 8007c54:	f1a4 0761 	sub.w	r7, r4, #97	; 0x61
 8007c58:	2f19      	cmp	r7, #25
 8007c5a:	d804      	bhi.n	8007c66 <_strtol_l.isra.0+0xca>
 8007c5c:	3c57      	subs	r4, #87	; 0x57
 8007c5e:	e7db      	b.n	8007c18 <_strtol_l.isra.0+0x7c>
 8007c60:	f04f 36ff 	mov.w	r6, #4294967295
 8007c64:	e7e4      	b.n	8007c30 <_strtol_l.isra.0+0x94>
 8007c66:	2e00      	cmp	r6, #0
 8007c68:	da05      	bge.n	8007c76 <_strtol_l.isra.0+0xda>
 8007c6a:	2322      	movs	r3, #34	; 0x22
 8007c6c:	6003      	str	r3, [r0, #0]
 8007c6e:	4665      	mov	r5, ip
 8007c70:	b942      	cbnz	r2, 8007c84 <_strtol_l.isra.0+0xe8>
 8007c72:	4628      	mov	r0, r5
 8007c74:	e79d      	b.n	8007bb2 <_strtol_l.isra.0+0x16>
 8007c76:	f1b8 0f00 	cmp.w	r8, #0
 8007c7a:	d000      	beq.n	8007c7e <_strtol_l.isra.0+0xe2>
 8007c7c:	426d      	negs	r5, r5
 8007c7e:	2a00      	cmp	r2, #0
 8007c80:	d0f7      	beq.n	8007c72 <_strtol_l.isra.0+0xd6>
 8007c82:	b10e      	cbz	r6, 8007c88 <_strtol_l.isra.0+0xec>
 8007c84:	f10e 31ff 	add.w	r1, lr, #4294967295
 8007c88:	6011      	str	r1, [r2, #0]
 8007c8a:	e7f2      	b.n	8007c72 <_strtol_l.isra.0+0xd6>
 8007c8c:	2430      	movs	r4, #48	; 0x30
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d1b3      	bne.n	8007bfa <_strtol_l.isra.0+0x5e>
 8007c92:	2308      	movs	r3, #8
 8007c94:	e7b1      	b.n	8007bfa <_strtol_l.isra.0+0x5e>
 8007c96:	2c30      	cmp	r4, #48	; 0x30
 8007c98:	d0a4      	beq.n	8007be4 <_strtol_l.isra.0+0x48>
 8007c9a:	230a      	movs	r3, #10
 8007c9c:	e7ad      	b.n	8007bfa <_strtol_l.isra.0+0x5e>
 8007c9e:	bf00      	nop
 8007ca0:	08008541 	.word	0x08008541

08007ca4 <strtol>:
 8007ca4:	4613      	mov	r3, r2
 8007ca6:	460a      	mov	r2, r1
 8007ca8:	4601      	mov	r1, r0
 8007caa:	4802      	ldr	r0, [pc, #8]	; (8007cb4 <strtol+0x10>)
 8007cac:	6800      	ldr	r0, [r0, #0]
 8007cae:	f7ff bf75 	b.w	8007b9c <_strtol_l.isra.0>
 8007cb2:	bf00      	nop
 8007cb4:	24000010 	.word	0x24000010

08007cb8 <__ssputs_r>:
 8007cb8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007cbc:	688e      	ldr	r6, [r1, #8]
 8007cbe:	429e      	cmp	r6, r3
 8007cc0:	4682      	mov	sl, r0
 8007cc2:	460c      	mov	r4, r1
 8007cc4:	4690      	mov	r8, r2
 8007cc6:	461f      	mov	r7, r3
 8007cc8:	d838      	bhi.n	8007d3c <__ssputs_r+0x84>
 8007cca:	898a      	ldrh	r2, [r1, #12]
 8007ccc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8007cd0:	d032      	beq.n	8007d38 <__ssputs_r+0x80>
 8007cd2:	6825      	ldr	r5, [r4, #0]
 8007cd4:	6909      	ldr	r1, [r1, #16]
 8007cd6:	eba5 0901 	sub.w	r9, r5, r1
 8007cda:	6965      	ldr	r5, [r4, #20]
 8007cdc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007ce0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007ce4:	3301      	adds	r3, #1
 8007ce6:	444b      	add	r3, r9
 8007ce8:	106d      	asrs	r5, r5, #1
 8007cea:	429d      	cmp	r5, r3
 8007cec:	bf38      	it	cc
 8007cee:	461d      	movcc	r5, r3
 8007cf0:	0553      	lsls	r3, r2, #21
 8007cf2:	d531      	bpl.n	8007d58 <__ssputs_r+0xa0>
 8007cf4:	4629      	mov	r1, r5
 8007cf6:	f000 fb47 	bl	8008388 <_malloc_r>
 8007cfa:	4606      	mov	r6, r0
 8007cfc:	b950      	cbnz	r0, 8007d14 <__ssputs_r+0x5c>
 8007cfe:	230c      	movs	r3, #12
 8007d00:	f8ca 3000 	str.w	r3, [sl]
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007d0a:	81a3      	strh	r3, [r4, #12]
 8007d0c:	f04f 30ff 	mov.w	r0, #4294967295
 8007d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d14:	6921      	ldr	r1, [r4, #16]
 8007d16:	464a      	mov	r2, r9
 8007d18:	f000 fabe 	bl	8008298 <memcpy>
 8007d1c:	89a3      	ldrh	r3, [r4, #12]
 8007d1e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8007d22:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007d26:	81a3      	strh	r3, [r4, #12]
 8007d28:	6126      	str	r6, [r4, #16]
 8007d2a:	6165      	str	r5, [r4, #20]
 8007d2c:	444e      	add	r6, r9
 8007d2e:	eba5 0509 	sub.w	r5, r5, r9
 8007d32:	6026      	str	r6, [r4, #0]
 8007d34:	60a5      	str	r5, [r4, #8]
 8007d36:	463e      	mov	r6, r7
 8007d38:	42be      	cmp	r6, r7
 8007d3a:	d900      	bls.n	8007d3e <__ssputs_r+0x86>
 8007d3c:	463e      	mov	r6, r7
 8007d3e:	4632      	mov	r2, r6
 8007d40:	6820      	ldr	r0, [r4, #0]
 8007d42:	4641      	mov	r1, r8
 8007d44:	f000 fab6 	bl	80082b4 <memmove>
 8007d48:	68a3      	ldr	r3, [r4, #8]
 8007d4a:	6822      	ldr	r2, [r4, #0]
 8007d4c:	1b9b      	subs	r3, r3, r6
 8007d4e:	4432      	add	r2, r6
 8007d50:	60a3      	str	r3, [r4, #8]
 8007d52:	6022      	str	r2, [r4, #0]
 8007d54:	2000      	movs	r0, #0
 8007d56:	e7db      	b.n	8007d10 <__ssputs_r+0x58>
 8007d58:	462a      	mov	r2, r5
 8007d5a:	f000 fb6f 	bl	800843c <_realloc_r>
 8007d5e:	4606      	mov	r6, r0
 8007d60:	2800      	cmp	r0, #0
 8007d62:	d1e1      	bne.n	8007d28 <__ssputs_r+0x70>
 8007d64:	6921      	ldr	r1, [r4, #16]
 8007d66:	4650      	mov	r0, sl
 8007d68:	f000 fabe 	bl	80082e8 <_free_r>
 8007d6c:	e7c7      	b.n	8007cfe <__ssputs_r+0x46>
	...

08007d70 <_svfiprintf_r>:
 8007d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007d74:	4698      	mov	r8, r3
 8007d76:	898b      	ldrh	r3, [r1, #12]
 8007d78:	061b      	lsls	r3, r3, #24
 8007d7a:	b09d      	sub	sp, #116	; 0x74
 8007d7c:	4607      	mov	r7, r0
 8007d7e:	460d      	mov	r5, r1
 8007d80:	4614      	mov	r4, r2
 8007d82:	d50e      	bpl.n	8007da2 <_svfiprintf_r+0x32>
 8007d84:	690b      	ldr	r3, [r1, #16]
 8007d86:	b963      	cbnz	r3, 8007da2 <_svfiprintf_r+0x32>
 8007d88:	2140      	movs	r1, #64	; 0x40
 8007d8a:	f000 fafd 	bl	8008388 <_malloc_r>
 8007d8e:	6028      	str	r0, [r5, #0]
 8007d90:	6128      	str	r0, [r5, #16]
 8007d92:	b920      	cbnz	r0, 8007d9e <_svfiprintf_r+0x2e>
 8007d94:	230c      	movs	r3, #12
 8007d96:	603b      	str	r3, [r7, #0]
 8007d98:	f04f 30ff 	mov.w	r0, #4294967295
 8007d9c:	e0d1      	b.n	8007f42 <_svfiprintf_r+0x1d2>
 8007d9e:	2340      	movs	r3, #64	; 0x40
 8007da0:	616b      	str	r3, [r5, #20]
 8007da2:	2300      	movs	r3, #0
 8007da4:	9309      	str	r3, [sp, #36]	; 0x24
 8007da6:	2320      	movs	r3, #32
 8007da8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007dac:	f8cd 800c 	str.w	r8, [sp, #12]
 8007db0:	2330      	movs	r3, #48	; 0x30
 8007db2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8007f5c <_svfiprintf_r+0x1ec>
 8007db6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007dba:	f04f 0901 	mov.w	r9, #1
 8007dbe:	4623      	mov	r3, r4
 8007dc0:	469a      	mov	sl, r3
 8007dc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007dc6:	b10a      	cbz	r2, 8007dcc <_svfiprintf_r+0x5c>
 8007dc8:	2a25      	cmp	r2, #37	; 0x25
 8007dca:	d1f9      	bne.n	8007dc0 <_svfiprintf_r+0x50>
 8007dcc:	ebba 0b04 	subs.w	fp, sl, r4
 8007dd0:	d00b      	beq.n	8007dea <_svfiprintf_r+0x7a>
 8007dd2:	465b      	mov	r3, fp
 8007dd4:	4622      	mov	r2, r4
 8007dd6:	4629      	mov	r1, r5
 8007dd8:	4638      	mov	r0, r7
 8007dda:	f7ff ff6d 	bl	8007cb8 <__ssputs_r>
 8007dde:	3001      	adds	r0, #1
 8007de0:	f000 80aa 	beq.w	8007f38 <_svfiprintf_r+0x1c8>
 8007de4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8007de6:	445a      	add	r2, fp
 8007de8:	9209      	str	r2, [sp, #36]	; 0x24
 8007dea:	f89a 3000 	ldrb.w	r3, [sl]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	f000 80a2 	beq.w	8007f38 <_svfiprintf_r+0x1c8>
 8007df4:	2300      	movs	r3, #0
 8007df6:	f04f 32ff 	mov.w	r2, #4294967295
 8007dfa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007dfe:	f10a 0a01 	add.w	sl, sl, #1
 8007e02:	9304      	str	r3, [sp, #16]
 8007e04:	9307      	str	r3, [sp, #28]
 8007e06:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007e0a:	931a      	str	r3, [sp, #104]	; 0x68
 8007e0c:	4654      	mov	r4, sl
 8007e0e:	2205      	movs	r2, #5
 8007e10:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e14:	4851      	ldr	r0, [pc, #324]	; (8007f5c <_svfiprintf_r+0x1ec>)
 8007e16:	f7f8 fa6b 	bl	80002f0 <memchr>
 8007e1a:	9a04      	ldr	r2, [sp, #16]
 8007e1c:	b9d8      	cbnz	r0, 8007e56 <_svfiprintf_r+0xe6>
 8007e1e:	06d0      	lsls	r0, r2, #27
 8007e20:	bf44      	itt	mi
 8007e22:	2320      	movmi	r3, #32
 8007e24:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e28:	0711      	lsls	r1, r2, #28
 8007e2a:	bf44      	itt	mi
 8007e2c:	232b      	movmi	r3, #43	; 0x2b
 8007e2e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007e32:	f89a 3000 	ldrb.w	r3, [sl]
 8007e36:	2b2a      	cmp	r3, #42	; 0x2a
 8007e38:	d015      	beq.n	8007e66 <_svfiprintf_r+0xf6>
 8007e3a:	9a07      	ldr	r2, [sp, #28]
 8007e3c:	4654      	mov	r4, sl
 8007e3e:	2000      	movs	r0, #0
 8007e40:	f04f 0c0a 	mov.w	ip, #10
 8007e44:	4621      	mov	r1, r4
 8007e46:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007e4a:	3b30      	subs	r3, #48	; 0x30
 8007e4c:	2b09      	cmp	r3, #9
 8007e4e:	d94e      	bls.n	8007eee <_svfiprintf_r+0x17e>
 8007e50:	b1b0      	cbz	r0, 8007e80 <_svfiprintf_r+0x110>
 8007e52:	9207      	str	r2, [sp, #28]
 8007e54:	e014      	b.n	8007e80 <_svfiprintf_r+0x110>
 8007e56:	eba0 0308 	sub.w	r3, r0, r8
 8007e5a:	fa09 f303 	lsl.w	r3, r9, r3
 8007e5e:	4313      	orrs	r3, r2
 8007e60:	9304      	str	r3, [sp, #16]
 8007e62:	46a2      	mov	sl, r4
 8007e64:	e7d2      	b.n	8007e0c <_svfiprintf_r+0x9c>
 8007e66:	9b03      	ldr	r3, [sp, #12]
 8007e68:	1d19      	adds	r1, r3, #4
 8007e6a:	681b      	ldr	r3, [r3, #0]
 8007e6c:	9103      	str	r1, [sp, #12]
 8007e6e:	2b00      	cmp	r3, #0
 8007e70:	bfbb      	ittet	lt
 8007e72:	425b      	neglt	r3, r3
 8007e74:	f042 0202 	orrlt.w	r2, r2, #2
 8007e78:	9307      	strge	r3, [sp, #28]
 8007e7a:	9307      	strlt	r3, [sp, #28]
 8007e7c:	bfb8      	it	lt
 8007e7e:	9204      	strlt	r2, [sp, #16]
 8007e80:	7823      	ldrb	r3, [r4, #0]
 8007e82:	2b2e      	cmp	r3, #46	; 0x2e
 8007e84:	d10c      	bne.n	8007ea0 <_svfiprintf_r+0x130>
 8007e86:	7863      	ldrb	r3, [r4, #1]
 8007e88:	2b2a      	cmp	r3, #42	; 0x2a
 8007e8a:	d135      	bne.n	8007ef8 <_svfiprintf_r+0x188>
 8007e8c:	9b03      	ldr	r3, [sp, #12]
 8007e8e:	1d1a      	adds	r2, r3, #4
 8007e90:	681b      	ldr	r3, [r3, #0]
 8007e92:	9203      	str	r2, [sp, #12]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	bfb8      	it	lt
 8007e98:	f04f 33ff 	movlt.w	r3, #4294967295
 8007e9c:	3402      	adds	r4, #2
 8007e9e:	9305      	str	r3, [sp, #20]
 8007ea0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8007f6c <_svfiprintf_r+0x1fc>
 8007ea4:	7821      	ldrb	r1, [r4, #0]
 8007ea6:	2203      	movs	r2, #3
 8007ea8:	4650      	mov	r0, sl
 8007eaa:	f7f8 fa21 	bl	80002f0 <memchr>
 8007eae:	b140      	cbz	r0, 8007ec2 <_svfiprintf_r+0x152>
 8007eb0:	2340      	movs	r3, #64	; 0x40
 8007eb2:	eba0 000a 	sub.w	r0, r0, sl
 8007eb6:	fa03 f000 	lsl.w	r0, r3, r0
 8007eba:	9b04      	ldr	r3, [sp, #16]
 8007ebc:	4303      	orrs	r3, r0
 8007ebe:	3401      	adds	r4, #1
 8007ec0:	9304      	str	r3, [sp, #16]
 8007ec2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007ec6:	4826      	ldr	r0, [pc, #152]	; (8007f60 <_svfiprintf_r+0x1f0>)
 8007ec8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007ecc:	2206      	movs	r2, #6
 8007ece:	f7f8 fa0f 	bl	80002f0 <memchr>
 8007ed2:	2800      	cmp	r0, #0
 8007ed4:	d038      	beq.n	8007f48 <_svfiprintf_r+0x1d8>
 8007ed6:	4b23      	ldr	r3, [pc, #140]	; (8007f64 <_svfiprintf_r+0x1f4>)
 8007ed8:	bb1b      	cbnz	r3, 8007f22 <_svfiprintf_r+0x1b2>
 8007eda:	9b03      	ldr	r3, [sp, #12]
 8007edc:	3307      	adds	r3, #7
 8007ede:	f023 0307 	bic.w	r3, r3, #7
 8007ee2:	3308      	adds	r3, #8
 8007ee4:	9303      	str	r3, [sp, #12]
 8007ee6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007ee8:	4433      	add	r3, r6
 8007eea:	9309      	str	r3, [sp, #36]	; 0x24
 8007eec:	e767      	b.n	8007dbe <_svfiprintf_r+0x4e>
 8007eee:	fb0c 3202 	mla	r2, ip, r2, r3
 8007ef2:	460c      	mov	r4, r1
 8007ef4:	2001      	movs	r0, #1
 8007ef6:	e7a5      	b.n	8007e44 <_svfiprintf_r+0xd4>
 8007ef8:	2300      	movs	r3, #0
 8007efa:	3401      	adds	r4, #1
 8007efc:	9305      	str	r3, [sp, #20]
 8007efe:	4619      	mov	r1, r3
 8007f00:	f04f 0c0a 	mov.w	ip, #10
 8007f04:	4620      	mov	r0, r4
 8007f06:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f0a:	3a30      	subs	r2, #48	; 0x30
 8007f0c:	2a09      	cmp	r2, #9
 8007f0e:	d903      	bls.n	8007f18 <_svfiprintf_r+0x1a8>
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d0c5      	beq.n	8007ea0 <_svfiprintf_r+0x130>
 8007f14:	9105      	str	r1, [sp, #20]
 8007f16:	e7c3      	b.n	8007ea0 <_svfiprintf_r+0x130>
 8007f18:	fb0c 2101 	mla	r1, ip, r1, r2
 8007f1c:	4604      	mov	r4, r0
 8007f1e:	2301      	movs	r3, #1
 8007f20:	e7f0      	b.n	8007f04 <_svfiprintf_r+0x194>
 8007f22:	ab03      	add	r3, sp, #12
 8007f24:	9300      	str	r3, [sp, #0]
 8007f26:	462a      	mov	r2, r5
 8007f28:	4b0f      	ldr	r3, [pc, #60]	; (8007f68 <_svfiprintf_r+0x1f8>)
 8007f2a:	a904      	add	r1, sp, #16
 8007f2c:	4638      	mov	r0, r7
 8007f2e:	f3af 8000 	nop.w
 8007f32:	1c42      	adds	r2, r0, #1
 8007f34:	4606      	mov	r6, r0
 8007f36:	d1d6      	bne.n	8007ee6 <_svfiprintf_r+0x176>
 8007f38:	89ab      	ldrh	r3, [r5, #12]
 8007f3a:	065b      	lsls	r3, r3, #25
 8007f3c:	f53f af2c 	bmi.w	8007d98 <_svfiprintf_r+0x28>
 8007f40:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007f42:	b01d      	add	sp, #116	; 0x74
 8007f44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f48:	ab03      	add	r3, sp, #12
 8007f4a:	9300      	str	r3, [sp, #0]
 8007f4c:	462a      	mov	r2, r5
 8007f4e:	4b06      	ldr	r3, [pc, #24]	; (8007f68 <_svfiprintf_r+0x1f8>)
 8007f50:	a904      	add	r1, sp, #16
 8007f52:	4638      	mov	r0, r7
 8007f54:	f000 f87a 	bl	800804c <_printf_i>
 8007f58:	e7eb      	b.n	8007f32 <_svfiprintf_r+0x1c2>
 8007f5a:	bf00      	nop
 8007f5c:	08008641 	.word	0x08008641
 8007f60:	0800864b 	.word	0x0800864b
 8007f64:	00000000 	.word	0x00000000
 8007f68:	08007cb9 	.word	0x08007cb9
 8007f6c:	08008647 	.word	0x08008647

08007f70 <_printf_common>:
 8007f70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f74:	4616      	mov	r6, r2
 8007f76:	4699      	mov	r9, r3
 8007f78:	688a      	ldr	r2, [r1, #8]
 8007f7a:	690b      	ldr	r3, [r1, #16]
 8007f7c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f80:	4293      	cmp	r3, r2
 8007f82:	bfb8      	it	lt
 8007f84:	4613      	movlt	r3, r2
 8007f86:	6033      	str	r3, [r6, #0]
 8007f88:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f8c:	4607      	mov	r7, r0
 8007f8e:	460c      	mov	r4, r1
 8007f90:	b10a      	cbz	r2, 8007f96 <_printf_common+0x26>
 8007f92:	3301      	adds	r3, #1
 8007f94:	6033      	str	r3, [r6, #0]
 8007f96:	6823      	ldr	r3, [r4, #0]
 8007f98:	0699      	lsls	r1, r3, #26
 8007f9a:	bf42      	ittt	mi
 8007f9c:	6833      	ldrmi	r3, [r6, #0]
 8007f9e:	3302      	addmi	r3, #2
 8007fa0:	6033      	strmi	r3, [r6, #0]
 8007fa2:	6825      	ldr	r5, [r4, #0]
 8007fa4:	f015 0506 	ands.w	r5, r5, #6
 8007fa8:	d106      	bne.n	8007fb8 <_printf_common+0x48>
 8007faa:	f104 0a19 	add.w	sl, r4, #25
 8007fae:	68e3      	ldr	r3, [r4, #12]
 8007fb0:	6832      	ldr	r2, [r6, #0]
 8007fb2:	1a9b      	subs	r3, r3, r2
 8007fb4:	42ab      	cmp	r3, r5
 8007fb6:	dc26      	bgt.n	8008006 <_printf_common+0x96>
 8007fb8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fbc:	1e13      	subs	r3, r2, #0
 8007fbe:	6822      	ldr	r2, [r4, #0]
 8007fc0:	bf18      	it	ne
 8007fc2:	2301      	movne	r3, #1
 8007fc4:	0692      	lsls	r2, r2, #26
 8007fc6:	d42b      	bmi.n	8008020 <_printf_common+0xb0>
 8007fc8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fcc:	4649      	mov	r1, r9
 8007fce:	4638      	mov	r0, r7
 8007fd0:	47c0      	blx	r8
 8007fd2:	3001      	adds	r0, #1
 8007fd4:	d01e      	beq.n	8008014 <_printf_common+0xa4>
 8007fd6:	6823      	ldr	r3, [r4, #0]
 8007fd8:	68e5      	ldr	r5, [r4, #12]
 8007fda:	6832      	ldr	r2, [r6, #0]
 8007fdc:	f003 0306 	and.w	r3, r3, #6
 8007fe0:	2b04      	cmp	r3, #4
 8007fe2:	bf08      	it	eq
 8007fe4:	1aad      	subeq	r5, r5, r2
 8007fe6:	68a3      	ldr	r3, [r4, #8]
 8007fe8:	6922      	ldr	r2, [r4, #16]
 8007fea:	bf0c      	ite	eq
 8007fec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007ff0:	2500      	movne	r5, #0
 8007ff2:	4293      	cmp	r3, r2
 8007ff4:	bfc4      	itt	gt
 8007ff6:	1a9b      	subgt	r3, r3, r2
 8007ff8:	18ed      	addgt	r5, r5, r3
 8007ffa:	2600      	movs	r6, #0
 8007ffc:	341a      	adds	r4, #26
 8007ffe:	42b5      	cmp	r5, r6
 8008000:	d11a      	bne.n	8008038 <_printf_common+0xc8>
 8008002:	2000      	movs	r0, #0
 8008004:	e008      	b.n	8008018 <_printf_common+0xa8>
 8008006:	2301      	movs	r3, #1
 8008008:	4652      	mov	r2, sl
 800800a:	4649      	mov	r1, r9
 800800c:	4638      	mov	r0, r7
 800800e:	47c0      	blx	r8
 8008010:	3001      	adds	r0, #1
 8008012:	d103      	bne.n	800801c <_printf_common+0xac>
 8008014:	f04f 30ff 	mov.w	r0, #4294967295
 8008018:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800801c:	3501      	adds	r5, #1
 800801e:	e7c6      	b.n	8007fae <_printf_common+0x3e>
 8008020:	18e1      	adds	r1, r4, r3
 8008022:	1c5a      	adds	r2, r3, #1
 8008024:	2030      	movs	r0, #48	; 0x30
 8008026:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800802a:	4422      	add	r2, r4
 800802c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008030:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8008034:	3302      	adds	r3, #2
 8008036:	e7c7      	b.n	8007fc8 <_printf_common+0x58>
 8008038:	2301      	movs	r3, #1
 800803a:	4622      	mov	r2, r4
 800803c:	4649      	mov	r1, r9
 800803e:	4638      	mov	r0, r7
 8008040:	47c0      	blx	r8
 8008042:	3001      	adds	r0, #1
 8008044:	d0e6      	beq.n	8008014 <_printf_common+0xa4>
 8008046:	3601      	adds	r6, #1
 8008048:	e7d9      	b.n	8007ffe <_printf_common+0x8e>
	...

0800804c <_printf_i>:
 800804c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008050:	460c      	mov	r4, r1
 8008052:	4691      	mov	r9, r2
 8008054:	7e27      	ldrb	r7, [r4, #24]
 8008056:	990c      	ldr	r1, [sp, #48]	; 0x30
 8008058:	2f78      	cmp	r7, #120	; 0x78
 800805a:	4680      	mov	r8, r0
 800805c:	469a      	mov	sl, r3
 800805e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008062:	d807      	bhi.n	8008074 <_printf_i+0x28>
 8008064:	2f62      	cmp	r7, #98	; 0x62
 8008066:	d80a      	bhi.n	800807e <_printf_i+0x32>
 8008068:	2f00      	cmp	r7, #0
 800806a:	f000 80d8 	beq.w	800821e <_printf_i+0x1d2>
 800806e:	2f58      	cmp	r7, #88	; 0x58
 8008070:	f000 80a3 	beq.w	80081ba <_printf_i+0x16e>
 8008074:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8008078:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800807c:	e03a      	b.n	80080f4 <_printf_i+0xa8>
 800807e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8008082:	2b15      	cmp	r3, #21
 8008084:	d8f6      	bhi.n	8008074 <_printf_i+0x28>
 8008086:	a001      	add	r0, pc, #4	; (adr r0, 800808c <_printf_i+0x40>)
 8008088:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 800808c:	080080e5 	.word	0x080080e5
 8008090:	080080f9 	.word	0x080080f9
 8008094:	08008075 	.word	0x08008075
 8008098:	08008075 	.word	0x08008075
 800809c:	08008075 	.word	0x08008075
 80080a0:	08008075 	.word	0x08008075
 80080a4:	080080f9 	.word	0x080080f9
 80080a8:	08008075 	.word	0x08008075
 80080ac:	08008075 	.word	0x08008075
 80080b0:	08008075 	.word	0x08008075
 80080b4:	08008075 	.word	0x08008075
 80080b8:	08008205 	.word	0x08008205
 80080bc:	08008129 	.word	0x08008129
 80080c0:	080081e7 	.word	0x080081e7
 80080c4:	08008075 	.word	0x08008075
 80080c8:	08008075 	.word	0x08008075
 80080cc:	08008227 	.word	0x08008227
 80080d0:	08008075 	.word	0x08008075
 80080d4:	08008129 	.word	0x08008129
 80080d8:	08008075 	.word	0x08008075
 80080dc:	08008075 	.word	0x08008075
 80080e0:	080081ef 	.word	0x080081ef
 80080e4:	680b      	ldr	r3, [r1, #0]
 80080e6:	1d1a      	adds	r2, r3, #4
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	600a      	str	r2, [r1, #0]
 80080ec:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80080f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080f4:	2301      	movs	r3, #1
 80080f6:	e0a3      	b.n	8008240 <_printf_i+0x1f4>
 80080f8:	6825      	ldr	r5, [r4, #0]
 80080fa:	6808      	ldr	r0, [r1, #0]
 80080fc:	062e      	lsls	r6, r5, #24
 80080fe:	f100 0304 	add.w	r3, r0, #4
 8008102:	d50a      	bpl.n	800811a <_printf_i+0xce>
 8008104:	6805      	ldr	r5, [r0, #0]
 8008106:	600b      	str	r3, [r1, #0]
 8008108:	2d00      	cmp	r5, #0
 800810a:	da03      	bge.n	8008114 <_printf_i+0xc8>
 800810c:	232d      	movs	r3, #45	; 0x2d
 800810e:	426d      	negs	r5, r5
 8008110:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008114:	485e      	ldr	r0, [pc, #376]	; (8008290 <_printf_i+0x244>)
 8008116:	230a      	movs	r3, #10
 8008118:	e019      	b.n	800814e <_printf_i+0x102>
 800811a:	f015 0f40 	tst.w	r5, #64	; 0x40
 800811e:	6805      	ldr	r5, [r0, #0]
 8008120:	600b      	str	r3, [r1, #0]
 8008122:	bf18      	it	ne
 8008124:	b22d      	sxthne	r5, r5
 8008126:	e7ef      	b.n	8008108 <_printf_i+0xbc>
 8008128:	680b      	ldr	r3, [r1, #0]
 800812a:	6825      	ldr	r5, [r4, #0]
 800812c:	1d18      	adds	r0, r3, #4
 800812e:	6008      	str	r0, [r1, #0]
 8008130:	0628      	lsls	r0, r5, #24
 8008132:	d501      	bpl.n	8008138 <_printf_i+0xec>
 8008134:	681d      	ldr	r5, [r3, #0]
 8008136:	e002      	b.n	800813e <_printf_i+0xf2>
 8008138:	0669      	lsls	r1, r5, #25
 800813a:	d5fb      	bpl.n	8008134 <_printf_i+0xe8>
 800813c:	881d      	ldrh	r5, [r3, #0]
 800813e:	4854      	ldr	r0, [pc, #336]	; (8008290 <_printf_i+0x244>)
 8008140:	2f6f      	cmp	r7, #111	; 0x6f
 8008142:	bf0c      	ite	eq
 8008144:	2308      	moveq	r3, #8
 8008146:	230a      	movne	r3, #10
 8008148:	2100      	movs	r1, #0
 800814a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800814e:	6866      	ldr	r6, [r4, #4]
 8008150:	60a6      	str	r6, [r4, #8]
 8008152:	2e00      	cmp	r6, #0
 8008154:	bfa2      	ittt	ge
 8008156:	6821      	ldrge	r1, [r4, #0]
 8008158:	f021 0104 	bicge.w	r1, r1, #4
 800815c:	6021      	strge	r1, [r4, #0]
 800815e:	b90d      	cbnz	r5, 8008164 <_printf_i+0x118>
 8008160:	2e00      	cmp	r6, #0
 8008162:	d04d      	beq.n	8008200 <_printf_i+0x1b4>
 8008164:	4616      	mov	r6, r2
 8008166:	fbb5 f1f3 	udiv	r1, r5, r3
 800816a:	fb03 5711 	mls	r7, r3, r1, r5
 800816e:	5dc7      	ldrb	r7, [r0, r7]
 8008170:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008174:	462f      	mov	r7, r5
 8008176:	42bb      	cmp	r3, r7
 8008178:	460d      	mov	r5, r1
 800817a:	d9f4      	bls.n	8008166 <_printf_i+0x11a>
 800817c:	2b08      	cmp	r3, #8
 800817e:	d10b      	bne.n	8008198 <_printf_i+0x14c>
 8008180:	6823      	ldr	r3, [r4, #0]
 8008182:	07df      	lsls	r7, r3, #31
 8008184:	d508      	bpl.n	8008198 <_printf_i+0x14c>
 8008186:	6923      	ldr	r3, [r4, #16]
 8008188:	6861      	ldr	r1, [r4, #4]
 800818a:	4299      	cmp	r1, r3
 800818c:	bfde      	ittt	le
 800818e:	2330      	movle	r3, #48	; 0x30
 8008190:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008194:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008198:	1b92      	subs	r2, r2, r6
 800819a:	6122      	str	r2, [r4, #16]
 800819c:	f8cd a000 	str.w	sl, [sp]
 80081a0:	464b      	mov	r3, r9
 80081a2:	aa03      	add	r2, sp, #12
 80081a4:	4621      	mov	r1, r4
 80081a6:	4640      	mov	r0, r8
 80081a8:	f7ff fee2 	bl	8007f70 <_printf_common>
 80081ac:	3001      	adds	r0, #1
 80081ae:	d14c      	bne.n	800824a <_printf_i+0x1fe>
 80081b0:	f04f 30ff 	mov.w	r0, #4294967295
 80081b4:	b004      	add	sp, #16
 80081b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081ba:	4835      	ldr	r0, [pc, #212]	; (8008290 <_printf_i+0x244>)
 80081bc:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	680e      	ldr	r6, [r1, #0]
 80081c4:	061f      	lsls	r7, r3, #24
 80081c6:	f856 5b04 	ldr.w	r5, [r6], #4
 80081ca:	600e      	str	r6, [r1, #0]
 80081cc:	d514      	bpl.n	80081f8 <_printf_i+0x1ac>
 80081ce:	07d9      	lsls	r1, r3, #31
 80081d0:	bf44      	itt	mi
 80081d2:	f043 0320 	orrmi.w	r3, r3, #32
 80081d6:	6023      	strmi	r3, [r4, #0]
 80081d8:	b91d      	cbnz	r5, 80081e2 <_printf_i+0x196>
 80081da:	6823      	ldr	r3, [r4, #0]
 80081dc:	f023 0320 	bic.w	r3, r3, #32
 80081e0:	6023      	str	r3, [r4, #0]
 80081e2:	2310      	movs	r3, #16
 80081e4:	e7b0      	b.n	8008148 <_printf_i+0xfc>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	f043 0320 	orr.w	r3, r3, #32
 80081ec:	6023      	str	r3, [r4, #0]
 80081ee:	2378      	movs	r3, #120	; 0x78
 80081f0:	4828      	ldr	r0, [pc, #160]	; (8008294 <_printf_i+0x248>)
 80081f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081f6:	e7e3      	b.n	80081c0 <_printf_i+0x174>
 80081f8:	065e      	lsls	r6, r3, #25
 80081fa:	bf48      	it	mi
 80081fc:	b2ad      	uxthmi	r5, r5
 80081fe:	e7e6      	b.n	80081ce <_printf_i+0x182>
 8008200:	4616      	mov	r6, r2
 8008202:	e7bb      	b.n	800817c <_printf_i+0x130>
 8008204:	680b      	ldr	r3, [r1, #0]
 8008206:	6826      	ldr	r6, [r4, #0]
 8008208:	6960      	ldr	r0, [r4, #20]
 800820a:	1d1d      	adds	r5, r3, #4
 800820c:	600d      	str	r5, [r1, #0]
 800820e:	0635      	lsls	r5, r6, #24
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	d501      	bpl.n	8008218 <_printf_i+0x1cc>
 8008214:	6018      	str	r0, [r3, #0]
 8008216:	e002      	b.n	800821e <_printf_i+0x1d2>
 8008218:	0671      	lsls	r1, r6, #25
 800821a:	d5fb      	bpl.n	8008214 <_printf_i+0x1c8>
 800821c:	8018      	strh	r0, [r3, #0]
 800821e:	2300      	movs	r3, #0
 8008220:	6123      	str	r3, [r4, #16]
 8008222:	4616      	mov	r6, r2
 8008224:	e7ba      	b.n	800819c <_printf_i+0x150>
 8008226:	680b      	ldr	r3, [r1, #0]
 8008228:	1d1a      	adds	r2, r3, #4
 800822a:	600a      	str	r2, [r1, #0]
 800822c:	681e      	ldr	r6, [r3, #0]
 800822e:	6862      	ldr	r2, [r4, #4]
 8008230:	2100      	movs	r1, #0
 8008232:	4630      	mov	r0, r6
 8008234:	f7f8 f85c 	bl	80002f0 <memchr>
 8008238:	b108      	cbz	r0, 800823e <_printf_i+0x1f2>
 800823a:	1b80      	subs	r0, r0, r6
 800823c:	6060      	str	r0, [r4, #4]
 800823e:	6863      	ldr	r3, [r4, #4]
 8008240:	6123      	str	r3, [r4, #16]
 8008242:	2300      	movs	r3, #0
 8008244:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008248:	e7a8      	b.n	800819c <_printf_i+0x150>
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	4632      	mov	r2, r6
 800824e:	4649      	mov	r1, r9
 8008250:	4640      	mov	r0, r8
 8008252:	47d0      	blx	sl
 8008254:	3001      	adds	r0, #1
 8008256:	d0ab      	beq.n	80081b0 <_printf_i+0x164>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	079b      	lsls	r3, r3, #30
 800825c:	d413      	bmi.n	8008286 <_printf_i+0x23a>
 800825e:	68e0      	ldr	r0, [r4, #12]
 8008260:	9b03      	ldr	r3, [sp, #12]
 8008262:	4298      	cmp	r0, r3
 8008264:	bfb8      	it	lt
 8008266:	4618      	movlt	r0, r3
 8008268:	e7a4      	b.n	80081b4 <_printf_i+0x168>
 800826a:	2301      	movs	r3, #1
 800826c:	4632      	mov	r2, r6
 800826e:	4649      	mov	r1, r9
 8008270:	4640      	mov	r0, r8
 8008272:	47d0      	blx	sl
 8008274:	3001      	adds	r0, #1
 8008276:	d09b      	beq.n	80081b0 <_printf_i+0x164>
 8008278:	3501      	adds	r5, #1
 800827a:	68e3      	ldr	r3, [r4, #12]
 800827c:	9903      	ldr	r1, [sp, #12]
 800827e:	1a5b      	subs	r3, r3, r1
 8008280:	42ab      	cmp	r3, r5
 8008282:	dcf2      	bgt.n	800826a <_printf_i+0x21e>
 8008284:	e7eb      	b.n	800825e <_printf_i+0x212>
 8008286:	2500      	movs	r5, #0
 8008288:	f104 0619 	add.w	r6, r4, #25
 800828c:	e7f5      	b.n	800827a <_printf_i+0x22e>
 800828e:	bf00      	nop
 8008290:	08008652 	.word	0x08008652
 8008294:	08008663 	.word	0x08008663

08008298 <memcpy>:
 8008298:	440a      	add	r2, r1
 800829a:	4291      	cmp	r1, r2
 800829c:	f100 33ff 	add.w	r3, r0, #4294967295
 80082a0:	d100      	bne.n	80082a4 <memcpy+0xc>
 80082a2:	4770      	bx	lr
 80082a4:	b510      	push	{r4, lr}
 80082a6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082aa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ae:	4291      	cmp	r1, r2
 80082b0:	d1f9      	bne.n	80082a6 <memcpy+0xe>
 80082b2:	bd10      	pop	{r4, pc}

080082b4 <memmove>:
 80082b4:	4288      	cmp	r0, r1
 80082b6:	b510      	push	{r4, lr}
 80082b8:	eb01 0402 	add.w	r4, r1, r2
 80082bc:	d902      	bls.n	80082c4 <memmove+0x10>
 80082be:	4284      	cmp	r4, r0
 80082c0:	4623      	mov	r3, r4
 80082c2:	d807      	bhi.n	80082d4 <memmove+0x20>
 80082c4:	1e43      	subs	r3, r0, #1
 80082c6:	42a1      	cmp	r1, r4
 80082c8:	d008      	beq.n	80082dc <memmove+0x28>
 80082ca:	f811 2b01 	ldrb.w	r2, [r1], #1
 80082ce:	f803 2f01 	strb.w	r2, [r3, #1]!
 80082d2:	e7f8      	b.n	80082c6 <memmove+0x12>
 80082d4:	4402      	add	r2, r0
 80082d6:	4601      	mov	r1, r0
 80082d8:	428a      	cmp	r2, r1
 80082da:	d100      	bne.n	80082de <memmove+0x2a>
 80082dc:	bd10      	pop	{r4, pc}
 80082de:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082e2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082e6:	e7f7      	b.n	80082d8 <memmove+0x24>

080082e8 <_free_r>:
 80082e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082ea:	2900      	cmp	r1, #0
 80082ec:	d048      	beq.n	8008380 <_free_r+0x98>
 80082ee:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082f2:	9001      	str	r0, [sp, #4]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	f1a1 0404 	sub.w	r4, r1, #4
 80082fa:	bfb8      	it	lt
 80082fc:	18e4      	addlt	r4, r4, r3
 80082fe:	f000 f8d3 	bl	80084a8 <__malloc_lock>
 8008302:	4a20      	ldr	r2, [pc, #128]	; (8008384 <_free_r+0x9c>)
 8008304:	9801      	ldr	r0, [sp, #4]
 8008306:	6813      	ldr	r3, [r2, #0]
 8008308:	4615      	mov	r5, r2
 800830a:	b933      	cbnz	r3, 800831a <_free_r+0x32>
 800830c:	6063      	str	r3, [r4, #4]
 800830e:	6014      	str	r4, [r2, #0]
 8008310:	b003      	add	sp, #12
 8008312:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008316:	f000 b8cd 	b.w	80084b4 <__malloc_unlock>
 800831a:	42a3      	cmp	r3, r4
 800831c:	d90b      	bls.n	8008336 <_free_r+0x4e>
 800831e:	6821      	ldr	r1, [r4, #0]
 8008320:	1862      	adds	r2, r4, r1
 8008322:	4293      	cmp	r3, r2
 8008324:	bf04      	itt	eq
 8008326:	681a      	ldreq	r2, [r3, #0]
 8008328:	685b      	ldreq	r3, [r3, #4]
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	bf04      	itt	eq
 800832e:	1852      	addeq	r2, r2, r1
 8008330:	6022      	streq	r2, [r4, #0]
 8008332:	602c      	str	r4, [r5, #0]
 8008334:	e7ec      	b.n	8008310 <_free_r+0x28>
 8008336:	461a      	mov	r2, r3
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	b10b      	cbz	r3, 8008340 <_free_r+0x58>
 800833c:	42a3      	cmp	r3, r4
 800833e:	d9fa      	bls.n	8008336 <_free_r+0x4e>
 8008340:	6811      	ldr	r1, [r2, #0]
 8008342:	1855      	adds	r5, r2, r1
 8008344:	42a5      	cmp	r5, r4
 8008346:	d10b      	bne.n	8008360 <_free_r+0x78>
 8008348:	6824      	ldr	r4, [r4, #0]
 800834a:	4421      	add	r1, r4
 800834c:	1854      	adds	r4, r2, r1
 800834e:	42a3      	cmp	r3, r4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	d1dd      	bne.n	8008310 <_free_r+0x28>
 8008354:	681c      	ldr	r4, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	4421      	add	r1, r4
 800835c:	6011      	str	r1, [r2, #0]
 800835e:	e7d7      	b.n	8008310 <_free_r+0x28>
 8008360:	d902      	bls.n	8008368 <_free_r+0x80>
 8008362:	230c      	movs	r3, #12
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	e7d3      	b.n	8008310 <_free_r+0x28>
 8008368:	6825      	ldr	r5, [r4, #0]
 800836a:	1961      	adds	r1, r4, r5
 800836c:	428b      	cmp	r3, r1
 800836e:	bf04      	itt	eq
 8008370:	6819      	ldreq	r1, [r3, #0]
 8008372:	685b      	ldreq	r3, [r3, #4]
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	bf04      	itt	eq
 8008378:	1949      	addeq	r1, r1, r5
 800837a:	6021      	streq	r1, [r4, #0]
 800837c:	6054      	str	r4, [r2, #4]
 800837e:	e7c7      	b.n	8008310 <_free_r+0x28>
 8008380:	b003      	add	sp, #12
 8008382:	bd30      	pop	{r4, r5, pc}
 8008384:	24000158 	.word	0x24000158

08008388 <_malloc_r>:
 8008388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800838a:	1ccd      	adds	r5, r1, #3
 800838c:	f025 0503 	bic.w	r5, r5, #3
 8008390:	3508      	adds	r5, #8
 8008392:	2d0c      	cmp	r5, #12
 8008394:	bf38      	it	cc
 8008396:	250c      	movcc	r5, #12
 8008398:	2d00      	cmp	r5, #0
 800839a:	4606      	mov	r6, r0
 800839c:	db01      	blt.n	80083a2 <_malloc_r+0x1a>
 800839e:	42a9      	cmp	r1, r5
 80083a0:	d903      	bls.n	80083aa <_malloc_r+0x22>
 80083a2:	230c      	movs	r3, #12
 80083a4:	6033      	str	r3, [r6, #0]
 80083a6:	2000      	movs	r0, #0
 80083a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80083aa:	f000 f87d 	bl	80084a8 <__malloc_lock>
 80083ae:	4921      	ldr	r1, [pc, #132]	; (8008434 <_malloc_r+0xac>)
 80083b0:	680a      	ldr	r2, [r1, #0]
 80083b2:	4614      	mov	r4, r2
 80083b4:	b99c      	cbnz	r4, 80083de <_malloc_r+0x56>
 80083b6:	4f20      	ldr	r7, [pc, #128]	; (8008438 <_malloc_r+0xb0>)
 80083b8:	683b      	ldr	r3, [r7, #0]
 80083ba:	b923      	cbnz	r3, 80083c6 <_malloc_r+0x3e>
 80083bc:	4621      	mov	r1, r4
 80083be:	4630      	mov	r0, r6
 80083c0:	f000 f862 	bl	8008488 <_sbrk_r>
 80083c4:	6038      	str	r0, [r7, #0]
 80083c6:	4629      	mov	r1, r5
 80083c8:	4630      	mov	r0, r6
 80083ca:	f000 f85d 	bl	8008488 <_sbrk_r>
 80083ce:	1c43      	adds	r3, r0, #1
 80083d0:	d123      	bne.n	800841a <_malloc_r+0x92>
 80083d2:	230c      	movs	r3, #12
 80083d4:	6033      	str	r3, [r6, #0]
 80083d6:	4630      	mov	r0, r6
 80083d8:	f000 f86c 	bl	80084b4 <__malloc_unlock>
 80083dc:	e7e3      	b.n	80083a6 <_malloc_r+0x1e>
 80083de:	6823      	ldr	r3, [r4, #0]
 80083e0:	1b5b      	subs	r3, r3, r5
 80083e2:	d417      	bmi.n	8008414 <_malloc_r+0x8c>
 80083e4:	2b0b      	cmp	r3, #11
 80083e6:	d903      	bls.n	80083f0 <_malloc_r+0x68>
 80083e8:	6023      	str	r3, [r4, #0]
 80083ea:	441c      	add	r4, r3
 80083ec:	6025      	str	r5, [r4, #0]
 80083ee:	e004      	b.n	80083fa <_malloc_r+0x72>
 80083f0:	6863      	ldr	r3, [r4, #4]
 80083f2:	42a2      	cmp	r2, r4
 80083f4:	bf0c      	ite	eq
 80083f6:	600b      	streq	r3, [r1, #0]
 80083f8:	6053      	strne	r3, [r2, #4]
 80083fa:	4630      	mov	r0, r6
 80083fc:	f000 f85a 	bl	80084b4 <__malloc_unlock>
 8008400:	f104 000b 	add.w	r0, r4, #11
 8008404:	1d23      	adds	r3, r4, #4
 8008406:	f020 0007 	bic.w	r0, r0, #7
 800840a:	1ac2      	subs	r2, r0, r3
 800840c:	d0cc      	beq.n	80083a8 <_malloc_r+0x20>
 800840e:	1a1b      	subs	r3, r3, r0
 8008410:	50a3      	str	r3, [r4, r2]
 8008412:	e7c9      	b.n	80083a8 <_malloc_r+0x20>
 8008414:	4622      	mov	r2, r4
 8008416:	6864      	ldr	r4, [r4, #4]
 8008418:	e7cc      	b.n	80083b4 <_malloc_r+0x2c>
 800841a:	1cc4      	adds	r4, r0, #3
 800841c:	f024 0403 	bic.w	r4, r4, #3
 8008420:	42a0      	cmp	r0, r4
 8008422:	d0e3      	beq.n	80083ec <_malloc_r+0x64>
 8008424:	1a21      	subs	r1, r4, r0
 8008426:	4630      	mov	r0, r6
 8008428:	f000 f82e 	bl	8008488 <_sbrk_r>
 800842c:	3001      	adds	r0, #1
 800842e:	d1dd      	bne.n	80083ec <_malloc_r+0x64>
 8008430:	e7cf      	b.n	80083d2 <_malloc_r+0x4a>
 8008432:	bf00      	nop
 8008434:	24000158 	.word	0x24000158
 8008438:	2400015c 	.word	0x2400015c

0800843c <_realloc_r>:
 800843c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800843e:	4607      	mov	r7, r0
 8008440:	4614      	mov	r4, r2
 8008442:	460e      	mov	r6, r1
 8008444:	b921      	cbnz	r1, 8008450 <_realloc_r+0x14>
 8008446:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 800844a:	4611      	mov	r1, r2
 800844c:	f7ff bf9c 	b.w	8008388 <_malloc_r>
 8008450:	b922      	cbnz	r2, 800845c <_realloc_r+0x20>
 8008452:	f7ff ff49 	bl	80082e8 <_free_r>
 8008456:	4625      	mov	r5, r4
 8008458:	4628      	mov	r0, r5
 800845a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800845c:	f000 f830 	bl	80084c0 <_malloc_usable_size_r>
 8008460:	42a0      	cmp	r0, r4
 8008462:	d20f      	bcs.n	8008484 <_realloc_r+0x48>
 8008464:	4621      	mov	r1, r4
 8008466:	4638      	mov	r0, r7
 8008468:	f7ff ff8e 	bl	8008388 <_malloc_r>
 800846c:	4605      	mov	r5, r0
 800846e:	2800      	cmp	r0, #0
 8008470:	d0f2      	beq.n	8008458 <_realloc_r+0x1c>
 8008472:	4631      	mov	r1, r6
 8008474:	4622      	mov	r2, r4
 8008476:	f7ff ff0f 	bl	8008298 <memcpy>
 800847a:	4631      	mov	r1, r6
 800847c:	4638      	mov	r0, r7
 800847e:	f7ff ff33 	bl	80082e8 <_free_r>
 8008482:	e7e9      	b.n	8008458 <_realloc_r+0x1c>
 8008484:	4635      	mov	r5, r6
 8008486:	e7e7      	b.n	8008458 <_realloc_r+0x1c>

08008488 <_sbrk_r>:
 8008488:	b538      	push	{r3, r4, r5, lr}
 800848a:	4d06      	ldr	r5, [pc, #24]	; (80084a4 <_sbrk_r+0x1c>)
 800848c:	2300      	movs	r3, #0
 800848e:	4604      	mov	r4, r0
 8008490:	4608      	mov	r0, r1
 8008492:	602b      	str	r3, [r5, #0]
 8008494:	f7f8 fcca 	bl	8000e2c <_sbrk>
 8008498:	1c43      	adds	r3, r0, #1
 800849a:	d102      	bne.n	80084a2 <_sbrk_r+0x1a>
 800849c:	682b      	ldr	r3, [r5, #0]
 800849e:	b103      	cbz	r3, 80084a2 <_sbrk_r+0x1a>
 80084a0:	6023      	str	r3, [r4, #0]
 80084a2:	bd38      	pop	{r3, r4, r5, pc}
 80084a4:	240008b8 	.word	0x240008b8

080084a8 <__malloc_lock>:
 80084a8:	4801      	ldr	r0, [pc, #4]	; (80084b0 <__malloc_lock+0x8>)
 80084aa:	f000 b811 	b.w	80084d0 <__retarget_lock_acquire_recursive>
 80084ae:	bf00      	nop
 80084b0:	240008c0 	.word	0x240008c0

080084b4 <__malloc_unlock>:
 80084b4:	4801      	ldr	r0, [pc, #4]	; (80084bc <__malloc_unlock+0x8>)
 80084b6:	f000 b80c 	b.w	80084d2 <__retarget_lock_release_recursive>
 80084ba:	bf00      	nop
 80084bc:	240008c0 	.word	0x240008c0

080084c0 <_malloc_usable_size_r>:
 80084c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80084c4:	1f18      	subs	r0, r3, #4
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	bfbc      	itt	lt
 80084ca:	580b      	ldrlt	r3, [r1, r0]
 80084cc:	18c0      	addlt	r0, r0, r3
 80084ce:	4770      	bx	lr

080084d0 <__retarget_lock_acquire_recursive>:
 80084d0:	4770      	bx	lr

080084d2 <__retarget_lock_release_recursive>:
 80084d2:	4770      	bx	lr

080084d4 <_init>:
 80084d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084d6:	bf00      	nop
 80084d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084da:	bc08      	pop	{r3}
 80084dc:	469e      	mov	lr, r3
 80084de:	4770      	bx	lr

080084e0 <_fini>:
 80084e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084e2:	bf00      	nop
 80084e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80084e6:	bc08      	pop	{r3}
 80084e8:	469e      	mov	lr, r3
 80084ea:	4770      	bx	lr
